{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractFileSystem.java",
  "functionName": "create",
  "functionId": "create___f-Path(modifiers-final)__createFlag-EnumSet__CreateFlag__(modifiers-final)__opts-Options.CreateOpts",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
  "functionStartLine": 518,
  "functionEndLine": 628,
  "numCommitsSeen": 53,
  "timeTaken": 1944,
  "changeHistory": [
    "59d69257a888347f0fb9c51bb000afc986b64f98",
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5"
  ],
  "changeHistoryShort": {
    "59d69257a888347f0fb9c51bb000afc986b64f98": "Ybodychange",
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b": "Ymodifierchange",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": "Ymultichange(Yexceptionschange,Ybodychange)",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": "Yexceptionschange",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "59d69257a888347f0fb9c51bb000afc986b64f98": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9631. ViewFs should use underlying FileSystem\u0027s server side defaults. Contributed by Lohit Vijayarenu and Erik Krogen.\n",
      "commitDate": "22/03/17 10:22 PM",
      "commitName": "59d69257a888347f0fb9c51bb000afc986b64f98",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "21/04/16 8:17 PM",
      "commitNameOld": "4a043b3fec702f3e91525a20f5f36657e9fbf8df",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 335.09,
      "commitsBetweenForRepo": 2258,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,111 +1,111 @@\n   public final FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n       UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n     checkPath(f);\n     int bufferSize \u003d -1;\n     short replication \u003d -1;\n     long blockSize \u003d -1;\n     int bytesPerChecksum \u003d -1;\n     ChecksumOpt checksumOpt \u003d null;\n     FsPermission permission \u003d null;\n     Progressable progress \u003d null;\n     Boolean createParent \u003d null;\n  \n     for (CreateOpts iOpt : opts) {\n       if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n         if (blockSize !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BlockSize option is set multiple times\");\n         }\n         blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n       } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n         if (bufferSize !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BufferSize option is set multiple times\");\n         }\n         bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n       } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n         if (replication !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"ReplicationFactor option is set multiple times\");\n         }\n         replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n       } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n         if (bytesPerChecksum !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BytesPerChecksum option is set multiple times\");\n         }\n         bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n       } else if (CreateOpts.ChecksumParam.class.isInstance(iOpt)) {\n         if (checksumOpt !\u003d null) {\n           throw new  HadoopIllegalArgumentException(\n               \"CreateChecksumType option is set multiple times\");\n         }\n         checksumOpt \u003d ((CreateOpts.ChecksumParam) iOpt).getValue();\n       } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n         if (permission !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"Perms option is set multiple times\");\n         }\n         permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n       } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n         if (progress !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"Progress option is set multiple times\");\n         }\n         progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n       } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n         if (createParent !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"CreateParent option is set multiple times\");\n         }\n         createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n       } else {\n         throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n             iOpt.getClass().getName());\n       }\n     }\n     if (permission \u003d\u003d null) {\n       throw new HadoopIllegalArgumentException(\"no permission supplied\");\n     }\n \n \n-    FsServerDefaults ssDef \u003d getServerDefaults();\n+    FsServerDefaults ssDef \u003d getServerDefaults(f);\n     if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n       throw new IOException(\"Internal error: default blockSize is\" + \n           \" not a multiple of default bytesPerChecksum \");\n     }\n     \n     if (blockSize \u003d\u003d -1) {\n       blockSize \u003d ssDef.getBlockSize();\n     }\n \n     // Create a checksum option honoring user input as much as possible.\n     // If bytesPerChecksum is specified, it will override the one set in\n     // checksumOpt. Any missing value will be filled in using the default.\n     ChecksumOpt defaultOpt \u003d new ChecksumOpt(\n         ssDef.getChecksumType(),\n         ssDef.getBytesPerChecksum());\n     checksumOpt \u003d ChecksumOpt.processChecksumOpt(defaultOpt,\n         checksumOpt, bytesPerChecksum);\n \n     if (bufferSize \u003d\u003d -1) {\n       bufferSize \u003d ssDef.getFileBufferSize();\n     }\n     if (replication \u003d\u003d -1) {\n       replication \u003d ssDef.getReplication();\n     }\n     if (createParent \u003d\u003d null) {\n       createParent \u003d false;\n     }\n \n     if (blockSize % bytesPerChecksum !\u003d 0) {\n       throw new HadoopIllegalArgumentException(\n              \"blockSize should be a multiple of checksumsize\");\n     }\n \n     return this.createInternal(f, createFlag, permission, bufferSize,\n       replication, blockSize, progress, checksumOpt, createParent);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    ChecksumOpt checksumOpt \u003d null;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BlockSize option is set multiple times\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BufferSize option is set multiple times\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"ReplicationFactor option is set multiple times\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BytesPerChecksum option is set multiple times\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.ChecksumParam.class.isInstance(iOpt)) {\n        if (checksumOpt !\u003d null) {\n          throw new  HadoopIllegalArgumentException(\n              \"CreateChecksumType option is set multiple times\");\n        }\n        checksumOpt \u003d ((CreateOpts.ChecksumParam) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Perms option is set multiple times\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Progress option is set multiple times\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"CreateParent option is set multiple times\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults(f);\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n\n    // Create a checksum option honoring user input as much as possible.\n    // If bytesPerChecksum is specified, it will override the one set in\n    // checksumOpt. Any missing value will be filled in using the default.\n    ChecksumOpt defaultOpt \u003d new ChecksumOpt(\n        ssDef.getChecksumType(),\n        ssDef.getBytesPerChecksum());\n    checksumOpt \u003d ChecksumOpt.processChecksumOpt(defaultOpt,\n        checksumOpt, bytesPerChecksum);\n\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new HadoopIllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, checksumOpt, createParent);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {}
    },
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8240. Add a new API to allow users to specify a checksum type on FileSystem.create(..).  Contributed by Kihwal Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374696 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/12 10:46 PM",
      "commitName": "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/05/12 3:14 PM",
      "commitNameOld": "51e520c68aafb73b784bf690a8a42de3af0f229c",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 106.31,
      "commitsBetweenForRepo": 547,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,111 @@\n   public final FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n       UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n     checkPath(f);\n     int bufferSize \u003d -1;\n     short replication \u003d -1;\n     long blockSize \u003d -1;\n     int bytesPerChecksum \u003d -1;\n+    ChecksumOpt checksumOpt \u003d null;\n     FsPermission permission \u003d null;\n     Progressable progress \u003d null;\n     Boolean createParent \u003d null;\n  \n     for (CreateOpts iOpt : opts) {\n       if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n         if (blockSize !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BlockSize option is set multiple times\");\n         }\n         blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n       } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n         if (bufferSize !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BufferSize option is set multiple times\");\n         }\n         bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n       } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n         if (replication !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"ReplicationFactor option is set multiple times\");\n         }\n         replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n       } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n         if (bytesPerChecksum !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BytesPerChecksum option is set multiple times\");\n         }\n         bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n+      } else if (CreateOpts.ChecksumParam.class.isInstance(iOpt)) {\n+        if (checksumOpt !\u003d null) {\n+          throw new  HadoopIllegalArgumentException(\n+              \"CreateChecksumType option is set multiple times\");\n+        }\n+        checksumOpt \u003d ((CreateOpts.ChecksumParam) iOpt).getValue();\n       } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n         if (permission !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"Perms option is set multiple times\");\n         }\n         permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n       } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n         if (progress !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"Progress option is set multiple times\");\n         }\n         progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n       } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n         if (createParent !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"CreateParent option is set multiple times\");\n         }\n         createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n       } else {\n         throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n             iOpt.getClass().getName());\n       }\n     }\n     if (permission \u003d\u003d null) {\n       throw new HadoopIllegalArgumentException(\"no permission supplied\");\n     }\n \n \n     FsServerDefaults ssDef \u003d getServerDefaults();\n     if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n       throw new IOException(\"Internal error: default blockSize is\" + \n           \" not a multiple of default bytesPerChecksum \");\n     }\n     \n     if (blockSize \u003d\u003d -1) {\n       blockSize \u003d ssDef.getBlockSize();\n     }\n-    if (bytesPerChecksum \u003d\u003d -1) {\n-      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n-    }\n+\n+    // Create a checksum option honoring user input as much as possible.\n+    // If bytesPerChecksum is specified, it will override the one set in\n+    // checksumOpt. Any missing value will be filled in using the default.\n+    ChecksumOpt defaultOpt \u003d new ChecksumOpt(\n+        ssDef.getChecksumType(),\n+        ssDef.getBytesPerChecksum());\n+    checksumOpt \u003d ChecksumOpt.processChecksumOpt(defaultOpt,\n+        checksumOpt, bytesPerChecksum);\n+\n     if (bufferSize \u003d\u003d -1) {\n       bufferSize \u003d ssDef.getFileBufferSize();\n     }\n     if (replication \u003d\u003d -1) {\n       replication \u003d ssDef.getReplication();\n     }\n     if (createParent \u003d\u003d null) {\n       createParent \u003d false;\n     }\n \n     if (blockSize % bytesPerChecksum !\u003d 0) {\n       throw new HadoopIllegalArgumentException(\n              \"blockSize should be a multiple of checksumsize\");\n     }\n \n     return this.createInternal(f, createFlag, permission, bufferSize,\n-      replication, blockSize, progress, bytesPerChecksum, createParent);\n+      replication, blockSize, progress, checksumOpt, createParent);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    ChecksumOpt checksumOpt \u003d null;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BlockSize option is set multiple times\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BufferSize option is set multiple times\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"ReplicationFactor option is set multiple times\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BytesPerChecksum option is set multiple times\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.ChecksumParam.class.isInstance(iOpt)) {\n        if (checksumOpt !\u003d null) {\n          throw new  HadoopIllegalArgumentException(\n              \"CreateChecksumType option is set multiple times\");\n        }\n        checksumOpt \u003d ((CreateOpts.ChecksumParam) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Perms option is set multiple times\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Progress option is set multiple times\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"CreateParent option is set multiple times\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n\n    // Create a checksum option honoring user input as much as possible.\n    // If bytesPerChecksum is specified, it will override the one set in\n    // checksumOpt. Any missing value will be filled in using the default.\n    ChecksumOpt defaultOpt \u003d new ChecksumOpt(\n        ssDef.getChecksumType(),\n        ssDef.getBytesPerChecksum());\n    checksumOpt \u003d ChecksumOpt.processChecksumOpt(defaultOpt,\n        checksumOpt, bytesPerChecksum);\n\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new HadoopIllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, checksumOpt, createParent);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public final FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BlockSize option is set multiple times\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BufferSize option is set multiple times\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"ReplicationFactor option is set multiple times\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BytesPerChecksum option is set multiple times\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Perms option is set multiple times\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Progress option is set multiple times\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"CreateParent option is set multiple times\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new HadoopIllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, bytesPerChecksum, createParent);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public final FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BlockSize option is set multiple times\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BufferSize option is set multiple times\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"ReplicationFactor option is set multiple times\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BytesPerChecksum option is set multiple times\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Perms option is set multiple times\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Progress option is set multiple times\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"CreateParent option is set multiple times\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new HadoopIllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, bytesPerChecksum, createParent);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public final FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BlockSize option is set multiple times\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BufferSize option is set multiple times\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"ReplicationFactor option is set multiple times\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BytesPerChecksum option is set multiple times\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Perms option is set multiple times\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Progress option is set multiple times\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"CreateParent option is set multiple times\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new HadoopIllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, bytesPerChecksum, createParent);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-6903 Make AbstractFSileSystem methods and some FileContext methods to be public\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1034480 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/10 9:23 AM",
      "commitName": "946eac3dac02b8a84a9ae91ac7482b4224d0728b",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "10/08/10 9:43 PM",
      "commitNameOld": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 93.53,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,97 @@\n-  protected final FSDataOutputStream create(final Path f,\n+  public final FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n       UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n     checkPath(f);\n     int bufferSize \u003d -1;\n     short replication \u003d -1;\n     long blockSize \u003d -1;\n     int bytesPerChecksum \u003d -1;\n     FsPermission permission \u003d null;\n     Progressable progress \u003d null;\n     Boolean createParent \u003d null;\n  \n     for (CreateOpts iOpt : opts) {\n       if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n         if (blockSize !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BlockSize option is set multiple times\");\n         }\n         blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n       } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n         if (bufferSize !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BufferSize option is set multiple times\");\n         }\n         bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n       } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n         if (replication !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"ReplicationFactor option is set multiple times\");\n         }\n         replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n       } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n         if (bytesPerChecksum !\u003d -1) {\n           throw new HadoopIllegalArgumentException(\n               \"BytesPerChecksum option is set multiple times\");\n         }\n         bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n       } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n         if (permission !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"Perms option is set multiple times\");\n         }\n         permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n       } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n         if (progress !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"Progress option is set multiple times\");\n         }\n         progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n       } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n         if (createParent !\u003d null) {\n           throw new HadoopIllegalArgumentException(\n               \"CreateParent option is set multiple times\");\n         }\n         createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n       } else {\n         throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n             iOpt.getClass().getName());\n       }\n     }\n     if (permission \u003d\u003d null) {\n       throw new HadoopIllegalArgumentException(\"no permission supplied\");\n     }\n \n \n     FsServerDefaults ssDef \u003d getServerDefaults();\n     if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n       throw new IOException(\"Internal error: default blockSize is\" + \n           \" not a multiple of default bytesPerChecksum \");\n     }\n     \n     if (blockSize \u003d\u003d -1) {\n       blockSize \u003d ssDef.getBlockSize();\n     }\n     if (bytesPerChecksum \u003d\u003d -1) {\n       bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n     }\n     if (bufferSize \u003d\u003d -1) {\n       bufferSize \u003d ssDef.getFileBufferSize();\n     }\n     if (replication \u003d\u003d -1) {\n       replication \u003d ssDef.getReplication();\n     }\n     if (createParent \u003d\u003d null) {\n       createParent \u003d false;\n     }\n \n     if (blockSize % bytesPerChecksum !\u003d 0) {\n       throw new HadoopIllegalArgumentException(\n              \"blockSize should be a multiple of checksumsize\");\n     }\n \n     return this.createInternal(f, createFlag, permission, bufferSize,\n       replication, blockSize, progress, bytesPerChecksum, createParent);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BlockSize option is set multiple times\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BufferSize option is set multiple times\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"ReplicationFactor option is set multiple times\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BytesPerChecksum option is set multiple times\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Perms option is set multiple times\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Progress option is set multiple times\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"CreateParent option is set multiple times\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new HadoopIllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, bytesPerChecksum, createParent);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldValue": "[protected, final]",
        "newValue": "[public, final]"
      }
    },
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem\n   (Suresh Srinivas via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/10 6:48 PM",
      "commitName": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem\n   (Suresh Srinivas via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/03/10 6:48 PM",
          "commitName": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "16/02/10 1:43 PM",
          "commitNameOld": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 14.21,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,88 +1,97 @@\n   protected final FSDataOutputStream create(final Path f,\n-    final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n-    throws IOException, UnresolvedLinkException {\n+      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n+      throws AccessControlException, FileAlreadyExistsException,\n+      FileNotFoundException, ParentNotDirectoryException,\n+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n     checkPath(f);\n     int bufferSize \u003d -1;\n     short replication \u003d -1;\n     long blockSize \u003d -1;\n     int bytesPerChecksum \u003d -1;\n     FsPermission permission \u003d null;\n     Progressable progress \u003d null;\n     Boolean createParent \u003d null;\n  \n     for (CreateOpts iOpt : opts) {\n       if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n         if (blockSize !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"BlockSize option is set multiple times\");\n         }\n         blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n       } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n         if (bufferSize !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"BufferSize option is set multiple times\");\n         }\n         bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n       } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n         if (replication !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"ReplicationFactor option is set multiple times\");\n         }\n         replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n       } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n         if (bytesPerChecksum !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"BytesPerChecksum option is set multiple times\");\n         }\n         bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n       } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n         if (permission !\u003d null) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"Perms option is set multiple times\");\n         }\n         permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n       } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n         if (progress !\u003d null) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"Progress option is set multiple times\");\n         }\n         progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n       } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n         if (createParent !\u003d null) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"CreateParent option is set multiple times\");\n         }\n         createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n       } else {\n-        throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n+        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n             iOpt.getClass().getName());\n       }\n     }\n     if (permission \u003d\u003d null) {\n-      throw new IllegalArgumentException(\"no permission supplied\");\n+      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n     }\n \n \n     FsServerDefaults ssDef \u003d getServerDefaults();\n     if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n       throw new IOException(\"Internal error: default blockSize is\" + \n           \" not a multiple of default bytesPerChecksum \");\n     }\n     \n     if (blockSize \u003d\u003d -1) {\n       blockSize \u003d ssDef.getBlockSize();\n     }\n     if (bytesPerChecksum \u003d\u003d -1) {\n       bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n     }\n     if (bufferSize \u003d\u003d -1) {\n       bufferSize \u003d ssDef.getFileBufferSize();\n     }\n     if (replication \u003d\u003d -1) {\n       replication \u003d ssDef.getReplication();\n     }\n     if (createParent \u003d\u003d null) {\n       createParent \u003d false;\n     }\n \n     if (blockSize % bytesPerChecksum !\u003d 0) {\n-      throw new IllegalArgumentException(\n+      throw new HadoopIllegalArgumentException(\n              \"blockSize should be a multiple of checksumsize\");\n     }\n \n     return this.createInternal(f, createFlag, permission, bufferSize,\n       replication, blockSize, progress, bytesPerChecksum, createParent);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected final FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BlockSize option is set multiple times\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BufferSize option is set multiple times\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"ReplicationFactor option is set multiple times\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BytesPerChecksum option is set multiple times\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Perms option is set multiple times\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Progress option is set multiple times\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"CreateParent option is set multiple times\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new HadoopIllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, bytesPerChecksum, createParent);\n  }",
          "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException, UnresolvedLinkException]",
            "newValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnsupportedFileSystemException, UnresolvedLinkException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem\n   (Suresh Srinivas via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/03/10 6:48 PM",
          "commitName": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "16/02/10 1:43 PM",
          "commitNameOld": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 14.21,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,88 +1,97 @@\n   protected final FSDataOutputStream create(final Path f,\n-    final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n-    throws IOException, UnresolvedLinkException {\n+      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n+      throws AccessControlException, FileAlreadyExistsException,\n+      FileNotFoundException, ParentNotDirectoryException,\n+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n     checkPath(f);\n     int bufferSize \u003d -1;\n     short replication \u003d -1;\n     long blockSize \u003d -1;\n     int bytesPerChecksum \u003d -1;\n     FsPermission permission \u003d null;\n     Progressable progress \u003d null;\n     Boolean createParent \u003d null;\n  \n     for (CreateOpts iOpt : opts) {\n       if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n         if (blockSize !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"BlockSize option is set multiple times\");\n         }\n         blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n       } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n         if (bufferSize !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"BufferSize option is set multiple times\");\n         }\n         bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n       } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n         if (replication !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"ReplicationFactor option is set multiple times\");\n         }\n         replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n       } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n         if (bytesPerChecksum !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"BytesPerChecksum option is set multiple times\");\n         }\n         bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n       } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n         if (permission !\u003d null) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"Perms option is set multiple times\");\n         }\n         permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n       } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n         if (progress !\u003d null) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"Progress option is set multiple times\");\n         }\n         progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n       } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n         if (createParent !\u003d null) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+          throw new HadoopIllegalArgumentException(\n+              \"CreateParent option is set multiple times\");\n         }\n         createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n       } else {\n-        throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n+        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n             iOpt.getClass().getName());\n       }\n     }\n     if (permission \u003d\u003d null) {\n-      throw new IllegalArgumentException(\"no permission supplied\");\n+      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n     }\n \n \n     FsServerDefaults ssDef \u003d getServerDefaults();\n     if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n       throw new IOException(\"Internal error: default blockSize is\" + \n           \" not a multiple of default bytesPerChecksum \");\n     }\n     \n     if (blockSize \u003d\u003d -1) {\n       blockSize \u003d ssDef.getBlockSize();\n     }\n     if (bytesPerChecksum \u003d\u003d -1) {\n       bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n     }\n     if (bufferSize \u003d\u003d -1) {\n       bufferSize \u003d ssDef.getFileBufferSize();\n     }\n     if (replication \u003d\u003d -1) {\n       replication \u003d ssDef.getReplication();\n     }\n     if (createParent \u003d\u003d null) {\n       createParent \u003d false;\n     }\n \n     if (blockSize % bytesPerChecksum !\u003d 0) {\n-      throw new IllegalArgumentException(\n+      throw new HadoopIllegalArgumentException(\n              \"blockSize should be a multiple of checksumsize\");\n     }\n \n     return this.createInternal(f, createFlag, permission, bufferSize,\n       replication, blockSize, progress, bytesPerChecksum, createParent);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected final FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BlockSize option is set multiple times\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BufferSize option is set multiple times\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"ReplicationFactor option is set multiple times\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new HadoopIllegalArgumentException(\n              \"BytesPerChecksum option is set multiple times\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Perms option is set multiple times\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"Progress option is set multiple times\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new HadoopIllegalArgumentException(\n              \"CreateParent option is set multiple times\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new HadoopIllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new HadoopIllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, bytesPerChecksum, createParent);\n  }",
          "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": {
      "type": "Yexceptionschange",
      "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/02/10 1:43 PM",
      "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "30/10/09 3:24 PM",
      "commitNameOld": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 108.97,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,88 @@\n   protected final FSDataOutputStream create(final Path f,\n     final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n-    throws IOException {\n+    throws IOException, UnresolvedLinkException {\n     checkPath(f);\n     int bufferSize \u003d -1;\n     short replication \u003d -1;\n     long blockSize \u003d -1;\n     int bytesPerChecksum \u003d -1;\n     FsPermission permission \u003d null;\n     Progressable progress \u003d null;\n     Boolean createParent \u003d null;\n  \n     for (CreateOpts iOpt : opts) {\n       if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n         if (blockSize !\u003d -1) {\n           throw new IllegalArgumentException(\"multiple varargs of same kind\");\n         }\n         blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n       } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n         if (bufferSize !\u003d -1) {\n           throw new IllegalArgumentException(\"multiple varargs of same kind\");\n         }\n         bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n       } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n         if (replication !\u003d -1) {\n           throw new IllegalArgumentException(\"multiple varargs of same kind\");\n         }\n         replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n       } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n         if (bytesPerChecksum !\u003d -1) {\n           throw new IllegalArgumentException(\"multiple varargs of same kind\");\n         }\n         bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n       } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n         if (permission !\u003d null) {\n           throw new IllegalArgumentException(\"multiple varargs of same kind\");\n         }\n         permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n       } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n         if (progress !\u003d null) {\n           throw new IllegalArgumentException(\"multiple varargs of same kind\");\n         }\n         progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n       } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n         if (createParent !\u003d null) {\n           throw new IllegalArgumentException(\"multiple varargs of same kind\");\n         }\n         createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n       } else {\n         throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n             iOpt.getClass().getName());\n       }\n     }\n     if (permission \u003d\u003d null) {\n       throw new IllegalArgumentException(\"no permission supplied\");\n     }\n \n \n     FsServerDefaults ssDef \u003d getServerDefaults();\n     if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n       throw new IOException(\"Internal error: default blockSize is\" + \n           \" not a multiple of default bytesPerChecksum \");\n     }\n     \n     if (blockSize \u003d\u003d -1) {\n       blockSize \u003d ssDef.getBlockSize();\n     }\n     if (bytesPerChecksum \u003d\u003d -1) {\n       bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n     }\n     if (bufferSize \u003d\u003d -1) {\n       bufferSize \u003d ssDef.getFileBufferSize();\n     }\n     if (replication \u003d\u003d -1) {\n       replication \u003d ssDef.getReplication();\n     }\n     if (createParent \u003d\u003d null) {\n       createParent \u003d false;\n     }\n \n     if (blockSize % bytesPerChecksum !\u003d 0) {\n       throw new IllegalArgumentException(\n              \"blockSize should be a multiple of checksumsize\");\n     }\n \n     return this.createInternal(f, createFlag, permission, bufferSize,\n       replication, blockSize, progress, bytesPerChecksum, createParent);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected final FSDataOutputStream create(final Path f,\n    final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n    throws IOException, UnresolvedLinkException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new IllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new IllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, bytesPerChecksum, createParent);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[IOException, UnresolvedLinkException]"
      }
    },
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": {
      "type": "Yintroduced",
      "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 3:24 PM",
      "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,88 @@\n+  protected final FSDataOutputStream create(final Path f,\n+    final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n+    throws IOException {\n+    checkPath(f);\n+    int bufferSize \u003d -1;\n+    short replication \u003d -1;\n+    long blockSize \u003d -1;\n+    int bytesPerChecksum \u003d -1;\n+    FsPermission permission \u003d null;\n+    Progressable progress \u003d null;\n+    Boolean createParent \u003d null;\n+ \n+    for (CreateOpts iOpt : opts) {\n+      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n+        if (blockSize !\u003d -1) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n+      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n+        if (bufferSize !\u003d -1) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n+      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n+        if (replication !\u003d -1) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n+      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n+        if (bytesPerChecksum !\u003d -1) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n+      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n+        if (permission !\u003d null) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n+      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n+        if (progress !\u003d null) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n+      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n+        if (createParent !\u003d null) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n+      } else {\n+        throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n+            iOpt.getClass().getName());\n+      }\n+    }\n+    if (permission \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"no permission supplied\");\n+    }\n+\n+\n+    FsServerDefaults ssDef \u003d getServerDefaults();\n+    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n+      throw new IOException(\"Internal error: default blockSize is\" + \n+          \" not a multiple of default bytesPerChecksum \");\n+    }\n+    \n+    if (blockSize \u003d\u003d -1) {\n+      blockSize \u003d ssDef.getBlockSize();\n+    }\n+    if (bytesPerChecksum \u003d\u003d -1) {\n+      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n+    }\n+    if (bufferSize \u003d\u003d -1) {\n+      bufferSize \u003d ssDef.getFileBufferSize();\n+    }\n+    if (replication \u003d\u003d -1) {\n+      replication \u003d ssDef.getReplication();\n+    }\n+    if (createParent \u003d\u003d null) {\n+      createParent \u003d false;\n+    }\n+\n+    if (blockSize % bytesPerChecksum !\u003d 0) {\n+      throw new IllegalArgumentException(\n+             \"blockSize should be a multiple of checksumsize\");\n+    }\n+\n+    return this.createInternal(f, createFlag, permission, bufferSize,\n+      replication, blockSize, progress, bytesPerChecksum, createParent);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected final FSDataOutputStream create(final Path f,\n    final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n    throws IOException {\n    checkPath(f);\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n    Boolean createParent \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else if (CreateOpts.CreateParent.class.isInstance(iOpt)) {\n        if (createParent !\u003d null) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        createParent \u003d ((CreateOpts.CreateParent) iOpt).getValue();\n      } else {\n        throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (permission \u003d\u003d null) {\n      throw new IllegalArgumentException(\"no permission supplied\");\n    }\n\n\n    FsServerDefaults ssDef \u003d getServerDefaults();\n    if (ssDef.getBlockSize() % ssDef.getBytesPerChecksum() !\u003d 0) {\n      throw new IOException(\"Internal error: default blockSize is\" + \n          \" not a multiple of default bytesPerChecksum \");\n    }\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (createParent \u003d\u003d null) {\n      createParent \u003d false;\n    }\n\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new IllegalArgumentException(\n             \"blockSize should be a multiple of checksumsize\");\n    }\n\n    return this.createInternal(f, createFlag, permission, bufferSize,\n      replication, blockSize, progress, bytesPerChecksum, createParent);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java"
    }
  }
}