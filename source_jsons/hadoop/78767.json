{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileContext.java",
  "functionName": "rename",
  "functionId": "rename___src-Path(modifiers-final)__dst-Path(modifiers-final)__options-Options.Rename(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
  "functionStartLine": 1023,
  "functionEndLine": 1052,
  "numCommitsSeen": 101,
  "timeTaken": 2802,
  "changeHistory": [
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
    "704e919a9bed44f0e34369b541e5f17cfea57a27",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
    "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f",
    "0294c49df60150bd9b363af5cfbc312222c12c69"
  ],
  "changeHistoryShort": {
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15": "Yexceptionschange",
    "704e919a9bed44f0e34369b541e5f17cfea57a27": "Ybodychange",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": "Yexceptionschange",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": "Ybodychange",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f": "Ymultichange(Yparameterchange,Ybodychange)",
    "0294c49df60150bd9b363af5cfbc312222c12c69": "Yintroduced"
  },
  "changeHistoryDetails": {
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3844. Add @Override and remove {@inheritdoc} and unnecessary imports. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 6:03 PM",
      "commitName": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "23/08/12 12:18 PM",
      "commitNameOld": "4f8e1f779b196ca83c49118c283286e3ee9ec386",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public void rename(final Path src, final Path dst,\n       final Options.Rename... options) throws AccessControlException,\n       FileAlreadyExistsException, FileNotFoundException,\n       ParentNotDirectoryException, UnsupportedFileSystemException,\n       IOException {\n     final Path absSrc \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n     AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n     AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n       throw new IOException(\"Renames across AbstractFileSystems not supported\");\n     }\n     try {\n       srcFS.rename(absSrc, absDst, options);\n     } catch (UnresolvedLinkException e) {\n       /* We do not know whether the source or the destination path\n        * was unresolved. Resolve the source path up until the final\n        * path component, then fully resolve the destination. \n        */\n       final Path source \u003d resolveIntermediate(absSrc);    \n       new FSLinkResolver\u003cVoid\u003e() {\n+        @Override\n         public Void next(final AbstractFileSystem fs, final Path p) \n           throws IOException, UnresolvedLinkException {\n           fs.rename(source, p, options);\n           return null;\n         }\n       }.resolve(this, absDst);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnsupportedFileSystemException,\n      IOException {\n    final Path absSrc \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    try {\n      srcFS.rename(absSrc, absDst, options);\n    } catch (UnresolvedLinkException e) {\n      /* We do not know whether the source or the destination path\n       * was unresolved. Resolve the source path up until the final\n       * path component, then fully resolve the destination. \n       */\n      final Path source \u003d resolveIntermediate(absSrc);    \n      new FSLinkResolver\u003cVoid\u003e() {\n        @Override\n        public Void next(final AbstractFileSystem fs, final Path p) \n          throws IOException, UnresolvedLinkException {\n          fs.rename(source, p, options);\n          return null;\n        }\n      }.resolve(this, absDst);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnsupportedFileSystemException,\n      IOException {\n    final Path absSrc \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    try {\n      srcFS.rename(absSrc, absDst, options);\n    } catch (UnresolvedLinkException e) {\n      /* We do not know whether the source or the destination path\n       * was unresolved. Resolve the source path up until the final\n       * path component, then fully resolve the destination. \n       */\n      final Path source \u003d resolveIntermediate(absSrc);    \n      new FSLinkResolver\u003cVoid\u003e() {\n        public Void next(final AbstractFileSystem fs, final Path p) \n          throws IOException, UnresolvedLinkException {\n          fs.rename(source, p, options);\n          return null;\n        }\n      }.resolve(this, absDst);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnsupportedFileSystemException,\n      IOException {\n    final Path absSrc \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    try {\n      srcFS.rename(absSrc, absDst, options);\n    } catch (UnresolvedLinkException e) {\n      /* We do not know whether the source or the destination path\n       * was unresolved. Resolve the source path up until the final\n       * path component, then fully resolve the destination. \n       */\n      final Path source \u003d resolveIntermediate(absSrc);    \n      new FSLinkResolver\u003cVoid\u003e() {\n        public Void next(final AbstractFileSystem fs, final Path p) \n          throws IOException, UnresolvedLinkException {\n          fs.rename(source, p, options);\n          return null;\n        }\n      }.resolve(this, absDst);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnsupportedFileSystemException,\n      IOException {\n    final Path absSrc \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    try {\n      srcFS.rename(absSrc, absDst, options);\n    } catch (UnresolvedLinkException e) {\n      /* We do not know whether the source or the destination path\n       * was unresolved. Resolve the source path up until the final\n       * path component, then fully resolve the destination. \n       */\n      final Path source \u003d resolveIntermediate(absSrc);    \n      new FSLinkResolver\u003cVoid\u003e() {\n        public Void next(final AbstractFileSystem fs, final Path p) \n          throws IOException, UnresolvedLinkException {\n          fs.rename(source, p, options);\n          return null;\n        }\n      }.resolve(this, absDst);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-6727. Remove UnresolvedLinkException from public FileContext APIs. Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@940527 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/10 10:36 AM",
      "commitName": "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/05/10 2:08 PM",
      "commitNameOld": "fe49f6e47391ff3eb6372dc5acc592bbc2e8f683",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 1.85,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public void rename(final Path src, final Path dst,\n       final Options.Rename... options) throws AccessControlException,\n       FileAlreadyExistsException, FileNotFoundException,\n       ParentNotDirectoryException, UnsupportedFileSystemException,\n-      UnresolvedLinkException, IOException {\n+      IOException {\n     final Path absSrc \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n     AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n     AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n       throw new IOException(\"Renames across AbstractFileSystems not supported\");\n     }\n     try {\n       srcFS.rename(absSrc, absDst, options);\n     } catch (UnresolvedLinkException e) {\n       /* We do not know whether the source or the destination path\n        * was unresolved. Resolve the source path up until the final\n        * path component, then fully resolve the destination. \n        */\n       final Path source \u003d resolveIntermediate(absSrc);    \n       new FSLinkResolver\u003cVoid\u003e() {\n         public Void next(final AbstractFileSystem fs, final Path p) \n           throws IOException, UnresolvedLinkException {\n           fs.rename(source, p, options);\n           return null;\n         }\n       }.resolve(this, absDst);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnsupportedFileSystemException,\n      IOException {\n    final Path absSrc \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    try {\n      srcFS.rename(absSrc, absDst, options);\n    } catch (UnresolvedLinkException e) {\n      /* We do not know whether the source or the destination path\n       * was unresolved. Resolve the source path up until the final\n       * path component, then fully resolve the destination. \n       */\n      final Path source \u003d resolveIntermediate(absSrc);    \n      new FSLinkResolver\u003cVoid\u003e() {\n        public Void next(final AbstractFileSystem fs, final Path p) \n          throws IOException, UnresolvedLinkException {\n          fs.rename(source, p, options);\n          return null;\n        }\n      }.resolve(this, absDst);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnsupportedFileSystemException, UnresolvedLinkException, IOException]",
        "newValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnsupportedFileSystemException, IOException]"
      }
    },
    "704e919a9bed44f0e34369b541e5f17cfea57a27": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6563. Add more symlink tests to cover intermediate symlinks in paths. Contributed by Eli Collins.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@939827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/10 2:40 PM",
      "commitName": "704e919a9bed44f0e34369b541e5f17cfea57a27",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "28/04/10 4:58 PM",
      "commitNameOld": "8991eb7959947735449d300a60aaadb897c11ba2",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public void rename(final Path src, final Path dst,\n       final Options.Rename... options) throws AccessControlException,\n       FileAlreadyExistsException, FileNotFoundException,\n       ParentNotDirectoryException, UnsupportedFileSystemException,\n       UnresolvedLinkException, IOException {\n-    final Path absSrc  \u003d fixRelativePart(src);\n+    final Path absSrc \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n     AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n     AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n       throw new IOException(\"Renames across AbstractFileSystems not supported\");\n     }\n     try {\n       srcFS.rename(absSrc, absDst, options);\n     } catch (UnresolvedLinkException e) {\n       /* We do not know whether the source or the destination path\n-       * was unresolved. Resolve the source path completely, then\n-       * resolve the destination. \n+       * was unresolved. Resolve the source path up until the final\n+       * path component, then fully resolve the destination. \n        */\n-      final Path source \u003d resolve(absSrc);    \n+      final Path source \u003d resolveIntermediate(absSrc);    \n       new FSLinkResolver\u003cVoid\u003e() {\n         public Void next(final AbstractFileSystem fs, final Path p) \n           throws IOException, UnresolvedLinkException {\n           fs.rename(source, p, options);\n           return null;\n         }\n       }.resolve(this, absDst);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnsupportedFileSystemException,\n      UnresolvedLinkException, IOException {\n    final Path absSrc \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    try {\n      srcFS.rename(absSrc, absDst, options);\n    } catch (UnresolvedLinkException e) {\n      /* We do not know whether the source or the destination path\n       * was unresolved. Resolve the source path up until the final\n       * path component, then fully resolve the destination. \n       */\n      final Path source \u003d resolveIntermediate(absSrc);    \n      new FSLinkResolver\u003cVoid\u003e() {\n        public Void next(final AbstractFileSystem fs, final Path p) \n          throws IOException, UnresolvedLinkException {\n          fs.rename(source, p, options);\n          return null;\n        }\n      }.resolve(this, absDst);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": {
      "type": "Yexceptionschange",
      "commitMessage": "   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem\n   (Suresh Srinivas via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/10 6:48 PM",
      "commitName": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "16/02/10 1:43 PM",
      "commitNameOld": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 14.21,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   public void rename(final Path src, final Path dst,\n-      final Options.Rename... options) throws IOException {\n+      final Options.Rename... options) throws AccessControlException,\n+      FileAlreadyExistsException, FileNotFoundException,\n+      ParentNotDirectoryException, UnsupportedFileSystemException,\n+      UnresolvedLinkException, IOException {\n     final Path absSrc  \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n     AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n     AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n       throw new IOException(\"Renames across AbstractFileSystems not supported\");\n     }\n     try {\n       srcFS.rename(absSrc, absDst, options);\n     } catch (UnresolvedLinkException e) {\n       /* We do not know whether the source or the destination path\n        * was unresolved. Resolve the source path completely, then\n        * resolve the destination. \n        */\n       final Path source \u003d resolve(absSrc);    \n       new FSLinkResolver\u003cVoid\u003e() {\n         public Void next(final AbstractFileSystem fs, final Path p) \n           throws IOException, UnresolvedLinkException {\n           fs.rename(source, p, options);\n           return null;\n         }\n       }.resolve(this, absDst);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnsupportedFileSystemException,\n      UnresolvedLinkException, IOException {\n    final Path absSrc  \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    try {\n      srcFS.rename(absSrc, absDst, options);\n    } catch (UnresolvedLinkException e) {\n      /* We do not know whether the source or the destination path\n       * was unresolved. Resolve the source path completely, then\n       * resolve the destination. \n       */\n      final Path source \u003d resolve(absSrc);    \n      new FSLinkResolver\u003cVoid\u003e() {\n        public Void next(final AbstractFileSystem fs, final Path p) \n          throws IOException, UnresolvedLinkException {\n          fs.rename(source, p, options);\n          return null;\n        }\n      }.resolve(this, absDst);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnsupportedFileSystemException, UnresolvedLinkException, IOException]"
      }
    },
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": {
      "type": "Ybodychange",
      "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/02/10 1:43 PM",
      "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "15/01/10 4:44 PM",
      "commitNameOld": "a90d3205d2a23945eaab8b756cfbeeb4377c3c04",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 31.87,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,26 @@\n   public void rename(final Path src, final Path dst,\n       final Options.Rename... options) throws IOException {\n     final Path absSrc  \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n     AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n     AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n       throw new IOException(\"Renames across AbstractFileSystems not supported\");\n     }\n-    srcFS.rename(absSrc, absDst, options);\n+    try {\n+      srcFS.rename(absSrc, absDst, options);\n+    } catch (UnresolvedLinkException e) {\n+      /* We do not know whether the source or the destination path\n+       * was unresolved. Resolve the source path completely, then\n+       * resolve the destination. \n+       */\n+      final Path source \u003d resolve(absSrc);    \n+      new FSLinkResolver\u003cVoid\u003e() {\n+        public Void next(final AbstractFileSystem fs, final Path p) \n+          throws IOException, UnresolvedLinkException {\n+          fs.rename(source, p, options);\n+          return null;\n+        }\n+      }.resolve(this, absDst);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws IOException {\n    final Path absSrc  \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    try {\n      srcFS.rename(absSrc, absDst, options);\n    } catch (UnresolvedLinkException e) {\n      /* We do not know whether the source or the destination path\n       * was unresolved. Resolve the source path completely, then\n       * resolve the destination. \n       */\n      final Path source \u003d resolve(absSrc);    \n      new FSLinkResolver\u003cVoid\u003e() {\n        public Void next(final AbstractFileSystem fs, final Path p) \n          throws IOException, UnresolvedLinkException {\n          fs.rename(source, p, options);\n          return null;\n        }\n      }.resolve(this, absDst);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 3:24 PM",
      "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/10/09 3:24 PM",
          "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "07/10/09 10:07 AM",
          "commitNameOld": "64f537da0a216055d5b6eae49a2a9129189cacbf",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 23.22,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-  public void rename(final Path src, final Path dst, final Rename... options)\n-    throws IOException {\n+  public void rename(final Path src, final Path dst,\n+      final Options.Rename... options) throws IOException {\n     final Path absSrc  \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n-    FileSystem srcFS \u003d getFSofPath(absSrc);\n-    FileSystem dstFS \u003d getFSofPath(absDst);\n+    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n+    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n-      throw new IOException(\"Renames across FileSystems not supported\");\n+      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n     }\n     srcFS.rename(absSrc, absDst, options);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws IOException {\n    final Path absSrc  \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    srcFS.rename(absSrc, absDst, options);\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {
            "oldValue": "[src-Path(modifiers-final), dst-Path(modifiers-final), options-Rename(modifiers-final)]",
            "newValue": "[src-Path(modifiers-final), dst-Path(modifiers-final), options-Options.Rename(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/10/09 3:24 PM",
          "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "07/10/09 10:07 AM",
          "commitNameOld": "64f537da0a216055d5b6eae49a2a9129189cacbf",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 23.22,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-  public void rename(final Path src, final Path dst, final Rename... options)\n-    throws IOException {\n+  public void rename(final Path src, final Path dst,\n+      final Options.Rename... options) throws IOException {\n     final Path absSrc  \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n-    FileSystem srcFS \u003d getFSofPath(absSrc);\n-    FileSystem dstFS \u003d getFSofPath(absDst);\n+    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n+    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n-      throw new IOException(\"Renames across FileSystems not supported\");\n+      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n     }\n     srcFS.rename(absSrc, absDst, options);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void rename(final Path src, final Path dst,\n      final Options.Rename... options) throws IOException {\n    final Path absSrc  \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    AbstractFileSystem srcFS \u003d getFSofPath(absSrc);\n    AbstractFileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across AbstractFileSystems not supported\");\n    }\n    srcFS.rename(absSrc, absDst, options);\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-6240. Add new FileContext rename operation that posix compliant that allows overwriting existing destination. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/09 2:52 PM",
      "commitName": "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-6240. Add new FileContext rename operation that posix compliant that allows overwriting existing destination. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816794 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/09 2:52 PM",
          "commitName": "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "18/09/09 12:13 PM",
          "commitNameOld": "758f8a5abec5315a3ca758807aedb395d253d715",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,11 @@\n-  public void rename(final Path src, final Path dst)\n+  public void rename(final Path src, final Path dst, final Rename... options)\n     throws IOException {\n     final Path absSrc  \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n     FileSystem srcFS \u003d getFSofPath(absSrc);\n     FileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n       throw new IOException(\"Renames across FileSystems not supported\");\n     }\n-    if(srcFS.rename(absSrc, absDst)) {\n-      return;\n-    }\n-    throw new IOException(\"bug in underlying filesystem\");\n+    srcFS.rename(absSrc, absDst, options);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void rename(final Path src, final Path dst, final Rename... options)\n    throws IOException {\n    final Path absSrc  \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    FileSystem srcFS \u003d getFSofPath(absSrc);\n    FileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across FileSystems not supported\");\n    }\n    srcFS.rename(absSrc, absDst, options);\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {
            "oldValue": "[src-Path(modifiers-final), dst-Path(modifiers-final)]",
            "newValue": "[src-Path(modifiers-final), dst-Path(modifiers-final), options-Rename(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6240. Add new FileContext rename operation that posix compliant that allows overwriting existing destination. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816794 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/09 2:52 PM",
          "commitName": "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "18/09/09 12:13 PM",
          "commitNameOld": "758f8a5abec5315a3ca758807aedb395d253d715",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,11 @@\n-  public void rename(final Path src, final Path dst)\n+  public void rename(final Path src, final Path dst, final Rename... options)\n     throws IOException {\n     final Path absSrc  \u003d fixRelativePart(src);\n     final Path absDst \u003d fixRelativePart(dst);\n     FileSystem srcFS \u003d getFSofPath(absSrc);\n     FileSystem dstFS \u003d getFSofPath(absDst);\n     if(!srcFS.getUri().equals(dstFS.getUri())) {\n       throw new IOException(\"Renames across FileSystems not supported\");\n     }\n-    if(srcFS.rename(absSrc, absDst)) {\n-      return;\n-    }\n-    throw new IOException(\"bug in underlying filesystem\");\n+    srcFS.rename(absSrc, absDst, options);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void rename(final Path src, final Path dst, final Rename... options)\n    throws IOException {\n    final Path absSrc  \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    FileSystem srcFS \u003d getFSofPath(absSrc);\n    FileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across FileSystems not supported\");\n    }\n    srcFS.rename(absSrc, absDst, options);\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "0294c49df60150bd9b363af5cfbc312222c12c69": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4952. Add new improved file system interface FileContext for the application writer. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816398 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/09 3:27 PM",
      "commitName": "0294c49df60150bd9b363af5cfbc312222c12c69",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,14 @@\n+  public void rename(final Path src, final Path dst)\n+    throws IOException {\n+    final Path absSrc  \u003d fixRelativePart(src);\n+    final Path absDst \u003d fixRelativePart(dst);\n+    FileSystem srcFS \u003d getFSofPath(absSrc);\n+    FileSystem dstFS \u003d getFSofPath(absDst);\n+    if(!srcFS.getUri().equals(dstFS.getUri())) {\n+      throw new IOException(\"Renames across FileSystems not supported\");\n+    }\n+    if(srcFS.rename(absSrc, absDst)) {\n+      return;\n+    }\n+    throw new IOException(\"bug in underlying filesystem\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void rename(final Path src, final Path dst)\n    throws IOException {\n    final Path absSrc  \u003d fixRelativePart(src);\n    final Path absDst \u003d fixRelativePart(dst);\n    FileSystem srcFS \u003d getFSofPath(absSrc);\n    FileSystem dstFS \u003d getFSofPath(absDst);\n    if(!srcFS.getUri().equals(dstFS.getUri())) {\n      throw new IOException(\"Renames across FileSystems not supported\");\n    }\n    if(srcFS.rename(absSrc, absDst)) {\n      return;\n    }\n    throw new IOException(\"bug in underlying filesystem\");\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java"
    }
  }
}