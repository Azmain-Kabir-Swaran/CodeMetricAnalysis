{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryClientService.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
  "functionStartLine": 122,
  "functionEndLine": 153,
  "numCommitsSeen": 61,
  "timeTaken": 8562,
  "changeHistory": [
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "0928502029ef141759008997335ea2cd836a7154",
    "48414b08277b86cdbc34ae36d7c4d204fd838294",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
    "db3e592df0cd022d15a6acdeac3517c54d510ad2",
    "99bf2902b29c4ab910d5043fe7091f7df04c21fe",
    "c6923061d0384cc22d459ee570f3626d98b3ef69",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
    "d19cfe01642f9582e1fe5d567beb480399c37a01",
    "4186121c08cb3d86f775d333c637459a4fb19d1b",
    "66137cf17cb4abccd6065819d97edc63c6510477",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "48414b08277b86cdbc34ae36d7c4d204fd838294": "Ybodychange",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": "Ybodychange",
    "db3e592df0cd022d15a6acdeac3517c54d510ad2": "Ybodychange",
    "99bf2902b29c4ab910d5043fe7091f7df04c21fe": "Ybodychange",
    "c6923061d0384cc22d459ee570f3626d98b3ef69": "Ybodychange",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": "Ybodychange",
    "d19cfe01642f9582e1fe5d567beb480399c37a01": "Ybodychange",
    "4186121c08cb3d86f775d333c637459a4fb19d1b": "Ybodychange",
    "66137cf17cb4abccd6065819d97edc63c6510477": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "08/05/14 2:22 PM",
      "commitNameOld": "e2c18809d313f73fe476f6fa9e2753cb7d46947a",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 83.95,
      "commitsBetweenForRepo": 541,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     InetSocketAddress address \u003d conf.getSocketAddr(\n+        JHAdminConfig.MR_HISTORY_BIND_HOST,\n         JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n \n     server \u003d\n         rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n-    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n+    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_BIND_HOST,\n+                                              JHAdminConfig.MR_HISTORY_ADDRESS,\n+                                              JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n                                               server.getListenerAddress());\n-    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n+    LOG.info(\"Instantiated HistoryClientService at \" + this.bindAddress);\n \n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    InetSocketAddress address \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n\n    server \u003d\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_BIND_HOST,\n                                              JHAdminConfig.MR_HISTORY_ADDRESS,\n                                              JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n                                              server.getListenerAddress());\n    LOG.info(\"Instantiated HistoryClientService at \" + this.bindAddress);\n\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 5:34 PM",
          "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.64,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     InetSocketAddress address \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n \n     server \u003d\n         rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n     this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                               server.getListenerAddress());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    InetSocketAddress address \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n\n    server \u003d\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                              server.getListenerAddress());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 5:34 PM",
          "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.64,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     InetSocketAddress address \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n \n     server \u003d\n         rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n     this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                               server.getListenerAddress());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    InetSocketAddress address \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n\n    server \u003d\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                              server.getListenerAddress());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 5:34 PM",
          "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.64,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     InetSocketAddress address \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n \n     server \u003d\n         rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n     this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                               server.getListenerAddress());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    InetSocketAddress address \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n\n    server \u003d\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                              server.getListenerAddress());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 5:34 PM",
          "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.64,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     InetSocketAddress address \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n \n     server \u003d\n         rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n     this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                               server.getListenerAddress());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    InetSocketAddress address \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n\n    server \u003d\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                              server.getListenerAddress());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
          "extendedDetails": {}
        }
      ]
    },
    "48414b08277b86cdbc34ae36d7c4d204fd838294": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4163. consistently set the bind address (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 11:35 AM",
      "commitName": "48414b08277b86cdbc34ae36d7c4d204fd838294",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "19/04/12 1:33 PM",
      "commitNameOld": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 13.92,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,29 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n-    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n-        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n-    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n-      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n-      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n-    InetAddress hostNameResolved \u003d null;\n-    try {\n-      hostNameResolved \u003d InetAddress.getLocalHost(); \n-    } catch (UnknownHostException e) {\n-      throw new YarnException(e);\n-    }\n+    InetSocketAddress address \u003d conf.getSocketAddr(\n+        JHAdminConfig.MR_HISTORY_ADDRESS,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n \n     server \u003d\n         rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n-    this.bindAddress \u003d\n-        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n-            + \":\" + server.getPort());\n+    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n+                                              server.getListenerAddress());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n-    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n-      String resolvedAddress \u003d bindAddress.getHostName() + \":\" + bindAddress.getPort();\n-      conf.set(JHAdminConfig.MR_HISTORY_ADDRESS, resolvedAddress);\n-\n-      String hostname \u003d getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n-                                        JHAdminConfig.DEFAULT_MR_HISTORY_WEBAPP_ADDRESS);\n-      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n-      int port \u003d webApp.port();\n-      resolvedAddress \u003d hostname + \":\" + port;\n-      conf.set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS, resolvedAddress);\n-    }\n-\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    InetSocketAddress address \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n\n    server \u003d\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_ADDRESS,\n                                              server.getListenerAddress());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3867. MiniMRYarn/MiniYarn uses fixed ports (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328109 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/12 1:33 PM",
      "commitName": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "28/03/12 7:02 PM",
      "commitNameOld": "db3e592df0cd022d15a6acdeac3517c54d510ad2",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 21.77,
      "commitsBetweenForRepo": 201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,49 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n       JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n       JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost(); \n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n         rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n+    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n+      String resolvedAddress \u003d bindAddress.getHostName() + \":\" + bindAddress.getPort();\n+      conf.set(JHAdminConfig.MR_HISTORY_ADDRESS, resolvedAddress);\n+\n+      String hostname \u003d getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n+                                        JHAdminConfig.DEFAULT_MR_HISTORY_WEBAPP_ADDRESS);\n+      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n+      int port \u003d webApp.port();\n+      resolvedAddress \u003d hostname + \":\" + port;\n+      conf.set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS, resolvedAddress);\n+    }\n+\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); \n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String resolvedAddress \u003d bindAddress.getHostName() + \":\" + bindAddress.getPort();\n      conf.set(JHAdminConfig.MR_HISTORY_ADDRESS, resolvedAddress);\n\n      String hostname \u003d getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n                                        JHAdminConfig.DEFAULT_MR_HISTORY_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS, resolvedAddress);\n    }\n\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "db3e592df0cd022d15a6acdeac3517c54d510ad2": {
      "type": "Ybodychange",
      "commitMessage": "REDUCE-3955. Change MR to use ProtobufRpcEngine from hadoop-common instead of ProtoOverHadoopRpcEngine. (Contributed by Jitendra Nath Pandey)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1306689 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/12 7:02 PM",
      "commitName": "db3e592df0cd022d15a6acdeac3517c54d510ad2",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "14/03/12 3:02 PM",
      "commitNameOld": "7609243e582da9a7d008fc71569897715ced80cb",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 14.17,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n       JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n       JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost(); \n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n-        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n+        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); \n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "99bf2902b29c4ab910d5043fe7091f7df04c21fe": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3896. Add user information to the delegation token issued by the history server. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296401 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/12 11:28 AM",
      "commitName": "99bf2902b29c4ab910d5043fe7091f7df04c21fe",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "29/02/12 12:48 PM",
      "commitNameOld": "3cbb9d20d0bf9d4f28c64bd56c5b9c7dd70ed801",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 1.94,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n       JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n       JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost(); \n-      //address.getAddress().getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n     \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); \n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "c6923061d0384cc22d459ee570f3626d98b3ef69": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3698. Client cannot talk to the history server in secure mode. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1234120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/01/12 12:44 PM",
      "commitName": "c6923061d0384cc22d459ee570f3626d98b3ef69",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "10/01/12 5:50 PM",
      "commitNameOld": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 9.79,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n       JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n       JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost(); \n       //address.getAddress().getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n-      server.refreshServiceAcl(conf, new MRAMPolicyProvider());\n+      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n-\n+    \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); \n      //address.getAddress().getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3380. Token infrastructure for running clients which are not kerberos authenticated. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/12 5:50 PM",
      "commitName": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "09/01/12 1:04 PM",
      "commitNameOld": "e8645636ce1721aa6dc3674fbc553a7bb3522fbe",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n       JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n       JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetAddress hostNameResolved \u003d null;\n     try {\n-      hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n+      hostNameResolved \u003d InetAddress.getLocalHost(); \n+      //address.getAddress().getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n-            conf, null,\n+            conf, jhsDTSecretManager,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       server.refreshServiceAcl(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); \n      //address.getAddress().getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "d19cfe01642f9582e1fe5d567beb480399c37a01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2746. Yarn servers can\u0027t communicate with each other with hadoop.security.authorization set to true (acmurthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188522 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 11:07 PM",
      "commitName": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "21/10/11 2:36 PM",
      "commitNameOld": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,37 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n       JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n       JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, null,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT, \n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n+    \n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n+        false)) {\n+      server.refreshServiceAcl(conf, new MRAMPolicyProvider());\n+    }\n+    \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, null,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT, \n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      server.refreshServiceAcl(conf, new MRAMPolicyProvider());\n    }\n    \n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    \n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "4186121c08cb3d86f775d333c637459a4fb19d1b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3239. Use new createSocketAddr API in MRv2 to give better error messages on misconfig (Todd Lipcon via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1187556 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/10/11 2:36 PM",
      "commitName": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "05/10/11 4:43 AM",
      "commitNameOld": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.41,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     initializeWebApp(conf);\n     String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n-    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr);\n+    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n+      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n+      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, null,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT, \n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr,\n      JHAdminConfig.DEFAULT_MR_HISTORY_PORT,\n      JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, null,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT, \n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    \n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "66137cf17cb4abccd6065819d97edc63c6510477": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3013. Removed YarnConfiguration.YARN_SECURITY_INFO and its usage as it doesn\u0027t affect security any more. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:43 AM",
      "commitName": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/09/11 6:23 PM",
      "commitNameOld": "5f6adcf396b78934d7da2bba0d052038ff962f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 7.43,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n   public void start() {\n-    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-    Configuration conf \u003d new Configuration(getConfig());\n-    conf.setClass(\n-        YarnConfiguration.YARN_SECURITY_INFO,\n-        ClientHSSecurityInfo.class, SecurityInfo.class);\n-    initializeWebApp(getConfig());\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n+    initializeWebApp(conf);\n     String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr);\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, null,\n             conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT, \n                 JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    initializeWebApp(conf);\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, null,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT, \n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    \n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 1:59 PM",
      "commitNameOld": "b3c9c3c182f1fead0f47ef560e90fcc86042ea7f",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void start() {\n     YarnRPC rpc \u003d YarnRPC.create(getConfig());\n     Configuration conf \u003d new Configuration(getConfig());\n     conf.setClass(\n         YarnConfiguration.YARN_SECURITY_INFO,\n         ClientHSSecurityInfo.class, SecurityInfo.class);\n     initializeWebApp(getConfig());\n-    String serviceAddr \u003d conf.get(JHConfig.HS_BIND_ADDRESS,\n-        JHConfig.DEFAULT_HS_BIND_ADDRESS);\n+    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr);\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, null,\n-            conf.getInt(JHConfig.HS_CLIENT_THREADS, \n-                JHConfig.DEFAULT_HS_CLIENT_THREADS));\n+            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT, \n+                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration conf \u003d new Configuration(getConfig());\n    conf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        ClientHSSecurityInfo.class, SecurityInfo.class);\n    initializeWebApp(getConfig());\n    String serviceAddr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, null,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT, \n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    \n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration conf \u003d new Configuration(getConfig());\n    conf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        ClientHSSecurityInfo.class, SecurityInfo.class);\n    initializeWebApp(getConfig());\n    String serviceAddr \u003d conf.get(JHConfig.HS_BIND_ADDRESS,\n        JHConfig.DEFAULT_HS_BIND_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, null,\n            conf.getInt(JHConfig.HS_CLIENT_THREADS, \n                JHConfig.DEFAULT_HS_CLIENT_THREADS));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    \n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  public void start() {\n+    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+    Configuration conf \u003d new Configuration(getConfig());\n+    conf.setClass(\n+        YarnConfiguration.YARN_SECURITY_INFO,\n+        ClientHSSecurityInfo.class, SecurityInfo.class);\n+    initializeWebApp(getConfig());\n+    String serviceAddr \u003d conf.get(JHConfig.HS_BIND_ADDRESS,\n+        JHConfig.DEFAULT_HS_BIND_ADDRESS);\n+    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr);\n+    InetAddress hostNameResolved \u003d null;\n+    try {\n+      hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n+    } catch (UnknownHostException e) {\n+      throw new YarnException(e);\n+    }\n+\n+    server \u003d\n+        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n+            conf, null,\n+            conf.getInt(JHConfig.HS_CLIENT_THREADS, \n+                JHConfig.DEFAULT_HS_CLIENT_THREADS));\n+    server.start();\n+    this.bindAddress \u003d\n+        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n+            + \":\" + server.getPort());\n+    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n+    \n+    super.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration conf \u003d new Configuration(getConfig());\n    conf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        ClientHSSecurityInfo.class, SecurityInfo.class);\n    initializeWebApp(getConfig());\n    String serviceAddr \u003d conf.get(JHConfig.HS_BIND_ADDRESS,\n        JHConfig.DEFAULT_HS_BIND_ADDRESS);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(serviceAddr);\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost(); //address.getAddress().getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, null,\n            conf.getInt(JHConfig.HS_CLIENT_THREADS, \n                JHConfig.DEFAULT_HS_CLIENT_THREADS));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    \n    super.start();\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java"
    }
  }
}