{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryPlan.java",
  "functionName": "getReservations",
  "functionId": "getReservations___reservationID-ReservationId__interval-ReservationInterval",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
  "functionStartLine": 595,
  "functionEndLine": 598,
  "numCommitsSeen": 29,
  "timeTaken": 2710,
  "changeHistory": [
    "23f937e3b718f607d4fc975610ab3a03265f0f7e",
    "9875325d5c63f343809907d06bf48a298035a611"
  ],
  "changeHistoryShort": {
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": "Ymultichange(Yparameterchange,Ybodychange)",
    "9875325d5c63f343809907d06bf48a298035a611": "Yintroduced"
  },
  "changeHistoryDetails": {
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
      "commitDate": "11/02/16 10:47 AM",
      "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
          "commitDate": "11/02/16 10:47 AM",
          "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "01/02/16 6:17 PM",
          "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.69,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,4 @@\n-    public Set\u003cReservationAllocation\u003e getReservations(ReservationId\n-                    reservationID, ReservationInterval interval, String user) {\n-    if (reservationID !\u003d null) {\n-      ReservationAllocation allocation \u003d getReservationById(reservationID);\n-      if (allocation \u003d\u003d null){\n-        return Collections.emptySet();\n-      }\n-      return Collections.singleton(allocation);\n-    }\n-\n-    long startTime \u003d interval \u003d\u003d null? 0 : interval.getStartTime();\n-    long endTime \u003d interval \u003d\u003d null? Long.MAX_VALUE : interval.getEndTime();\n-\n-    ReservationInterval searchInterval \u003d\n-            new ReservationInterval(endTime, Long.MAX_VALUE);\n-    readLock.lock();\n-    try {\n-      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e\n-            reservations \u003d currentReservations.headMap(searchInterval, true);\n-      if (!reservations.isEmpty()) {\n-        Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n-                new HashSet\u003c\u003e();\n-        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries :\n-                reservations.values()) {\n-          for (InMemoryReservationAllocation res : reservationEntries) {\n-            if (res.getEndTime() \u003e startTime) {\n-              if (user !\u003d null \u0026\u0026 !user.isEmpty()\n-                      \u0026\u0026 !res.getUser().equals(user)) {\n-                continue;\n-              }\n-              flattenedReservations.add(res);\n-            }\n-          }\n-        }\n-        return Collections.unmodifiableSet(flattenedReservations);\n-      } else {\n-        return Collections.emptySet();\n-      }\n-    } finally {\n-      readLock.unlock();\n-    }\n+  public Set\u003cReservationAllocation\u003e getReservations(ReservationId\n+                    reservationID, ReservationInterval interval) {\n+    return getReservations(reservationID, interval, null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cReservationAllocation\u003e getReservations(ReservationId\n                    reservationID, ReservationInterval interval) {\n    return getReservations(reservationID, interval, null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {
            "oldValue": "[reservationID-ReservationId, interval-ReservationInterval, user-String]",
            "newValue": "[reservationID-ReservationId, interval-ReservationInterval]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
          "commitDate": "11/02/16 10:47 AM",
          "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "01/02/16 6:17 PM",
          "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.69,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,4 @@\n-    public Set\u003cReservationAllocation\u003e getReservations(ReservationId\n-                    reservationID, ReservationInterval interval, String user) {\n-    if (reservationID !\u003d null) {\n-      ReservationAllocation allocation \u003d getReservationById(reservationID);\n-      if (allocation \u003d\u003d null){\n-        return Collections.emptySet();\n-      }\n-      return Collections.singleton(allocation);\n-    }\n-\n-    long startTime \u003d interval \u003d\u003d null? 0 : interval.getStartTime();\n-    long endTime \u003d interval \u003d\u003d null? Long.MAX_VALUE : interval.getEndTime();\n-\n-    ReservationInterval searchInterval \u003d\n-            new ReservationInterval(endTime, Long.MAX_VALUE);\n-    readLock.lock();\n-    try {\n-      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e\n-            reservations \u003d currentReservations.headMap(searchInterval, true);\n-      if (!reservations.isEmpty()) {\n-        Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n-                new HashSet\u003c\u003e();\n-        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries :\n-                reservations.values()) {\n-          for (InMemoryReservationAllocation res : reservationEntries) {\n-            if (res.getEndTime() \u003e startTime) {\n-              if (user !\u003d null \u0026\u0026 !user.isEmpty()\n-                      \u0026\u0026 !res.getUser().equals(user)) {\n-                continue;\n-              }\n-              flattenedReservations.add(res);\n-            }\n-          }\n-        }\n-        return Collections.unmodifiableSet(flattenedReservations);\n-      } else {\n-        return Collections.emptySet();\n-      }\n-    } finally {\n-      readLock.unlock();\n-    }\n+  public Set\u003cReservationAllocation\u003e getReservations(ReservationId\n+                    reservationID, ReservationInterval interval) {\n+    return getReservations(reservationID, interval, null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cReservationAllocation\u003e getReservations(ReservationId\n                    reservationID, ReservationInterval interval) {\n    return getReservations(reservationID, interval, null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {}
        }
      ]
    },
    "9875325d5c63f343809907d06bf48a298035a611": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4340. Add list API to reservation system. (Sean Po via wangda)\n",
      "commitDate": "01/02/16 6:17 PM",
      "commitName": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,42 @@\n+    public Set\u003cReservationAllocation\u003e getReservations(ReservationId\n+                    reservationID, ReservationInterval interval, String user) {\n+    if (reservationID !\u003d null) {\n+      ReservationAllocation allocation \u003d getReservationById(reservationID);\n+      if (allocation \u003d\u003d null){\n+        return Collections.emptySet();\n+      }\n+      return Collections.singleton(allocation);\n+    }\n+\n+    long startTime \u003d interval \u003d\u003d null? 0 : interval.getStartTime();\n+    long endTime \u003d interval \u003d\u003d null? Long.MAX_VALUE : interval.getEndTime();\n+\n+    ReservationInterval searchInterval \u003d\n+            new ReservationInterval(endTime, Long.MAX_VALUE);\n+    readLock.lock();\n+    try {\n+      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e\n+            reservations \u003d currentReservations.headMap(searchInterval, true);\n+      if (!reservations.isEmpty()) {\n+        Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n+                new HashSet\u003c\u003e();\n+        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries :\n+                reservations.values()) {\n+          for (InMemoryReservationAllocation res : reservationEntries) {\n+            if (res.getEndTime() \u003e startTime) {\n+              if (user !\u003d null \u0026\u0026 !user.isEmpty()\n+                      \u0026\u0026 !res.getUser().equals(user)) {\n+                continue;\n+              }\n+              flattenedReservations.add(res);\n+            }\n+          }\n+        }\n+        return Collections.unmodifiableSet(flattenedReservations);\n+      } else {\n+        return Collections.emptySet();\n+      }\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "    public Set\u003cReservationAllocation\u003e getReservations(ReservationId\n                    reservationID, ReservationInterval interval, String user) {\n    if (reservationID !\u003d null) {\n      ReservationAllocation allocation \u003d getReservationById(reservationID);\n      if (allocation \u003d\u003d null){\n        return Collections.emptySet();\n      }\n      return Collections.singleton(allocation);\n    }\n\n    long startTime \u003d interval \u003d\u003d null? 0 : interval.getStartTime();\n    long endTime \u003d interval \u003d\u003d null? Long.MAX_VALUE : interval.getEndTime();\n\n    ReservationInterval searchInterval \u003d\n            new ReservationInterval(endTime, Long.MAX_VALUE);\n    readLock.lock();\n    try {\n      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e\n            reservations \u003d currentReservations.headMap(searchInterval, true);\n      if (!reservations.isEmpty()) {\n        Set\u003cReservationAllocation\u003e flattenedReservations \u003d\n                new HashSet\u003c\u003e();\n        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries :\n                reservations.values()) {\n          for (InMemoryReservationAllocation res : reservationEntries) {\n            if (res.getEndTime() \u003e startTime) {\n              if (user !\u003d null \u0026\u0026 !user.isEmpty()\n                      \u0026\u0026 !res.getUser().equals(user)) {\n                continue;\n              }\n              flattenedReservations.add(res);\n            }\n          }\n        }\n        return Collections.unmodifiableSet(flattenedReservations);\n      } else {\n        return Collections.emptySet();\n      }\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java"
    }
  }
}