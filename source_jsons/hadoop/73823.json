{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "populateResponseParamsOnError",
  "functionId": "populateResponseParamsOnError___t-Throwable__responseParams-ResponseParams",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 1050,
  "functionEndLine": 1073,
  "numCommitsSeen": 162,
  "timeTaken": 2367,
  "changeHistory": [
    "3d94da1e00fc6238fad458e415219f87920f1fc3"
  ],
  "changeHistoryShort": {
    "3d94da1e00fc6238fad458e415219f87920f1fc3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3d94da1e00fc6238fad458e415219f87920f1fc3": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11552. Allow handoff on the server side for RPC requests. Contributed by Siddharth Seth\n",
      "commitDate": "23/11/16 4:01 PM",
      "commitName": "3d94da1e00fc6238fad458e415219f87920f1fc3",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,24 @@\n+    private void populateResponseParamsOnError(Throwable t,\n+                                               ResponseParams responseParams) {\n+      if (t instanceof UndeclaredThrowableException) {\n+        t \u003d t.getCause();\n+      }\n+      logException(Server.LOG, t, this);\n+      if (t instanceof RpcServerException) {\n+        RpcServerException rse \u003d ((RpcServerException) t);\n+        responseParams.returnStatus \u003d rse.getRpcStatusProto();\n+        responseParams.detailedErr \u003d rse.getRpcErrorCodeProto();\n+      } else {\n+        responseParams.returnStatus \u003d RpcStatusProto.ERROR;\n+        responseParams.detailedErr \u003d RpcErrorCodeProto.ERROR_APPLICATION;\n+      }\n+      responseParams.errorClass \u003d t.getClass().getName();\n+      responseParams.error \u003d StringUtils.stringifyException(t);\n+      // Remove redundant error class name from the beginning of the\n+      // stack trace\n+      String exceptionHdr \u003d responseParams.errorClass + \": \";\n+      if (responseParams.error.startsWith(exceptionHdr)) {\n+        responseParams.error \u003d\n+            responseParams.error.substring(exceptionHdr.length());\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void populateResponseParamsOnError(Throwable t,\n                                               ResponseParams responseParams) {\n      if (t instanceof UndeclaredThrowableException) {\n        t \u003d t.getCause();\n      }\n      logException(Server.LOG, t, this);\n      if (t instanceof RpcServerException) {\n        RpcServerException rse \u003d ((RpcServerException) t);\n        responseParams.returnStatus \u003d rse.getRpcStatusProto();\n        responseParams.detailedErr \u003d rse.getRpcErrorCodeProto();\n      } else {\n        responseParams.returnStatus \u003d RpcStatusProto.ERROR;\n        responseParams.detailedErr \u003d RpcErrorCodeProto.ERROR_APPLICATION;\n      }\n      responseParams.errorClass \u003d t.getClass().getName();\n      responseParams.error \u003d StringUtils.stringifyException(t);\n      // Remove redundant error class name from the beginning of the\n      // stack trace\n      String exceptionHdr \u003d responseParams.errorClass + \": \";\n      if (responseParams.error.startsWith(exceptionHdr)) {\n        responseParams.error \u003d\n            responseParams.error.substring(exceptionHdr.length());\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}