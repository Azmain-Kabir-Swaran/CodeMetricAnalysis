{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "recoverComponents",
  "functionId": "recoverComponents___response-RegisterApplicationMasterResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 418,
  "functionEndLine": 502,
  "numCommitsSeen": 31,
  "timeTaken": 1313,
  "changeHistory": [
    "5ed689e33ac0becfc36d5fa424466bb1732aa59b",
    "3ebe6a7819292ce6bd557e36137531b59890c845",
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
    "b8a7ef1b64392094562e7782e0fd092934724ad2"
  ],
  "changeHistoryShort": {
    "5ed689e33ac0becfc36d5fa424466bb1732aa59b": "Ybodychange",
    "3ebe6a7819292ce6bd557e36137531b59890c845": "Ybodychange",
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2": "Ybodychange",
    "b8a7ef1b64392094562e7782e0fd092934724ad2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ed689e33ac0becfc36d5fa424466bb1732aa59b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7958. ServiceMaster should only wait for recovery of containers with id that match the current application id. Contributed by Chandni Singh\n",
      "commitDate": "01/03/18 8:00 AM",
      "commitName": "5ed689e33ac0becfc36d5fa424466bb1732aa59b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "28/02/18 11:57 AM",
      "commitNameOld": "31009034bd16085b4634bfd861d32cdb9abab92a",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,85 @@\n   private void recoverComponents(RegisterApplicationMasterResponse response) {\n     List\u003cContainer\u003e containersFromPrevAttempt \u003d response\n         .getContainersFromPreviousAttempts();\n     LOG.info(\"Received {} containers from previous attempt.\",\n         containersFromPrevAttempt.size());\n     Map\u003cString, ServiceRecord\u003e existingRecords \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e existingComps \u003d null;\n     try {\n       existingComps \u003d yarnRegistryOperations.listComponents();\n       LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(),\n           existingComps);\n     } catch (Exception e) {\n       LOG.info(\"Could not read component paths: {}\", e.getMessage());\n     }\n     if (existingComps !\u003d null) {\n       for (String existingComp : existingComps) {\n         try {\n           ServiceRecord record \u003d\n               yarnRegistryOperations.getComponent(existingComp);\n           existingRecords.put(existingComp, record);\n         } catch (Exception e) {\n           LOG.warn(\"Could not resolve record for component {}: {}\",\n               existingComp, e);\n         }\n       }\n     }\n     for (Container container : containersFromPrevAttempt) {\n       LOG.info(\"Handling {} from previous attempt\", container.getId());\n       ServiceRecord record \u003d existingRecords.remove(RegistryPathUtils\n           .encodeYarnID(container.getId().toString()));\n       if (record !\u003d null) {\n         Component comp \u003d componentsById.get(container.getAllocationRequestId());\n         ComponentEvent event \u003d\n             new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)\n                 .setContainer(container)\n                 .setInstance(comp.getComponentInstance(record.description));\n         comp.handle(event);\n         // do not remove requests in this case because we do not know if they\n         // have already been removed\n       } else {\n         LOG.info(\"Record not found in registry for container {} from previous\" +\n             \" attempt, releasing\", container.getId());\n         amRMClient.releaseAssignedContainer(container.getId());\n       }\n     }\n-\n+    ApplicationId appId \u003d ApplicationId.fromString(app.getId());\n     existingRecords.forEach((encodedContainerId, record) -\u003e {\n       String componentName \u003d record.get(YarnRegistryAttributes.YARN_COMPONENT);\n       if (componentName !\u003d null) {\n         Component component \u003d componentsByName.get(componentName);\n-        ComponentInstance compInstance \u003d component.getComponentInstance(\n-            record.description);\n-        ContainerId containerId \u003d ContainerId.fromString(record.get(\n-            YarnRegistryAttributes.YARN_ID));\n-        unRecoveredInstances.put(containerId, compInstance);\n-        component.removePendingInstance(compInstance);\n+        if (component !\u003d null) {\n+          ComponentInstance compInstance \u003d component.getComponentInstance(\n+              record.description);\n+          ContainerId containerId \u003d ContainerId.fromString(record.get(\n+              YarnRegistryAttributes.YARN_ID));\n+          if (containerId.getApplicationAttemptId().getApplicationId()\n+              .equals(appId)) {\n+            unRecoveredInstances.put(containerId, compInstance);\n+            component.removePendingInstance(compInstance);\n+          }\n+        }\n       }\n     });\n \n     if (unRecoveredInstances.size() \u003e 0) {\n       executorService.schedule(() -\u003e {\n         synchronized (unRecoveredInstances) {\n           // after containerRecoveryTimeout, all the containers that haven\u0027t be\n           // recovered by the RM will released. The corresponding Component\n           // Instances are added to the pending queues of their respective\n           // component.\n           unRecoveredInstances.forEach((containerId, instance) -\u003e {\n             LOG.info(\"{}, wait on container {} expired\",\n                 instance.getCompInstanceId(), containerId);\n             instance.cleanupRegistryAndCompHdfsDir(containerId);\n             Component component \u003d componentsByName.get(instance.getCompName());\n             component.requestContainers(1);\n             component.reInsertPendingInstance(instance);\n             amRMClient.releaseAssignedContainer(containerId);\n           });\n           unRecoveredInstances.clear();\n         }\n       }, containerRecoveryTimeout, TimeUnit.MILLISECONDS);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverComponents(RegisterApplicationMasterResponse response) {\n    List\u003cContainer\u003e containersFromPrevAttempt \u003d response\n        .getContainersFromPreviousAttempts();\n    LOG.info(\"Received {} containers from previous attempt.\",\n        containersFromPrevAttempt.size());\n    Map\u003cString, ServiceRecord\u003e existingRecords \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e existingComps \u003d null;\n    try {\n      existingComps \u003d yarnRegistryOperations.listComponents();\n      LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(),\n          existingComps);\n    } catch (Exception e) {\n      LOG.info(\"Could not read component paths: {}\", e.getMessage());\n    }\n    if (existingComps !\u003d null) {\n      for (String existingComp : existingComps) {\n        try {\n          ServiceRecord record \u003d\n              yarnRegistryOperations.getComponent(existingComp);\n          existingRecords.put(existingComp, record);\n        } catch (Exception e) {\n          LOG.warn(\"Could not resolve record for component {}: {}\",\n              existingComp, e);\n        }\n      }\n    }\n    for (Container container : containersFromPrevAttempt) {\n      LOG.info(\"Handling {} from previous attempt\", container.getId());\n      ServiceRecord record \u003d existingRecords.remove(RegistryPathUtils\n          .encodeYarnID(container.getId().toString()));\n      if (record !\u003d null) {\n        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n        ComponentEvent event \u003d\n            new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)\n                .setContainer(container)\n                .setInstance(comp.getComponentInstance(record.description));\n        comp.handle(event);\n        // do not remove requests in this case because we do not know if they\n        // have already been removed\n      } else {\n        LOG.info(\"Record not found in registry for container {} from previous\" +\n            \" attempt, releasing\", container.getId());\n        amRMClient.releaseAssignedContainer(container.getId());\n      }\n    }\n    ApplicationId appId \u003d ApplicationId.fromString(app.getId());\n    existingRecords.forEach((encodedContainerId, record) -\u003e {\n      String componentName \u003d record.get(YarnRegistryAttributes.YARN_COMPONENT);\n      if (componentName !\u003d null) {\n        Component component \u003d componentsByName.get(componentName);\n        if (component !\u003d null) {\n          ComponentInstance compInstance \u003d component.getComponentInstance(\n              record.description);\n          ContainerId containerId \u003d ContainerId.fromString(record.get(\n              YarnRegistryAttributes.YARN_ID));\n          if (containerId.getApplicationAttemptId().getApplicationId()\n              .equals(appId)) {\n            unRecoveredInstances.put(containerId, compInstance);\n            component.removePendingInstance(compInstance);\n          }\n        }\n      }\n    });\n\n    if (unRecoveredInstances.size() \u003e 0) {\n      executorService.schedule(() -\u003e {\n        synchronized (unRecoveredInstances) {\n          // after containerRecoveryTimeout, all the containers that haven\u0027t be\n          // recovered by the RM will released. The corresponding Component\n          // Instances are added to the pending queues of their respective\n          // component.\n          unRecoveredInstances.forEach((containerId, instance) -\u003e {\n            LOG.info(\"{}, wait on container {} expired\",\n                instance.getCompInstanceId(), containerId);\n            instance.cleanupRegistryAndCompHdfsDir(containerId);\n            Component component \u003d componentsByName.get(instance.getCompName());\n            component.requestContainers(1);\n            component.reInsertPendingInstance(instance);\n            amRMClient.releaseAssignedContainer(containerId);\n          });\n          unRecoveredInstances.clear();\n        }\n      }, containerRecoveryTimeout, TimeUnit.MILLISECONDS);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "3ebe6a7819292ce6bd557e36137531b59890c845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7565. Yarn service pre-maturely releases the container after AM restart. Contributed by Chandni Singh\n",
      "commitDate": "12/12/17 1:35 PM",
      "commitName": "3ebe6a7819292ce6bd557e36137531b59890c845",
      "commitAuthor": "Jian He",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,80 @@\n   private void recoverComponents(RegisterApplicationMasterResponse response) {\n     List\u003cContainer\u003e containersFromPrevAttempt \u003d response\n         .getContainersFromPreviousAttempts();\n     LOG.info(\"Received {} containers from previous attempt.\",\n         containersFromPrevAttempt.size());\n     Map\u003cString, ServiceRecord\u003e existingRecords \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e existingComps \u003d null;\n     try {\n       existingComps \u003d yarnRegistryOperations.listComponents();\n       LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(),\n           existingComps);\n     } catch (Exception e) {\n       LOG.info(\"Could not read component paths: {}\", e.getMessage());\n     }\n     if (existingComps !\u003d null) {\n       for (String existingComp : existingComps) {\n         try {\n           ServiceRecord record \u003d\n               yarnRegistryOperations.getComponent(existingComp);\n           existingRecords.put(existingComp, record);\n         } catch (Exception e) {\n           LOG.warn(\"Could not resolve record for component {}: {}\",\n               existingComp, e);\n         }\n       }\n     }\n     for (Container container : containersFromPrevAttempt) {\n       LOG.info(\"Handling {} from previous attempt\", container.getId());\n-      ServiceRecord record \u003d existingRecords.get(RegistryPathUtils\n+      ServiceRecord record \u003d existingRecords.remove(RegistryPathUtils\n           .encodeYarnID(container.getId().toString()));\n       if (record !\u003d null) {\n         Component comp \u003d componentsById.get(container.getAllocationRequestId());\n         ComponentEvent event \u003d\n             new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)\n                 .setContainer(container)\n                 .setInstance(comp.getComponentInstance(record.description));\n         comp.handle(event);\n         // do not remove requests in this case because we do not know if they\n         // have already been removed\n       } else {\n         LOG.info(\"Record not found in registry for container {} from previous\" +\n             \" attempt, releasing\", container.getId());\n         amRMClient.releaseAssignedContainer(container.getId());\n       }\n     }\n+\n+    existingRecords.forEach((encodedContainerId, record) -\u003e {\n+      String componentName \u003d record.get(YarnRegistryAttributes.YARN_COMPONENT);\n+      if (componentName !\u003d null) {\n+        Component component \u003d componentsByName.get(componentName);\n+        ComponentInstance compInstance \u003d component.getComponentInstance(\n+            record.description);\n+        ContainerId containerId \u003d ContainerId.fromString(record.get(\n+            YarnRegistryAttributes.YARN_ID));\n+        unRecoveredInstances.put(containerId, compInstance);\n+        component.removePendingInstance(compInstance);\n+      }\n+    });\n+\n+    if (unRecoveredInstances.size() \u003e 0) {\n+      executorService.schedule(() -\u003e {\n+        synchronized (unRecoveredInstances) {\n+          // after containerRecoveryTimeout, all the containers that haven\u0027t be\n+          // recovered by the RM will released. The corresponding Component\n+          // Instances are added to the pending queues of their respective\n+          // component.\n+          unRecoveredInstances.forEach((containerId, instance) -\u003e {\n+            LOG.info(\"{}, wait on container {} expired\",\n+                instance.getCompInstanceId(), containerId);\n+            instance.cleanupRegistryAndCompHdfsDir(containerId);\n+            Component component \u003d componentsByName.get(instance.getCompName());\n+            component.requestContainers(1);\n+            component.reInsertPendingInstance(instance);\n+            amRMClient.releaseAssignedContainer(containerId);\n+          });\n+          unRecoveredInstances.clear();\n+        }\n+      }, containerRecoveryTimeout, TimeUnit.MILLISECONDS);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverComponents(RegisterApplicationMasterResponse response) {\n    List\u003cContainer\u003e containersFromPrevAttempt \u003d response\n        .getContainersFromPreviousAttempts();\n    LOG.info(\"Received {} containers from previous attempt.\",\n        containersFromPrevAttempt.size());\n    Map\u003cString, ServiceRecord\u003e existingRecords \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e existingComps \u003d null;\n    try {\n      existingComps \u003d yarnRegistryOperations.listComponents();\n      LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(),\n          existingComps);\n    } catch (Exception e) {\n      LOG.info(\"Could not read component paths: {}\", e.getMessage());\n    }\n    if (existingComps !\u003d null) {\n      for (String existingComp : existingComps) {\n        try {\n          ServiceRecord record \u003d\n              yarnRegistryOperations.getComponent(existingComp);\n          existingRecords.put(existingComp, record);\n        } catch (Exception e) {\n          LOG.warn(\"Could not resolve record for component {}: {}\",\n              existingComp, e);\n        }\n      }\n    }\n    for (Container container : containersFromPrevAttempt) {\n      LOG.info(\"Handling {} from previous attempt\", container.getId());\n      ServiceRecord record \u003d existingRecords.remove(RegistryPathUtils\n          .encodeYarnID(container.getId().toString()));\n      if (record !\u003d null) {\n        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n        ComponentEvent event \u003d\n            new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)\n                .setContainer(container)\n                .setInstance(comp.getComponentInstance(record.description));\n        comp.handle(event);\n        // do not remove requests in this case because we do not know if they\n        // have already been removed\n      } else {\n        LOG.info(\"Record not found in registry for container {} from previous\" +\n            \" attempt, releasing\", container.getId());\n        amRMClient.releaseAssignedContainer(container.getId());\n      }\n    }\n\n    existingRecords.forEach((encodedContainerId, record) -\u003e {\n      String componentName \u003d record.get(YarnRegistryAttributes.YARN_COMPONENT);\n      if (componentName !\u003d null) {\n        Component component \u003d componentsByName.get(componentName);\n        ComponentInstance compInstance \u003d component.getComponentInstance(\n            record.description);\n        ContainerId containerId \u003d ContainerId.fromString(record.get(\n            YarnRegistryAttributes.YARN_ID));\n        unRecoveredInstances.put(containerId, compInstance);\n        component.removePendingInstance(compInstance);\n      }\n    });\n\n    if (unRecoveredInstances.size() \u003e 0) {\n      executorService.schedule(() -\u003e {\n        synchronized (unRecoveredInstances) {\n          // after containerRecoveryTimeout, all the containers that haven\u0027t be\n          // recovered by the RM will released. The corresponding Component\n          // Instances are added to the pending queues of their respective\n          // component.\n          unRecoveredInstances.forEach((containerId, instance) -\u003e {\n            LOG.info(\"{}, wait on container {} expired\",\n                instance.getCompInstanceId(), containerId);\n            instance.cleanupRegistryAndCompHdfsDir(containerId);\n            Component component \u003d componentsByName.get(instance.getCompName());\n            component.requestContainers(1);\n            component.reInsertPendingInstance(instance);\n            amRMClient.releaseAssignedContainer(containerId);\n          });\n          unRecoveredInstances.clear();\n        }\n      }, containerRecoveryTimeout, TimeUnit.MILLISECONDS);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7486. Race condition in service AM that can cause NPE. Contributed by Jian He\n",
      "commitDate": "16/11/17 7:58 AM",
      "commitName": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 9.77,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n   private void recoverComponents(RegisterApplicationMasterResponse response) {\n-    List\u003cContainer\u003e recoveredContainers \u003d response\n+    List\u003cContainer\u003e containersFromPrevAttempt \u003d response\n         .getContainersFromPreviousAttempts();\n     LOG.info(\"Received {} containers from previous attempt.\",\n-        recoveredContainers.size());\n+        containersFromPrevAttempt.size());\n     Map\u003cString, ServiceRecord\u003e existingRecords \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e existingComps \u003d null;\n     try {\n       existingComps \u003d yarnRegistryOperations.listComponents();\n       LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(),\n           existingComps);\n     } catch (Exception e) {\n       LOG.info(\"Could not read component paths: {}\", e.getMessage());\n     }\n     if (existingComps !\u003d null) {\n       for (String existingComp : existingComps) {\n         try {\n           ServiceRecord record \u003d\n               yarnRegistryOperations.getComponent(existingComp);\n           existingRecords.put(existingComp, record);\n         } catch (Exception e) {\n           LOG.warn(\"Could not resolve record for component {}: {}\",\n               existingComp, e);\n         }\n       }\n     }\n-    for (Container container : recoveredContainers) {\n-      LOG.info(\"Handling container {} from previous attempt\",\n-          container.getId());\n+    for (Container container : containersFromPrevAttempt) {\n+      LOG.info(\"Handling {} from previous attempt\", container.getId());\n       ServiceRecord record \u003d existingRecords.get(RegistryPathUtils\n           .encodeYarnID(container.getId().toString()));\n       if (record !\u003d null) {\n         Component comp \u003d componentsById.get(container.getAllocationRequestId());\n         ComponentEvent event \u003d\n             new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)\n                 .setContainer(container)\n                 .setInstance(comp.getComponentInstance(record.description));\n         comp.handle(event);\n         // do not remove requests in this case because we do not know if they\n         // have already been removed\n       } else {\n         LOG.info(\"Record not found in registry for container {} from previous\" +\n             \" attempt, releasing\", container.getId());\n         amRMClient.releaseAssignedContainer(container.getId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverComponents(RegisterApplicationMasterResponse response) {\n    List\u003cContainer\u003e containersFromPrevAttempt \u003d response\n        .getContainersFromPreviousAttempts();\n    LOG.info(\"Received {} containers from previous attempt.\",\n        containersFromPrevAttempt.size());\n    Map\u003cString, ServiceRecord\u003e existingRecords \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e existingComps \u003d null;\n    try {\n      existingComps \u003d yarnRegistryOperations.listComponents();\n      LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(),\n          existingComps);\n    } catch (Exception e) {\n      LOG.info(\"Could not read component paths: {}\", e.getMessage());\n    }\n    if (existingComps !\u003d null) {\n      for (String existingComp : existingComps) {\n        try {\n          ServiceRecord record \u003d\n              yarnRegistryOperations.getComponent(existingComp);\n          existingRecords.put(existingComp, record);\n        } catch (Exception e) {\n          LOG.warn(\"Could not resolve record for component {}: {}\",\n              existingComp, e);\n        }\n      }\n    }\n    for (Container container : containersFromPrevAttempt) {\n      LOG.info(\"Handling {} from previous attempt\", container.getId());\n      ServiceRecord record \u003d existingRecords.get(RegistryPathUtils\n          .encodeYarnID(container.getId().toString()));\n      if (record !\u003d null) {\n        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n        ComponentEvent event \u003d\n            new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)\n                .setContainer(container)\n                .setInstance(comp.getComponentInstance(record.description));\n        comp.handle(event);\n        // do not remove requests in this case because we do not know if they\n        // have already been removed\n      } else {\n        LOG.info(\"Record not found in registry for container {} from previous\" +\n            \" attempt, releasing\", container.getId());\n        amRMClient.releaseAssignedContainer(container.getId());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "b8a7ef1b64392094562e7782e0fd092934724ad2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,47 @@\n+  private void recoverComponents(RegisterApplicationMasterResponse response) {\n+    List\u003cContainer\u003e recoveredContainers \u003d response\n+        .getContainersFromPreviousAttempts();\n+    LOG.info(\"Received {} containers from previous attempt.\",\n+        recoveredContainers.size());\n+    Map\u003cString, ServiceRecord\u003e existingRecords \u003d new HashMap\u003c\u003e();\n+    List\u003cString\u003e existingComps \u003d null;\n+    try {\n+      existingComps \u003d yarnRegistryOperations.listComponents();\n+      LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(),\n+          existingComps);\n+    } catch (Exception e) {\n+      LOG.info(\"Could not read component paths: {}\", e.getMessage());\n+    }\n+    if (existingComps !\u003d null) {\n+      for (String existingComp : existingComps) {\n+        try {\n+          ServiceRecord record \u003d\n+              yarnRegistryOperations.getComponent(existingComp);\n+          existingRecords.put(existingComp, record);\n+        } catch (Exception e) {\n+          LOG.warn(\"Could not resolve record for component {}: {}\",\n+              existingComp, e);\n+        }\n+      }\n+    }\n+    for (Container container : recoveredContainers) {\n+      LOG.info(\"Handling container {} from previous attempt\",\n+          container.getId());\n+      ServiceRecord record \u003d existingRecords.get(RegistryPathUtils\n+          .encodeYarnID(container.getId().toString()));\n+      if (record !\u003d null) {\n+        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n+        ComponentEvent event \u003d\n+            new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)\n+                .setContainer(container)\n+                .setInstance(comp.getComponentInstance(record.description));\n+        comp.handle(event);\n+        // do not remove requests in this case because we do not know if they\n+        // have already been removed\n+      } else {\n+        LOG.info(\"Record not found in registry for container {} from previous\" +\n+            \" attempt, releasing\", container.getId());\n+        amRMClient.releaseAssignedContainer(container.getId());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverComponents(RegisterApplicationMasterResponse response) {\n    List\u003cContainer\u003e recoveredContainers \u003d response\n        .getContainersFromPreviousAttempts();\n    LOG.info(\"Received {} containers from previous attempt.\",\n        recoveredContainers.size());\n    Map\u003cString, ServiceRecord\u003e existingRecords \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e existingComps \u003d null;\n    try {\n      existingComps \u003d yarnRegistryOperations.listComponents();\n      LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(),\n          existingComps);\n    } catch (Exception e) {\n      LOG.info(\"Could not read component paths: {}\", e.getMessage());\n    }\n    if (existingComps !\u003d null) {\n      for (String existingComp : existingComps) {\n        try {\n          ServiceRecord record \u003d\n              yarnRegistryOperations.getComponent(existingComp);\n          existingRecords.put(existingComp, record);\n        } catch (Exception e) {\n          LOG.warn(\"Could not resolve record for component {}: {}\",\n              existingComp, e);\n        }\n      }\n    }\n    for (Container container : recoveredContainers) {\n      LOG.info(\"Handling container {} from previous attempt\",\n          container.getId());\n      ServiceRecord record \u003d existingRecords.get(RegistryPathUtils\n          .encodeYarnID(container.getId().toString()));\n      if (record !\u003d null) {\n        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n        ComponentEvent event \u003d\n            new ComponentEvent(comp.getName(), CONTAINER_RECOVERED)\n                .setContainer(container)\n                .setInstance(comp.getComponentInstance(record.description));\n        comp.handle(event);\n        // do not remove requests in this case because we do not know if they\n        // have already been removed\n      } else {\n        LOG.info(\"Record not found in registry for container {} from previous\" +\n            \" attempt, releasing\", container.getId());\n        amRMClient.releaseAssignedContainer(container.getId());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}