{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SequenceFile.java",
  "functionName": "nextRawKey",
  "functionId": "nextRawKey",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
  "functionStartLine": 3683,
  "functionEndLine": 3708,
  "numCommitsSeen": 46,
  "timeTaken": 2978,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "f395f67d62f083529165af21c75dceb1ba46dd2e",
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf",
    "98beeca09d2e527c3507989dbae267c2313ae15a",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "f395f67d62f083529165af21c75dceb1ba46dd2e": "Ybodychange",
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf": "Ybodychange",
    "98beeca09d2e527c3507989dbae267c2313ae15a": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public boolean nextRawKey() throws IOException {\n        if (in \u003d\u003d null) {\n          int bufferSize \u003d getBufferSize(conf); \n          Reader reader \u003d new Reader(conf,\n                                     Reader.file(segmentPathName), \n                                     Reader.bufferSize(bufferSize),\n                                     Reader.start(segmentOffset), \n                                     Reader.length(segmentLength));\n        \n          //sometimes we ignore syncs especially for temp merge files\n          if (ignoreSync) reader.ignoreSync();\n\n          if (reader.getKeyClass() !\u003d keyClass)\n            throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                  \" is not \" + keyClass);\n          if (reader.getValueClass() !\u003d valClass)\n            throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                  \" is not \" + valClass);\n          this.in \u003d reader;\n          rawKey \u003d new DataOutputBuffer();\n        }\n        rawKey.reset();\n        int keyLength \u003d \n          in.nextRawKey(rawKey);\n        return (keyLength \u003e\u003d 0);\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public boolean nextRawKey() throws IOException {\n        if (in \u003d\u003d null) {\n          int bufferSize \u003d getBufferSize(conf); \n          Reader reader \u003d new Reader(conf,\n                                     Reader.file(segmentPathName), \n                                     Reader.bufferSize(bufferSize),\n                                     Reader.start(segmentOffset), \n                                     Reader.length(segmentLength));\n        \n          //sometimes we ignore syncs especially for temp merge files\n          if (ignoreSync) reader.ignoreSync();\n\n          if (reader.getKeyClass() !\u003d keyClass)\n            throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                  \" is not \" + keyClass);\n          if (reader.getValueClass() !\u003d valClass)\n            throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                  \" is not \" + valClass);\n          this.in \u003d reader;\n          rawKey \u003d new DataOutputBuffer();\n        }\n        rawKey.reset();\n        int keyLength \u003d \n          in.nextRawKey(rawKey);\n        return (keyLength \u003e\u003d 0);\n      }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public boolean nextRawKey() throws IOException {\n        if (in \u003d\u003d null) {\n          int bufferSize \u003d getBufferSize(conf); \n          Reader reader \u003d new Reader(conf,\n                                     Reader.file(segmentPathName), \n                                     Reader.bufferSize(bufferSize),\n                                     Reader.start(segmentOffset), \n                                     Reader.length(segmentLength));\n        \n          //sometimes we ignore syncs especially for temp merge files\n          if (ignoreSync) reader.ignoreSync();\n\n          if (reader.getKeyClass() !\u003d keyClass)\n            throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                  \" is not \" + keyClass);\n          if (reader.getValueClass() !\u003d valClass)\n            throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                  \" is not \" + valClass);\n          this.in \u003d reader;\n          rawKey \u003d new DataOutputBuffer();\n        }\n        rawKey.reset();\n        int keyLength \u003d \n          in.nextRawKey(rawKey);\n        return (keyLength \u003e\u003d 0);\n      }",
      "path": "common/src/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "common/src/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "f395f67d62f083529165af21c75dceb1ba46dd2e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7102. Remove \"fs.ramfs.impl\" field from core-deafult.xml. Contributed by Konstantin Shvachko.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1058343 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/01/11 2:42 PM",
      "commitName": "f395f67d62f083529165af21c75dceb1ba46dd2e",
      "commitAuthor": "Konstantin Shvachko",
      "commitDateOld": "11/01/11 10:35 AM",
      "commitNameOld": "496b24d30b6ca75ee0e91ab417c184ab3e547196",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n       public boolean nextRawKey() throws IOException {\n         if (in \u003d\u003d null) {\n           int bufferSize \u003d getBufferSize(conf); \n-          if (fs.getUri().getScheme().startsWith(\"ramfs\")) {\n-            bufferSize \u003d conf.getInt(\"io.bytes.per.checksum\", 512);\n-          }\n           Reader reader \u003d new Reader(conf,\n                                      Reader.file(segmentPathName), \n                                      Reader.bufferSize(bufferSize),\n                                      Reader.start(segmentOffset), \n                                      Reader.length(segmentLength));\n         \n           //sometimes we ignore syncs especially for temp merge files\n           if (ignoreSync) reader.ignoreSync();\n \n           if (reader.getKeyClass() !\u003d keyClass)\n             throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                   \" is not \" + keyClass);\n           if (reader.getValueClass() !\u003d valClass)\n             throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                   \" is not \" + valClass);\n           this.in \u003d reader;\n           rawKey \u003d new DataOutputBuffer();\n         }\n         rawKey.reset();\n         int keyLength \u003d \n           in.nextRawKey(rawKey);\n         return (keyLength \u003e\u003d 0);\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public boolean nextRawKey() throws IOException {\n        if (in \u003d\u003d null) {\n          int bufferSize \u003d getBufferSize(conf); \n          Reader reader \u003d new Reader(conf,\n                                     Reader.file(segmentPathName), \n                                     Reader.bufferSize(bufferSize),\n                                     Reader.start(segmentOffset), \n                                     Reader.length(segmentLength));\n        \n          //sometimes we ignore syncs especially for temp merge files\n          if (ignoreSync) reader.ignoreSync();\n\n          if (reader.getKeyClass() !\u003d keyClass)\n            throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                  \" is not \" + keyClass);\n          if (reader.getValueClass() !\u003d valClass)\n            throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                  \" is not \" + valClass);\n          this.in \u003d reader;\n          rawKey \u003d new DataOutputBuffer();\n        }\n        rawKey.reset();\n        int keyLength \u003d \n          in.nextRawKey(rawKey);\n        return (keyLength \u003e\u003d 0);\n      }",
      "path": "src/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {}
    },
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6856. Simplify constructors for SequenceFile, and MapFile. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1002937 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/10 7:59 PM",
      "commitName": "6333b3e485dc76a7505bf74e041e274e0a8e6faf",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "28/08/10 3:44 PM",
      "commitNameOld": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 32.18,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n       public boolean nextRawKey() throws IOException {\n         if (in \u003d\u003d null) {\n-          int bufferSize \u003d conf.getInt(\"io.file.buffer.size\", 4096); \n+          int bufferSize \u003d getBufferSize(conf); \n           if (fs.getUri().getScheme().startsWith(\"ramfs\")) {\n             bufferSize \u003d conf.getInt(\"io.bytes.per.checksum\", 512);\n           }\n-          Reader reader \u003d new Reader(fs, segmentPathName, null, \n-                                     bufferSize, segmentOffset, \n-                                     segmentLength, conf, false);\n+          Reader reader \u003d new Reader(conf,\n+                                     Reader.file(segmentPathName), \n+                                     Reader.bufferSize(bufferSize),\n+                                     Reader.start(segmentOffset), \n+                                     Reader.length(segmentLength));\n         \n           //sometimes we ignore syncs especially for temp merge files\n           if (ignoreSync) reader.ignoreSync();\n \n           if (reader.getKeyClass() !\u003d keyClass)\n             throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                   \" is not \" + keyClass);\n           if (reader.getValueClass() !\u003d valClass)\n             throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                   \" is not \" + valClass);\n           this.in \u003d reader;\n           rawKey \u003d new DataOutputBuffer();\n         }\n         rawKey.reset();\n         int keyLength \u003d \n           in.nextRawKey(rawKey);\n         return (keyLength \u003e\u003d 0);\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public boolean nextRawKey() throws IOException {\n        if (in \u003d\u003d null) {\n          int bufferSize \u003d getBufferSize(conf); \n          if (fs.getUri().getScheme().startsWith(\"ramfs\")) {\n            bufferSize \u003d conf.getInt(\"io.bytes.per.checksum\", 512);\n          }\n          Reader reader \u003d new Reader(conf,\n                                     Reader.file(segmentPathName), \n                                     Reader.bufferSize(bufferSize),\n                                     Reader.start(segmentOffset), \n                                     Reader.length(segmentLength));\n        \n          //sometimes we ignore syncs especially for temp merge files\n          if (ignoreSync) reader.ignoreSync();\n\n          if (reader.getKeyClass() !\u003d keyClass)\n            throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                  \" is not \" + keyClass);\n          if (reader.getValueClass() !\u003d valClass)\n            throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                  \" is not \" + valClass);\n          this.in \u003d reader;\n          rawKey \u003d new DataOutputBuffer();\n        }\n        rawKey.reset();\n        int keyLength \u003d \n          in.nextRawKey(rawKey);\n        return (keyLength \u003e\u003d 0);\n      }",
      "path": "src/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {}
    },
    "98beeca09d2e527c3507989dbae267c2313ae15a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6307. Add a new SequenceFile.Reader constructor in order to support reading on un-closed file.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@886003 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/12/09 3:25 PM",
      "commitName": "98beeca09d2e527c3507989dbae267c2313ae15a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/09/09 12:38 AM",
      "commitNameOld": "c9cc61e8538925081b6ed92596e599d23c8a5542",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 81.66,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n       public boolean nextRawKey() throws IOException {\n         if (in \u003d\u003d null) {\n           int bufferSize \u003d conf.getInt(\"io.file.buffer.size\", 4096); \n           if (fs.getUri().getScheme().startsWith(\"ramfs\")) {\n             bufferSize \u003d conf.getInt(\"io.bytes.per.checksum\", 512);\n           }\n-          Reader reader \u003d new Reader(fs, segmentPathName, \n+          Reader reader \u003d new Reader(fs, segmentPathName, null, \n                                      bufferSize, segmentOffset, \n                                      segmentLength, conf, false);\n         \n           //sometimes we ignore syncs especially for temp merge files\n           if (ignoreSync) reader.ignoreSync();\n \n           if (reader.getKeyClass() !\u003d keyClass)\n             throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                   \" is not \" + keyClass);\n           if (reader.getValueClass() !\u003d valClass)\n             throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                   \" is not \" + valClass);\n           this.in \u003d reader;\n           rawKey \u003d new DataOutputBuffer();\n         }\n         rawKey.reset();\n         int keyLength \u003d \n           in.nextRawKey(rawKey);\n         return (keyLength \u003e\u003d 0);\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public boolean nextRawKey() throws IOException {\n        if (in \u003d\u003d null) {\n          int bufferSize \u003d conf.getInt(\"io.file.buffer.size\", 4096); \n          if (fs.getUri().getScheme().startsWith(\"ramfs\")) {\n            bufferSize \u003d conf.getInt(\"io.bytes.per.checksum\", 512);\n          }\n          Reader reader \u003d new Reader(fs, segmentPathName, null, \n                                     bufferSize, segmentOffset, \n                                     segmentLength, conf, false);\n        \n          //sometimes we ignore syncs especially for temp merge files\n          if (ignoreSync) reader.ignoreSync();\n\n          if (reader.getKeyClass() !\u003d keyClass)\n            throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                  \" is not \" + keyClass);\n          if (reader.getValueClass() !\u003d valClass)\n            throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                  \" is not \" + valClass);\n          this.in \u003d reader;\n          rawKey \u003d new DataOutputBuffer();\n        }\n        rawKey.reset();\n        int keyLength \u003d \n          in.nextRawKey(rawKey);\n        return (keyLength \u003e\u003d 0);\n      }",
      "path": "src/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,27 @@\n+      public boolean nextRawKey() throws IOException {\n+        if (in \u003d\u003d null) {\n+          int bufferSize \u003d conf.getInt(\"io.file.buffer.size\", 4096); \n+          if (fs.getUri().getScheme().startsWith(\"ramfs\")) {\n+            bufferSize \u003d conf.getInt(\"io.bytes.per.checksum\", 512);\n+          }\n+          Reader reader \u003d new Reader(fs, segmentPathName, \n+                                     bufferSize, segmentOffset, \n+                                     segmentLength, conf, false);\n+        \n+          //sometimes we ignore syncs especially for temp merge files\n+          if (ignoreSync) reader.ignoreSync();\n+\n+          if (reader.getKeyClass() !\u003d keyClass)\n+            throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n+                                  \" is not \" + keyClass);\n+          if (reader.getValueClass() !\u003d valClass)\n+            throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n+                                  \" is not \" + valClass);\n+          this.in \u003d reader;\n+          rawKey \u003d new DataOutputBuffer();\n+        }\n+        rawKey.reset();\n+        int keyLength \u003d \n+          in.nextRawKey(rawKey);\n+        return (keyLength \u003e\u003d 0);\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public boolean nextRawKey() throws IOException {\n        if (in \u003d\u003d null) {\n          int bufferSize \u003d conf.getInt(\"io.file.buffer.size\", 4096); \n          if (fs.getUri().getScheme().startsWith(\"ramfs\")) {\n            bufferSize \u003d conf.getInt(\"io.bytes.per.checksum\", 512);\n          }\n          Reader reader \u003d new Reader(fs, segmentPathName, \n                                     bufferSize, segmentOffset, \n                                     segmentLength, conf, false);\n        \n          //sometimes we ignore syncs especially for temp merge files\n          if (ignoreSync) reader.ignoreSync();\n\n          if (reader.getKeyClass() !\u003d keyClass)\n            throw new IOException(\"wrong key class: \" + reader.getKeyClass() +\n                                  \" is not \" + keyClass);\n          if (reader.getValueClass() !\u003d valClass)\n            throw new IOException(\"wrong value class: \"+reader.getValueClass()+\n                                  \" is not \" + valClass);\n          this.in \u003d reader;\n          rawKey \u003d new DataOutputBuffer();\n        }\n        rawKey.reset();\n        int keyLength \u003d \n          in.nextRawKey(rawKey);\n        return (keyLength \u003e\u003d 0);\n      }",
      "path": "src/java/org/apache/hadoop/io/SequenceFile.java"
    }
  }
}