{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PreemptableResourceCalculator.java",
  "functionName": "recursivelyComputeIdealAssignment",
  "functionId": "recursivelyComputeIdealAssignment___root-TempQueuePerPartition__totalPreemptionAllowed-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
  "functionStartLine": 148,
  "functionEndLine": 160,
  "numCommitsSeen": 48,
  "timeTaken": 4205,
  "changeHistory": [
    "514794e1a5a39ca61de3981d53a05547ae17f5e4",
    "60e4116bf1d00afed91010e57357fe54057e4e39",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61"
  ],
  "changeHistoryShort": {
    "514794e1a5a39ca61de3981d53a05547ae17f5e4": "Ymodifierchange",
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "514794e1a5a39ca61de3981d53a05547ae17f5e4": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-7934. [GQ] Refactor preemption calculators to allow overriding for Federation Global Algos. (Contributed by curino)\n",
      "commitDate": "22/02/18 6:12 PM",
      "commitName": "514794e1a5a39ca61de3981d53a05547ae17f5e4",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "31/10/16 3:18 PM",
      "commitNameOld": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 479.16,
      "commitsBetweenForRepo": 3052,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n-  private void recursivelyComputeIdealAssignment(\n+  protected void recursivelyComputeIdealAssignment(\n       TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n     if (root.getChildren() !\u003d null \u0026\u0026\n         root.getChildren().size() \u003e 0) {\n       // compute ideal distribution at this level\n       computeIdealResourceDistribution(rc, root.getChildren(),\n           totalPreemptionAllowed, root.idealAssigned);\n       // compute recursively for lower levels and build list of leafs\n       for (TempQueuePerPartition t : root.getChildren()) {\n         recursivelyComputeIdealAssignment(t, totalPreemptionAllowed);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void recursivelyComputeIdealAssignment(\n      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n    if (root.getChildren() !\u003d null \u0026\u0026\n        root.getChildren().size() \u003e 0) {\n      // compute ideal distribution at this level\n      computeIdealResourceDistribution(rc, root.getChildren(),\n          totalPreemptionAllowed, root.idealAssigned);\n      // compute recursively for lower levels and build list of leafs\n      for (TempQueuePerPartition t : root.getChildren()) {\n        recursivelyComputeIdealAssignment(t, totalPreemptionAllowed);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
          "commitDate": "30/03/16 12:43 PM",
          "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
          "commitAuthor": "Jian He",
          "commitDateOld": "29/03/16 11:22 PM",
          "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,13 @@\n-  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n+  private void recursivelyComputeIdealAssignment(\n       TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n-    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n     if (root.getChildren() !\u003d null \u0026\u0026\n         root.getChildren().size() \u003e 0) {\n       // compute ideal distribution at this level\n       computeIdealResourceDistribution(rc, root.getChildren(),\n           totalPreemptionAllowed, root.idealAssigned);\n       // compute recursively for lower levels and build list of leafs\n       for(TempQueuePerPartition t : root.getChildren()) {\n-        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n-            totalPreemptionAllowed));\n+        recursivelyComputeIdealAssignment(t, totalPreemptionAllowed);\n       }\n-    } else {\n-      // we are in a leaf nothing to do, just return yourself\n-      return ImmutableSet.of(root.queueName);\n     }\n-    return leafQueueNames;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recursivelyComputeIdealAssignment(\n      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n    if (root.getChildren() !\u003d null \u0026\u0026\n        root.getChildren().size() \u003e 0) {\n      // compute ideal distribution at this level\n      computeIdealResourceDistribution(rc, root.getChildren(),\n          totalPreemptionAllowed, root.idealAssigned);\n      // compute recursively for lower levels and build list of leafs\n      for(TempQueuePerPartition t : root.getChildren()) {\n        recursivelyComputeIdealAssignment(t, totalPreemptionAllowed);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
            "oldMethodName": "recursivelyComputeIdealAssignment",
            "newMethodName": "recursivelyComputeIdealAssignment"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
          "commitDate": "30/03/16 12:43 PM",
          "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
          "commitAuthor": "Jian He",
          "commitDateOld": "29/03/16 11:22 PM",
          "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,13 @@\n-  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n+  private void recursivelyComputeIdealAssignment(\n       TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n-    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n     if (root.getChildren() !\u003d null \u0026\u0026\n         root.getChildren().size() \u003e 0) {\n       // compute ideal distribution at this level\n       computeIdealResourceDistribution(rc, root.getChildren(),\n           totalPreemptionAllowed, root.idealAssigned);\n       // compute recursively for lower levels and build list of leafs\n       for(TempQueuePerPartition t : root.getChildren()) {\n-        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n-            totalPreemptionAllowed));\n+        recursivelyComputeIdealAssignment(t, totalPreemptionAllowed);\n       }\n-    } else {\n-      // we are in a leaf nothing to do, just return yourself\n-      return ImmutableSet.of(root.queueName);\n     }\n-    return leafQueueNames;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recursivelyComputeIdealAssignment(\n      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n    if (root.getChildren() !\u003d null \u0026\u0026\n        root.getChildren().size() \u003e 0) {\n      // compute ideal distribution at this level\n      computeIdealResourceDistribution(rc, root.getChildren(),\n          totalPreemptionAllowed, root.idealAssigned);\n      // compute recursively for lower levels and build list of leafs\n      for(TempQueuePerPartition t : root.getChildren()) {\n        recursivelyComputeIdealAssignment(t, totalPreemptionAllowed);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
          "extendedDetails": {
            "oldValue": "Set\u003cString\u003e",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
          "commitDate": "30/03/16 12:43 PM",
          "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
          "commitAuthor": "Jian He",
          "commitDateOld": "29/03/16 11:22 PM",
          "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,13 @@\n-  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n+  private void recursivelyComputeIdealAssignment(\n       TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n-    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n     if (root.getChildren() !\u003d null \u0026\u0026\n         root.getChildren().size() \u003e 0) {\n       // compute ideal distribution at this level\n       computeIdealResourceDistribution(rc, root.getChildren(),\n           totalPreemptionAllowed, root.idealAssigned);\n       // compute recursively for lower levels and build list of leafs\n       for(TempQueuePerPartition t : root.getChildren()) {\n-        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n-            totalPreemptionAllowed));\n+        recursivelyComputeIdealAssignment(t, totalPreemptionAllowed);\n       }\n-    } else {\n-      // we are in a leaf nothing to do, just return yourself\n-      return ImmutableSet.of(root.queueName);\n     }\n-    return leafQueueNames;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recursivelyComputeIdealAssignment(\n      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n    if (root.getChildren() !\u003d null \u0026\u0026\n        root.getChildren().size() \u003e 0) {\n      // compute ideal distribution at this level\n      computeIdealResourceDistribution(rc, root.getChildren(),\n          totalPreemptionAllowed, root.idealAssigned);\n      // compute recursively for lower levels and build list of leafs\n      for(TempQueuePerPartition t : root.getChildren()) {\n        recursivelyComputeIdealAssignment(t, totalPreemptionAllowed);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
          "extendedDetails": {}
        }
      ]
    },
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
      "commitDate": "24/04/15 5:03 PM",
      "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private List\u003cTempQueue\u003e recursivelyComputeIdealAssignment(\n-      TempQueue root, Resource totalPreemptionAllowed) {\n-    List\u003cTempQueue\u003e leafs \u003d new ArrayList\u003cTempQueue\u003e();\n+  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n+      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n+    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n     if (root.getChildren() !\u003d null \u0026\u0026\n         root.getChildren().size() \u003e 0) {\n       // compute ideal distribution at this level\n       computeIdealResourceDistribution(rc, root.getChildren(),\n           totalPreemptionAllowed, root.idealAssigned);\n       // compute recursively for lower levels and build list of leafs\n-      for(TempQueue t : root.getChildren()) {\n-        leafs.addAll(recursivelyComputeIdealAssignment(t, totalPreemptionAllowed));\n+      for(TempQueuePerPartition t : root.getChildren()) {\n+        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n+            totalPreemptionAllowed));\n       }\n     } else {\n       // we are in a leaf nothing to do, just return yourself\n-      return Collections.singletonList(root);\n+      return ImmutableSet.of(root.queueName);\n     }\n-    return leafs;\n+    return leafQueueNames;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n    if (root.getChildren() !\u003d null \u0026\u0026\n        root.getChildren().size() \u003e 0) {\n      // compute ideal distribution at this level\n      computeIdealResourceDistribution(rc, root.getChildren(),\n          totalPreemptionAllowed, root.idealAssigned);\n      // compute recursively for lower levels and build list of leafs\n      for(TempQueuePerPartition t : root.getChildren()) {\n        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n            totalPreemptionAllowed));\n      }\n    } else {\n      // we are in a leaf nothing to do, just return yourself\n      return ImmutableSet.of(root.queueName);\n    }\n    return leafQueueNames;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[root-TempQueue, totalPreemptionAllowed-Resource]",
            "newValue": "[root-TempQueuePerPartition, totalPreemptionAllowed-Resource]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private List\u003cTempQueue\u003e recursivelyComputeIdealAssignment(\n-      TempQueue root, Resource totalPreemptionAllowed) {\n-    List\u003cTempQueue\u003e leafs \u003d new ArrayList\u003cTempQueue\u003e();\n+  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n+      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n+    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n     if (root.getChildren() !\u003d null \u0026\u0026\n         root.getChildren().size() \u003e 0) {\n       // compute ideal distribution at this level\n       computeIdealResourceDistribution(rc, root.getChildren(),\n           totalPreemptionAllowed, root.idealAssigned);\n       // compute recursively for lower levels and build list of leafs\n-      for(TempQueue t : root.getChildren()) {\n-        leafs.addAll(recursivelyComputeIdealAssignment(t, totalPreemptionAllowed));\n+      for(TempQueuePerPartition t : root.getChildren()) {\n+        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n+            totalPreemptionAllowed));\n       }\n     } else {\n       // we are in a leaf nothing to do, just return yourself\n-      return Collections.singletonList(root);\n+      return ImmutableSet.of(root.queueName);\n     }\n-    return leafs;\n+    return leafQueueNames;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n    if (root.getChildren() !\u003d null \u0026\u0026\n        root.getChildren().size() \u003e 0) {\n      // compute ideal distribution at this level\n      computeIdealResourceDistribution(rc, root.getChildren(),\n          totalPreemptionAllowed, root.idealAssigned);\n      // compute recursively for lower levels and build list of leafs\n      for(TempQueuePerPartition t : root.getChildren()) {\n        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n            totalPreemptionAllowed));\n      }\n    } else {\n      // we are in a leaf nothing to do, just return yourself\n      return ImmutableSet.of(root.queueName);\n    }\n    return leafQueueNames;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "List\u003cTempQueue\u003e",
            "newValue": "Set\u003cString\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private List\u003cTempQueue\u003e recursivelyComputeIdealAssignment(\n-      TempQueue root, Resource totalPreemptionAllowed) {\n-    List\u003cTempQueue\u003e leafs \u003d new ArrayList\u003cTempQueue\u003e();\n+  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n+      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n+    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n     if (root.getChildren() !\u003d null \u0026\u0026\n         root.getChildren().size() \u003e 0) {\n       // compute ideal distribution at this level\n       computeIdealResourceDistribution(rc, root.getChildren(),\n           totalPreemptionAllowed, root.idealAssigned);\n       // compute recursively for lower levels and build list of leafs\n-      for(TempQueue t : root.getChildren()) {\n-        leafs.addAll(recursivelyComputeIdealAssignment(t, totalPreemptionAllowed));\n+      for(TempQueuePerPartition t : root.getChildren()) {\n+        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n+            totalPreemptionAllowed));\n       }\n     } else {\n       // we are in a leaf nothing to do, just return yourself\n-      return Collections.singletonList(root);\n+      return ImmutableSet.of(root.queueName);\n     }\n-    return leafs;\n+    return leafQueueNames;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Set\u003cString\u003e recursivelyComputeIdealAssignment(\n      TempQueuePerPartition root, Resource totalPreemptionAllowed) {\n    Set\u003cString\u003e leafQueueNames \u003d new HashSet\u003c\u003e();\n    if (root.getChildren() !\u003d null \u0026\u0026\n        root.getChildren().size() \u003e 0) {\n      // compute ideal distribution at this level\n      computeIdealResourceDistribution(rc, root.getChildren(),\n          totalPreemptionAllowed, root.idealAssigned);\n      // compute recursively for lower levels and build list of leafs\n      for(TempQueuePerPartition t : root.getChildren()) {\n        leafQueueNames.addAll(recursivelyComputeIdealAssignment(t,\n            totalPreemptionAllowed));\n      }\n    } else {\n      // we are in a leaf nothing to do, just return yourself\n      return ImmutableSet.of(root.queueName);\n    }\n    return leafQueueNames;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,18 @@\n+  private List\u003cTempQueue\u003e recursivelyComputeIdealAssignment(\n+      TempQueue root, Resource totalPreemptionAllowed) {\n+    List\u003cTempQueue\u003e leafs \u003d new ArrayList\u003cTempQueue\u003e();\n+    if (root.getChildren() !\u003d null \u0026\u0026\n+        root.getChildren().size() \u003e 0) {\n+      // compute ideal distribution at this level\n+      computeIdealResourceDistribution(rc, root.getChildren(),\n+          totalPreemptionAllowed, root.idealAssigned);\n+      // compute recursively for lower levels and build list of leafs\n+      for(TempQueue t : root.getChildren()) {\n+        leafs.addAll(recursivelyComputeIdealAssignment(t, totalPreemptionAllowed));\n+      }\n+    } else {\n+      // we are in a leaf nothing to do, just return yourself\n+      return Collections.singletonList(root);\n+    }\n+    return leafs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTempQueue\u003e recursivelyComputeIdealAssignment(\n      TempQueue root, Resource totalPreemptionAllowed) {\n    List\u003cTempQueue\u003e leafs \u003d new ArrayList\u003cTempQueue\u003e();\n    if (root.getChildren() !\u003d null \u0026\u0026\n        root.getChildren().size() \u003e 0) {\n      // compute ideal distribution at this level\n      computeIdealResourceDistribution(rc, root.getChildren(),\n          totalPreemptionAllowed, root.idealAssigned);\n      // compute recursively for lower levels and build list of leafs\n      for(TempQueue t : root.getChildren()) {\n        leafs.addAll(recursivelyComputeIdealAssignment(t, totalPreemptionAllowed));\n      }\n    } else {\n      // we are in a leaf nothing to do, just return yourself\n      return Collections.singletonList(root);\n    }\n    return leafs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"
    }
  }
}