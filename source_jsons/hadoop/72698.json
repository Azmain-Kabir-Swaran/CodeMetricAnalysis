{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "createKeyInternal",
  "functionId": "createKeyInternal___name-String__material-byte[]__options-Options",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 693,
  "functionEndLine": 719,
  "numCommitsSeen": 71,
  "timeTaken": 1644,
  "changeHistory": [
    "38e2322d84d54896eac23afec0a1434629b8c8b2",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "38e2322d84d54896eac23afec0a1434629b8c8b2": "Ybodychange",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38e2322d84d54896eac23afec0a1434629b8c8b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10696. Add optional attributes to KeyProvider Options and Metadata. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 3:18 PM",
      "commitName": "38e2322d84d54896eac23afec0a1434629b8c8b2",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/06/14 8:45 AM",
      "commitNameOld": "c79728478caadd8374bce2bc3f466db1da1e3ad1",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,27 @@\n   private KeyVersion createKeyInternal(String name, byte[] material,\n       Options options)\n       throws NoSuchAlgorithmException, IOException {\n     checkNotEmpty(name, \"name\");\n     checkNotNull(options, \"options\");\n     Map\u003cString, Object\u003e jsonKey \u003d new HashMap\u003cString, Object\u003e();\n     jsonKey.put(KMSRESTConstants.NAME_FIELD, name);\n     jsonKey.put(KMSRESTConstants.CIPHER_FIELD, options.getCipher());\n     jsonKey.put(KMSRESTConstants.LENGTH_FIELD, options.getBitLength());\n     if (material !\u003d null) {\n       jsonKey.put(KMSRESTConstants.MATERIAL_FIELD,\n           Base64.encodeBase64String(material));\n     }\n     if (options.getDescription() !\u003d null) {\n       jsonKey.put(KMSRESTConstants.DESCRIPTION_FIELD,\n           options.getDescription());\n     }\n+    if (options.getAttributes() !\u003d null \u0026\u0026 !options.getAttributes().isEmpty()) {\n+      jsonKey.put(KMSRESTConstants.ATTRIBUTES_FIELD, options.getAttributes());\n+    }\n     URL url \u003d createURL(KMSRESTConstants.KEYS_RESOURCE, null, null, null);\n     HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n     conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n     Map response \u003d call(conn, jsonKey, HttpURLConnection.HTTP_CREATED,\n         Map.class);\n     return parseJSONKeyVersion(response);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion createKeyInternal(String name, byte[] material,\n      Options options)\n      throws NoSuchAlgorithmException, IOException {\n    checkNotEmpty(name, \"name\");\n    checkNotNull(options, \"options\");\n    Map\u003cString, Object\u003e jsonKey \u003d new HashMap\u003cString, Object\u003e();\n    jsonKey.put(KMSRESTConstants.NAME_FIELD, name);\n    jsonKey.put(KMSRESTConstants.CIPHER_FIELD, options.getCipher());\n    jsonKey.put(KMSRESTConstants.LENGTH_FIELD, options.getBitLength());\n    if (material !\u003d null) {\n      jsonKey.put(KMSRESTConstants.MATERIAL_FIELD,\n          Base64.encodeBase64String(material));\n    }\n    if (options.getDescription() !\u003d null) {\n      jsonKey.put(KMSRESTConstants.DESCRIPTION_FIELD,\n          options.getDescription());\n    }\n    if (options.getAttributes() !\u003d null \u0026\u0026 !options.getAttributes().isEmpty()) {\n      jsonKey.put(KMSRESTConstants.ATTRIBUTES_FIELD, options.getAttributes());\n    }\n    URL url \u003d createURL(KMSRESTConstants.KEYS_RESOURCE, null, null, null);\n    HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n    Map response \u003d call(conn, jsonKey, HttpURLConnection.HTTP_CREATED,\n        Map.class);\n    return parseJSONKeyVersion(response);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,24 @@\n+  private KeyVersion createKeyInternal(String name, byte[] material,\n+      Options options)\n+      throws NoSuchAlgorithmException, IOException {\n+    checkNotEmpty(name, \"name\");\n+    checkNotNull(options, \"options\");\n+    Map\u003cString, Object\u003e jsonKey \u003d new HashMap\u003cString, Object\u003e();\n+    jsonKey.put(KMSRESTConstants.NAME_FIELD, name);\n+    jsonKey.put(KMSRESTConstants.CIPHER_FIELD, options.getCipher());\n+    jsonKey.put(KMSRESTConstants.LENGTH_FIELD, options.getBitLength());\n+    if (material !\u003d null) {\n+      jsonKey.put(KMSRESTConstants.MATERIAL_FIELD,\n+          Base64.encodeBase64String(material));\n+    }\n+    if (options.getDescription() !\u003d null) {\n+      jsonKey.put(KMSRESTConstants.DESCRIPTION_FIELD,\n+          options.getDescription());\n+    }\n+    URL url \u003d createURL(KMSRESTConstants.KEYS_RESOURCE, null, null, null);\n+    HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n+    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n+    Map response \u003d call(conn, jsonKey, HttpURLConnection.HTTP_CREATED,\n+        Map.class);\n+    return parseJSONKeyVersion(response);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion createKeyInternal(String name, byte[] material,\n      Options options)\n      throws NoSuchAlgorithmException, IOException {\n    checkNotEmpty(name, \"name\");\n    checkNotNull(options, \"options\");\n    Map\u003cString, Object\u003e jsonKey \u003d new HashMap\u003cString, Object\u003e();\n    jsonKey.put(KMSRESTConstants.NAME_FIELD, name);\n    jsonKey.put(KMSRESTConstants.CIPHER_FIELD, options.getCipher());\n    jsonKey.put(KMSRESTConstants.LENGTH_FIELD, options.getBitLength());\n    if (material !\u003d null) {\n      jsonKey.put(KMSRESTConstants.MATERIAL_FIELD,\n          Base64.encodeBase64String(material));\n    }\n    if (options.getDescription() !\u003d null) {\n      jsonKey.put(KMSRESTConstants.DESCRIPTION_FIELD,\n          options.getDescription());\n    }\n    URL url \u003d createURL(KMSRESTConstants.KEYS_RESOURCE, null, null, null);\n    HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n    Map response \u003d call(conn, jsonKey, HttpURLConnection.HTTP_CREATED,\n        Map.class);\n    return parseJSONKeyVersion(response);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}