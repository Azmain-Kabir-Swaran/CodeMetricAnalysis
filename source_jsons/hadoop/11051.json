{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockReceiver.java",
  "functionName": "computePartialChunkCrc",
  "functionId": "computePartialChunkCrc___blkoff-long__ckoff-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
  "functionStartLine": 1157,
  "functionEndLine": 1202,
  "numCommitsSeen": 160,
  "timeTaken": 8956,
  "changeHistory": [
    "df983b524ab68ea0c70cee9033bfff2d28052cbf",
    "dcedb72af468128458e597f08d22f5c34b744ae5",
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
    "b7f4a3156c0f5c600816c469637237ba6c9b330c",
    "463aec11718e47d4aabb86a7a539cb973460aae6",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "662b1887af4e39f3eadd7dda4953c7f2529b43bc",
    "f84552ac35bb5221290be68fece9c779ebeaf4bc",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "df983b524ab68ea0c70cee9033bfff2d28052cbf": "Ybodychange",
    "dcedb72af468128458e597f08d22f5c34b744ae5": "Ybodychange",
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e": "Ybodychange",
    "b7f4a3156c0f5c600816c469637237ba6c9b330c": "Ybodychange",
    "463aec11718e47d4aabb86a7a539cb973460aae6": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "662b1887af4e39f3eadd7dda4953c7f2529b43bc": "Ybodychange",
    "f84552ac35bb5221290be68fece9c779ebeaf4bc": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df983b524ab68ea0c70cee9033bfff2d28052cbf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
      "commitDate": "06/12/16 11:05 AM",
      "commitName": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "05/12/16 12:44 PM",
      "commitNameOld": "dcedb72af468128458e597f08d22f5c34b744ae5",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n       throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n     blkoff \u003d blkoff - sizePartialChunk;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"computePartialChunkCrc for \" + block\n           + \": sizePartialChunk\u003d\" + sizePartialChunk\n           + \", block offset\u003d\" + blkoff\n           + \", metafile offset\u003d\" + ckoff);\n     }\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n     try (ReplicaInputStreams instr \u003d\n         datanode.data.getTmpInputStreams(block, blkoff, ckoff)) {\n-      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n+      instr.readDataFully(buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n-      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n+      instr.readChecksumFully(crcbuf, 0, crcbuf.length);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n     final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n     }\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n     return partialCrc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n      throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    blkoff \u003d blkoff - sizePartialChunk;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"computePartialChunkCrc for \" + block\n          + \": sizePartialChunk\u003d\" + sizePartialChunk\n          + \", block offset\u003d\" + blkoff\n          + \", metafile offset\u003d\" + ckoff);\n    }\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    try (ReplicaInputStreams instr \u003d\n        datanode.data.getTmpInputStreams(block, blkoff, ckoff)) {\n      instr.readDataFully(buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      instr.readChecksumFully(crcbuf, 0, crcbuf.length);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n    }\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n    return partialCrc;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "dcedb72af468128458e597f08d22f5c34b744ae5": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit aeecfa24f4fb6af289920cbf8830c394e66bd78e.\n",
      "commitDate": "05/12/16 12:44 PM",
      "commitName": "dcedb72af468128458e597f08d22f5c34b744ae5",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "29/11/16 8:52 PM",
      "commitNameOld": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 5.66,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n       throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n     blkoff \u003d blkoff - sizePartialChunk;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"computePartialChunkCrc for \" + block\n           + \": sizePartialChunk\u003d\" + sizePartialChunk\n           + \", block offset\u003d\" + blkoff\n           + \", metafile offset\u003d\" + ckoff);\n     }\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n     try (ReplicaInputStreams instr \u003d\n         datanode.data.getTmpInputStreams(block, blkoff, ckoff)) {\n-      instr.readDataFully(buf, 0, sizePartialChunk);\n+      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n-      instr.readChecksumFully(crcbuf, 0, crcbuf.length);\n+      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n     final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n     }\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n     return partialCrc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n      throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    blkoff \u003d blkoff - sizePartialChunk;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"computePartialChunkCrc for \" + block\n          + \": sizePartialChunk\u003d\" + sizePartialChunk\n          + \", block offset\u003d\" + blkoff\n          + \", metafile offset\u003d\" + ckoff);\n    }\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    try (ReplicaInputStreams instr \u003d\n        datanode.data.getTmpInputStreams(block, blkoff, ckoff)) {\n      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n    }\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n    return partialCrc;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
      "commitDate": "29/11/16 8:52 PM",
      "commitName": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "13/09/16 12:54 PM",
      "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 77.37,
      "commitsBetweenForRepo": 595,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n       throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n     blkoff \u003d blkoff - sizePartialChunk;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"computePartialChunkCrc for \" + block\n           + \": sizePartialChunk\u003d\" + sizePartialChunk\n           + \", block offset\u003d\" + blkoff\n           + \", metafile offset\u003d\" + ckoff);\n     }\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n     try (ReplicaInputStreams instr \u003d\n         datanode.data.getTmpInputStreams(block, blkoff, ckoff)) {\n-      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n+      instr.readDataFully(buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n-      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n+      instr.readChecksumFully(crcbuf, 0, crcbuf.length);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n     final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n     }\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n     return partialCrc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n      throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    blkoff \u003d blkoff - sizePartialChunk;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"computePartialChunkCrc for \" + block\n          + \": sizePartialChunk\u003d\" + sizePartialChunk\n          + \", block offset\u003d\" + blkoff\n          + \", metafile offset\u003d\" + ckoff);\n    }\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    try (ReplicaInputStreams instr \u003d\n        datanode.data.getTmpInputStreams(block, blkoff, ckoff)) {\n      instr.readDataFully(buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      instr.readChecksumFully(crcbuf, 0, crcbuf.length);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n    }\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n    return partialCrc;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "b7f4a3156c0f5c600816c469637237ba6c9b330c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7496. Fix FsVolume removal race conditions on the DataNode by reference-counting the volume instances (lei via cmccabe)\n",
      "commitDate": "20/01/15 7:05 PM",
      "commitName": "b7f4a3156c0f5c600816c469637237ba6c9b330c",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "11/12/14 12:36 PM",
      "commitNameOld": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 40.27,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,46 @@\n   private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n       throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n     blkoff \u003d blkoff - sizePartialChunk;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"computePartialChunkCrc for \" + block\n           + \": sizePartialChunk\u003d\" + sizePartialChunk\n           + \", block offset\u003d\" + blkoff\n           + \", metafile offset\u003d\" + ckoff);\n     }\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n-    ReplicaInputStreams instr \u003d null;\n-    try { \n-      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n+    try (ReplicaInputStreams instr \u003d\n+        datanode.data.getTmpInputStreams(block, blkoff, ckoff)) {\n       IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n       IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n-    } finally {\n-      IOUtils.closeStream(instr);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n     final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n     }\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n     return partialCrc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n      throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    blkoff \u003d blkoff - sizePartialChunk;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"computePartialChunkCrc for \" + block\n          + \": sizePartialChunk\u003d\" + sizePartialChunk\n          + \", block offset\u003d\" + blkoff\n          + \", metafile offset\u003d\" + ckoff);\n    }\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    try (ReplicaInputStreams instr \u003d\n        datanode.data.getTmpInputStreams(block, blkoff, ckoff)) {\n      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n    }\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n    return partialCrc;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "463aec11718e47d4aabb86a7a539cb973460aae6": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
      "commitDate": "27/10/14 9:38 AM",
      "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
          "commitDate": "27/10/14 9:38 AM",
          "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
          "commitAuthor": "cnauroth",
          "commitDateOld": "22/10/14 1:38 PM",
          "commitNameOld": "7b0f9bb2583cd9b7274f1e31c173c1c6a7ce467b",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 4.83,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,49 @@\n-  private void computePartialChunkCrc(long blkoff, long ckoff, \n-                                      int bytesPerChecksum) throws IOException {\n+  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n+      throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n-    int checksumSize \u003d diskChecksum.getChecksumSize();\n     blkoff \u003d blkoff - sizePartialChunk;\n-    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n-              sizePartialChunk + \" \" + block +\n-              \" block offset \" + blkoff +\n-              \" metafile offset \" + ckoff);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"computePartialChunkCrc for \" + block\n+          + \": sizePartialChunk\u003d\" + sizePartialChunk\n+          + \", block offset\u003d\" + blkoff\n+          + \", metafile offset\u003d\" + ckoff);\n+    }\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n     ReplicaInputStreams instr \u003d null;\n     try { \n       instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n       IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n       IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n     } finally {\n       IOUtils.closeStream(instr);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n-    partialCrc \u003d DataChecksum.newDataChecksum(\n+    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n-    LOG.info(\"Read in partial CRC chunk from disk for \" + block);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n+    }\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n+    return partialCrc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n      throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    blkoff \u003d blkoff - sizePartialChunk;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"computePartialChunkCrc for \" + block\n          + \": sizePartialChunk\u003d\" + sizePartialChunk\n          + \", block offset\u003d\" + blkoff\n          + \", metafile offset\u003d\" + ckoff);\n    }\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    ReplicaInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n    }\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n    return partialCrc;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
          "extendedDetails": {
            "oldValue": "[blkoff-long, ckoff-long, bytesPerChecksum-int]",
            "newValue": "[blkoff-long, ckoff-long]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
          "commitDate": "27/10/14 9:38 AM",
          "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
          "commitAuthor": "cnauroth",
          "commitDateOld": "22/10/14 1:38 PM",
          "commitNameOld": "7b0f9bb2583cd9b7274f1e31c173c1c6a7ce467b",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 4.83,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,49 @@\n-  private void computePartialChunkCrc(long blkoff, long ckoff, \n-                                      int bytesPerChecksum) throws IOException {\n+  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n+      throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n-    int checksumSize \u003d diskChecksum.getChecksumSize();\n     blkoff \u003d blkoff - sizePartialChunk;\n-    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n-              sizePartialChunk + \" \" + block +\n-              \" block offset \" + blkoff +\n-              \" metafile offset \" + ckoff);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"computePartialChunkCrc for \" + block\n+          + \": sizePartialChunk\u003d\" + sizePartialChunk\n+          + \", block offset\u003d\" + blkoff\n+          + \", metafile offset\u003d\" + ckoff);\n+    }\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n     ReplicaInputStreams instr \u003d null;\n     try { \n       instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n       IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n       IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n     } finally {\n       IOUtils.closeStream(instr);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n-    partialCrc \u003d DataChecksum.newDataChecksum(\n+    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n-    LOG.info(\"Read in partial CRC chunk from disk for \" + block);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n+    }\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n+    return partialCrc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n      throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    blkoff \u003d blkoff - sizePartialChunk;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"computePartialChunkCrc for \" + block\n          + \": sizePartialChunk\u003d\" + sizePartialChunk\n          + \", block offset\u003d\" + blkoff\n          + \", metafile offset\u003d\" + ckoff);\n    }\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    ReplicaInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n    }\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n    return partialCrc;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Checksum"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
          "commitDate": "27/10/14 9:38 AM",
          "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
          "commitAuthor": "cnauroth",
          "commitDateOld": "22/10/14 1:38 PM",
          "commitNameOld": "7b0f9bb2583cd9b7274f1e31c173c1c6a7ce467b",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 4.83,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,49 @@\n-  private void computePartialChunkCrc(long blkoff, long ckoff, \n-                                      int bytesPerChecksum) throws IOException {\n+  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n+      throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n-    int checksumSize \u003d diskChecksum.getChecksumSize();\n     blkoff \u003d blkoff - sizePartialChunk;\n-    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n-              sizePartialChunk + \" \" + block +\n-              \" block offset \" + blkoff +\n-              \" metafile offset \" + ckoff);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"computePartialChunkCrc for \" + block\n+          + \": sizePartialChunk\u003d\" + sizePartialChunk\n+          + \", block offset\u003d\" + blkoff\n+          + \", metafile offset\u003d\" + ckoff);\n+    }\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n     ReplicaInputStreams instr \u003d null;\n     try { \n       instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n       IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n       IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n     } finally {\n       IOUtils.closeStream(instr);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n-    partialCrc \u003d DataChecksum.newDataChecksum(\n+    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n-    LOG.info(\"Read in partial CRC chunk from disk for \" + block);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n+    }\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n+    return partialCrc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Checksum computePartialChunkCrc(long blkoff, long ckoff)\n      throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    blkoff \u003d blkoff - sizePartialChunk;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"computePartialChunkCrc for \" + block\n          + \": sizePartialChunk\u003d\" + sizePartialChunk\n          + \", block offset\u003d\" + blkoff\n          + \", metafile offset\u003d\" + ckoff);\n    }\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    ReplicaInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    final Checksum partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Read in partial CRC chunk from disk for \" + block);\n    }\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n    return partialCrc;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
          "extendedDetails": {}
        }
      ]
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "09/08/12 2:31 PM",
      "commitNameOld": "9ea7c06468d236452f03c38a31d1a45f7f09dc50",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 80.07,
      "commitsBetweenForRepo": 496,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n   private void computePartialChunkCrc(long blkoff, long ckoff, \n                                       int bytesPerChecksum) throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n     int checksumSize \u003d diskChecksum.getChecksumSize();\n     blkoff \u003d blkoff - sizePartialChunk;\n     LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n-              sizePartialChunk +\n-              \" block \" + block +\n-              \" offset in block \" + blkoff +\n-              \" offset in metafile \" + ckoff);\n+              sizePartialChunk + \" \" + block +\n+              \" block offset \" + blkoff +\n+              \" metafile offset \" + ckoff);\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n     ReplicaInputStreams instr \u003d null;\n     try { \n       instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n       IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n       IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n     } finally {\n       IOUtils.closeStream(instr);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n     partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n-    LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n+    LOG.info(\"Read in partial CRC chunk from disk for \" + block);\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computePartialChunkCrc(long blkoff, long ckoff, \n                                      int bytesPerChecksum) throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    int checksumSize \u003d diskChecksum.getChecksumSize();\n    blkoff \u003d blkoff - sizePartialChunk;\n    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n              sizePartialChunk + \" \" + block +\n              \" block offset \" + blkoff +\n              \" metafile offset \" + ckoff);\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    ReplicaInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    LOG.info(\"Read in partial CRC chunk from disk for \" + block);\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "662b1887af4e39f3eadd7dda4953c7f2529b43bc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3088. Move FSDatasetInterface inner classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301661 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/03/12 10:32 AM",
      "commitName": "662b1887af4e39f3eadd7dda4953c7f2529b43bc",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/02/12 5:49 PM",
      "commitNameOld": "c14bb61a82f58b8b3ae37c6a6cc4fabe9f65dbec",
      "commitAuthorOld": "",
      "daysBetweenCommits": 35.66,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private void computePartialChunkCrc(long blkoff, long ckoff, \n                                       int bytesPerChecksum) throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n     int checksumSize \u003d diskChecksum.getChecksumSize();\n     blkoff \u003d blkoff - sizePartialChunk;\n     LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n               sizePartialChunk +\n               \" block \" + block +\n               \" offset in block \" + blkoff +\n               \" offset in metafile \" + ckoff);\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n-    FSDataset.BlockInputStreams instr \u003d null;\n+    ReplicaInputStreams instr \u003d null;\n     try { \n       instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n-      IOUtils.readFully(instr.dataIn, buf, 0, sizePartialChunk);\n+      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n-      IOUtils.readFully(instr.checksumIn, crcbuf, 0, crcbuf.length);\n+      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n     } finally {\n       IOUtils.closeStream(instr);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n     partialCrc \u003d DataChecksum.newDataChecksum(\n         diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n     LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computePartialChunkCrc(long blkoff, long ckoff, \n                                      int bytesPerChecksum) throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    int checksumSize \u003d diskChecksum.getChecksumSize();\n    blkoff \u003d blkoff - sizePartialChunk;\n    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n              sizePartialChunk +\n              \" block \" + block +\n              \" offset in block \" + blkoff +\n              \" offset in metafile \" + ckoff);\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    ReplicaInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "f84552ac35bb5221290be68fece9c779ebeaf4bc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2130. Switch default checksum to CRC32C. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1196889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/11/11 5:35 PM",
      "commitName": "f84552ac35bb5221290be68fece9c779ebeaf4bc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "31/10/11 10:17 PM",
      "commitNameOld": "1c940637b14eee777a65d153d0d712a1aea3866c",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.8,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   private void computePartialChunkCrc(long blkoff, long ckoff, \n                                       int bytesPerChecksum) throws IOException {\n \n     // find offset of the beginning of partial chunk.\n     //\n     int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n-    int checksumSize \u003d checksum.getChecksumSize();\n+    int checksumSize \u003d diskChecksum.getChecksumSize();\n     blkoff \u003d blkoff - sizePartialChunk;\n     LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n               sizePartialChunk +\n               \" block \" + block +\n               \" offset in block \" + blkoff +\n               \" offset in metafile \" + ckoff);\n \n     // create an input stream from the block file\n     // and read in partial crc chunk into temporary buffer\n     //\n     byte[] buf \u003d new byte[sizePartialChunk];\n     byte[] crcbuf \u003d new byte[checksumSize];\n     FSDataset.BlockInputStreams instr \u003d null;\n     try { \n       instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n       IOUtils.readFully(instr.dataIn, buf, 0, sizePartialChunk);\n \n       // open meta file and read in crc value computer earlier\n       IOUtils.readFully(instr.checksumIn, crcbuf, 0, crcbuf.length);\n     } finally {\n       IOUtils.closeStream(instr);\n     }\n \n     // compute crc of partial chunk from data read in the block file.\n-    partialCrc \u003d new PureJavaCrc32();\n+    partialCrc \u003d DataChecksum.newDataChecksum(\n+        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n     partialCrc.update(buf, 0, sizePartialChunk);\n     LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n \n     // paranoia! verify that the pre-computed crc matches what we\n     // recalculated just now\n     if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n       String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                    \" does not match value computed the \" +\n                    \" last time file was closed \" +\n                    checksum2long(crcbuf);\n       throw new IOException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computePartialChunkCrc(long blkoff, long ckoff, \n                                      int bytesPerChecksum) throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    int checksumSize \u003d diskChecksum.getChecksumSize();\n    blkoff \u003d blkoff - sizePartialChunk;\n    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n              sizePartialChunk +\n              \" block \" + block +\n              \" offset in block \" + blkoff +\n              \" offset in metafile \" + ckoff);\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    FSDataset.BlockInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.dataIn, buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.checksumIn, crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    partialCrc \u003d DataChecksum.newDataChecksum(\n        diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum());\n    partialCrc.update(buf, 0, sizePartialChunk);\n    LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void computePartialChunkCrc(long blkoff, long ckoff, \n                                      int bytesPerChecksum) throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    int checksumSize \u003d checksum.getChecksumSize();\n    blkoff \u003d blkoff - sizePartialChunk;\n    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n              sizePartialChunk +\n              \" block \" + block +\n              \" offset in block \" + blkoff +\n              \" offset in metafile \" + ckoff);\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    FSDataset.BlockInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.dataIn, buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.checksumIn, crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    partialCrc \u003d new PureJavaCrc32();\n    partialCrc.update(buf, 0, sizePartialChunk);\n    LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void computePartialChunkCrc(long blkoff, long ckoff, \n                                      int bytesPerChecksum) throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    int checksumSize \u003d checksum.getChecksumSize();\n    blkoff \u003d blkoff - sizePartialChunk;\n    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n              sizePartialChunk +\n              \" block \" + block +\n              \" offset in block \" + blkoff +\n              \" offset in metafile \" + ckoff);\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    FSDataset.BlockInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.dataIn, buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.checksumIn, crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    partialCrc \u003d new PureJavaCrc32();\n    partialCrc.update(buf, 0, sizePartialChunk);\n    LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,45 @@\n+  private void computePartialChunkCrc(long blkoff, long ckoff, \n+                                      int bytesPerChecksum) throws IOException {\n+\n+    // find offset of the beginning of partial chunk.\n+    //\n+    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n+    int checksumSize \u003d checksum.getChecksumSize();\n+    blkoff \u003d blkoff - sizePartialChunk;\n+    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n+              sizePartialChunk +\n+              \" block \" + block +\n+              \" offset in block \" + blkoff +\n+              \" offset in metafile \" + ckoff);\n+\n+    // create an input stream from the block file\n+    // and read in partial crc chunk into temporary buffer\n+    //\n+    byte[] buf \u003d new byte[sizePartialChunk];\n+    byte[] crcbuf \u003d new byte[checksumSize];\n+    FSDataset.BlockInputStreams instr \u003d null;\n+    try { \n+      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n+      IOUtils.readFully(instr.dataIn, buf, 0, sizePartialChunk);\n+\n+      // open meta file and read in crc value computer earlier\n+      IOUtils.readFully(instr.checksumIn, crcbuf, 0, crcbuf.length);\n+    } finally {\n+      IOUtils.closeStream(instr);\n+    }\n+\n+    // compute crc of partial chunk from data read in the block file.\n+    partialCrc \u003d new PureJavaCrc32();\n+    partialCrc.update(buf, 0, sizePartialChunk);\n+    LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n+\n+    // paranoia! verify that the pre-computed crc matches what we\n+    // recalculated just now\n+    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n+      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n+                   \" does not match value computed the \" +\n+                   \" last time file was closed \" +\n+                   checksum2long(crcbuf);\n+      throw new IOException(msg);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void computePartialChunkCrc(long blkoff, long ckoff, \n                                      int bytesPerChecksum) throws IOException {\n\n    // find offset of the beginning of partial chunk.\n    //\n    int sizePartialChunk \u003d (int) (blkoff % bytesPerChecksum);\n    int checksumSize \u003d checksum.getChecksumSize();\n    blkoff \u003d blkoff - sizePartialChunk;\n    LOG.info(\"computePartialChunkCrc sizePartialChunk \" + \n              sizePartialChunk +\n              \" block \" + block +\n              \" offset in block \" + blkoff +\n              \" offset in metafile \" + ckoff);\n\n    // create an input stream from the block file\n    // and read in partial crc chunk into temporary buffer\n    //\n    byte[] buf \u003d new byte[sizePartialChunk];\n    byte[] crcbuf \u003d new byte[checksumSize];\n    FSDataset.BlockInputStreams instr \u003d null;\n    try { \n      instr \u003d datanode.data.getTmpInputStreams(block, blkoff, ckoff);\n      IOUtils.readFully(instr.dataIn, buf, 0, sizePartialChunk);\n\n      // open meta file and read in crc value computer earlier\n      IOUtils.readFully(instr.checksumIn, crcbuf, 0, crcbuf.length);\n    } finally {\n      IOUtils.closeStream(instr);\n    }\n\n    // compute crc of partial chunk from data read in the block file.\n    partialCrc \u003d new PureJavaCrc32();\n    partialCrc.update(buf, 0, sizePartialChunk);\n    LOG.info(\"Read in partial CRC chunk from disk for block \" + block);\n\n    // paranoia! verify that the pre-computed crc matches what we\n    // recalculated just now\n    if (partialCrc.getValue() !\u003d checksum2long(crcbuf)) {\n      String msg \u003d \"Partial CRC \" + partialCrc.getValue() +\n                   \" does not match value computed the \" +\n                   \" last time file was closed \" +\n                   checksum2long(crcbuf);\n      throw new IOException(msg);\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java"
    }
  }
}