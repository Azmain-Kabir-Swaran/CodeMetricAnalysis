{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirEncryptionZoneOp.java",
  "functionName": "createEncryptionZone",
  "functionId": "createEncryptionZone___fsd-FSDirectory(modifiers-final)__srcArg-String(modifiers-final)__pc-FSPermissionChecker(modifiers-final)__cipher-String(modifiers-final)__keyName-String(modifiers-final)__logRetryCache-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
  "functionStartLine": 157,
  "functionEndLine": 178,
  "numCommitsSeen": 1056,
  "timeTaken": 19186,
  "changeHistory": [
    "9b90e52f1ec22c18cd535af2a569defcef65b093",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "71a81b6257c0000475ad62eb69292a20d45d269c",
    "7817674a3a4d097b647dd77f1345787dd376d5ea",
    "65f2a4ee600dfffa5203450261da3c1989de25a9",
    "c95b878abf313507666ea018f9e6033c4c166e10",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
    "1737950d0fc83c68f386881b843c41b0b1e342de"
  ],
  "changeHistoryShort": {
    "9b90e52f1ec22c18cd535af2a569defcef65b093": "Yreturntypechange",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": "Ybodychange",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "71a81b6257c0000475ad62eb69292a20d45d269c": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparametermetachange,Yrename,Yparameterchange)",
    "7817674a3a4d097b647dd77f1345787dd376d5ea": "Ybodychange",
    "65f2a4ee600dfffa5203450261da3c1989de25a9": "Ybodychange",
    "c95b878abf313507666ea018f9e6033c4c166e10": "Ybodychange",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ybodychange",
    "1737950d0fc83c68f386881b843c41b0b1e342de": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "9b90e52f1ec22c18cd535af2a569defcef65b093": {
      "type": "Yreturntypechange",
      "commitMessage": "HDFS-11641. Reduce cost of audit logging by using FileStatus instead of HdfsFileStatus. Contributed by Daryn Sharp.\n",
      "commitDate": "16/05/17 9:28 AM",
      "commitName": "9b90e52f1ec22c18cd535af2a569defcef65b093",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "24/10/16 3:14 PM",
      "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 203.76,
      "commitsBetweenForRepo": 1218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n-  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n+  static FileStatus createEncryptionZone(final FSDirectory fsd,\n       final String srcArg, final FSPermissionChecker pc, final String cipher,\n       final String keyName, final boolean logRetryCache) throws IOException {\n     final CipherSuite suite \u003d CipherSuite.convert(cipher);\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     // For now this is hard coded, as we only support one method.\n     final CryptoProtocolVersion version \u003d\n         CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n     final INodesInPath iip;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, srcArg, DirOp.WRITE);\n       final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(iip, suite,\n           version, keyName);\n       xAttrs.add(ezXAttr);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(iip.getPath(), xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    final INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, srcArg, DirOp.WRITE);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(iip, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(iip.getPath(), xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {
        "oldValue": "HdfsFileStatus",
        "newValue": "FileStatus"
      }
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 1:11 PM",
      "commitNameOld": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n       final String srcArg, final FSPermissionChecker pc, final String cipher,\n       final String keyName, final boolean logRetryCache) throws IOException {\n     final CipherSuite suite \u003d CipherSuite.convert(cipher);\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     // For now this is hard coded, as we only support one method.\n     final CryptoProtocolVersion version \u003d\n         CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n     final INodesInPath iip;\n     fsd.writeLock();\n     try {\n-      iip \u003d fsd.resolvePathForWrite(pc, srcArg);\n+      iip \u003d fsd.resolvePath(pc, srcArg, DirOp.WRITE);\n       final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(iip, suite,\n           version, keyName);\n       xAttrs.add(ezXAttr);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(iip.getPath(), xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    final INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, srcArg, DirOp.WRITE);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(iip, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(iip.getPath(), xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
      "commitDate": "06/10/16 1:11 PM",
      "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "30/09/16 6:44 AM",
      "commitNameOld": "0670149c88852cd7c4d6774bff06c7c588558739",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.27,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n       final String srcArg, final FSPermissionChecker pc, final String cipher,\n       final String keyName, final boolean logRetryCache) throws IOException {\n     final CipherSuite suite \u003d CipherSuite.convert(cipher);\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n-    final String src;\n     // For now this is hard coded, as we only support one method.\n     final CryptoProtocolVersion version \u003d\n         CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n+    final INodesInPath iip;\n     fsd.writeLock();\n     try {\n-      final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg);\n-      src \u003d iip.getPath();\n-      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n+      iip \u003d fsd.resolvePathForWrite(pc, srcArg);\n+      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(iip, suite,\n           version, keyName);\n       xAttrs.add(ezXAttr);\n     } finally {\n       fsd.writeUnlock();\n     }\n-    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n+    fsd.getEditLog().logSetXAttrs(iip.getPath(), xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    final INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePathForWrite(pc, srcArg);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(iip, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(iip.getPath(), xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 2:45 PM",
      "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n       final String srcArg, final FSPermissionChecker pc, final String cipher,\n       final String keyName, final boolean logRetryCache) throws IOException {\n     final CipherSuite suite \u003d CipherSuite.convert(cipher);\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     final String src;\n     // For now this is hard coded, as we only support one method.\n     final CryptoProtocolVersion version \u003d\n         CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n     fsd.writeLock();\n     try {\n-      src \u003d fsd.resolvePath(pc, srcArg);\n+      final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg);\n+      src \u003d iip.getPath();\n       final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n       xAttrs.add(ezXAttr);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg);\n      src \u003d iip.getPath();\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "10/08/16 3:49 PM",
      "commitNameOld": "ec289bbeceff064ad24e189db20a3e0a296822c1",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 4.96,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,23 @@\n   static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n       final String srcArg, final FSPermissionChecker pc, final String cipher,\n       final String keyName, final boolean logRetryCache) throws IOException {\n-    final byte[][] pathComponents \u003d FSDirectory\n-        .getPathComponentsForReservedPath(srcArg);\n     final CipherSuite suite \u003d CipherSuite.convert(cipher);\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     final String src;\n     // For now this is hard coded, as we only support one method.\n     final CryptoProtocolVersion version \u003d\n         CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n     fsd.writeLock();\n     try {\n-      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      src \u003d fsd.resolvePath(pc, srcArg);\n       final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n       xAttrs.add(ezXAttr);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, srcArg);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "71a81b6257c0000475ad62eb69292a20d45d269c": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparametermetachange,Yrename,Yparameterchange)",
      "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
      "commitDate": "24/09/15 8:34 AM",
      "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  private void createEncryptionZoneInt(final String srcArg, String cipher,\n-      String keyName, final boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    HdfsFileStatus resultingStat \u003d null;\n-    checkSuperuserPrivilege();\n-    final byte[][] pathComponents \u003d\n-      FSDirectory.getPathComponentsForReservedPath(src);\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n-    try {\n-      checkSuperuserPrivilege();\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n+      final String srcArg, final FSPermissionChecker pc, final String cipher,\n+      final String keyName, final boolean logRetryCache) throws IOException {\n+    final byte[][] pathComponents \u003d FSDirectory\n+        .getPathComponentsForReservedPath(srcArg);\n+    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    final String src;\n+    // For now this is hard coded, as we only support one method.\n+    final CryptoProtocolVersion version \u003d\n+        CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n-      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n-      // For now this is hardcoded, as we only support one method.\n-      final CryptoProtocolVersion version \u003d\n-          CryptoProtocolVersion.ENCRYPTION_ZONES;\n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n+    fsd.writeLock();\n+    try {\n+      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n-      resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
            "oldMethodName": "createEncryptionZoneInt",
            "newMethodName": "createEncryptionZone"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  private void createEncryptionZoneInt(final String srcArg, String cipher,\n-      String keyName, final boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    HdfsFileStatus resultingStat \u003d null;\n-    checkSuperuserPrivilege();\n-    final byte[][] pathComponents \u003d\n-      FSDirectory.getPathComponentsForReservedPath(src);\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n-    try {\n-      checkSuperuserPrivilege();\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n+      final String srcArg, final FSPermissionChecker pc, final String cipher,\n+      final String keyName, final boolean logRetryCache) throws IOException {\n+    final byte[][] pathComponents \u003d FSDirectory\n+        .getPathComponentsForReservedPath(srcArg);\n+    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    final String src;\n+    // For now this is hard coded, as we only support one method.\n+    final CryptoProtocolVersion version \u003d\n+        CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n-      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n-      // For now this is hardcoded, as we only support one method.\n-      final CryptoProtocolVersion version \u003d\n-          CryptoProtocolVersion.ENCRYPTION_ZONES;\n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n+    fsd.writeLock();\n+    try {\n+      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n-      resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "HdfsFileStatus"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  private void createEncryptionZoneInt(final String srcArg, String cipher,\n-      String keyName, final boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    HdfsFileStatus resultingStat \u003d null;\n-    checkSuperuserPrivilege();\n-    final byte[][] pathComponents \u003d\n-      FSDirectory.getPathComponentsForReservedPath(src);\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n-    try {\n-      checkSuperuserPrivilege();\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n+      final String srcArg, final FSPermissionChecker pc, final String cipher,\n+      final String keyName, final boolean logRetryCache) throws IOException {\n+    final byte[][] pathComponents \u003d FSDirectory\n+        .getPathComponentsForReservedPath(srcArg);\n+    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    final String src;\n+    // For now this is hard coded, as we only support one method.\n+    final CryptoProtocolVersion version \u003d\n+        CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n-      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n-      // For now this is hardcoded, as we only support one method.\n-      final CryptoProtocolVersion version \u003d\n-          CryptoProtocolVersion.ENCRYPTION_ZONES;\n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n+    fsd.writeLock();\n+    try {\n+      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n-      resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  private void createEncryptionZoneInt(final String srcArg, String cipher,\n-      String keyName, final boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    HdfsFileStatus resultingStat \u003d null;\n-    checkSuperuserPrivilege();\n-    final byte[][] pathComponents \u003d\n-      FSDirectory.getPathComponentsForReservedPath(src);\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n-    try {\n-      checkSuperuserPrivilege();\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n+      final String srcArg, final FSPermissionChecker pc, final String cipher,\n+      final String keyName, final boolean logRetryCache) throws IOException {\n+    final byte[][] pathComponents \u003d FSDirectory\n+        .getPathComponentsForReservedPath(srcArg);\n+    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    final String src;\n+    // For now this is hard coded, as we only support one method.\n+    final CryptoProtocolVersion version \u003d\n+        CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n-      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n-      // For now this is hardcoded, as we only support one method.\n-      final CryptoProtocolVersion version \u003d\n-          CryptoProtocolVersion.ENCRYPTION_ZONES;\n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n+    fsd.writeLock();\n+    try {\n+      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n-      resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  private void createEncryptionZoneInt(final String srcArg, String cipher,\n-      String keyName, final boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    HdfsFileStatus resultingStat \u003d null;\n-    checkSuperuserPrivilege();\n-    final byte[][] pathComponents \u003d\n-      FSDirectory.getPathComponentsForReservedPath(src);\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n-    try {\n-      checkSuperuserPrivilege();\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n+      final String srcArg, final FSPermissionChecker pc, final String cipher,\n+      final String keyName, final boolean logRetryCache) throws IOException {\n+    final byte[][] pathComponents \u003d FSDirectory\n+        .getPathComponentsForReservedPath(srcArg);\n+    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    final String src;\n+    // For now this is hard coded, as we only support one method.\n+    final CryptoProtocolVersion version \u003d\n+        CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n-      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n-      // For now this is hardcoded, as we only support one method.\n-      final CryptoProtocolVersion version \u003d\n-          CryptoProtocolVersion.ENCRYPTION_ZONES;\n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n+    fsd.writeLock();\n+    try {\n+      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n-      resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), cipher-String, keyName-String, logRetryCache-boolean(modifiers-final)]",
            "newValue": "[fsd-FSDirectory(modifiers-final), srcArg-String(modifiers-final), pc-FSPermissionChecker(modifiers-final), cipher-String(modifiers-final), keyName-String(modifiers-final), logRetryCache-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  private void createEncryptionZoneInt(final String srcArg, String cipher,\n-      String keyName, final boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    HdfsFileStatus resultingStat \u003d null;\n-    checkSuperuserPrivilege();\n-    final byte[][] pathComponents \u003d\n-      FSDirectory.getPathComponentsForReservedPath(src);\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n-    try {\n-      checkSuperuserPrivilege();\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n+      final String srcArg, final FSPermissionChecker pc, final String cipher,\n+      final String keyName, final boolean logRetryCache) throws IOException {\n+    final byte[][] pathComponents \u003d FSDirectory\n+        .getPathComponentsForReservedPath(srcArg);\n+    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    final String src;\n+    // For now this is hard coded, as we only support one method.\n+    final CryptoProtocolVersion version \u003d\n+        CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n-      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n-      // For now this is hardcoded, as we only support one method.\n-      final CryptoProtocolVersion version \u003d\n-          CryptoProtocolVersion.ENCRYPTION_ZONES;\n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n+    fsd.writeLock();\n+    try {\n+      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n-      resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "createEncryptionZoneInt",
            "newValue": "createEncryptionZone"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,25 @@\n-  private void createEncryptionZoneInt(final String srcArg, String cipher,\n-      String keyName, final boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    HdfsFileStatus resultingStat \u003d null;\n-    checkSuperuserPrivilege();\n-    final byte[][] pathComponents \u003d\n-      FSDirectory.getPathComponentsForReservedPath(src);\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n-    try {\n-      checkSuperuserPrivilege();\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n+      final String srcArg, final FSPermissionChecker pc, final String cipher,\n+      final String keyName, final boolean logRetryCache) throws IOException {\n+    final byte[][] pathComponents \u003d FSDirectory\n+        .getPathComponentsForReservedPath(srcArg);\n+    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    final String src;\n+    // For now this is hard coded, as we only support one method.\n+    final CryptoProtocolVersion version \u003d\n+        CryptoProtocolVersion.ENCRYPTION_ZONES;\n \n-      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n-      // For now this is hardcoded, as we only support one method.\n-      final CryptoProtocolVersion version \u003d\n-          CryptoProtocolVersion.ENCRYPTION_ZONES;\n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n+    fsd.writeLock();\n+    try {\n+      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n           version, keyName);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n-      resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createEncryptionZone(final FSDirectory fsd,\n      final String srcArg, final FSPermissionChecker pc, final String cipher,\n      final String keyName, final boolean logRetryCache) throws IOException {\n    final byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final CipherSuite suite \u003d CipherSuite.convert(cipher);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    final String src;\n    // For now this is hard coded, as we only support one method.\n    final CryptoProtocolVersion version \u003d\n        CryptoProtocolVersion.ENCRYPTION_ZONES;\n\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n      final XAttr ezXAttr \u003d fsd.ezManager.createEncryptionZone(src, suite,\n          version, keyName);\n      xAttrs.add(ezXAttr);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src, false);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), cipher-String, keyName-String, logRetryCache-boolean(modifiers-final)]",
            "newValue": "[fsd-FSDirectory(modifiers-final), srcArg-String(modifiers-final), pc-FSPermissionChecker(modifiers-final), cipher-String(modifiers-final), keyName-String(modifiers-final), logRetryCache-boolean(modifiers-final)]"
          }
        }
      ]
    },
    "7817674a3a4d097b647dd77f1345787dd376d5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7609. Avoid retry cache collision when Standby NameNode loading edits. Contributed by Ming Ma.\n",
      "commitDate": "29/05/15 11:05 AM",
      "commitName": "7817674a3a4d097b647dd77f1345787dd376d5ea",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/05/15 3:42 PM",
      "commitNameOld": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   private void createEncryptionZoneInt(final String srcArg, String cipher,\n       String keyName, final boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n     HdfsFileStatus resultingStat \u003d null;\n     checkSuperuserPrivilege();\n-    checkOperation(OperationCategory.WRITE);\n     final byte[][] pathComponents \u003d\n       FSDirectory.getPathComponentsForReservedPath(src);\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     try {\n       checkSuperuserPrivilege();\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n \n       final CipherSuite suite \u003d CipherSuite.convert(cipher);\n       // For now this is hardcoded, as we only support one method.\n       final CryptoProtocolVersion version \u003d\n           CryptoProtocolVersion.ENCRYPTION_ZONES;\n       final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n           version, keyName);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n       final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n       resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createEncryptionZoneInt(final String srcArg, String cipher,\n      String keyName, final boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    HdfsFileStatus resultingStat \u003d null;\n    checkSuperuserPrivilege();\n    final byte[][] pathComponents \u003d\n      FSDirectory.getPathComponentsForReservedPath(src);\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    try {\n      checkSuperuserPrivilege();\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n\n      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n      // For now this is hardcoded, as we only support one method.\n      final CryptoProtocolVersion version \u003d\n          CryptoProtocolVersion.ENCRYPTION_ZONES;\n      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n          version, keyName);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(ezXAttr);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n      resultingStat \u003d dir.getAuditFileInfo(iip);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "65f2a4ee600dfffa5203450261da3c1989de25a9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7543. Avoid path resolution when getting FileStatus for audit logs. Contributed by Haohui Mai.\n",
      "commitDate": "18/12/14 11:25 AM",
      "commitName": "65f2a4ee600dfffa5203450261da3c1989de25a9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/12/14 2:48 PM",
      "commitNameOld": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   private void createEncryptionZoneInt(final String srcArg, String cipher,\n       String keyName, final boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n     HdfsFileStatus resultingStat \u003d null;\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.WRITE);\n     final byte[][] pathComponents \u003d\n       FSDirectory.getPathComponentsForReservedPath(src);\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     try {\n       checkSuperuserPrivilege();\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n \n       final CipherSuite suite \u003d CipherSuite.convert(cipher);\n       // For now this is hardcoded, as we only support one method.\n       final CryptoProtocolVersion version \u003d\n           CryptoProtocolVersion.ENCRYPTION_ZONES;\n       final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n           version, keyName);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(src, false);\n+      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n+      resultingStat \u003d dir.getAuditFileInfo(iip);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createEncryptionZoneInt(final String srcArg, String cipher,\n      String keyName, final boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    HdfsFileStatus resultingStat \u003d null;\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.WRITE);\n    final byte[][] pathComponents \u003d\n      FSDirectory.getPathComponentsForReservedPath(src);\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    try {\n      checkSuperuserPrivilege();\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n\n      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n      // For now this is hardcoded, as we only support one method.\n      final CryptoProtocolVersion version \u003d\n          CryptoProtocolVersion.ENCRYPTION_ZONES;\n      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n          version, keyName);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(ezXAttr);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src, false);\n      resultingStat \u003d dir.getAuditFileInfo(iip);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "c95b878abf313507666ea018f9e6033c4c166e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7415. Move FSNameSystem.resolvePath() to FSDirectory. Contributed by Haohui Mai.\n",
      "commitDate": "20/11/14 7:23 PM",
      "commitName": "c95b878abf313507666ea018f9e6033c4c166e10",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 5:33 PM",
      "commitNameOld": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   private void createEncryptionZoneInt(final String srcArg, String cipher,\n       String keyName, final boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n     HdfsFileStatus resultingStat \u003d null;\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.WRITE);\n     final byte[][] pathComponents \u003d\n       FSDirectory.getPathComponentsForReservedPath(src);\n+    FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     try {\n       checkSuperuserPrivilege();\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n-      src \u003d resolvePath(src, pathComponents);\n+      src \u003d dir.resolvePath(pc, src, pathComponents);\n \n       final CipherSuite suite \u003d CipherSuite.convert(cipher);\n       // For now this is hardcoded, as we only support one method.\n       final CryptoProtocolVersion version \u003d\n           CryptoProtocolVersion.ENCRYPTION_ZONES;\n       final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n           version, keyName);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(src, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createEncryptionZoneInt(final String srcArg, String cipher,\n      String keyName, final boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    HdfsFileStatus resultingStat \u003d null;\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.WRITE);\n    final byte[][] pathComponents \u003d\n      FSDirectory.getPathComponentsForReservedPath(src);\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    try {\n      checkSuperuserPrivilege();\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n\n      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n      // For now this is hardcoded, as we only support one method.\n      final CryptoProtocolVersion version \u003d\n          CryptoProtocolVersion.ENCRYPTION_ZONES;\n      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n          version, keyName);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(ezXAttr);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(src, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/09/14 7:11 PM",
      "commitNameOld": "428a76663a0de5d0d74cc9525273ddc470760e44",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n   private void createEncryptionZoneInt(final String srcArg, String cipher,\n       String keyName, final boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n     HdfsFileStatus resultingStat \u003d null;\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.WRITE);\n     final byte[][] pathComponents \u003d\n       FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkSuperuserPrivilege();\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n       src \u003d resolvePath(src, pathComponents);\n \n       final CipherSuite suite \u003d CipherSuite.convert(cipher);\n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite, keyName);\n+      // For now this is hardcoded, as we only support one method.\n+      final CryptoProtocolVersion version \u003d\n+          CryptoProtocolVersion.ENCRYPTION_ZONES;\n+      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n+          version, keyName);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(src, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createEncryptionZoneInt(final String srcArg, String cipher,\n      String keyName, final boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    HdfsFileStatus resultingStat \u003d null;\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.WRITE);\n    final byte[][] pathComponents \u003d\n      FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkSuperuserPrivilege();\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n      src \u003d resolvePath(src, pathComponents);\n\n      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n      // For now this is hardcoded, as we only support one method.\n      final CryptoProtocolVersion version \u003d\n          CryptoProtocolVersion.ENCRYPTION_ZONES;\n      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite,\n          version, keyName);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(ezXAttr);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(src, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1737950d0fc83c68f386881b843c41b0b1e342de": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
      "commitDate": "21/09/14 9:29 PM",
      "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
          "commitDate": "21/09/14 9:29 PM",
          "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "19/09/14 3:07 PM",
          "commitNameOld": "9e355719653c5e7b48b601090634882e4f29a743",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 2.27,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-  private void createEncryptionZoneInt(final String srcArg, String keyName,\n-      final boolean logRetryCache) throws IOException {\n+  private void createEncryptionZoneInt(final String srcArg, String cipher,\n+      String keyName, final boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n     HdfsFileStatus resultingStat \u003d null;\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.WRITE);\n     final byte[][] pathComponents \u003d\n       FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkSuperuserPrivilege();\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n       src \u003d resolvePath(src, pathComponents);\n \n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, keyName);\n+      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite, keyName);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(src, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void createEncryptionZoneInt(final String srcArg, String cipher,\n      String keyName, final boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    HdfsFileStatus resultingStat \u003d null;\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.WRITE);\n    final byte[][] pathComponents \u003d\n      FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkSuperuserPrivilege();\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n      src \u003d resolvePath(src, pathComponents);\n\n      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite, keyName);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(ezXAttr);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(src, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), keyName-String, logRetryCache-boolean(modifiers-final)]",
            "newValue": "[srcArg-String(modifiers-final), cipher-String, keyName-String, logRetryCache-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
          "commitDate": "21/09/14 9:29 PM",
          "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "19/09/14 3:07 PM",
          "commitNameOld": "9e355719653c5e7b48b601090634882e4f29a743",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 2.27,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-  private void createEncryptionZoneInt(final String srcArg, String keyName,\n-      final boolean logRetryCache) throws IOException {\n+  private void createEncryptionZoneInt(final String srcArg, String cipher,\n+      String keyName, final boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n     HdfsFileStatus resultingStat \u003d null;\n     checkSuperuserPrivilege();\n     checkOperation(OperationCategory.WRITE);\n     final byte[][] pathComponents \u003d\n       FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkSuperuserPrivilege();\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n       src \u003d resolvePath(src, pathComponents);\n \n-      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, keyName);\n+      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n+      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite, keyName);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(ezXAttr);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(src, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void createEncryptionZoneInt(final String srcArg, String cipher,\n      String keyName, final boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    HdfsFileStatus resultingStat \u003d null;\n    checkSuperuserPrivilege();\n    checkOperation(OperationCategory.WRITE);\n    final byte[][] pathComponents \u003d\n      FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkSuperuserPrivilege();\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create encryption zone on \" + src);\n      src \u003d resolvePath(src, pathComponents);\n\n      final CipherSuite suite \u003d CipherSuite.convert(cipher);\n      final XAttr ezXAttr \u003d dir.createEncryptionZone(src, suite, keyName);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(ezXAttr);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(src, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createEncryptionZone\", srcArg, null, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}