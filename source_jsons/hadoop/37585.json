{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMTokenSecretManager.java",
  "functionName": "retrievePassword",
  "functionId": "retrievePassword___identifier-AMRMTokenIdentifier",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java",
  "functionStartLine": 240,
  "functionEndLine": 265,
  "numCommitsSeen": 11,
  "timeTaken": 2526,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe",
    "f1b831ccfbec37712522bef7a44f51bff0369003",
    "7d0c43d7cff6d250613a04fea9449f139988e901",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "fe7711df98b9dd16259f6534e8461a29f24caadc"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe": "Ybodychange",
    "f1b831ccfbec37712522bef7a44f51bff0369003": "Ymultichange(Ymodifierchange,Ybodychange)",
    "7d0c43d7cff6d250613a04fea9449f139988e901": "Ymultichange(Yfilerename,Yparameterchange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "fe7711df98b9dd16259f6534e8461a29f24caadc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n   public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n       throws InvalidToken {\n     this.readLock.lock();\n     try {\n       ApplicationAttemptId applicationAttemptId \u003d\n           identifier.getApplicationAttemptId();\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n-      }\n+      LOG.debug(\"Trying to retrieve password for {}\", applicationAttemptId);\n       if (!appAttemptSet.contains(applicationAttemptId)) {\n         throw new InvalidToken(applicationAttemptId\n             + \" not found in AMRMTokenSecretManager.\");\n       }\n       if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n         .getKeyId()) {\n         return createPassword(identifier.getBytes(),\n           this.currentMasterKey.getSecretKey());\n       } else if (nextMasterKey !\u003d null\n           \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n             .getKeyId()) {\n         return createPassword(identifier.getBytes(),\n           this.nextMasterKey.getSecretKey());\n       }\n       throw new InvalidToken(\"Invalid AMRMToken from \" + applicationAttemptId);\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n      throws InvalidToken {\n    this.readLock.lock();\n    try {\n      ApplicationAttemptId applicationAttemptId \u003d\n          identifier.getApplicationAttemptId();\n      LOG.debug(\"Trying to retrieve password for {}\", applicationAttemptId);\n      if (!appAttemptSet.contains(applicationAttemptId)) {\n        throw new InvalidToken(applicationAttemptId\n            + \" not found in AMRMTokenSecretManager.\");\n      }\n      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n        .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n          this.currentMasterKey.getSecretKey());\n      } else if (nextMasterKey !\u003d null\n          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n            .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n          this.nextMasterKey.getSecretKey());\n      }\n      throw new InvalidToken(\"Invalid AMRMToken from \" + applicationAttemptId);\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java",
      "extendedDetails": {}
    },
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2211. Persist AMRMToken master key in RMStateStore for RM recovery. Contributed by Xuan Gong\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/14 1:42 PM",
      "commitName": "d4fec3493351c619a0278929ae2d5c8cd67cbfbe",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/07/14 2:46 PM",
      "commitNameOld": "f1b831ccfbec37712522bef7a44f51bff0369003",
      "commitAuthorOld": "Xuan Gong",
      "daysBetweenCommits": 6.96,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n       throws InvalidToken {\n     this.readLock.lock();\n     try {\n       ApplicationAttemptId applicationAttemptId \u003d\n           identifier.getApplicationAttemptId();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n       }\n       if (!appAttemptSet.contains(applicationAttemptId)) {\n-        throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n-            + applicationAttemptId);\n+        throw new InvalidToken(applicationAttemptId\n+            + \" not found in AMRMTokenSecretManager.\");\n       }\n       if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n         .getKeyId()) {\n         return createPassword(identifier.getBytes(),\n           this.currentMasterKey.getSecretKey());\n       } else if (nextMasterKey !\u003d null\n           \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n             .getKeyId()) {\n         return createPassword(identifier.getBytes(),\n           this.nextMasterKey.getSecretKey());\n       }\n-      throw new InvalidToken(\"Given AMRMToken for application : \"\n-          + applicationAttemptId.toString()\n-          + \" seems to have been generated illegally.\");\n+      throw new InvalidToken(\"Invalid AMRMToken from \" + applicationAttemptId);\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n      throws InvalidToken {\n    this.readLock.lock();\n    try {\n      ApplicationAttemptId applicationAttemptId \u003d\n          identifier.getApplicationAttemptId();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n      }\n      if (!appAttemptSet.contains(applicationAttemptId)) {\n        throw new InvalidToken(applicationAttemptId\n            + \" not found in AMRMTokenSecretManager.\");\n      }\n      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n        .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n          this.currentMasterKey.getSecretKey());\n      } else if (nextMasterKey !\u003d null\n          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n            .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n          this.nextMasterKey.getSecretKey());\n      }\n      throw new InvalidToken(\"Invalid AMRMToken from \" + applicationAttemptId);\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java",
      "extendedDetails": {}
    },
    "f1b831ccfbec37712522bef7a44f51bff0369003": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2208. AMRMTokenManager need to have a way to roll over AMRMToken. Contributed by Xuan Gong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611820 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 2:46 PM",
      "commitName": "f1b831ccfbec37712522bef7a44f51bff0369003",
      "commitAuthor": "Xuan Gong",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2208. AMRMTokenManager need to have a way to roll over AMRMToken. Contributed by Xuan Gong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611820 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 2:46 PM",
          "commitName": "f1b831ccfbec37712522bef7a44f51bff0369003",
          "commitAuthor": "Xuan Gong",
          "commitDateOld": "13/09/13 4:51 PM",
          "commitNameOld": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 307.91,
          "commitsBetweenForRepo": 2082,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,30 @@\n-  public synchronized byte[] retrievePassword(\n-      AMRMTokenIdentifier identifier) throws InvalidToken {\n-    ApplicationAttemptId applicationAttemptId \u003d\n-        identifier.getApplicationAttemptId();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n+  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n+      throws InvalidToken {\n+    this.readLock.lock();\n+    try {\n+      ApplicationAttemptId applicationAttemptId \u003d\n+          identifier.getApplicationAttemptId();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n+      }\n+      if (!appAttemptSet.contains(applicationAttemptId)) {\n+        throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n+            + applicationAttemptId);\n+      }\n+      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n+        .getKeyId()) {\n+        return createPassword(identifier.getBytes(),\n+          this.currentMasterKey.getSecretKey());\n+      } else if (nextMasterKey !\u003d null\n+          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n+            .getKeyId()) {\n+        return createPassword(identifier.getBytes(),\n+          this.nextMasterKey.getSecretKey());\n+      }\n+      throw new InvalidToken(\"Given AMRMToken for application : \"\n+          + applicationAttemptId.toString()\n+          + \" seems to have been generated illegally.\");\n+    } finally {\n+      this.readLock.unlock();\n     }\n-    byte[] password \u003d this.passwords.get(applicationAttemptId);\n-    if (password \u003d\u003d null) {\n-      throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n-          + applicationAttemptId);\n-    }\n-    return password;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n      throws InvalidToken {\n    this.readLock.lock();\n    try {\n      ApplicationAttemptId applicationAttemptId \u003d\n          identifier.getApplicationAttemptId();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n      }\n      if (!appAttemptSet.contains(applicationAttemptId)) {\n        throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n            + applicationAttemptId);\n      }\n      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n        .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n          this.currentMasterKey.getSecretKey());\n      } else if (nextMasterKey !\u003d null\n          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n            .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n          this.nextMasterKey.getSecretKey());\n      }\n      throw new InvalidToken(\"Given AMRMToken for application : \"\n          + applicationAttemptId.toString()\n          + \" seems to have been generated illegally.\");\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2208. AMRMTokenManager need to have a way to roll over AMRMToken. Contributed by Xuan Gong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611820 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 2:46 PM",
          "commitName": "f1b831ccfbec37712522bef7a44f51bff0369003",
          "commitAuthor": "Xuan Gong",
          "commitDateOld": "13/09/13 4:51 PM",
          "commitNameOld": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 307.91,
          "commitsBetweenForRepo": 2082,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,30 @@\n-  public synchronized byte[] retrievePassword(\n-      AMRMTokenIdentifier identifier) throws InvalidToken {\n-    ApplicationAttemptId applicationAttemptId \u003d\n-        identifier.getApplicationAttemptId();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n+  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n+      throws InvalidToken {\n+    this.readLock.lock();\n+    try {\n+      ApplicationAttemptId applicationAttemptId \u003d\n+          identifier.getApplicationAttemptId();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n+      }\n+      if (!appAttemptSet.contains(applicationAttemptId)) {\n+        throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n+            + applicationAttemptId);\n+      }\n+      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n+        .getKeyId()) {\n+        return createPassword(identifier.getBytes(),\n+          this.currentMasterKey.getSecretKey());\n+      } else if (nextMasterKey !\u003d null\n+          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n+            .getKeyId()) {\n+        return createPassword(identifier.getBytes(),\n+          this.nextMasterKey.getSecretKey());\n+      }\n+      throw new InvalidToken(\"Given AMRMToken for application : \"\n+          + applicationAttemptId.toString()\n+          + \" seems to have been generated illegally.\");\n+    } finally {\n+      this.readLock.unlock();\n     }\n-    byte[] password \u003d this.passwords.get(applicationAttemptId);\n-    if (password \u003d\u003d null) {\n-      throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n-          + applicationAttemptId);\n-    }\n-    return password;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n      throws InvalidToken {\n    this.readLock.lock();\n    try {\n      ApplicationAttemptId applicationAttemptId \u003d\n          identifier.getApplicationAttemptId();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n      }\n      if (!appAttemptSet.contains(applicationAttemptId)) {\n        throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n            + applicationAttemptId);\n      }\n      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n        .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n          this.currentMasterKey.getSecretKey());\n      } else if (nextMasterKey !\u003d null\n          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n            .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n          this.nextMasterKey.getSecretKey());\n      }\n      throw new InvalidToken(\"Given AMRMToken for application : \"\n          + applicationAttemptId.toString()\n          + \" seems to have been generated illegally.\");\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "7d0c43d7cff6d250613a04fea9449f139988e901": {
      "type": "Ymultichange(Yfilerename,Yparameterchange)",
      "commitMessage": "YARN-822. Renamed ApplicationToken to be AMRMToken, and similarly the corresponding TokenSelector and SecretManager. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 12:11 PM",
      "commitName": "7d0c43d7cff6d250613a04fea9449f139988e901",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-822. Renamed ApplicationToken to be AMRMToken, and similarly the corresponding TokenSelector and SecretManager. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493889 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/06/13 12:11 PM",
          "commitName": "7d0c43d7cff6d250613a04fea9449f139988e901",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 10:23 AM",
          "commitNameOld": "eff5e6da1da0705a30db2dbe4de6847c3870daa8",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n   public synchronized byte[] retrievePassword(\n-      ApplicationTokenIdentifier identifier) throws InvalidToken {\n+      AMRMTokenIdentifier identifier) throws InvalidToken {\n     ApplicationAttemptId applicationAttemptId \u003d\n         identifier.getApplicationAttemptId();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n     }\n     byte[] password \u003d this.passwords.get(applicationAttemptId);\n     if (password \u003d\u003d null) {\n       throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n           + applicationAttemptId);\n     }\n     return password;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized byte[] retrievePassword(\n      AMRMTokenIdentifier identifier) throws InvalidToken {\n    ApplicationAttemptId applicationAttemptId \u003d\n        identifier.getApplicationAttemptId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n    }\n    byte[] password \u003d this.passwords.get(applicationAttemptId);\n    if (password \u003d\u003d null) {\n      throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n          + applicationAttemptId);\n    }\n    return password;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/ApplicationTokenSecretManager.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-822. Renamed ApplicationToken to be AMRMToken, and similarly the corresponding TokenSelector and SecretManager. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493889 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/06/13 12:11 PM",
          "commitName": "7d0c43d7cff6d250613a04fea9449f139988e901",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 10:23 AM",
          "commitNameOld": "eff5e6da1da0705a30db2dbe4de6847c3870daa8",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n   public synchronized byte[] retrievePassword(\n-      ApplicationTokenIdentifier identifier) throws InvalidToken {\n+      AMRMTokenIdentifier identifier) throws InvalidToken {\n     ApplicationAttemptId applicationAttemptId \u003d\n         identifier.getApplicationAttemptId();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n     }\n     byte[] password \u003d this.passwords.get(applicationAttemptId);\n     if (password \u003d\u003d null) {\n       throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n           + applicationAttemptId);\n     }\n     return password;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized byte[] retrievePassword(\n      AMRMTokenIdentifier identifier) throws InvalidToken {\n    ApplicationAttemptId applicationAttemptId \u003d\n        identifier.getApplicationAttemptId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n    }\n    byte[] password \u003d this.passwords.get(applicationAttemptId);\n    if (password \u003d\u003d null) {\n      throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n          + applicationAttemptId);\n    }\n    return password;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[identifier-ApplicationTokenIdentifier]",
            "newValue": "[identifier-AMRMTokenIdentifier]"
          }
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized byte[] retrievePassword(\n      ApplicationTokenIdentifier identifier) throws InvalidToken {\n    ApplicationAttemptId applicationAttemptId \u003d\n        identifier.getApplicationAttemptId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n    }\n    byte[] password \u003d this.passwords.get(applicationAttemptId);\n    if (password \u003d\u003d null) {\n      throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n          + applicationAttemptId);\n    }\n    return password;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/ApplicationTokenSecretManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/ApplicationTokenSecretManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/ApplicationTokenSecretManager.java"
      }
    },
    "fe7711df98b9dd16259f6534e8461a29f24caadc": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3942. Randomize master key generation for ApplicationTokenSecretManager and roll it every so often. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327220 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 11:48 AM",
      "commitName": "fe7711df98b9dd16259f6534e8461a29f24caadc",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,14 @@\n+  public synchronized byte[] retrievePassword(\n+      ApplicationTokenIdentifier identifier) throws InvalidToken {\n+    ApplicationAttemptId applicationAttemptId \u003d\n+        identifier.getApplicationAttemptId();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n+    }\n+    byte[] password \u003d this.passwords.get(applicationAttemptId);\n+    if (password \u003d\u003d null) {\n+      throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n+          + applicationAttemptId);\n+    }\n+    return password;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized byte[] retrievePassword(\n      ApplicationTokenIdentifier identifier) throws InvalidToken {\n    ApplicationAttemptId applicationAttemptId \u003d\n        identifier.getApplicationAttemptId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to retrieve password for \" + applicationAttemptId);\n    }\n    byte[] password \u003d this.passwords.get(applicationAttemptId);\n    if (password \u003d\u003d null) {\n      throw new InvalidToken(\"Password not found for ApplicationAttempt \"\n          + applicationAttemptId);\n    }\n    return password;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/ApplicationTokenSecretManager.java"
    }
  }
}