{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActivitiesUtils.java",
  "functionName": "getRequestActivityNodeInfos",
  "functionId": "getRequestActivityNodeInfos___activityNodes-List__ActivityNode____groupBy-RMWSConsts.ActivitiesGroupBy",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesUtils.java",
  "functionStartLine": 35,
  "functionEndLine": 60,
  "numCommitsSeen": 2,
  "timeTaken": 1737,
  "changeHistory": [
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8"
  ],
  "changeHistoryShort": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "26/05/19 6:56 AM",
      "commitNameOld": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 94.85,
      "commitsBetweenForRepo": 837,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static List\u003cActivityNodeInfo\u003e getRequestActivityNodeInfos(\n       List\u003cActivityNode\u003e activityNodes,\n       RMWSConsts.ActivitiesGroupBy groupBy) {\n     if (activityNodes \u003d\u003d null) {\n       return null;\n     }\n     if (groupBy \u003d\u003d RMWSConsts.ActivitiesGroupBy.DIAGNOSTIC) {\n       Map\u003cActivityState, Map\u003cString, List\u003cString\u003e\u003e\u003e groupingResults \u003d\n-          activityNodes.stream().collect(Collectors\n-              .groupingBy(ActivityNode::getState, Collectors\n+          activityNodes.stream()\n+              .filter(e -\u003e e.getNodeId() !\u003d null)\n+              .collect(Collectors.groupingBy(ActivityNode::getState, Collectors\n                   .groupingBy(ActivityNode::getShortDiagnostic,\n-                      Collectors.mapping(e -\u003e e.getNodeId() \u003d\u003d null ?\n-                          \"\" :\n+                      Collectors.mapping(e -\u003e e.getNodeId() \u003d\u003d null ? \"\" :\n                           e.getNodeId().toString(), Collectors.toList()))));\n       return groupingResults.entrySet().stream().flatMap(\n           stateMap -\u003e stateMap.getValue().entrySet().stream().map(\n               diagMap -\u003e new ActivityNodeInfo(stateMap.getKey(),\n                   diagMap.getKey().isEmpty() ? null : diagMap.getKey(),\n                   diagMap.getValue())))\n           .collect(Collectors.toList());\n     } else {\n-      return activityNodes.stream().map(\n-          e -\u003e new ActivityNodeInfo(e.getName(), e.getState(),\n+      return activityNodes.stream().filter(e -\u003e e.getNodeId() !\u003d null)\n+          .map(e -\u003e new ActivityNodeInfo(e.getName(), e.getState(),\n               e.getDiagnostic(), e.getNodeId())).collect(Collectors.toList());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cActivityNodeInfo\u003e getRequestActivityNodeInfos(\n      List\u003cActivityNode\u003e activityNodes,\n      RMWSConsts.ActivitiesGroupBy groupBy) {\n    if (activityNodes \u003d\u003d null) {\n      return null;\n    }\n    if (groupBy \u003d\u003d RMWSConsts.ActivitiesGroupBy.DIAGNOSTIC) {\n      Map\u003cActivityState, Map\u003cString, List\u003cString\u003e\u003e\u003e groupingResults \u003d\n          activityNodes.stream()\n              .filter(e -\u003e e.getNodeId() !\u003d null)\n              .collect(Collectors.groupingBy(ActivityNode::getState, Collectors\n                  .groupingBy(ActivityNode::getShortDiagnostic,\n                      Collectors.mapping(e -\u003e e.getNodeId() \u003d\u003d null ? \"\" :\n                          e.getNodeId().toString(), Collectors.toList()))));\n      return groupingResults.entrySet().stream().flatMap(\n          stateMap -\u003e stateMap.getValue().entrySet().stream().map(\n              diagMap -\u003e new ActivityNodeInfo(stateMap.getKey(),\n                  diagMap.getKey().isEmpty() ? null : diagMap.getKey(),\n                  diagMap.getValue())))\n          .collect(Collectors.toList());\n    } else {\n      return activityNodes.stream().filter(e -\u003e e.getNodeId() !\u003d null)\n          .map(e -\u003e new ActivityNodeInfo(e.getName(), e.getState(),\n              e.getDiagnostic(), e.getNodeId())).collect(Collectors.toList());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesUtils.java",
      "extendedDetails": {}
    },
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "26/05/19 6:56 AM",
      "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,26 @@\n+  public static List\u003cActivityNodeInfo\u003e getRequestActivityNodeInfos(\n+      List\u003cActivityNode\u003e activityNodes,\n+      RMWSConsts.ActivitiesGroupBy groupBy) {\n+    if (activityNodes \u003d\u003d null) {\n+      return null;\n+    }\n+    if (groupBy \u003d\u003d RMWSConsts.ActivitiesGroupBy.DIAGNOSTIC) {\n+      Map\u003cActivityState, Map\u003cString, List\u003cString\u003e\u003e\u003e groupingResults \u003d\n+          activityNodes.stream().collect(Collectors\n+              .groupingBy(ActivityNode::getState, Collectors\n+                  .groupingBy(ActivityNode::getShortDiagnostic,\n+                      Collectors.mapping(e -\u003e e.getNodeId() \u003d\u003d null ?\n+                          \"\" :\n+                          e.getNodeId().toString(), Collectors.toList()))));\n+      return groupingResults.entrySet().stream().flatMap(\n+          stateMap -\u003e stateMap.getValue().entrySet().stream().map(\n+              diagMap -\u003e new ActivityNodeInfo(stateMap.getKey(),\n+                  diagMap.getKey().isEmpty() ? null : diagMap.getKey(),\n+                  diagMap.getValue())))\n+          .collect(Collectors.toList());\n+    } else {\n+      return activityNodes.stream().map(\n+          e -\u003e new ActivityNodeInfo(e.getName(), e.getState(),\n+              e.getDiagnostic(), e.getNodeId())).collect(Collectors.toList());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cActivityNodeInfo\u003e getRequestActivityNodeInfos(\n      List\u003cActivityNode\u003e activityNodes,\n      RMWSConsts.ActivitiesGroupBy groupBy) {\n    if (activityNodes \u003d\u003d null) {\n      return null;\n    }\n    if (groupBy \u003d\u003d RMWSConsts.ActivitiesGroupBy.DIAGNOSTIC) {\n      Map\u003cActivityState, Map\u003cString, List\u003cString\u003e\u003e\u003e groupingResults \u003d\n          activityNodes.stream().collect(Collectors\n              .groupingBy(ActivityNode::getState, Collectors\n                  .groupingBy(ActivityNode::getShortDiagnostic,\n                      Collectors.mapping(e -\u003e e.getNodeId() \u003d\u003d null ?\n                          \"\" :\n                          e.getNodeId().toString(), Collectors.toList()))));\n      return groupingResults.entrySet().stream().flatMap(\n          stateMap -\u003e stateMap.getValue().entrySet().stream().map(\n              diagMap -\u003e new ActivityNodeInfo(stateMap.getKey(),\n                  diagMap.getKey().isEmpty() ? null : diagMap.getKey(),\n                  diagMap.getValue())))\n          .collect(Collectors.toList());\n    } else {\n      return activityNodes.stream().map(\n          e -\u003e new ActivityNodeInfo(e.getName(), e.getState(),\n              e.getDiagnostic(), e.getNodeId())).collect(Collectors.toList());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesUtils.java"
    }
  }
}