{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "INodeFile.java",
  "functionName": "getBlockLayoutRedundancy",
  "functionId": "getBlockLayoutRedundancy___blockType-BlockType__replication-Short__erasureCodingPolicyID-Byte",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
  "functionStartLine": 190,
  "functionEndLine": 235,
  "numCommitsSeen": 320,
  "timeTaken": 8201,
  "changeHistory": [
    "6e3e1b8cde737e4c03b0f5279cab0239e7069a72",
    "67662e2ac9e68f32b725c8118cf2be79a662fca5",
    "cb672a45a0bbd8950b9b5e304c2e03f516945903",
    "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b",
    "33a38a534110de454662256545a7f4c075d328c8",
    "3749152b661d0359b3b941ab1d17177230f3b8dc",
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98"
  ],
  "changeHistoryShort": {
    "6e3e1b8cde737e4c03b0f5279cab0239e7069a72": "Ymultichange(Ybodychange,Yparametermetachange)",
    "67662e2ac9e68f32b725c8118cf2be79a662fca5": "Ybodychange",
    "cb672a45a0bbd8950b9b5e304c2e03f516945903": "Ybodychange",
    "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b": "Ybodychange",
    "33a38a534110de454662256545a7f4c075d328c8": "Ybodychange",
    "3749152b661d0359b3b941ab1d17177230f3b8dc": "Ybodychange",
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e3e1b8cde737e4c03b0f5279cab0239e7069a72": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-12915. Fix findbugs warning in INodeFile$HeaderFormat.getBlockLayoutRedundancy. (Contributed by Chris Douglas)\n",
      "commitDate": "29/12/17 12:21 PM",
      "commitName": "6e3e1b8cde737e4c03b0f5279cab0239e7069a72",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12915. Fix findbugs warning in INodeFile$HeaderFormat.getBlockLayoutRedundancy. (Contributed by Chris Douglas)\n",
          "commitDate": "29/12/17 12:21 PM",
          "commitName": "6e3e1b8cde737e4c03b0f5279cab0239e7069a72",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "07/12/17 11:15 AM",
          "commitNameOld": "67662e2ac9e68f32b725c8118cf2be79a662fca5",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 22.05,
          "commitsBetweenForRepo": 138,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,46 @@\n-    static long getBlockLayoutRedundancy(final BlockType blockType,\n-        final Short replication, final Byte erasureCodingPolicyID) {\n-      long layoutRedundancy \u003d 0;\n-      if (blockType \u003d\u003d STRIPED) {\n-        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n-            erasureCodingPolicyID !\u003d null);\n-        Preconditions.checkArgument(ErasureCodingPolicyManager.getInstance()\n-                .getByID(erasureCodingPolicyID) !\u003d null,\n-            \"Could not find EC policy with ID 0x\" + StringUtils\n-                .byteToHexString(erasureCodingPolicyID));\n+    static long getBlockLayoutRedundancy(BlockType blockType,\n+        Short replication, Byte erasureCodingPolicyID) {\n+      if (null \u003d\u003d erasureCodingPolicyID) {\n+        erasureCodingPolicyID \u003d REPLICATION_POLICY_ID;\n+      }\n+      long layoutRedundancy \u003d 0xFF \u0026 erasureCodingPolicyID;\n+      switch (blockType) {\n+      case STRIPED:\n+        if (replication !\u003d null) {\n+          throw new IllegalArgumentException(\n+              \"Illegal replication for STRIPED block type\");\n+        }\n+        if (erasureCodingPolicyID \u003d\u003d REPLICATION_POLICY_ID) {\n+          throw new IllegalArgumentException(\n+              \"Illegal REPLICATION policy for STRIPED block type\");\n+        }\n+        if (null \u003d\u003d ErasureCodingPolicyManager.getInstance()\n+            .getByID(erasureCodingPolicyID)) {\n+          throw new IllegalArgumentException(String.format(\n+                \"Could not find EC policy with ID 0x%02x\",\n+                erasureCodingPolicyID));\n+        }\n+\n+        // valid parameters for STRIPED\n         layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n-        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n-        // as the PolicyID can never be in negative.\n-        layoutRedundancy |\u003d erasureCodingPolicyID;\n-      } else {\n-        Preconditions.checkArgument(erasureCodingPolicyID \u003d\u003d null ||\n-                erasureCodingPolicyID \u003d\u003d\n-                    ErasureCodeConstants.REPLICATION_POLICY_ID);\n-        Preconditions.checkArgument(replication !\u003d null \u0026\u0026 replication \u003e\u003d 0 \u0026\u0026\n-            replication \u003c\u003d MAX_REDUNDANCY,\n-            \"Invalid replication value \" + replication);\n+        break;\n+      case CONTIGUOUS:\n+        if (erasureCodingPolicyID !\u003d REPLICATION_POLICY_ID) {\n+          throw new IllegalArgumentException(String.format(\n+              \"Illegal EC policy 0x%02x for CONTIGUOUS block type\",\n+              erasureCodingPolicyID));\n+        }\n+        if (null \u003d\u003d replication ||\n+            replication \u003c 0 || replication \u003e MAX_REDUNDANCY) {\n+          throw new IllegalArgumentException(\"Invalid replication value \"\n+              + replication);\n+        }\n+\n+        // valid parameters for CONTIGUOUS\n         layoutRedundancy |\u003d replication;\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"Unknown blockType: \" + blockType);\n       }\n       return layoutRedundancy;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static long getBlockLayoutRedundancy(BlockType blockType,\n        Short replication, Byte erasureCodingPolicyID) {\n      if (null \u003d\u003d erasureCodingPolicyID) {\n        erasureCodingPolicyID \u003d REPLICATION_POLICY_ID;\n      }\n      long layoutRedundancy \u003d 0xFF \u0026 erasureCodingPolicyID;\n      switch (blockType) {\n      case STRIPED:\n        if (replication !\u003d null) {\n          throw new IllegalArgumentException(\n              \"Illegal replication for STRIPED block type\");\n        }\n        if (erasureCodingPolicyID \u003d\u003d REPLICATION_POLICY_ID) {\n          throw new IllegalArgumentException(\n              \"Illegal REPLICATION policy for STRIPED block type\");\n        }\n        if (null \u003d\u003d ErasureCodingPolicyManager.getInstance()\n            .getByID(erasureCodingPolicyID)) {\n          throw new IllegalArgumentException(String.format(\n                \"Could not find EC policy with ID 0x%02x\",\n                erasureCodingPolicyID));\n        }\n\n        // valid parameters for STRIPED\n        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n        break;\n      case CONTIGUOUS:\n        if (erasureCodingPolicyID !\u003d REPLICATION_POLICY_ID) {\n          throw new IllegalArgumentException(String.format(\n              \"Illegal EC policy 0x%02x for CONTIGUOUS block type\",\n              erasureCodingPolicyID));\n        }\n        if (null \u003d\u003d replication ||\n            replication \u003c 0 || replication \u003e MAX_REDUNDANCY) {\n          throw new IllegalArgumentException(\"Invalid replication value \"\n              + replication);\n        }\n\n        // valid parameters for CONTIGUOUS\n        layoutRedundancy |\u003d replication;\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unknown blockType: \" + blockType);\n      }\n      return layoutRedundancy;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-12915. Fix findbugs warning in INodeFile$HeaderFormat.getBlockLayoutRedundancy. (Contributed by Chris Douglas)\n",
          "commitDate": "29/12/17 12:21 PM",
          "commitName": "6e3e1b8cde737e4c03b0f5279cab0239e7069a72",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "07/12/17 11:15 AM",
          "commitNameOld": "67662e2ac9e68f32b725c8118cf2be79a662fca5",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 22.05,
          "commitsBetweenForRepo": 138,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,46 @@\n-    static long getBlockLayoutRedundancy(final BlockType blockType,\n-        final Short replication, final Byte erasureCodingPolicyID) {\n-      long layoutRedundancy \u003d 0;\n-      if (blockType \u003d\u003d STRIPED) {\n-        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n-            erasureCodingPolicyID !\u003d null);\n-        Preconditions.checkArgument(ErasureCodingPolicyManager.getInstance()\n-                .getByID(erasureCodingPolicyID) !\u003d null,\n-            \"Could not find EC policy with ID 0x\" + StringUtils\n-                .byteToHexString(erasureCodingPolicyID));\n+    static long getBlockLayoutRedundancy(BlockType blockType,\n+        Short replication, Byte erasureCodingPolicyID) {\n+      if (null \u003d\u003d erasureCodingPolicyID) {\n+        erasureCodingPolicyID \u003d REPLICATION_POLICY_ID;\n+      }\n+      long layoutRedundancy \u003d 0xFF \u0026 erasureCodingPolicyID;\n+      switch (blockType) {\n+      case STRIPED:\n+        if (replication !\u003d null) {\n+          throw new IllegalArgumentException(\n+              \"Illegal replication for STRIPED block type\");\n+        }\n+        if (erasureCodingPolicyID \u003d\u003d REPLICATION_POLICY_ID) {\n+          throw new IllegalArgumentException(\n+              \"Illegal REPLICATION policy for STRIPED block type\");\n+        }\n+        if (null \u003d\u003d ErasureCodingPolicyManager.getInstance()\n+            .getByID(erasureCodingPolicyID)) {\n+          throw new IllegalArgumentException(String.format(\n+                \"Could not find EC policy with ID 0x%02x\",\n+                erasureCodingPolicyID));\n+        }\n+\n+        // valid parameters for STRIPED\n         layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n-        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n-        // as the PolicyID can never be in negative.\n-        layoutRedundancy |\u003d erasureCodingPolicyID;\n-      } else {\n-        Preconditions.checkArgument(erasureCodingPolicyID \u003d\u003d null ||\n-                erasureCodingPolicyID \u003d\u003d\n-                    ErasureCodeConstants.REPLICATION_POLICY_ID);\n-        Preconditions.checkArgument(replication !\u003d null \u0026\u0026 replication \u003e\u003d 0 \u0026\u0026\n-            replication \u003c\u003d MAX_REDUNDANCY,\n-            \"Invalid replication value \" + replication);\n+        break;\n+      case CONTIGUOUS:\n+        if (erasureCodingPolicyID !\u003d REPLICATION_POLICY_ID) {\n+          throw new IllegalArgumentException(String.format(\n+              \"Illegal EC policy 0x%02x for CONTIGUOUS block type\",\n+              erasureCodingPolicyID));\n+        }\n+        if (null \u003d\u003d replication ||\n+            replication \u003c 0 || replication \u003e MAX_REDUNDANCY) {\n+          throw new IllegalArgumentException(\"Invalid replication value \"\n+              + replication);\n+        }\n+\n+        // valid parameters for CONTIGUOUS\n         layoutRedundancy |\u003d replication;\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"Unknown blockType: \" + blockType);\n       }\n       return layoutRedundancy;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static long getBlockLayoutRedundancy(BlockType blockType,\n        Short replication, Byte erasureCodingPolicyID) {\n      if (null \u003d\u003d erasureCodingPolicyID) {\n        erasureCodingPolicyID \u003d REPLICATION_POLICY_ID;\n      }\n      long layoutRedundancy \u003d 0xFF \u0026 erasureCodingPolicyID;\n      switch (blockType) {\n      case STRIPED:\n        if (replication !\u003d null) {\n          throw new IllegalArgumentException(\n              \"Illegal replication for STRIPED block type\");\n        }\n        if (erasureCodingPolicyID \u003d\u003d REPLICATION_POLICY_ID) {\n          throw new IllegalArgumentException(\n              \"Illegal REPLICATION policy for STRIPED block type\");\n        }\n        if (null \u003d\u003d ErasureCodingPolicyManager.getInstance()\n            .getByID(erasureCodingPolicyID)) {\n          throw new IllegalArgumentException(String.format(\n                \"Could not find EC policy with ID 0x%02x\",\n                erasureCodingPolicyID));\n        }\n\n        // valid parameters for STRIPED\n        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n        break;\n      case CONTIGUOUS:\n        if (erasureCodingPolicyID !\u003d REPLICATION_POLICY_ID) {\n          throw new IllegalArgumentException(String.format(\n              \"Illegal EC policy 0x%02x for CONTIGUOUS block type\",\n              erasureCodingPolicyID));\n        }\n        if (null \u003d\u003d replication ||\n            replication \u003c 0 || replication \u003e MAX_REDUNDANCY) {\n          throw new IllegalArgumentException(\"Invalid replication value \"\n              + replication);\n        }\n\n        // valid parameters for CONTIGUOUS\n        layoutRedundancy |\u003d replication;\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unknown blockType: \" + blockType);\n      }\n      return layoutRedundancy;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {
            "oldValue": "[blockType-BlockType(modifiers-final), replication-Short(modifiers-final), erasureCodingPolicyID-Byte(modifiers-final)]",
            "newValue": "[blockType-BlockType, replication-Short, erasureCodingPolicyID-Byte]"
          }
        }
      ]
    },
    "67662e2ac9e68f32b725c8118cf2be79a662fca5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12840. Creating a file with non-default EC policy in a EC zone is not correctly serialized in the editlog. Contributed by Lei (Eddy) Xu.\n",
      "commitDate": "07/12/17 11:15 AM",
      "commitName": "67662e2ac9e68f32b725c8118cf2be79a662fca5",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "24/05/17 5:21 PM",
      "commitNameOld": "b8b69d797aed8dfeb65ea462c2856f62e9aa1023",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 196.79,
      "commitsBetweenForRepo": 1427,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n     static long getBlockLayoutRedundancy(final BlockType blockType,\n         final Short replication, final Byte erasureCodingPolicyID) {\n       long layoutRedundancy \u003d 0;\n       if (blockType \u003d\u003d STRIPED) {\n         Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n             erasureCodingPolicyID !\u003d null);\n         Preconditions.checkArgument(ErasureCodingPolicyManager.getInstance()\n                 .getByID(erasureCodingPolicyID) !\u003d null,\n             \"Could not find EC policy with ID 0x\" + StringUtils\n                 .byteToHexString(erasureCodingPolicyID));\n         layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n         // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n         // as the PolicyID can never be in negative.\n         layoutRedundancy |\u003d erasureCodingPolicyID;\n       } else {\n-        Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n-            erasureCodingPolicyID \u003d\u003d null);\n-        Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n+        Preconditions.checkArgument(erasureCodingPolicyID \u003d\u003d null ||\n+                erasureCodingPolicyID \u003d\u003d\n+                    ErasureCodeConstants.REPLICATION_POLICY_ID);\n+        Preconditions.checkArgument(replication !\u003d null \u0026\u0026 replication \u003e\u003d 0 \u0026\u0026\n             replication \u003c\u003d MAX_REDUNDANCY,\n             \"Invalid replication value \" + replication);\n         layoutRedundancy |\u003d replication;\n       }\n       return layoutRedundancy;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static long getBlockLayoutRedundancy(final BlockType blockType,\n        final Short replication, final Byte erasureCodingPolicyID) {\n      long layoutRedundancy \u003d 0;\n      if (blockType \u003d\u003d STRIPED) {\n        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n            erasureCodingPolicyID !\u003d null);\n        Preconditions.checkArgument(ErasureCodingPolicyManager.getInstance()\n                .getByID(erasureCodingPolicyID) !\u003d null,\n            \"Could not find EC policy with ID 0x\" + StringUtils\n                .byteToHexString(erasureCodingPolicyID));\n        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n        // as the PolicyID can never be in negative.\n        layoutRedundancy |\u003d erasureCodingPolicyID;\n      } else {\n        Preconditions.checkArgument(erasureCodingPolicyID \u003d\u003d null ||\n                erasureCodingPolicyID \u003d\u003d\n                    ErasureCodeConstants.REPLICATION_POLICY_ID);\n        Preconditions.checkArgument(replication !\u003d null \u0026\u0026 replication \u003e\u003d 0 \u0026\u0026\n            replication \u003c\u003d MAX_REDUNDANCY,\n            \"Invalid replication value \" + replication);\n        layoutRedundancy |\u003d replication;\n      }\n      return layoutRedundancy;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "cb672a45a0bbd8950b9b5e304c2e03f516945903": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11605. Allow user to customize new erasure code policies. Contributed by Huafeng Wang\n",
      "commitDate": "27/04/17 10:18 PM",
      "commitName": "cb672a45a0bbd8950b9b5e304c2e03f516945903",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "07/04/17 4:46 PM",
      "commitNameOld": "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 20.23,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     static long getBlockLayoutRedundancy(final BlockType blockType,\n         final Short replication, final Byte erasureCodingPolicyID) {\n       long layoutRedundancy \u003d 0;\n       if (blockType \u003d\u003d STRIPED) {\n         Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n             erasureCodingPolicyID !\u003d null);\n-        Preconditions.checkArgument(SystemErasureCodingPolicies\n+        Preconditions.checkArgument(ErasureCodingPolicyManager.getInstance()\n                 .getByID(erasureCodingPolicyID) !\u003d null,\n             \"Could not find EC policy with ID 0x\" + StringUtils\n                 .byteToHexString(erasureCodingPolicyID));\n         layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n         // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n         // as the PolicyID can never be in negative.\n         layoutRedundancy |\u003d erasureCodingPolicyID;\n       } else {\n         Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n             erasureCodingPolicyID \u003d\u003d null);\n         Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n             replication \u003c\u003d MAX_REDUNDANCY,\n             \"Invalid replication value \" + replication);\n         layoutRedundancy |\u003d replication;\n       }\n       return layoutRedundancy;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static long getBlockLayoutRedundancy(final BlockType blockType,\n        final Short replication, final Byte erasureCodingPolicyID) {\n      long layoutRedundancy \u003d 0;\n      if (blockType \u003d\u003d STRIPED) {\n        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n            erasureCodingPolicyID !\u003d null);\n        Preconditions.checkArgument(ErasureCodingPolicyManager.getInstance()\n                .getByID(erasureCodingPolicyID) !\u003d null,\n            \"Could not find EC policy with ID 0x\" + StringUtils\n                .byteToHexString(erasureCodingPolicyID));\n        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n        // as the PolicyID can never be in negative.\n        layoutRedundancy |\u003d erasureCodingPolicyID;\n      } else {\n        Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n            erasureCodingPolicyID \u003d\u003d null);\n        Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n            replication \u003c\u003d MAX_REDUNDANCY,\n            \"Invalid replication value \" + replication);\n        layoutRedundancy |\u003d replication;\n      }\n      return layoutRedundancy;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11623. Move system erasure coding policies into hadoop-hdfs-client.\n",
      "commitDate": "07/04/17 4:46 PM",
      "commitName": "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "30/03/17 3:44 PM",
      "commitNameOld": "e5f0622a6f40706d360d45200c8f259c79046438",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 8.04,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     static long getBlockLayoutRedundancy(final BlockType blockType,\n         final Short replication, final Byte erasureCodingPolicyID) {\n       long layoutRedundancy \u003d 0;\n       if (blockType \u003d\u003d STRIPED) {\n         Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n             erasureCodingPolicyID !\u003d null);\n-        Preconditions.checkArgument(ErasureCodingPolicyManager\n-            .getPolicyByID(erasureCodingPolicyID) !\u003d null,\n+        Preconditions.checkArgument(SystemErasureCodingPolicies\n+                .getByID(erasureCodingPolicyID) !\u003d null,\n             \"Could not find EC policy with ID 0x\" + StringUtils\n                 .byteToHexString(erasureCodingPolicyID));\n         layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n         // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n         // as the PolicyID can never be in negative.\n         layoutRedundancy |\u003d erasureCodingPolicyID;\n       } else {\n         Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n             erasureCodingPolicyID \u003d\u003d null);\n         Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n             replication \u003c\u003d MAX_REDUNDANCY,\n             \"Invalid replication value \" + replication);\n         layoutRedundancy |\u003d replication;\n       }\n       return layoutRedundancy;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static long getBlockLayoutRedundancy(final BlockType blockType,\n        final Short replication, final Byte erasureCodingPolicyID) {\n      long layoutRedundancy \u003d 0;\n      if (blockType \u003d\u003d STRIPED) {\n        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n            erasureCodingPolicyID !\u003d null);\n        Preconditions.checkArgument(SystemErasureCodingPolicies\n                .getByID(erasureCodingPolicyID) !\u003d null,\n            \"Could not find EC policy with ID 0x\" + StringUtils\n                .byteToHexString(erasureCodingPolicyID));\n        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n        // as the PolicyID can never be in negative.\n        layoutRedundancy |\u003d erasureCodingPolicyID;\n      } else {\n        Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n            erasureCodingPolicyID \u003d\u003d null);\n        Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n            replication \u003c\u003d MAX_REDUNDANCY,\n            \"Invalid replication value \" + replication);\n        layoutRedundancy |\u003d replication;\n      }\n      return layoutRedundancy;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "33a38a534110de454662256545a7f4c075d328c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11314. Enforce set of enabled EC policies on the NameNode.\n",
      "commitDate": "08/03/17 4:41 PM",
      "commitName": "33a38a534110de454662256545a7f4c075d328c8",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "02/03/17 7:58 PM",
      "commitNameOld": "3749152b661d0359b3b941ab1d17177230f3b8dc",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 5.86,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     static long getBlockLayoutRedundancy(final BlockType blockType,\n         final Short replication, final Byte erasureCodingPolicyID) {\n       long layoutRedundancy \u003d 0;\n       if (blockType \u003d\u003d STRIPED) {\n         Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n             erasureCodingPolicyID !\u003d null);\n         Preconditions.checkArgument(ErasureCodingPolicyManager\n-            .getPolicyByPolicyID(erasureCodingPolicyID) !\u003d null,\n+            .getPolicyByID(erasureCodingPolicyID) !\u003d null,\n             \"Could not find EC policy with ID 0x\" + StringUtils\n                 .byteToHexString(erasureCodingPolicyID));\n         layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n         // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n         // as the PolicyID can never be in negative.\n         layoutRedundancy |\u003d erasureCodingPolicyID;\n       } else {\n         Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n             erasureCodingPolicyID \u003d\u003d null);\n         Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n             replication \u003c\u003d MAX_REDUNDANCY,\n             \"Invalid replication value \" + replication);\n         layoutRedundancy |\u003d replication;\n       }\n       return layoutRedundancy;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static long getBlockLayoutRedundancy(final BlockType blockType,\n        final Short replication, final Byte erasureCodingPolicyID) {\n      long layoutRedundancy \u003d 0;\n      if (blockType \u003d\u003d STRIPED) {\n        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n            erasureCodingPolicyID !\u003d null);\n        Preconditions.checkArgument(ErasureCodingPolicyManager\n            .getPolicyByID(erasureCodingPolicyID) !\u003d null,\n            \"Could not find EC policy with ID 0x\" + StringUtils\n                .byteToHexString(erasureCodingPolicyID));\n        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n        // as the PolicyID can never be in negative.\n        layoutRedundancy |\u003d erasureCodingPolicyID;\n      } else {\n        Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n            erasureCodingPolicyID \u003d\u003d null);\n        Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n            replication \u003c\u003d MAX_REDUNDANCY,\n            \"Invalid replication value \" + replication);\n        layoutRedundancy |\u003d replication;\n      }\n      return layoutRedundancy;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "3749152b661d0359b3b941ab1d17177230f3b8dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11416. Refactor out system default erasure coding policy. Contributed by Andrew Wang.\n",
      "commitDate": "02/03/17 7:58 PM",
      "commitName": "3749152b661d0359b3b941ab1d17177230f3b8dc",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "27/02/17 5:07 PM",
      "commitNameOld": "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n     static long getBlockLayoutRedundancy(final BlockType blockType,\n         final Short replication, final Byte erasureCodingPolicyID) {\n       long layoutRedundancy \u003d 0;\n       if (blockType \u003d\u003d STRIPED) {\n         Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n             erasureCodingPolicyID !\u003d null);\n-        Preconditions.checkArgument(\n-            ErasureCodingPolicyManager.getPolicyByPolicyID(\n-                erasureCodingPolicyID) !\u003d null);\n+        Preconditions.checkArgument(ErasureCodingPolicyManager\n+            .getPolicyByPolicyID(erasureCodingPolicyID) !\u003d null,\n+            \"Could not find EC policy with ID 0x\" + StringUtils\n+                .byteToHexString(erasureCodingPolicyID));\n         layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n         // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n         // as the PolicyID can never be in negative.\n         layoutRedundancy |\u003d erasureCodingPolicyID;\n       } else {\n         Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n             erasureCodingPolicyID \u003d\u003d null);\n         Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n-            replication \u003c\u003d MAX_REDUNDANCY);\n+            replication \u003c\u003d MAX_REDUNDANCY,\n+            \"Invalid replication value \" + replication);\n         layoutRedundancy |\u003d replication;\n       }\n       return layoutRedundancy;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static long getBlockLayoutRedundancy(final BlockType blockType,\n        final Short replication, final Byte erasureCodingPolicyID) {\n      long layoutRedundancy \u003d 0;\n      if (blockType \u003d\u003d STRIPED) {\n        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n            erasureCodingPolicyID !\u003d null);\n        Preconditions.checkArgument(ErasureCodingPolicyManager\n            .getPolicyByPolicyID(erasureCodingPolicyID) !\u003d null,\n            \"Could not find EC policy with ID 0x\" + StringUtils\n                .byteToHexString(erasureCodingPolicyID));\n        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n        // as the PolicyID can never be in negative.\n        layoutRedundancy |\u003d erasureCodingPolicyID;\n      } else {\n        Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n            erasureCodingPolicyID \u003d\u003d null);\n        Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n            replication \u003c\u003d MAX_REDUNDANCY,\n            \"Invalid replication value \" + replication);\n        layoutRedundancy |\u003d replication;\n      }\n      return layoutRedundancy;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11382. Persist Erasure Coding Policy ID in a new optional field in INodeFile in FSImage. Contributed by Manoj Govindassamy.\n",
      "commitDate": "27/02/17 5:07 PM",
      "commitName": "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,22 @@\n+    static long getBlockLayoutRedundancy(final BlockType blockType,\n+        final Short replication, final Byte erasureCodingPolicyID) {\n+      long layoutRedundancy \u003d 0;\n+      if (blockType \u003d\u003d STRIPED) {\n+        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n+            erasureCodingPolicyID !\u003d null);\n+        Preconditions.checkArgument(\n+            ErasureCodingPolicyManager.getPolicyByPolicyID(\n+                erasureCodingPolicyID) !\u003d null);\n+        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n+        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n+        // as the PolicyID can never be in negative.\n+        layoutRedundancy |\u003d erasureCodingPolicyID;\n+      } else {\n+        Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n+            erasureCodingPolicyID \u003d\u003d null);\n+        Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n+            replication \u003c\u003d MAX_REDUNDANCY);\n+        layoutRedundancy |\u003d replication;\n+      }\n+      return layoutRedundancy;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    static long getBlockLayoutRedundancy(final BlockType blockType,\n        final Short replication, final Byte erasureCodingPolicyID) {\n      long layoutRedundancy \u003d 0;\n      if (blockType \u003d\u003d STRIPED) {\n        Preconditions.checkArgument(replication \u003d\u003d null \u0026\u0026\n            erasureCodingPolicyID !\u003d null);\n        Preconditions.checkArgument(\n            ErasureCodingPolicyManager.getPolicyByPolicyID(\n                erasureCodingPolicyID) !\u003d null);\n        layoutRedundancy |\u003d BLOCK_TYPE_MASK_STRIPED;\n        // Following bitwise OR with signed byte erasureCodingPolicyID is safe\n        // as the PolicyID can never be in negative.\n        layoutRedundancy |\u003d erasureCodingPolicyID;\n      } else {\n        Preconditions.checkArgument(replication !\u003d null \u0026\u0026\n            erasureCodingPolicyID \u003d\u003d null);\n        Preconditions.checkArgument(replication \u003e\u003d 0 \u0026\u0026\n            replication \u003c\u003d MAX_REDUNDANCY);\n        layoutRedundancy |\u003d replication;\n      }\n      return layoutRedundancy;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java"
    }
  }
}