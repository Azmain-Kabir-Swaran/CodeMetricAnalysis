{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileContext.java",
  "functionName": "build",
  "functionId": "build",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
  "functionStartLine": 2925,
  "functionEndLine": 2941,
  "numCommitsSeen": 58,
  "timeTaken": 2424,
  "changeHistory": [
    "5e2ce370a322a46b496541ccd17443197fcfeb5a",
    "f365957c6326f88734bc0a5d01cfb7eac713db20",
    "1ba4e62304a70d53f1a4f76995b6e1fac3107922"
  ],
  "changeHistoryShort": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Ymultichange(Yreturntypechange,Ybodychange)",
    "1ba4e62304a70d53f1a4f76995b6e1fac3107922": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
      "commitDate": "21/01/20 2:31 PM",
      "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "25/09/19 4:16 AM",
      "commitNameOld": "e346e3638c595a512cd582739ff51fb64c3b4950",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 118.47,
      "commitsBetweenForRepo": 504,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n     public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n       final Path absF \u003d fixRelativePart(getPath());\n+      OpenFileParameters parameters \u003d new OpenFileParameters()\n+          .withMandatoryKeys(getMandatoryKeys())\n+          .withOptions(getOptions())\n+          .withBufferSize(getBufferSize())\n+          .withStatus(getStatus());\n       return new FSLinkResolver\u003cCompletableFuture\u003cFSDataInputStream\u003e\u003e() {\n         @Override\n         public CompletableFuture\u003cFSDataInputStream\u003e next(\n             final AbstractFileSystem fs,\n             final Path p)\n             throws IOException {\n-          return fs.openFileWithOptions(p,\n-              getMandatoryKeys(),\n-              getOptions(),\n-              getBufferSize());\n+          return fs.openFileWithOptions(p, parameters);\n         }\n       }.resolve(FileContext.this, absF);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n      final Path absF \u003d fixRelativePart(getPath());\n      OpenFileParameters parameters \u003d new OpenFileParameters()\n          .withMandatoryKeys(getMandatoryKeys())\n          .withOptions(getOptions())\n          .withBufferSize(getBufferSize())\n          .withStatus(getStatus());\n      return new FSLinkResolver\u003cCompletableFuture\u003cFSDataInputStream\u003e\u003e() {\n        @Override\n        public CompletableFuture\u003cFSDataInputStream\u003e next(\n            final AbstractFileSystem fs,\n            final Path p)\n            throws IOException {\n          return fs.openFileWithOptions(p, parameters);\n        }\n      }.resolve(FileContext.this, absF);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
          "commitDate": "05/02/19 3:51 AM",
          "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/12/18 9:54 PM",
          "commitNameOld": "788e7473a404fa074b3af522416ee3d2fae865a0",
          "commitAuthorOld": "Surendra Singh Lilhore",
          "daysBetweenCommits": 50.25,
          "commitsBetweenForRepo": 336,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,15 @@\n-    public FSDataOutputStream build() throws IOException {\n-      final EnumSet\u003cCreateFlag\u003e flags \u003d getFlags();\n-      List\u003cCreateOpts\u003e createOpts \u003d new ArrayList\u003c\u003e(Arrays.asList(\n-          CreateOpts.blockSize(getBlockSize()),\n-          CreateOpts.bufferSize(getBufferSize()),\n-          CreateOpts.repFac(getReplication()),\n-          CreateOpts.perms(getPermission())\n-      ));\n-      if (getChecksumOpt() !\u003d null) {\n-        createOpts.add(CreateOpts.checksumParam(getChecksumOpt()));\n-      }\n-      if (getProgress() !\u003d null) {\n-        createOpts.add(CreateOpts.progress(getProgress()));\n-      }\n-      if (isRecursive()) {\n-        createOpts.add(CreateOpts.createParent());\n-      }\n-      return fc.create(getPath(), flags,\n-          createOpts.toArray(new CreateOpts[0]));\n+    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n+      final Path absF \u003d fixRelativePart(getPath());\n+      return new FSLinkResolver\u003cCompletableFuture\u003cFSDataInputStream\u003e\u003e() {\n+        @Override\n+        public CompletableFuture\u003cFSDataInputStream\u003e next(\n+            final AbstractFileSystem fs,\n+            final Path p)\n+            throws IOException {\n+          return fs.openFileWithOptions(p,\n+              getMandatoryKeys(),\n+              getOptions(),\n+              getBufferSize());\n+        }\n+      }.resolve(FileContext.this, absF);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n      final Path absF \u003d fixRelativePart(getPath());\n      return new FSLinkResolver\u003cCompletableFuture\u003cFSDataInputStream\u003e\u003e() {\n        @Override\n        public CompletableFuture\u003cFSDataInputStream\u003e next(\n            final AbstractFileSystem fs,\n            final Path p)\n            throws IOException {\n          return fs.openFileWithOptions(p,\n              getMandatoryKeys(),\n              getOptions(),\n              getBufferSize());\n        }\n      }.resolve(FileContext.this, absF);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {
            "oldValue": "FSDataOutputStream",
            "newValue": "CompletableFuture\u003cFSDataInputStream\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
          "commitDate": "05/02/19 3:51 AM",
          "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/12/18 9:54 PM",
          "commitNameOld": "788e7473a404fa074b3af522416ee3d2fae865a0",
          "commitAuthorOld": "Surendra Singh Lilhore",
          "daysBetweenCommits": 50.25,
          "commitsBetweenForRepo": 336,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,15 @@\n-    public FSDataOutputStream build() throws IOException {\n-      final EnumSet\u003cCreateFlag\u003e flags \u003d getFlags();\n-      List\u003cCreateOpts\u003e createOpts \u003d new ArrayList\u003c\u003e(Arrays.asList(\n-          CreateOpts.blockSize(getBlockSize()),\n-          CreateOpts.bufferSize(getBufferSize()),\n-          CreateOpts.repFac(getReplication()),\n-          CreateOpts.perms(getPermission())\n-      ));\n-      if (getChecksumOpt() !\u003d null) {\n-        createOpts.add(CreateOpts.checksumParam(getChecksumOpt()));\n-      }\n-      if (getProgress() !\u003d null) {\n-        createOpts.add(CreateOpts.progress(getProgress()));\n-      }\n-      if (isRecursive()) {\n-        createOpts.add(CreateOpts.createParent());\n-      }\n-      return fc.create(getPath(), flags,\n-          createOpts.toArray(new CreateOpts[0]));\n+    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n+      final Path absF \u003d fixRelativePart(getPath());\n+      return new FSLinkResolver\u003cCompletableFuture\u003cFSDataInputStream\u003e\u003e() {\n+        @Override\n+        public CompletableFuture\u003cFSDataInputStream\u003e next(\n+            final AbstractFileSystem fs,\n+            final Path p)\n+            throws IOException {\n+          return fs.openFileWithOptions(p,\n+              getMandatoryKeys(),\n+              getOptions(),\n+              getBufferSize());\n+        }\n+      }.resolve(FileContext.this, absF);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n      final Path absF \u003d fixRelativePart(getPath());\n      return new FSLinkResolver\u003cCompletableFuture\u003cFSDataInputStream\u003e\u003e() {\n        @Override\n        public CompletableFuture\u003cFSDataInputStream\u003e next(\n            final AbstractFileSystem fs,\n            final Path p)\n            throws IOException {\n          return fs.openFileWithOptions(p,\n              getMandatoryKeys(),\n              getOptions(),\n              getBufferSize());\n        }\n      }.resolve(FileContext.this, absF);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "1ba4e62304a70d53f1a4f76995b6e1fac3107922": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14396. Add builder interface to FileContext.\nContributed by  Lei (Eddy) Xu.\n",
      "commitDate": "25/06/18 6:38 AM",
      "commitName": "1ba4e62304a70d53f1a4f76995b6e1fac3107922",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,20 @@\n+    public FSDataOutputStream build() throws IOException {\n+      final EnumSet\u003cCreateFlag\u003e flags \u003d getFlags();\n+      List\u003cCreateOpts\u003e createOpts \u003d new ArrayList\u003c\u003e(Arrays.asList(\n+          CreateOpts.blockSize(getBlockSize()),\n+          CreateOpts.bufferSize(getBufferSize()),\n+          CreateOpts.repFac(getReplication()),\n+          CreateOpts.perms(getPermission())\n+      ));\n+      if (getChecksumOpt() !\u003d null) {\n+        createOpts.add(CreateOpts.checksumParam(getChecksumOpt()));\n+      }\n+      if (getProgress() !\u003d null) {\n+        createOpts.add(CreateOpts.progress(getProgress()));\n+      }\n+      if (isRecursive()) {\n+        createOpts.add(CreateOpts.createParent());\n+      }\n+      return fc.create(getPath(), flags,\n+          createOpts.toArray(new CreateOpts[0]));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public FSDataOutputStream build() throws IOException {\n      final EnumSet\u003cCreateFlag\u003e flags \u003d getFlags();\n      List\u003cCreateOpts\u003e createOpts \u003d new ArrayList\u003c\u003e(Arrays.asList(\n          CreateOpts.blockSize(getBlockSize()),\n          CreateOpts.bufferSize(getBufferSize()),\n          CreateOpts.repFac(getReplication()),\n          CreateOpts.perms(getPermission())\n      ));\n      if (getChecksumOpt() !\u003d null) {\n        createOpts.add(CreateOpts.checksumParam(getChecksumOpt()));\n      }\n      if (getProgress() !\u003d null) {\n        createOpts.add(CreateOpts.progress(getProgress()));\n      }\n      if (isRecursive()) {\n        createOpts.add(CreateOpts.createParent());\n      }\n      return fc.create(getPath(), flags,\n          createOpts.toArray(new CreateOpts[0]));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
    }
  }
}