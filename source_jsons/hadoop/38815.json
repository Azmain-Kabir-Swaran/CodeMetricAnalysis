{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeQueueLoadMonitor.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java",
  "functionStartLine": 158,
  "functionEndLine": 175,
  "numCommitsSeen": 13,
  "timeTaken": 2823,
  "changeHistory": [
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
    "10be45986cdf86a89055065b752959bd6369d54f",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830",
    "341888a0aa23f24458b4e6e34868794b9735c06a"
  ],
  "changeHistoryShort": {
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": "Ybodychange",
    "10be45986cdf86a89055065b752959bd6369d54f": "Ybodychange",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": "Ymultichange(Yfilerename,Ybodychange)",
    "341888a0aa23f24458b4e6e34868794b9735c06a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
      "commitDate": "27/12/16 12:40 PM",
      "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "23/11/16 9:53 AM",
      "commitNameOld": "005850b28feb2f7bb8c2844d11e3f9d21b45d754",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 34.12,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,18 @@\n     public void run() {\n       ReentrantReadWriteLock.WriteLock writeLock \u003d sortedNodesLock.writeLock();\n       writeLock.lock();\n       try {\n-        sortedNodes.clear();\n-        sortedNodes.addAll(sortNodes());\n+        try {\n+          List\u003cNodeId\u003e nodeIds \u003d sortNodes();\n+          sortedNodes.clear();\n+          sortedNodes.addAll(nodeIds);\n+        } catch (Exception ex) {\n+          LOG.warn(\"Got Exception while sorting nodes..\", ex);\n+        }\n         if (thresholdCalculator !\u003d null) {\n           thresholdCalculator.update();\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      ReentrantReadWriteLock.WriteLock writeLock \u003d sortedNodesLock.writeLock();\n      writeLock.lock();\n      try {\n        try {\n          List\u003cNodeId\u003e nodeIds \u003d sortNodes();\n          sortedNodes.clear();\n          sortedNodes.addAll(nodeIds);\n        } catch (Exception ex) {\n          LOG.warn(\"Got Exception while sorting nodes..\", ex);\n        }\n        if (thresholdCalculator !\u003d null) {\n          thresholdCalculator.update();\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java",
      "extendedDetails": {}
    },
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "18/05/16 6:46 PM",
      "commitNameOld": "1597630681c784a3d59f5605b87e96197b8139d7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 133.85,
      "commitsBetweenForRepo": 988,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,13 @@\n     public void run() {\n-      synchronized (sortedNodes) {\n+      ReentrantReadWriteLock.WriteLock writeLock \u003d sortedNodesLock.writeLock();\n+      writeLock.lock();\n+      try {\n         sortedNodes.clear();\n         sortedNodes.addAll(sortNodes());\n         if (thresholdCalculator !\u003d null) {\n           thresholdCalculator.update();\n         }\n+      } finally {\n+        writeLock.unlock();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      ReentrantReadWriteLock.WriteLock writeLock \u003d sortedNodesLock.writeLock();\n      writeLock.lock();\n      try {\n        sortedNodes.clear();\n        sortedNodes.addAll(sortNodes());\n        if (thresholdCalculator !\u003d null) {\n          thresholdCalculator.update();\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java",
      "extendedDetails": {}
    },
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
      "commitDate": "13/05/16 1:38 PM",
      "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
          "commitDate": "13/05/16 1:38 PM",
          "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "13/05/16 10:01 AM",
          "commitNameOld": "1f2794b4faf119a1ab66c8184ac84cec710d52a0",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,9 @@\n     public void run() {\n-      synchronized (topKNodes) {\n-        topKNodes.clear();\n-        topKNodes.addAll(computeTopKNodes());\n+      synchronized (sortedNodes) {\n+        sortedNodes.clear();\n+        sortedNodes.addAll(sortNodes());\n+        if (thresholdCalculator !\u003d null) {\n+          thresholdCalculator.update();\n+        }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      synchronized (sortedNodes) {\n        sortedNodes.clear();\n        sortedNodes.addAll(sortNodes());\n        if (thresholdCalculator !\u003d null) {\n          thresholdCalculator.update();\n        }\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/TopKNodeSelector.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
          "commitDate": "13/05/16 1:38 PM",
          "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "13/05/16 10:01 AM",
          "commitNameOld": "1f2794b4faf119a1ab66c8184ac84cec710d52a0",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,9 @@\n     public void run() {\n-      synchronized (topKNodes) {\n-        topKNodes.clear();\n-        topKNodes.addAll(computeTopKNodes());\n+      synchronized (sortedNodes) {\n+        sortedNodes.clear();\n+        sortedNodes.addAll(sortNodes());\n+        if (thresholdCalculator !\u003d null) {\n+          thresholdCalculator.update();\n+        }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      synchronized (sortedNodes) {\n        sortedNodes.clear();\n        sortedNodes.addAll(sortNodes());\n        if (thresholdCalculator !\u003d null) {\n          thresholdCalculator.update();\n        }\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java",
          "extendedDetails": {}
        }
      ]
    },
    "341888a0aa23f24458b4e6e34868794b9735c06a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4412. Create ClusterMonitor to compute ordered list of preferred NMs for OPPORTUNITIC containers. (asuresh)\n",
      "commitDate": "26/04/16 8:12 PM",
      "commitName": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,6 @@\n+    public void run() {\n+      synchronized (topKNodes) {\n+        topKNodes.clear();\n+        topKNodes.addAll(computeTopKNodes());\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      synchronized (topKNodes) {\n        topKNodes.clear();\n        topKNodes.addAll(computeTopKNodes());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/TopKNodeSelector.java"
    }
  }
}