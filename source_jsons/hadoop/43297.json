{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProviderUtils.java",
  "functionName": "handleStaticFilesForLocalization",
  "functionId": "handleStaticFilesForLocalization___launcher-AbstractLauncher__fs-SliderFileSystem__componentLaunchCtx-ContainerLaunchService.ComponentLaunchContext__resolvedParams-ProviderService.ResolvedLaunchParams",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
  "functionStartLine": 313,
  "functionEndLine": 358,
  "numCommitsSeen": 26,
  "timeTaken": 2151,
  "changeHistory": [
    "31e0122f4d4ddc4026470b45d2bf683ece137d44",
    "a33ef4fd311784dc15401eb54c82e78528c4f961",
    "3061bfcde53210d2032df3814243498b27a997b7",
    "6795f8072ffbe6138857e77d51af173f33e4e5c1"
  ],
  "changeHistoryShort": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": "Ybodychange",
    "a33ef4fd311784dc15401eb54c82e78528c4f961": "Ymultichange(Yparameterchange,Ybodychange)",
    "3061bfcde53210d2032df3814243498b27a997b7": "Ybodychange",
    "6795f8072ffbe6138857e77d51af173f33e4e5c1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
      "commitDate": "10/10/19 4:02 PM",
      "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/03/19 10:57 AM",
      "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 206.21,
      "commitsBetweenForRepo": 1606,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public static synchronized void handleStaticFilesForLocalization(\n       AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n       .ComponentLaunchContext componentLaunchCtx,\n       ProviderService.ResolvedLaunchParams resolvedParams)\n       throws IOException {\n     for (ConfigFile staticFile :\n         componentLaunchCtx.getConfiguration().getFiles()) {\n       // Only handle static file here.\n       if (!isStaticFile(staticFile)) {\n         continue;\n       }\n \n       if (staticFile.getSrcFile() \u003d\u003d null) {\n         // This should not happen, AbstractClientProvider should have checked\n         // this.\n         throw new IOException(\"srcFile is null, please double check.\");\n       }\n       Path sourceFile \u003d new Path(staticFile.getSrcFile());\n \n       // Output properties to sourceFile if not existed\n       if (!fs.getFileSystem().exists(sourceFile)) {\n         throw new IOException(\n             \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n       }\n \n       FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n       if (fileStatus.isDirectory()) {\n         throw new IOException(\"srcFile\u003d\" + sourceFile +\n             \" is a directory, which is not supported.\");\n       }\n \n       // Add resource for localization\n       LocalResource localResource \u003d fs.createAmResource(sourceFile,\n           (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n               LocalResourceType.ARCHIVE :\n-              LocalResourceType.FILE));\n+              LocalResourceType.FILE), staticFile.getVisibility());\n+\n       Path destFile \u003d new Path(sourceFile.getName());\n       if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n           .isEmpty()) {\n         destFile \u003d new Path(staticFile.getDestFile());\n       }\n       addLocalResource(launcher, destFile.getName(), localResource, destFile,\n           resolvedParams);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void handleStaticFilesForLocalization(\n      AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n      .ComponentLaunchContext componentLaunchCtx,\n      ProviderService.ResolvedLaunchParams resolvedParams)\n      throws IOException {\n    for (ConfigFile staticFile :\n        componentLaunchCtx.getConfiguration().getFiles()) {\n      // Only handle static file here.\n      if (!isStaticFile(staticFile)) {\n        continue;\n      }\n\n      if (staticFile.getSrcFile() \u003d\u003d null) {\n        // This should not happen, AbstractClientProvider should have checked\n        // this.\n        throw new IOException(\"srcFile is null, please double check.\");\n      }\n      Path sourceFile \u003d new Path(staticFile.getSrcFile());\n\n      // Output properties to sourceFile if not existed\n      if (!fs.getFileSystem().exists(sourceFile)) {\n        throw new IOException(\n            \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n      }\n\n      FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n      if (fileStatus.isDirectory()) {\n        throw new IOException(\"srcFile\u003d\" + sourceFile +\n            \" is a directory, which is not supported.\");\n      }\n\n      // Add resource for localization\n      LocalResource localResource \u003d fs.createAmResource(sourceFile,\n          (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n              LocalResourceType.ARCHIVE :\n              LocalResourceType.FILE), staticFile.getVisibility());\n\n      Path destFile \u003d new Path(sourceFile.getName());\n      if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n          .isEmpty()) {\n        destFile \u003d new Path(staticFile.getDestFile());\n      }\n      addLocalResource(launcher, destFile.getName(), localResource, destFile,\n          resolvedParams);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "a33ef4fd311784dc15401eb54c82e78528c4f961": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
      "commitDate": "24/01/19 3:43 PM",
      "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
          "commitDate": "24/01/19 3:43 PM",
          "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 120.2,
          "commitsBetweenForRepo": 905,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   public static synchronized void handleStaticFilesForLocalization(\n       AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n-      .ComponentLaunchContext componentLaunchCtx)\n+      .ComponentLaunchContext componentLaunchCtx,\n+      ProviderService.ResolvedLaunchParams resolvedParams)\n       throws IOException {\n     for (ConfigFile staticFile :\n         componentLaunchCtx.getConfiguration().getFiles()) {\n       // Only handle static file here.\n       if (!isStaticFile(staticFile)) {\n         continue;\n       }\n \n       if (staticFile.getSrcFile() \u003d\u003d null) {\n         // This should not happen, AbstractClientProvider should have checked\n         // this.\n         throw new IOException(\"srcFile is null, please double check.\");\n       }\n       Path sourceFile \u003d new Path(staticFile.getSrcFile());\n \n       // Output properties to sourceFile if not existed\n       if (!fs.getFileSystem().exists(sourceFile)) {\n         throw new IOException(\n             \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n       }\n \n       FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n       if (fileStatus.isDirectory()) {\n         throw new IOException(\"srcFile\u003d\" + sourceFile +\n             \" is a directory, which is not supported.\");\n       }\n \n       // Add resource for localization\n       LocalResource localResource \u003d fs.createAmResource(sourceFile,\n           (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n               LocalResourceType.ARCHIVE :\n               LocalResourceType.FILE));\n       Path destFile \u003d new Path(sourceFile.getName());\n       if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n           .isEmpty()) {\n         destFile \u003d new Path(staticFile.getDestFile());\n       }\n-\n-      addLocalResource(launcher, destFile.getName(), localResource, destFile);\n+      addLocalResource(launcher, destFile.getName(), localResource, destFile,\n+          resolvedParams);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void handleStaticFilesForLocalization(\n      AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n      .ComponentLaunchContext componentLaunchCtx,\n      ProviderService.ResolvedLaunchParams resolvedParams)\n      throws IOException {\n    for (ConfigFile staticFile :\n        componentLaunchCtx.getConfiguration().getFiles()) {\n      // Only handle static file here.\n      if (!isStaticFile(staticFile)) {\n        continue;\n      }\n\n      if (staticFile.getSrcFile() \u003d\u003d null) {\n        // This should not happen, AbstractClientProvider should have checked\n        // this.\n        throw new IOException(\"srcFile is null, please double check.\");\n      }\n      Path sourceFile \u003d new Path(staticFile.getSrcFile());\n\n      // Output properties to sourceFile if not existed\n      if (!fs.getFileSystem().exists(sourceFile)) {\n        throw new IOException(\n            \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n      }\n\n      FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n      if (fileStatus.isDirectory()) {\n        throw new IOException(\"srcFile\u003d\" + sourceFile +\n            \" is a directory, which is not supported.\");\n      }\n\n      // Add resource for localization\n      LocalResource localResource \u003d fs.createAmResource(sourceFile,\n          (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n              LocalResourceType.ARCHIVE :\n              LocalResourceType.FILE));\n      Path destFile \u003d new Path(sourceFile.getName());\n      if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n          .isEmpty()) {\n        destFile \u003d new Path(staticFile.getDestFile());\n      }\n      addLocalResource(launcher, destFile.getName(), localResource, destFile,\n          resolvedParams);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, fs-SliderFileSystem, componentLaunchCtx-ContainerLaunchService.ComponentLaunchContext]",
            "newValue": "[launcher-AbstractLauncher, fs-SliderFileSystem, componentLaunchCtx-ContainerLaunchService.ComponentLaunchContext, resolvedParams-ProviderService.ResolvedLaunchParams]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
          "commitDate": "24/01/19 3:43 PM",
          "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 120.2,
          "commitsBetweenForRepo": 905,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,45 @@\n   public static synchronized void handleStaticFilesForLocalization(\n       AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n-      .ComponentLaunchContext componentLaunchCtx)\n+      .ComponentLaunchContext componentLaunchCtx,\n+      ProviderService.ResolvedLaunchParams resolvedParams)\n       throws IOException {\n     for (ConfigFile staticFile :\n         componentLaunchCtx.getConfiguration().getFiles()) {\n       // Only handle static file here.\n       if (!isStaticFile(staticFile)) {\n         continue;\n       }\n \n       if (staticFile.getSrcFile() \u003d\u003d null) {\n         // This should not happen, AbstractClientProvider should have checked\n         // this.\n         throw new IOException(\"srcFile is null, please double check.\");\n       }\n       Path sourceFile \u003d new Path(staticFile.getSrcFile());\n \n       // Output properties to sourceFile if not existed\n       if (!fs.getFileSystem().exists(sourceFile)) {\n         throw new IOException(\n             \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n       }\n \n       FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n       if (fileStatus.isDirectory()) {\n         throw new IOException(\"srcFile\u003d\" + sourceFile +\n             \" is a directory, which is not supported.\");\n       }\n \n       // Add resource for localization\n       LocalResource localResource \u003d fs.createAmResource(sourceFile,\n           (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n               LocalResourceType.ARCHIVE :\n               LocalResourceType.FILE));\n       Path destFile \u003d new Path(sourceFile.getName());\n       if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n           .isEmpty()) {\n         destFile \u003d new Path(staticFile.getDestFile());\n       }\n-\n-      addLocalResource(launcher, destFile.getName(), localResource, destFile);\n+      addLocalResource(launcher, destFile.getName(), localResource, destFile,\n+          resolvedParams);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void handleStaticFilesForLocalization(\n      AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n      .ComponentLaunchContext componentLaunchCtx,\n      ProviderService.ResolvedLaunchParams resolvedParams)\n      throws IOException {\n    for (ConfigFile staticFile :\n        componentLaunchCtx.getConfiguration().getFiles()) {\n      // Only handle static file here.\n      if (!isStaticFile(staticFile)) {\n        continue;\n      }\n\n      if (staticFile.getSrcFile() \u003d\u003d null) {\n        // This should not happen, AbstractClientProvider should have checked\n        // this.\n        throw new IOException(\"srcFile is null, please double check.\");\n      }\n      Path sourceFile \u003d new Path(staticFile.getSrcFile());\n\n      // Output properties to sourceFile if not existed\n      if (!fs.getFileSystem().exists(sourceFile)) {\n        throw new IOException(\n            \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n      }\n\n      FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n      if (fileStatus.isDirectory()) {\n        throw new IOException(\"srcFile\u003d\" + sourceFile +\n            \" is a directory, which is not supported.\");\n      }\n\n      // Add resource for localization\n      LocalResource localResource \u003d fs.createAmResource(sourceFile,\n          (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n              LocalResourceType.ARCHIVE :\n              LocalResourceType.FILE));\n      Path destFile \u003d new Path(sourceFile.getName());\n      if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n          .isEmpty()) {\n        destFile \u003d new Path(staticFile.getDestFile());\n      }\n      addLocalResource(launcher, destFile.getName(), localResource, destFile,\n          resolvedParams);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "3061bfcde53210d2032df3814243498b27a997b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8339. Service AM should localize static/archive resource types to container working directory instead of \u0027resources\u0027. (Suma Shivaprasad via wangda)\n\nChange-Id: I9f8e8f621650347f6c2f9e3420edee9eb2f356a4\n",
      "commitDate": "29/05/18 9:23 AM",
      "commitName": "3061bfcde53210d2032df3814243498b27a997b7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "04/05/18 9:27 AM",
      "commitNameOld": "6795f8072ffbe6138857e77d51af173f33e4e5c1",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 25.0,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public static synchronized void handleStaticFilesForLocalization(\n       AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n       .ComponentLaunchContext componentLaunchCtx)\n       throws IOException {\n     for (ConfigFile staticFile :\n         componentLaunchCtx.getConfiguration().getFiles()) {\n       // Only handle static file here.\n       if (!isStaticFile(staticFile)) {\n         continue;\n       }\n \n       if (staticFile.getSrcFile() \u003d\u003d null) {\n         // This should not happen, AbstractClientProvider should have checked\n         // this.\n         throw new IOException(\"srcFile is null, please double check.\");\n       }\n       Path sourceFile \u003d new Path(staticFile.getSrcFile());\n \n       // Output properties to sourceFile if not existed\n       if (!fs.getFileSystem().exists(sourceFile)) {\n         throw new IOException(\n             \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n       }\n \n       FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n       if (fileStatus.isDirectory()) {\n         throw new IOException(\"srcFile\u003d\" + sourceFile +\n             \" is a directory, which is not supported.\");\n       }\n \n       // Add resource for localization\n       LocalResource localResource \u003d fs.createAmResource(sourceFile,\n           (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n               LocalResourceType.ARCHIVE :\n               LocalResourceType.FILE));\n       Path destFile \u003d new Path(sourceFile.getName());\n       if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n           .isEmpty()) {\n         destFile \u003d new Path(staticFile.getDestFile());\n       }\n \n-      String symlink \u003d APP_RESOURCES_DIR + \"/\" + destFile.getName();\n-      addLocalResource(launcher, symlink, localResource, destFile);\n+      addLocalResource(launcher, destFile.getName(), localResource, destFile);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void handleStaticFilesForLocalization(\n      AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n      .ComponentLaunchContext componentLaunchCtx)\n      throws IOException {\n    for (ConfigFile staticFile :\n        componentLaunchCtx.getConfiguration().getFiles()) {\n      // Only handle static file here.\n      if (!isStaticFile(staticFile)) {\n        continue;\n      }\n\n      if (staticFile.getSrcFile() \u003d\u003d null) {\n        // This should not happen, AbstractClientProvider should have checked\n        // this.\n        throw new IOException(\"srcFile is null, please double check.\");\n      }\n      Path sourceFile \u003d new Path(staticFile.getSrcFile());\n\n      // Output properties to sourceFile if not existed\n      if (!fs.getFileSystem().exists(sourceFile)) {\n        throw new IOException(\n            \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n      }\n\n      FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n      if (fileStatus.isDirectory()) {\n        throw new IOException(\"srcFile\u003d\" + sourceFile +\n            \" is a directory, which is not supported.\");\n      }\n\n      // Add resource for localization\n      LocalResource localResource \u003d fs.createAmResource(sourceFile,\n          (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n              LocalResourceType.ARCHIVE :\n              LocalResourceType.FILE));\n      Path destFile \u003d new Path(sourceFile.getName());\n      if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n          .isEmpty()) {\n        destFile \u003d new Path(staticFile.getDestFile());\n      }\n\n      addLocalResource(launcher, destFile.getName(), localResource, destFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "6795f8072ffbe6138857e77d51af173f33e4e5c1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8079. Support static and archive unmodified local resources in service AM. Contributed by Suma Shivaprasad\n",
      "commitDate": "04/05/18 9:27 AM",
      "commitName": "6795f8072ffbe6138857e77d51af173f33e4e5c1",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,45 @@\n+  public static synchronized void handleStaticFilesForLocalization(\n+      AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n+      .ComponentLaunchContext componentLaunchCtx)\n+      throws IOException {\n+    for (ConfigFile staticFile :\n+        componentLaunchCtx.getConfiguration().getFiles()) {\n+      // Only handle static file here.\n+      if (!isStaticFile(staticFile)) {\n+        continue;\n+      }\n+\n+      if (staticFile.getSrcFile() \u003d\u003d null) {\n+        // This should not happen, AbstractClientProvider should have checked\n+        // this.\n+        throw new IOException(\"srcFile is null, please double check.\");\n+      }\n+      Path sourceFile \u003d new Path(staticFile.getSrcFile());\n+\n+      // Output properties to sourceFile if not existed\n+      if (!fs.getFileSystem().exists(sourceFile)) {\n+        throw new IOException(\n+            \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n+      }\n+\n+      FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n+      if (fileStatus.isDirectory()) {\n+        throw new IOException(\"srcFile\u003d\" + sourceFile +\n+            \" is a directory, which is not supported.\");\n+      }\n+\n+      // Add resource for localization\n+      LocalResource localResource \u003d fs.createAmResource(sourceFile,\n+          (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n+              LocalResourceType.ARCHIVE :\n+              LocalResourceType.FILE));\n+      Path destFile \u003d new Path(sourceFile.getName());\n+      if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n+          .isEmpty()) {\n+        destFile \u003d new Path(staticFile.getDestFile());\n+      }\n+\n+      String symlink \u003d APP_RESOURCES_DIR + \"/\" + destFile.getName();\n+      addLocalResource(launcher, symlink, localResource, destFile);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void handleStaticFilesForLocalization(\n      AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService\n      .ComponentLaunchContext componentLaunchCtx)\n      throws IOException {\n    for (ConfigFile staticFile :\n        componentLaunchCtx.getConfiguration().getFiles()) {\n      // Only handle static file here.\n      if (!isStaticFile(staticFile)) {\n        continue;\n      }\n\n      if (staticFile.getSrcFile() \u003d\u003d null) {\n        // This should not happen, AbstractClientProvider should have checked\n        // this.\n        throw new IOException(\"srcFile is null, please double check.\");\n      }\n      Path sourceFile \u003d new Path(staticFile.getSrcFile());\n\n      // Output properties to sourceFile if not existed\n      if (!fs.getFileSystem().exists(sourceFile)) {\n        throw new IOException(\n            \"srcFile\u003d\" + sourceFile + \" doesn\u0027t exist, please double check.\");\n      }\n\n      FileStatus fileStatus \u003d fs.getFileSystem().getFileStatus(sourceFile);\n      if (fileStatus.isDirectory()) {\n        throw new IOException(\"srcFile\u003d\" + sourceFile +\n            \" is a directory, which is not supported.\");\n      }\n\n      // Add resource for localization\n      LocalResource localResource \u003d fs.createAmResource(sourceFile,\n          (staticFile.getType() \u003d\u003d ConfigFile.TypeEnum.ARCHIVE ?\n              LocalResourceType.ARCHIVE :\n              LocalResourceType.FILE));\n      Path destFile \u003d new Path(sourceFile.getName());\n      if (staticFile.getDestFile() !\u003d null \u0026\u0026 !staticFile.getDestFile()\n          .isEmpty()) {\n        destFile \u003d new Path(staticFile.getDestFile());\n      }\n\n      String symlink \u003d APP_RESOURCES_DIR + \"/\" + destFile.getName();\n      addLocalResource(launcher, symlink, localResource, destFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java"
    }
  }
}