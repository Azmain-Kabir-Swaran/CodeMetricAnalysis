{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirRenameOp.java",
  "functionName": "renameToInt",
  "functionId": "renameToInt___fsd-FSDirectory__pc-FSPermissionChecker__srcArg-String(modifiers-final)__dstArg-String(modifiers-final)__logRetryCache-boolean__options-Options.Rename",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
  "functionStartLine": 239,
  "functionEndLine": 253,
  "numCommitsSeen": 540,
  "timeTaken": 12574,
  "changeHistory": [
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "5f34402adae191232fe78e62990396ca07f314bb",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "65f2a4ee600dfffa5203450261da3c1989de25a9",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
    "c95b878abf313507666ea018f9e6033c4c166e10"
  ],
  "changeHistoryShort": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ymultichange(Yparameterchange,Ybodychange)",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "5f34402adae191232fe78e62990396ca07f314bb": "Ymultichange(Yreturntypechange,Ybodychange)",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "65f2a4ee600dfffa5203450261da3c1989de25a9": "Ybodychange",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ybodychange",
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "c95b878abf313507666ea018f9e6033c4c166e10": "Ybodychange"
  },
  "changeHistoryDetails": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "16/05/17 9:28 AM",
          "commitNameOld": "9b90e52f1ec22c18cd535af2a569defcef65b093",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 282.13,
          "commitsBetweenForRepo": 1928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n   static RenameResult renameToInt(\n-      FSDirectory fsd, final String srcArg, final String dstArg,\n-      boolean logRetryCache, Options.Rename... options)\n+      FSDirectory fsd, FSPermissionChecker pc, final String srcArg,\n+      final String dstArg, boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n-    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     // returns resolved path\n     return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static RenameResult renameToInt(\n      FSDirectory fsd, FSPermissionChecker pc, final String srcArg,\n      final String dstArg, boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    // returns resolved path\n    return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, srcArg-String(modifiers-final), dstArg-String(modifiers-final), logRetryCache-boolean, options-Options.Rename]",
            "newValue": "[fsd-FSDirectory, pc-FSPermissionChecker, srcArg-String(modifiers-final), dstArg-String(modifiers-final), logRetryCache-boolean, options-Options.Rename]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "16/05/17 9:28 AM",
          "commitNameOld": "9b90e52f1ec22c18cd535af2a569defcef65b093",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 282.13,
          "commitsBetweenForRepo": 1928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n   static RenameResult renameToInt(\n-      FSDirectory fsd, final String srcArg, final String dstArg,\n-      boolean logRetryCache, Options.Rename... options)\n+      FSDirectory fsd, FSPermissionChecker pc, final String srcArg,\n+      final String dstArg, boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n-    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     // returns resolved path\n     return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static RenameResult renameToInt(\n      FSDirectory fsd, FSPermissionChecker pc, final String srcArg,\n      final String dstArg, boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    // returns resolved path\n    return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 1:11 PM",
      "commitNameOld": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,16 @@\n   static RenameResult renameToInt(\n       FSDirectory fsd, final String srcArg, final String dstArg,\n       boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n-    if (!DFSUtil.isValidName(dst)) {\n-      throw new InvalidPathException(\"Invalid name: \" + dst);\n-    }\n     final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     // returns resolved path\n     return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static RenameResult renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    // returns resolved path\n    return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
      "extendedDetails": {}
    },
    "5f34402adae191232fe78e62990396ca07f314bb": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-10779. Rename does not need to re-solve destination. Contributed by Daryn Sharp.\n",
      "commitDate": "28/09/16 3:57 PM",
      "commitName": "5f34402adae191232fe78e62990396ca07f314bb",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-10779. Rename does not need to re-solve destination. Contributed by Daryn Sharp.\n",
          "commitDate": "28/09/16 3:57 PM",
          "commitName": "5f34402adae191232fe78e62990396ca07f314bb",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "22/08/16 6:29 PM",
          "commitNameOld": "c49333becfa7652460976a61eb86522010bcfeed",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 36.89,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,19 @@\n-  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n+  static RenameResult renameToInt(\n       FSDirectory fsd, final String srcArg, final String dstArg,\n       boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     // returns resolved path\n-    dst \u003d renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n-    INodesInPath dstIIP \u003d fsd.getINodesInPath(dst, false);\n-    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dstIIP);\n-\n-    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(\n-        collectedBlocks, resultingStat);\n+    return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static RenameResult renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    // returns resolved path\n    return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldValue": "Map.Entry\u003cBlocksMapUpdateInfo,HdfsFileStatus\u003e",
            "newValue": "RenameResult"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10779. Rename does not need to re-solve destination. Contributed by Daryn Sharp.\n",
          "commitDate": "28/09/16 3:57 PM",
          "commitName": "5f34402adae191232fe78e62990396ca07f314bb",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "22/08/16 6:29 PM",
          "commitNameOld": "c49333becfa7652460976a61eb86522010bcfeed",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 36.89,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,19 @@\n-  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n+  static RenameResult renameToInt(\n       FSDirectory fsd, final String srcArg, final String dstArg,\n       boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     // returns resolved path\n-    dst \u003d renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n-    INodesInPath dstIIP \u003d fsd.getINodesInPath(dst, false);\n-    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dstIIP);\n-\n-    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(\n-        collectedBlocks, resultingStat);\n+    return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static RenameResult renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    // returns resolved path\n    return renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 2:45 PM",
      "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n       FSDirectory fsd, final String srcArg, final String dstArg,\n       boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n-    src \u003d fsd.resolvePath(pc, src);\n-    dst \u003d fsd.resolvePath(pc, dst);\n-    renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n+    // returns resolved path\n+    dst \u003d renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n     INodesInPath dstIIP \u003d fsd.getINodesInPath(dst, false);\n     HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dstIIP);\n \n     return new AbstractMap.SimpleImmutableEntry\u003c\u003e(\n         collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    // returns resolved path\n    dst \u003d renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n    INodesInPath dstIIP \u003d fsd.getINodesInPath(dst, false);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dstIIP);\n\n    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(\n        collectedBlocks, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "01/12/15 4:09 PM",
      "commitNameOld": "a49cc74b4c72195dee1dfb6f9548e5e411dff553",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 257.9,
      "commitsBetweenForRepo": 1769,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,25 @@\n   static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n       FSDirectory fsd, final String srcArg, final String dstArg,\n       boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n-    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n-    src \u003d fsd.resolvePath(pc, src, srcComponents);\n-    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n+    src \u003d fsd.resolvePath(pc, src);\n+    dst \u003d fsd.resolvePath(pc, dst);\n     renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n     INodesInPath dstIIP \u003d fsd.getINodesInPath(dst, false);\n     HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dstIIP);\n \n     return new AbstractMap.SimpleImmutableEntry\u003c\u003e(\n         collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src);\n    dst \u003d fsd.resolvePath(pc, dst);\n    renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n    INodesInPath dstIIP \u003d fsd.getINodesInPath(dst, false);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dstIIP);\n\n    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(\n        collectedBlocks, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
      "extendedDetails": {}
    },
    "65f2a4ee600dfffa5203450261da3c1989de25a9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7543. Avoid path resolution when getting FileStatus for audit logs. Contributed by Haohui Mai.\n",
      "commitDate": "18/12/14 11:25 AM",
      "commitName": "65f2a4ee600dfffa5203450261da3c1989de25a9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/12/14 10:32 AM",
      "commitNameOld": "4281c96e24739387bc2084f819c0176d0051a5e9",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n       FSDirectory fsd, final String srcArg, final String dstArg,\n       boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     src \u003d fsd.resolvePath(pc, src, srcComponents);\n     dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n     renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n-    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n+    INodesInPath dstIIP \u003d fsd.getINodesInPath(dst, false);\n+    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dstIIP);\n \n-    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n-        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n+    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(\n+        collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src, srcComponents);\n    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n    renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n    INodesInPath dstIIP \u003d fsd.getINodesInPath(dst, false);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dstIIP);\n\n    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(\n        collectedBlocks, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
      "extendedDetails": {}
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "11/12/14 12:36 PM",
      "commitNameOld": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n       FSDirectory fsd, final String srcArg, final String dstArg,\n       boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n           \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n \n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     src \u003d fsd.resolvePath(pc, src, srcComponents);\n     dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n-    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n-        options);\n+    renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n     HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n \n     return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n         HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src, srcComponents);\n    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n    renameTo(fsd, pc, src, dst, collectedBlocks, logRetryCache, options);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n\n    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
      "extendedDetails": {}
    },
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "01/12/14 9:48 PM",
      "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,27 @@\n-  private boolean renameToInt(final String srcArg, final String dstArg,\n-    boolean logRetryCache)\n-    throws IOException, UnresolvedLinkException {\n+  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n+      FSDirectory fsd, final String srcArg, final String dstArg,\n+      boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: \" + src +\n-          \" to \" + dst);\n+      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n+          \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n-      throw new IOException(\"Invalid name: \" + dst);\n+      throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    boolean status \u003d false;\n-    HdfsFileStatus resultingStat \u003d null;\n-    writeLock();\n-    try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      waitForLoadingFSImage();\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      checkOperation(OperationCategory.WRITE);\n-      status \u003d renameToInternal(pc, src, dst, logRetryCache);\n-      if (status) {\n-        resultingStat \u003d getAuditFileInfo(dst, false);\n-      }\n-    } finally {\n-      writeUnlock();\n-    }\n-    getEditLog().logSync();\n-    if (status) {\n-      logAuditEvent(true, \"rename\", srcArg, dstArg, resultingStat);\n-    }\n-    return status;\n+    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n+    src \u003d fsd.resolvePath(pc, src, srcComponents);\n+    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n+    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n+        options);\n+    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n+\n+    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n+        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src, srcComponents);\n    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n        options);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n\n    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
            "oldMethodName": "renameToInt",
            "newMethodName": "renameToInt"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,27 @@\n-  private boolean renameToInt(final String srcArg, final String dstArg,\n-    boolean logRetryCache)\n-    throws IOException, UnresolvedLinkException {\n+  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n+      FSDirectory fsd, final String srcArg, final String dstArg,\n+      boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: \" + src +\n-          \" to \" + dst);\n+      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n+          \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n-      throw new IOException(\"Invalid name: \" + dst);\n+      throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    boolean status \u003d false;\n-    HdfsFileStatus resultingStat \u003d null;\n-    writeLock();\n-    try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      waitForLoadingFSImage();\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      checkOperation(OperationCategory.WRITE);\n-      status \u003d renameToInternal(pc, src, dst, logRetryCache);\n-      if (status) {\n-        resultingStat \u003d getAuditFileInfo(dst, false);\n-      }\n-    } finally {\n-      writeUnlock();\n-    }\n-    getEditLog().logSync();\n-    if (status) {\n-      logAuditEvent(true, \"rename\", srcArg, dstArg, resultingStat);\n-    }\n-    return status;\n+    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n+    src \u003d fsd.resolvePath(pc, src, srcComponents);\n+    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n+    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n+        options);\n+    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n+\n+    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n+        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src, srcComponents);\n    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n        options);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n\n    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "Map.Entry\u003cBlocksMapUpdateInfo,HdfsFileStatus\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,27 @@\n-  private boolean renameToInt(final String srcArg, final String dstArg,\n-    boolean logRetryCache)\n-    throws IOException, UnresolvedLinkException {\n+  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n+      FSDirectory fsd, final String srcArg, final String dstArg,\n+      boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: \" + src +\n-          \" to \" + dst);\n+      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n+          \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n-      throw new IOException(\"Invalid name: \" + dst);\n+      throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    boolean status \u003d false;\n-    HdfsFileStatus resultingStat \u003d null;\n-    writeLock();\n-    try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      waitForLoadingFSImage();\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      checkOperation(OperationCategory.WRITE);\n-      status \u003d renameToInternal(pc, src, dst, logRetryCache);\n-      if (status) {\n-        resultingStat \u003d getAuditFileInfo(dst, false);\n-      }\n-    } finally {\n-      writeUnlock();\n-    }\n-    getEditLog().logSync();\n-    if (status) {\n-      logAuditEvent(true, \"rename\", srcArg, dstArg, resultingStat);\n-    }\n-    return status;\n+    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n+    src \u003d fsd.resolvePath(pc, src, srcComponents);\n+    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n+    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n+        options);\n+    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n+\n+    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n+        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src, srcComponents);\n    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n        options);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n\n    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,27 @@\n-  private boolean renameToInt(final String srcArg, final String dstArg,\n-    boolean logRetryCache)\n-    throws IOException, UnresolvedLinkException {\n+  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n+      FSDirectory fsd, final String srcArg, final String dstArg,\n+      boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: \" + src +\n-          \" to \" + dst);\n+      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n+          \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n-      throw new IOException(\"Invalid name: \" + dst);\n+      throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    boolean status \u003d false;\n-    HdfsFileStatus resultingStat \u003d null;\n-    writeLock();\n-    try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      waitForLoadingFSImage();\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      checkOperation(OperationCategory.WRITE);\n-      status \u003d renameToInternal(pc, src, dst, logRetryCache);\n-      if (status) {\n-        resultingStat \u003d getAuditFileInfo(dst, false);\n-      }\n-    } finally {\n-      writeUnlock();\n-    }\n-    getEditLog().logSync();\n-    if (status) {\n-      logAuditEvent(true, \"rename\", srcArg, dstArg, resultingStat);\n-    }\n-    return status;\n+    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n+    src \u003d fsd.resolvePath(pc, src, srcComponents);\n+    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n+    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n+        options);\n+    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n+\n+    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n+        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src, srcComponents);\n    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n        options);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n\n    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldValue": "[IOException, UnresolvedLinkException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,27 @@\n-  private boolean renameToInt(final String srcArg, final String dstArg,\n-    boolean logRetryCache)\n-    throws IOException, UnresolvedLinkException {\n+  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n+      FSDirectory fsd, final String srcArg, final String dstArg,\n+      boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: \" + src +\n-          \" to \" + dst);\n+      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n+          \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n-      throw new IOException(\"Invalid name: \" + dst);\n+      throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    boolean status \u003d false;\n-    HdfsFileStatus resultingStat \u003d null;\n-    writeLock();\n-    try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      waitForLoadingFSImage();\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      checkOperation(OperationCategory.WRITE);\n-      status \u003d renameToInternal(pc, src, dst, logRetryCache);\n-      if (status) {\n-        resultingStat \u003d getAuditFileInfo(dst, false);\n-      }\n-    } finally {\n-      writeUnlock();\n-    }\n-    getEditLog().logSync();\n-    if (status) {\n-      logAuditEvent(true, \"rename\", srcArg, dstArg, resultingStat);\n-    }\n-    return status;\n+    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n+    src \u003d fsd.resolvePath(pc, src, srcComponents);\n+    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n+    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n+        options);\n+    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n+\n+    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n+        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src, srcComponents);\n    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n        options);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n\n    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,27 @@\n-  private boolean renameToInt(final String srcArg, final String dstArg,\n-    boolean logRetryCache)\n-    throws IOException, UnresolvedLinkException {\n+  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n+      FSDirectory fsd, final String srcArg, final String dstArg,\n+      boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: \" + src +\n-          \" to \" + dst);\n+      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n+          \" \" + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n-      throw new IOException(\"Invalid name: \" + dst);\n+      throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    boolean status \u003d false;\n-    HdfsFileStatus resultingStat \u003d null;\n-    writeLock();\n-    try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      waitForLoadingFSImage();\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      checkOperation(OperationCategory.WRITE);\n-      status \u003d renameToInternal(pc, src, dst, logRetryCache);\n-      if (status) {\n-        resultingStat \u003d getAuditFileInfo(dst, false);\n-      }\n-    } finally {\n-      writeUnlock();\n-    }\n-    getEditLog().logSync();\n-    if (status) {\n-      logAuditEvent(true, \"rename\", srcArg, dstArg, resultingStat);\n-    }\n-    return status;\n+    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n+    src \u003d fsd.resolvePath(pc, src, srcComponents);\n+    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n+    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n+        options);\n+    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n+\n+    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n+        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e renameToInt(\n      FSDirectory fsd, final String srcArg, final String dstArg,\n      boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options -\" +\n          \" \" + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    src \u003d fsd.resolvePath(pc, src, srcComponents);\n    dst \u003d fsd.resolvePath(pc, dst, dstComponents);\n    renameToInternal(fsd, pc, src, dst, logRetryCache, collectedBlocks,\n        options);\n    HdfsFileStatus resultingStat \u003d fsd.getAuditFileInfo(dst, false);\n\n    return new AbstractMap.SimpleImmutableEntry\u003cBlocksMapUpdateInfo,\n        HdfsFileStatus\u003e(collectedBlocks, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), dstArg-String(modifiers-final), logRetryCache-boolean]",
            "newValue": "[fsd-FSDirectory, srcArg-String(modifiers-final), dstArg-String(modifiers-final), logRetryCache-boolean, options-Options.Rename]"
          }
        }
      ]
    },
    "c95b878abf313507666ea018f9e6033c4c166e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7415. Move FSNameSystem.resolvePath() to FSDirectory. Contributed by Haohui Mai.\n",
      "commitDate": "20/11/14 7:23 PM",
      "commitName": "c95b878abf313507666ea018f9e6033c4c166e10",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 5:33 PM",
      "commitNameOld": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private boolean renameToInt(final String srcArg, final String dstArg,\n     boolean logRetryCache)\n     throws IOException, UnresolvedLinkException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: \" + src +\n           \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new IOException(\"Invalid name: \" + dst);\n     }\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n     boolean status \u003d false;\n     HdfsFileStatus resultingStat \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n       waitForLoadingFSImage();\n-      src \u003d resolvePath(src, srcComponents);\n-      dst \u003d resolvePath(dst, dstComponents);\n+      src \u003d dir.resolvePath(pc, src, srcComponents);\n+      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n       checkOperation(OperationCategory.WRITE);\n       status \u003d renameToInternal(pc, src, dst, logRetryCache);\n       if (status) {\n         resultingStat \u003d getAuditFileInfo(dst, false);\n       }\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     if (status) {\n       logAuditEvent(true, \"rename\", srcArg, dstArg, resultingStat);\n     }\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean renameToInt(final String srcArg, final String dstArg,\n    boolean logRetryCache)\n    throws IOException, UnresolvedLinkException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: \" + src +\n          \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new IOException(\"Invalid name: \" + dst);\n    }\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    boolean status \u003d false;\n    HdfsFileStatus resultingStat \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      waitForLoadingFSImage();\n      src \u003d dir.resolvePath(pc, src, srcComponents);\n      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n      checkOperation(OperationCategory.WRITE);\n      status \u003d renameToInternal(pc, src, dst, logRetryCache);\n      if (status) {\n        resultingStat \u003d getAuditFileInfo(dst, false);\n      }\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    if (status) {\n      logAuditEvent(true, \"rename\", srcArg, dstArg, resultingStat);\n    }\n    return status;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}