{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSSchedulerConfigurationStore.java",
  "functionName": "logMutation",
  "functionId": "logMutation___logMutation-LogMutation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/FSSchedulerConfigurationStore.java",
  "functionStartLine": 136,
  "functionEndLine": 148,
  "numCommitsSeen": 10,
  "timeTaken": 1679,
  "changeHistory": [
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
    "1606dad133de0dbee59175509a22994ec570ea41"
  ],
  "changeHistoryShort": {
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18": "Ybodychange",
    "1606dad133de0dbee59175509a22994ec570ea41": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9788. Queue Management API does not support parallel updates. Contributed by Prabhu Joseph\n",
      "commitDate": "14/01/20 3:26 AM",
      "commitName": "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "18/10/19 5:30 PM",
      "commitNameOld": "155864da006346a500ff35c2f6b69281093195b1",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.46,
      "commitsBetweenForRepo": 311,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,13 @@\n   public void logMutation(LogMutation logMutation) throws IOException {\n-    pendingMutation \u003d logMutation;\n     LOG.info(new GsonBuilder().serializeNulls().create().toJson(logMutation));\n     oldConf \u003d new Configuration(schedConf);\n-    Map\u003cString, String\u003e mutations \u003d pendingMutation.getUpdates();\n+    Map\u003cString, String\u003e mutations \u003d logMutation.getUpdates();\n     for (Map.Entry\u003cString, String\u003e kv : mutations.entrySet()) {\n       if (kv.getValue() \u003d\u003d null) {\n         this.schedConf.unset(kv.getKey());\n       } else {\n         this.schedConf.set(kv.getKey(), kv.getValue());\n       }\n     }\n     tempConfigPath \u003d writeTmpConfig(schedConf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void logMutation(LogMutation logMutation) throws IOException {\n    LOG.info(new GsonBuilder().serializeNulls().create().toJson(logMutation));\n    oldConf \u003d new Configuration(schedConf);\n    Map\u003cString, String\u003e mutations \u003d logMutation.getUpdates();\n    for (Map.Entry\u003cString, String\u003e kv : mutations.entrySet()) {\n      if (kv.getValue() \u003d\u003d null) {\n        this.schedConf.unset(kv.getKey());\n      } else {\n        this.schedConf.set(kv.getKey(), kv.getValue());\n      }\n    }\n    tempConfigPath \u003d writeTmpConfig(schedConf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/FSSchedulerConfigurationStore.java",
      "extendedDetails": {}
    },
    "1606dad133de0dbee59175509a22994ec570ea41": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7497. Add file system based scheduler configuration store. Contributed by Jiandan Yang.\n",
      "commitDate": "30/03/18 6:41 AM",
      "commitName": "1606dad133de0dbee59175509a22994ec570ea41",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,14 @@\n+  public void logMutation(LogMutation logMutation) throws IOException {\n+    pendingMutation \u003d logMutation;\n+    LOG.info(new GsonBuilder().serializeNulls().create().toJson(logMutation));\n+    oldConf \u003d new Configuration(schedConf);\n+    Map\u003cString, String\u003e mutations \u003d pendingMutation.getUpdates();\n+    for (Map.Entry\u003cString, String\u003e kv : mutations.entrySet()) {\n+      if (kv.getValue() \u003d\u003d null) {\n+        this.schedConf.unset(kv.getKey());\n+      } else {\n+        this.schedConf.set(kv.getKey(), kv.getValue());\n+      }\n+    }\n+    tempConfigPath \u003d writeTmpConfig(schedConf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void logMutation(LogMutation logMutation) throws IOException {\n    pendingMutation \u003d logMutation;\n    LOG.info(new GsonBuilder().serializeNulls().create().toJson(logMutation));\n    oldConf \u003d new Configuration(schedConf);\n    Map\u003cString, String\u003e mutations \u003d pendingMutation.getUpdates();\n    for (Map.Entry\u003cString, String\u003e kv : mutations.entrySet()) {\n      if (kv.getValue() \u003d\u003d null) {\n        this.schedConf.unset(kv.getKey());\n      } else {\n        this.schedConf.set(kv.getKey(), kv.getValue());\n      }\n    }\n    tempConfigPath \u003d writeTmpConfig(schedConf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/FSSchedulerConfigurationStore.java"
    }
  }
}