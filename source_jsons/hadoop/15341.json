{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JMXGet.java",
  "functionName": "init",
  "functionId": "init",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
  "functionStartLine": 160,
  "functionEndLine": 227,
  "numCommitsSeen": 8,
  "timeTaken": 4258,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init() throws Exception {\n\n    err(\"init: server\u003d\" + server + \";port\u003d\" + port + \";service\u003d\" + service\n        + \";localVMUrl\u003d\" + localVMUrl);\n\n    String url_string \u003d null;\n    // build connection url\n    if (localVMUrl !\u003d null) {\n      // use\n      // jstat -snap \u003cvmpid\u003e | grep sun.management.JMXConnectorServer.address\n      // to get url\n      url_string \u003d localVMUrl;\n      err(\"url string for local pid \u003d \" + localVMUrl + \" \u003d \" + url_string);\n\n    } else if (!port.isEmpty() \u0026\u0026 !server.isEmpty()) {\n      // using server and port\n      url_string \u003d \"service:jmx:rmi:///jndi/rmi://\" + server + \":\" + port\n      + \"/jmxrmi\";\n    } // else url stays null\n\n    // Create an RMI connector client and\n    // connect it to the RMI connector server\n\n    if (url_string \u003d\u003d null) { // assume local vm (for example for Testing)\n      mbsc \u003d ManagementFactory.getPlatformMBeanServer();\n    } else {\n      JMXServiceURL url \u003d new JMXServiceURL(url_string);\n\n      err(\"Create RMI connector and connect to the RMI connector server\" + url);\n\n      JMXConnector jmxc \u003d JMXConnectorFactory.connect(url, null);\n      // Get an MBeanServerConnection\n      //\n      err(\"\\nGet an MBeanServerConnection\");\n      mbsc \u003d jmxc.getMBeanServerConnection();\n    }\n\n    // Get domains from MBeanServer\n    //\n    err(\"\\nDomains:\");\n\n    String domains[] \u003d mbsc.getDomains();\n    Arrays.sort(domains);\n    for (String domain : domains) {\n      err(\"\\tDomain \u003d \" + domain);\n    }\n\n    // Get MBeanServer\u0027s default domain\n    //\n    err(\"\\nMBeanServer default domain \u003d \" + mbsc.getDefaultDomain());\n\n    // Get MBean count\n    //\n    err(\"\\nMBean count \u003d \" + mbsc.getMBeanCount());\n\n    // Query MBean names for specific domain \"hadoop\" and service\n    ObjectName query \u003d new ObjectName(\"Hadoop:service\u003d\" + service + \",*\");\n    hadoopObjectNames \u003d new ArrayList\u003cObjectName\u003e(5);\n    err(\"\\nQuery MBeanServer MBeans:\");\n    Set\u003cObjectName\u003e names \u003d new TreeSet\u003cObjectName\u003e(mbsc\n        .queryNames(query, null));\n\n    for (ObjectName name : names) {\n      hadoopObjectNames.add(name);\n      err(\"Hadoop service: \" + name);\n    }\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init() throws Exception {\n\n    err(\"init: server\u003d\" + server + \";port\u003d\" + port + \";service\u003d\" + service\n        + \";localVMUrl\u003d\" + localVMUrl);\n\n    String url_string \u003d null;\n    // build connection url\n    if (localVMUrl !\u003d null) {\n      // use\n      // jstat -snap \u003cvmpid\u003e | grep sun.management.JMXConnectorServer.address\n      // to get url\n      url_string \u003d localVMUrl;\n      err(\"url string for local pid \u003d \" + localVMUrl + \" \u003d \" + url_string);\n\n    } else if (!port.isEmpty() \u0026\u0026 !server.isEmpty()) {\n      // using server and port\n      url_string \u003d \"service:jmx:rmi:///jndi/rmi://\" + server + \":\" + port\n      + \"/jmxrmi\";\n    } // else url stays null\n\n    // Create an RMI connector client and\n    // connect it to the RMI connector server\n\n    if (url_string \u003d\u003d null) { // assume local vm (for example for Testing)\n      mbsc \u003d ManagementFactory.getPlatformMBeanServer();\n    } else {\n      JMXServiceURL url \u003d new JMXServiceURL(url_string);\n\n      err(\"Create RMI connector and connect to the RMI connector server\" + url);\n\n      JMXConnector jmxc \u003d JMXConnectorFactory.connect(url, null);\n      // Get an MBeanServerConnection\n      //\n      err(\"\\nGet an MBeanServerConnection\");\n      mbsc \u003d jmxc.getMBeanServerConnection();\n    }\n\n    // Get domains from MBeanServer\n    //\n    err(\"\\nDomains:\");\n\n    String domains[] \u003d mbsc.getDomains();\n    Arrays.sort(domains);\n    for (String domain : domains) {\n      err(\"\\tDomain \u003d \" + domain);\n    }\n\n    // Get MBeanServer\u0027s default domain\n    //\n    err(\"\\nMBeanServer default domain \u003d \" + mbsc.getDefaultDomain());\n\n    // Get MBean count\n    //\n    err(\"\\nMBean count \u003d \" + mbsc.getMBeanCount());\n\n    // Query MBean names for specific domain \"hadoop\" and service\n    ObjectName query \u003d new ObjectName(\"Hadoop:service\u003d\" + service + \",*\");\n    hadoopObjectNames \u003d new ArrayList\u003cObjectName\u003e(5);\n    err(\"\\nQuery MBeanServer MBeans:\");\n    Set\u003cObjectName\u003e names \u003d new TreeSet\u003cObjectName\u003e(mbsc\n        .queryNames(query, null));\n\n    for (ObjectName name : names) {\n      hadoopObjectNames.add(name);\n      err(\"Hadoop service: \" + name);\n    }\n\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,68 @@\n+  public void init() throws Exception {\n+\n+    err(\"init: server\u003d\" + server + \";port\u003d\" + port + \";service\u003d\" + service\n+        + \";localVMUrl\u003d\" + localVMUrl);\n+\n+    String url_string \u003d null;\n+    // build connection url\n+    if (localVMUrl !\u003d null) {\n+      // use\n+      // jstat -snap \u003cvmpid\u003e | grep sun.management.JMXConnectorServer.address\n+      // to get url\n+      url_string \u003d localVMUrl;\n+      err(\"url string for local pid \u003d \" + localVMUrl + \" \u003d \" + url_string);\n+\n+    } else if (!port.isEmpty() \u0026\u0026 !server.isEmpty()) {\n+      // using server and port\n+      url_string \u003d \"service:jmx:rmi:///jndi/rmi://\" + server + \":\" + port\n+      + \"/jmxrmi\";\n+    } // else url stays null\n+\n+    // Create an RMI connector client and\n+    // connect it to the RMI connector server\n+\n+    if (url_string \u003d\u003d null) { // assume local vm (for example for Testing)\n+      mbsc \u003d ManagementFactory.getPlatformMBeanServer();\n+    } else {\n+      JMXServiceURL url \u003d new JMXServiceURL(url_string);\n+\n+      err(\"Create RMI connector and connect to the RMI connector server\" + url);\n+\n+      JMXConnector jmxc \u003d JMXConnectorFactory.connect(url, null);\n+      // Get an MBeanServerConnection\n+      //\n+      err(\"\\nGet an MBeanServerConnection\");\n+      mbsc \u003d jmxc.getMBeanServerConnection();\n+    }\n+\n+    // Get domains from MBeanServer\n+    //\n+    err(\"\\nDomains:\");\n+\n+    String domains[] \u003d mbsc.getDomains();\n+    Arrays.sort(domains);\n+    for (String domain : domains) {\n+      err(\"\\tDomain \u003d \" + domain);\n+    }\n+\n+    // Get MBeanServer\u0027s default domain\n+    //\n+    err(\"\\nMBeanServer default domain \u003d \" + mbsc.getDefaultDomain());\n+\n+    // Get MBean count\n+    //\n+    err(\"\\nMBean count \u003d \" + mbsc.getMBeanCount());\n+\n+    // Query MBean names for specific domain \"hadoop\" and service\n+    ObjectName query \u003d new ObjectName(\"Hadoop:service\u003d\" + service + \",*\");\n+    hadoopObjectNames \u003d new ArrayList\u003cObjectName\u003e(5);\n+    err(\"\\nQuery MBeanServer MBeans:\");\n+    Set\u003cObjectName\u003e names \u003d new TreeSet\u003cObjectName\u003e(mbsc\n+        .queryNames(query, null));\n+\n+    for (ObjectName name : names) {\n+      hadoopObjectNames.add(name);\n+      err(\"Hadoop service: \" + name);\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws Exception {\n\n    err(\"init: server\u003d\" + server + \";port\u003d\" + port + \";service\u003d\" + service\n        + \";localVMUrl\u003d\" + localVMUrl);\n\n    String url_string \u003d null;\n    // build connection url\n    if (localVMUrl !\u003d null) {\n      // use\n      // jstat -snap \u003cvmpid\u003e | grep sun.management.JMXConnectorServer.address\n      // to get url\n      url_string \u003d localVMUrl;\n      err(\"url string for local pid \u003d \" + localVMUrl + \" \u003d \" + url_string);\n\n    } else if (!port.isEmpty() \u0026\u0026 !server.isEmpty()) {\n      // using server and port\n      url_string \u003d \"service:jmx:rmi:///jndi/rmi://\" + server + \":\" + port\n      + \"/jmxrmi\";\n    } // else url stays null\n\n    // Create an RMI connector client and\n    // connect it to the RMI connector server\n\n    if (url_string \u003d\u003d null) { // assume local vm (for example for Testing)\n      mbsc \u003d ManagementFactory.getPlatformMBeanServer();\n    } else {\n      JMXServiceURL url \u003d new JMXServiceURL(url_string);\n\n      err(\"Create RMI connector and connect to the RMI connector server\" + url);\n\n      JMXConnector jmxc \u003d JMXConnectorFactory.connect(url, null);\n      // Get an MBeanServerConnection\n      //\n      err(\"\\nGet an MBeanServerConnection\");\n      mbsc \u003d jmxc.getMBeanServerConnection();\n    }\n\n    // Get domains from MBeanServer\n    //\n    err(\"\\nDomains:\");\n\n    String domains[] \u003d mbsc.getDomains();\n    Arrays.sort(domains);\n    for (String domain : domains) {\n      err(\"\\tDomain \u003d \" + domain);\n    }\n\n    // Get MBeanServer\u0027s default domain\n    //\n    err(\"\\nMBeanServer default domain \u003d \" + mbsc.getDefaultDomain());\n\n    // Get MBean count\n    //\n    err(\"\\nMBean count \u003d \" + mbsc.getMBeanCount());\n\n    // Query MBean names for specific domain \"hadoop\" and service\n    ObjectName query \u003d new ObjectName(\"Hadoop:service\u003d\" + service + \",*\");\n    hadoopObjectNames \u003d new ArrayList\u003cObjectName\u003e(5);\n    err(\"\\nQuery MBeanServer MBeans:\");\n    Set\u003cObjectName\u003e names \u003d new TreeSet\u003cObjectName\u003e(mbsc\n        .queryNames(query, null));\n\n    for (ObjectName name : names) {\n      hadoopObjectNames.add(name);\n      err(\"Hadoop service: \" + name);\n    }\n\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/JMXGet.java"
    }
  }
}