{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SecondaryNameNode.java",
  "functionName": "parse",
  "functionId": "parse___argv-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
  "functionStartLine": 824,
  "functionEndLine": 859,
  "numCommitsSeen": 98,
  "timeTaken": 3369,
  "changeHistory": [
    "28e87740c5797e87a9038d7f151c8b21a5b04592",
    "231a52a7dfa73f7f302cc3bf671d433312373873",
    "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "28e87740c5797e87a9038d7f151c8b21a5b04592": "Ybodychange",
    "231a52a7dfa73f7f302cc3bf671d433312373873": "Ybodychange",
    "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "28e87740c5797e87a9038d7f151c8b21a5b04592": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3723. Add support -h, -help to all the commands. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:28 PM",
      "commitName": "28e87740c5797e87a9038d7f151c8b21a5b04592",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "14/08/12 5:25 PM",
      "commitNameOld": "231a52a7dfa73f7f302cc3bf671d433312373873",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n     public void parse(String ... argv) throws ParseException {\n       CommandLineParser parser \u003d new PosixParser();\n       CommandLine cmdLine \u003d parser.parse(options, argv);\n       \n+      if (cmdLine.hasOption(helpOpt.getOpt())\n+          || cmdLine.hasOption(helpOpt.getLongOpt())) {\n+        shouldPrintHelp \u003d true;\n+        return;\n+      }\n+      \n       boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n       boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n       if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n         throw new ParseException(\"May not pass both \"\n             + geteditsizeOpt.getOpt() + \" and \"\n             + checkpointOpt.getOpt());\n       }\n       \n       if (hasGetEdit) {\n         cmd \u003d Command.GETEDITSIZE;\n       } else if (hasCheckpoint) {\n         cmd \u003d Command.CHECKPOINT;\n         \n         String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n         if (\"force\".equals(arg)) {\n           shouldForce \u003d true;\n         } else if (arg !\u003d null) {\n           throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n               + \"argument\");\n         }\n       }\n       \n       if (cmdLine.hasOption(formatOpt.getOpt())) {\n         shouldFormat \u003d true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void parse(String ... argv) throws ParseException {\n      CommandLineParser parser \u003d new PosixParser();\n      CommandLine cmdLine \u003d parser.parse(options, argv);\n      \n      if (cmdLine.hasOption(helpOpt.getOpt())\n          || cmdLine.hasOption(helpOpt.getLongOpt())) {\n        shouldPrintHelp \u003d true;\n        return;\n      }\n      \n      boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n      boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n      if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n        throw new ParseException(\"May not pass both \"\n            + geteditsizeOpt.getOpt() + \" and \"\n            + checkpointOpt.getOpt());\n      }\n      \n      if (hasGetEdit) {\n        cmd \u003d Command.GETEDITSIZE;\n      } else if (hasCheckpoint) {\n        cmd \u003d Command.CHECKPOINT;\n        \n        String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n        if (\"force\".equals(arg)) {\n          shouldForce \u003d true;\n        } else if (arg !\u003d null) {\n          throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n              + \"argument\");\n        }\n      }\n      \n      if (cmdLine.hasOption(formatOpt.getOpt())) {\n        shouldFormat \u003d true;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {}
    },
    "231a52a7dfa73f7f302cc3bf671d433312373873": {
      "type": "Ybodychange",
      "commitMessage": "Reverting previous incomplete change r1373170 for HDFS-3723\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373172 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:25 PM",
      "commitName": "231a52a7dfa73f7f302cc3bf671d433312373873",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "14/08/12 5:03 PM",
      "commitNameOld": "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,30 @@\n     public void parse(String ... argv) throws ParseException {\n       CommandLineParser parser \u003d new PosixParser();\n       CommandLine cmdLine \u003d parser.parse(options, argv);\n       \n-      if (cmdLine.hasOption(helpOpt.getOpt())\n-          || cmdLine.hasOption(helpOpt.getLongOpt())) {\n-        shouldPrintHelp \u003d true;\n-        return;\n-      }\n-      \n       boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n       boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n       if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n         throw new ParseException(\"May not pass both \"\n             + geteditsizeOpt.getOpt() + \" and \"\n             + checkpointOpt.getOpt());\n       }\n       \n       if (hasGetEdit) {\n         cmd \u003d Command.GETEDITSIZE;\n       } else if (hasCheckpoint) {\n         cmd \u003d Command.CHECKPOINT;\n         \n         String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n         if (\"force\".equals(arg)) {\n           shouldForce \u003d true;\n         } else if (arg !\u003d null) {\n           throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n               + \"argument\");\n         }\n       }\n       \n       if (cmdLine.hasOption(formatOpt.getOpt())) {\n         shouldFormat \u003d true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void parse(String ... argv) throws ParseException {\n      CommandLineParser parser \u003d new PosixParser();\n      CommandLine cmdLine \u003d parser.parse(options, argv);\n      \n      boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n      boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n      if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n        throw new ParseException(\"May not pass both \"\n            + geteditsizeOpt.getOpt() + \" and \"\n            + checkpointOpt.getOpt());\n      }\n      \n      if (hasGetEdit) {\n        cmd \u003d Command.GETEDITSIZE;\n      } else if (hasCheckpoint) {\n        cmd \u003d Command.CHECKPOINT;\n        \n        String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n        if (\"force\".equals(arg)) {\n          shouldForce \u003d true;\n        } else if (arg !\u003d null) {\n          throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n              + \"argument\");\n        }\n      }\n      \n      if (cmdLine.hasOption(formatOpt.getOpt())) {\n        shouldFormat \u003d true;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {}
    },
    "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3723. Add support -h, -help to all the commands. Contributed by Jing Zhao.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373170 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:03 PM",
      "commitName": "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "20/07/12 11:58 AM",
      "commitNameOld": "9833468302bd2fa235d9d1f40517631f9dfff517",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 25.21,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n     public void parse(String ... argv) throws ParseException {\n       CommandLineParser parser \u003d new PosixParser();\n       CommandLine cmdLine \u003d parser.parse(options, argv);\n       \n+      if (cmdLine.hasOption(helpOpt.getOpt())\n+          || cmdLine.hasOption(helpOpt.getLongOpt())) {\n+        shouldPrintHelp \u003d true;\n+        return;\n+      }\n+      \n       boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n       boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n       if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n         throw new ParseException(\"May not pass both \"\n             + geteditsizeOpt.getOpt() + \" and \"\n             + checkpointOpt.getOpt());\n       }\n       \n       if (hasGetEdit) {\n         cmd \u003d Command.GETEDITSIZE;\n       } else if (hasCheckpoint) {\n         cmd \u003d Command.CHECKPOINT;\n         \n         String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n         if (\"force\".equals(arg)) {\n           shouldForce \u003d true;\n         } else if (arg !\u003d null) {\n           throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n               + \"argument\");\n         }\n       }\n       \n       if (cmdLine.hasOption(formatOpt.getOpt())) {\n         shouldFormat \u003d true;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void parse(String ... argv) throws ParseException {\n      CommandLineParser parser \u003d new PosixParser();\n      CommandLine cmdLine \u003d parser.parse(options, argv);\n      \n      if (cmdLine.hasOption(helpOpt.getOpt())\n          || cmdLine.hasOption(helpOpt.getLongOpt())) {\n        shouldPrintHelp \u003d true;\n        return;\n      }\n      \n      boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n      boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n      if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n        throw new ParseException(\"May not pass both \"\n            + geteditsizeOpt.getOpt() + \" and \"\n            + checkpointOpt.getOpt());\n      }\n      \n      if (hasGetEdit) {\n        cmd \u003d Command.GETEDITSIZE;\n      } else if (hasCheckpoint) {\n        cmd \u003d Command.CHECKPOINT;\n        \n        String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n        if (\"force\".equals(arg)) {\n          shouldForce \u003d true;\n        } else if (arg !\u003d null) {\n          throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n              + \"argument\");\n        }\n      }\n      \n      if (cmdLine.hasOption(formatOpt.getOpt())) {\n        shouldFormat \u003d true;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void parse(String ... argv) throws ParseException {\n      CommandLineParser parser \u003d new PosixParser();\n      CommandLine cmdLine \u003d parser.parse(options, argv);\n      \n      boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n      boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n      if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n        throw new ParseException(\"May not pass both \"\n            + geteditsizeOpt.getOpt() + \" and \"\n            + checkpointOpt.getOpt());\n      }\n      \n      if (hasGetEdit) {\n        cmd \u003d Command.GETEDITSIZE;\n      } else if (hasCheckpoint) {\n        cmd \u003d Command.CHECKPOINT;\n        \n        String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n        if (\"force\".equals(arg)) {\n          shouldForce \u003d true;\n        } else if (arg !\u003d null) {\n          throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n              + \"argument\");\n        }\n      }\n      \n      if (cmdLine.hasOption(formatOpt.getOpt())) {\n        shouldFormat \u003d true;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void parse(String ... argv) throws ParseException {\n      CommandLineParser parser \u003d new PosixParser();\n      CommandLine cmdLine \u003d parser.parse(options, argv);\n      \n      boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n      boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n      if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n        throw new ParseException(\"May not pass both \"\n            + geteditsizeOpt.getOpt() + \" and \"\n            + checkpointOpt.getOpt());\n      }\n      \n      if (hasGetEdit) {\n        cmd \u003d Command.GETEDITSIZE;\n      } else if (hasCheckpoint) {\n        cmd \u003d Command.CHECKPOINT;\n        \n        String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n        if (\"force\".equals(arg)) {\n          shouldForce \u003d true;\n        } else if (arg !\u003d null) {\n          throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n              + \"argument\");\n        }\n      }\n      \n      if (cmdLine.hasOption(formatOpt.getOpt())) {\n        shouldFormat \u003d true;\n      }\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,30 @@\n+    public void parse(String ... argv) throws ParseException {\n+      CommandLineParser parser \u003d new PosixParser();\n+      CommandLine cmdLine \u003d parser.parse(options, argv);\n+      \n+      boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n+      boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n+      if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n+        throw new ParseException(\"May not pass both \"\n+            + geteditsizeOpt.getOpt() + \" and \"\n+            + checkpointOpt.getOpt());\n+      }\n+      \n+      if (hasGetEdit) {\n+        cmd \u003d Command.GETEDITSIZE;\n+      } else if (hasCheckpoint) {\n+        cmd \u003d Command.CHECKPOINT;\n+        \n+        String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n+        if (\"force\".equals(arg)) {\n+          shouldForce \u003d true;\n+        } else if (arg !\u003d null) {\n+          throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n+              + \"argument\");\n+        }\n+      }\n+      \n+      if (cmdLine.hasOption(formatOpt.getOpt())) {\n+        shouldFormat \u003d true;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void parse(String ... argv) throws ParseException {\n      CommandLineParser parser \u003d new PosixParser();\n      CommandLine cmdLine \u003d parser.parse(options, argv);\n      \n      boolean hasGetEdit \u003d cmdLine.hasOption(geteditsizeOpt.getOpt());\n      boolean hasCheckpoint \u003d cmdLine.hasOption(checkpointOpt.getOpt()); \n      if (hasGetEdit \u0026\u0026 hasCheckpoint) {\n        throw new ParseException(\"May not pass both \"\n            + geteditsizeOpt.getOpt() + \" and \"\n            + checkpointOpt.getOpt());\n      }\n      \n      if (hasGetEdit) {\n        cmd \u003d Command.GETEDITSIZE;\n      } else if (hasCheckpoint) {\n        cmd \u003d Command.CHECKPOINT;\n        \n        String arg \u003d cmdLine.getOptionValue(checkpointOpt.getOpt());\n        if (\"force\".equals(arg)) {\n          shouldForce \u003d true;\n        } else if (arg !\u003d null) {\n          throw new ParseException(\"-checkpoint may only take \u0027force\u0027 as an \"\n              + \"argument\");\n        }\n      }\n      \n      if (cmdLine.hasOption(formatOpt.getOpt())) {\n        shouldFormat \u003d true;\n      }\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java"
    }
  }
}