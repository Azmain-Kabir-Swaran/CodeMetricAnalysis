{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenFetcher.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
  "functionStartLine": 137,
  "functionEndLine": 150,
  "numCommitsSeen": 34,
  "timeTaken": 5919,
  "changeHistory": [
    "e24fe2641b4117601105fa097c8848d82b96b74c",
    "fb1d7fb596b8e8bb9a5f141c89acb1949bade87a",
    "8c505adddbaec558c25f3dd26f92eb6107150281",
    "43fa41fdeee53471e9aa34c89f58e53e8aa164e5",
    "8fa10b184e607a33f59e67bd4b1fbe5a2e683941",
    "002dd6968b89ded6a77858ccb50c9b2df074c226",
    "201b7879ba6994400c1aa955f242665c16c2c0ea",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "e24fe2641b4117601105fa097c8848d82b96b74c": "Ybodychange",
    "fb1d7fb596b8e8bb9a5f141c89acb1949bade87a": "Ybodychange",
    "8c505adddbaec558c25f3dd26f92eb6107150281": "Ybodychange",
    "43fa41fdeee53471e9aa34c89f58e53e8aa164e5": "Ybodychange",
    "8fa10b184e607a33f59e67bd4b1fbe5a2e683941": "Ybodychange",
    "002dd6968b89ded6a77858ccb50c9b2df074c226": "Ybodychange",
    "201b7879ba6994400c1aa955f242665c16c2c0ea": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e24fe2641b4117601105fa097c8848d82b96b74c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9732, Improve DelegationTokenIdentifier.toString() for better logging. Contributed by Yongjun Zhang.\n",
      "commitDate": "17/05/16 2:03 PM",
      "commitName": "e24fe2641b4117601105fa097c8848d82b96b74c",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "29/04/16 10:32 PM",
      "commitNameOld": "2753185a010e70f8d9539f42151c79177781122d",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 17.65,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n       public Object run() throws Exception {\n         if (print) {\n-          printTokens(conf, tokenFile);\n+          printTokens(conf, tokenFile, verbose);\n         } else if (cancel) {\n           cancelTokens(conf, tokenFile);\n         } else if (renew) {\n           renewTokens(conf, tokenFile);\n         } else {\n           // otherwise we are fetching\n           FileSystem fs \u003d getFileSystem(conf, webUrl);\n           saveDelegationToken(conf, fs, renewer, tokenFile);\n         }\n         return null;\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public Object run() throws Exception {\n        if (print) {\n          printTokens(conf, tokenFile, verbose);\n        } else if (cancel) {\n          cancelTokens(conf, tokenFile);\n        } else if (renew) {\n          renewTokens(conf, tokenFile);\n        } else {\n          // otherwise we are fetching\n          FileSystem fs \u003d getFileSystem(conf, webUrl);\n          saveDelegationToken(conf, fs, renewer, tokenFile);\n        }\n        return null;\n      }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {}
    },
    "fb1d7fb596b8e8bb9a5f141c89acb1949bade87a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5570. Deprecate hftp / hsftp and replace them with webhdfs / swebhdfs. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1584100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/14 10:28 AM",
      "commitName": "fb1d7fb596b8e8bb9a5f141c89acb1949bade87a",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/03/14 10:51 PM",
      "commitNameOld": "3a61d25457606b93f7e99a48fe8f66984f4084b0",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 8.48,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,14 @@\n-          public Object run() throws Exception {\n-\n-            if (print) {\n-              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n-                  0, 0, 0, 0, null).createIdentifier();\n-              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n-                DataInputStream in \u003d new DataInputStream(\n-                    new ByteArrayInputStream(token.getIdentifier()));\n-                id.readFields(in);\n-                System.out.println(\"Token (\" + id + \") for \" + \n-                                   token.getService());\n-              }\n-            } else if (cancel) {\n-              for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n-                if (token.isManaged()) {\n-                  token.cancel(conf);\n-                  if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Cancelled token for \" + token.getService());\n-                  }\n-                }\n-              }\n-            } else if (renew) {\n-              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n-                if (token.isManaged()) {\n-                  long result \u003d token.renew(conf);\n-                  if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Renewed token for \" + token.getService()\n-                        + \" until: \" + new Date(result));\n-                  }\n-                }\n-              }\n-            } else {\n-              // otherwise we are fetching\n-              if (webUrl !\u003d null) {\n-                Credentials creds \u003d getDTfromRemote(connectionFactory, new URI(\n-                    webUrl), renewer, null);\n-                creds.writeTokenStorageFile(tokenFile, conf);\n-                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n-                  if(LOG.isDebugEnabled()) {\t\n-                    LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n-                        + token.getService() + \" into \" + tokenFile);\n-                  }\n-                }\n-              } else {\n-                FileSystem fs \u003d FileSystem.get(conf);\n-                Credentials cred \u003d new Credentials();\n-                Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(renewer, cred);\n-                cred.writeTokenStorageFile(tokenFile, conf);\n-                if(LOG.isDebugEnabled()) {\n-                  for (Token\u003c?\u003e token : tokens) {\n-                    LOG.debug(\"Fetched token for \" + token.getService()\n-                        + \" into \" + tokenFile);\n-                  }\n-                }\n-              }\n-            }\n-            return null;\n-          }\n\\ No newline at end of file\n+      public Object run() throws Exception {\n+        if (print) {\n+          printTokens(conf, tokenFile);\n+        } else if (cancel) {\n+          cancelTokens(conf, tokenFile);\n+        } else if (renew) {\n+          renewTokens(conf, tokenFile);\n+        } else {\n+          // otherwise we are fetching\n+          FileSystem fs \u003d getFileSystem(conf, webUrl);\n+          saveDelegationToken(conf, fs, renewer, tokenFile);\n+        }\n+        return null;\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public Object run() throws Exception {\n        if (print) {\n          printTokens(conf, tokenFile);\n        } else if (cancel) {\n          cancelTokens(conf, tokenFile);\n        } else if (renew) {\n          renewTokens(conf, tokenFile);\n        } else {\n          // otherwise we are fetching\n          FileSystem fs \u003d getFileSystem(conf, webUrl);\n          saveDelegationToken(conf, fs, renewer, tokenFile);\n        }\n        return null;\n      }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {}
    },
    "8c505adddbaec558c25f3dd26f92eb6107150281": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5842. Cannot create hftp filesystem when using a proxy user ugi and a doAs on a secure cluster. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1562603 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/14 1:53 PM",
      "commitName": "8c505adddbaec558c25f3dd26f92eb6107150281",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "25/11/13 5:16 PM",
      "commitNameOld": "d8a23834614581a292aad214dddcbcc4bbe86d27",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 64.86,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n           public Object run() throws Exception {\n \n             if (print) {\n               DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                   0, 0, 0, 0, null).createIdentifier();\n               for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                 DataInputStream in \u003d new DataInputStream(\n                     new ByteArrayInputStream(token.getIdentifier()));\n                 id.readFields(in);\n                 System.out.println(\"Token (\" + id + \") for \" + \n                                    token.getService());\n               }\n             } else if (cancel) {\n               for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n                 if (token.isManaged()) {\n                   token.cancel(conf);\n                   if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Cancelled token for \" + token.getService());\n                   }\n                 }\n               }\n             } else if (renew) {\n               for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                 if (token.isManaged()) {\n                   long result \u003d token.renew(conf);\n                   if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Renewed token for \" + token.getService()\n                         + \" until: \" + new Date(result));\n                   }\n                 }\n               }\n             } else {\n               // otherwise we are fetching\n               if (webUrl !\u003d null) {\n-                Credentials creds \u003d getDTfromRemote(connectionFactory, new URI(webUrl),\n-                    renewer);\n+                Credentials creds \u003d getDTfromRemote(connectionFactory, new URI(\n+                    webUrl), renewer, null);\n                 creds.writeTokenStorageFile(tokenFile, conf);\n                 for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                   if(LOG.isDebugEnabled()) {\t\n                     LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                         + token.getService() + \" into \" + tokenFile);\n                   }\n                 }\n               } else {\n                 FileSystem fs \u003d FileSystem.get(conf);\n                 Credentials cred \u003d new Credentials();\n                 Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(renewer, cred);\n                 cred.writeTokenStorageFile(tokenFile, conf);\n                 if(LOG.isDebugEnabled()) {\n                   for (Token\u003c?\u003e token : tokens) {\n                     LOG.debug(\"Fetched token for \" + token.getService()\n                         + \" into \" + tokenFile);\n                   }\n                 }\n               }\n             }\n             return null;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public Object run() throws Exception {\n\n            if (print) {\n              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                  0, 0, 0, 0, null).createIdentifier();\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                DataInputStream in \u003d new DataInputStream(\n                    new ByteArrayInputStream(token.getIdentifier()));\n                id.readFields(in);\n                System.out.println(\"Token (\" + id + \") for \" + \n                                   token.getService());\n              }\n            } else if (cancel) {\n              for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n                if (token.isManaged()) {\n                  token.cancel(conf);\n                  if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Cancelled token for \" + token.getService());\n                  }\n                }\n              }\n            } else if (renew) {\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                if (token.isManaged()) {\n                  long result \u003d token.renew(conf);\n                  if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Renewed token for \" + token.getService()\n                        + \" until: \" + new Date(result));\n                  }\n                }\n              }\n            } else {\n              // otherwise we are fetching\n              if (webUrl !\u003d null) {\n                Credentials creds \u003d getDTfromRemote(connectionFactory, new URI(\n                    webUrl), renewer, null);\n                creds.writeTokenStorageFile(tokenFile, conf);\n                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                  if(LOG.isDebugEnabled()) {\t\n                    LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                        + token.getService() + \" into \" + tokenFile);\n                  }\n                }\n              } else {\n                FileSystem fs \u003d FileSystem.get(conf);\n                Credentials cred \u003d new Credentials();\n                Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(renewer, cred);\n                cred.writeTokenStorageFile(tokenFile, conf);\n                if(LOG.isDebugEnabled()) {\n                  for (Token\u003c?\u003e token : tokens) {\n                    LOG.debug(\"Fetched token for \" + token.getService()\n                        + \" into \" + tokenFile);\n                  }\n                }\n              }\n            }\n            return null;\n          }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {}
    },
    "43fa41fdeee53471e9aa34c89f58e53e8aa164e5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5506. Use URLConnectionFactory in DelegationTokenFetcher. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1542011 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/13 10:40 AM",
      "commitName": "43fa41fdeee53471e9aa34c89f58e53e8aa164e5",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "29/10/13 3:44 PM",
      "commitNameOld": "68a79b0d3f189dfdbd3a3e2a0b906627db3eff8d",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 15.83,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n           public Object run() throws Exception {\n \n             if (print) {\n               DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                   0, 0, 0, 0, null).createIdentifier();\n               for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                 DataInputStream in \u003d new DataInputStream(\n                     new ByteArrayInputStream(token.getIdentifier()));\n                 id.readFields(in);\n                 System.out.println(\"Token (\" + id + \") for \" + \n                                    token.getService());\n               }\n             } else if (cancel) {\n               for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n                 if (token.isManaged()) {\n                   token.cancel(conf);\n                   if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Cancelled token for \" + token.getService());\n                   }\n                 }\n               }\n             } else if (renew) {\n               for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                 if (token.isManaged()) {\n                   long result \u003d token.renew(conf);\n                   if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Renewed token for \" + token.getService()\n                         + \" until: \" + new Date(result));\n                   }\n                 }\n               }\n             } else {\n               // otherwise we are fetching\n               if (webUrl !\u003d null) {\n-                Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n+                Credentials creds \u003d getDTfromRemote(connectionFactory, new URI(webUrl),\n+                    renewer);\n                 creds.writeTokenStorageFile(tokenFile, conf);\n                 for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                   if(LOG.isDebugEnabled()) {\t\n                     LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                         + token.getService() + \" into \" + tokenFile);\n                   }\n                 }\n               } else {\n                 FileSystem fs \u003d FileSystem.get(conf);\n                 Credentials cred \u003d new Credentials();\n                 Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(renewer, cred);\n                 cred.writeTokenStorageFile(tokenFile, conf);\n                 if(LOG.isDebugEnabled()) {\n                   for (Token\u003c?\u003e token : tokens) {\n                     LOG.debug(\"Fetched token for \" + token.getService()\n                         + \" into \" + tokenFile);\n                   }\n                 }\n               }\n             }\n             return null;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public Object run() throws Exception {\n\n            if (print) {\n              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                  0, 0, 0, 0, null).createIdentifier();\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                DataInputStream in \u003d new DataInputStream(\n                    new ByteArrayInputStream(token.getIdentifier()));\n                id.readFields(in);\n                System.out.println(\"Token (\" + id + \") for \" + \n                                   token.getService());\n              }\n            } else if (cancel) {\n              for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n                if (token.isManaged()) {\n                  token.cancel(conf);\n                  if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Cancelled token for \" + token.getService());\n                  }\n                }\n              }\n            } else if (renew) {\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                if (token.isManaged()) {\n                  long result \u003d token.renew(conf);\n                  if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Renewed token for \" + token.getService()\n                        + \" until: \" + new Date(result));\n                  }\n                }\n              }\n            } else {\n              // otherwise we are fetching\n              if (webUrl !\u003d null) {\n                Credentials creds \u003d getDTfromRemote(connectionFactory, new URI(webUrl),\n                    renewer);\n                creds.writeTokenStorageFile(tokenFile, conf);\n                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                  if(LOG.isDebugEnabled()) {\t\n                    LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                        + token.getService() + \" into \" + tokenFile);\n                  }\n                }\n              } else {\n                FileSystem fs \u003d FileSystem.get(conf);\n                Credentials cred \u003d new Credentials();\n                Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(renewer, cred);\n                cred.writeTokenStorageFile(tokenFile, conf);\n                if(LOG.isDebugEnabled()) {\n                  for (Token\u003c?\u003e token : tokens) {\n                    LOG.debug(\"Fetched token for \" + token.getService()\n                        + \" into \" + tokenFile);\n                  }\n                }\n              }\n            }\n            return null;\n          }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {}
    },
    "8fa10b184e607a33f59e67bd4b1fbe5a2e683941": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7967. Need generalized multi-token filesystem support (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374271 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/12 7:05 AM",
      "commitName": "8fa10b184e607a33f59e67bd4b1fbe5a2e683941",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "14/08/12 5:28 PM",
      "commitNameOld": "28e87740c5797e87a9038d7f151c8b21a5b04592",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 2.57,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n           public Object run() throws Exception {\n \n             if (print) {\n               DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                   0, 0, 0, 0, null).createIdentifier();\n               for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                 DataInputStream in \u003d new DataInputStream(\n                     new ByteArrayInputStream(token.getIdentifier()));\n                 id.readFields(in);\n                 System.out.println(\"Token (\" + id + \") for \" + \n                                    token.getService());\n               }\n             } else if (cancel) {\n               for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n                 if (token.isManaged()) {\n                   token.cancel(conf);\n                   if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Cancelled token for \" + token.getService());\n                   }\n                 }\n               }\n             } else if (renew) {\n               for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                 if (token.isManaged()) {\n                   long result \u003d token.renew(conf);\n                   if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Renewed token for \" + token.getService()\n                         + \" until: \" + new Date(result));\n                   }\n                 }\n               }\n             } else {\n               // otherwise we are fetching\n               if (webUrl !\u003d null) {\n                 Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                 creds.writeTokenStorageFile(tokenFile, conf);\n                 for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                   if(LOG.isDebugEnabled()) {\t\n                     LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                         + token.getService() + \" into \" + tokenFile);\n                   }\n                 }\n               } else {\n                 FileSystem fs \u003d FileSystem.get(conf);\n-                Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n                 Credentials cred \u003d new Credentials();\n-                cred.addToken(token.getService(), token);\n+                Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(renewer, cred);\n                 cred.writeTokenStorageFile(tokenFile, conf);\n                 if(LOG.isDebugEnabled()) {\n-                  LOG.debug(\"Fetched token for \" + token.getService()\n-                      + \" into \" + tokenFile);\n+                  for (Token\u003c?\u003e token : tokens) {\n+                    LOG.debug(\"Fetched token for \" + token.getService()\n+                        + \" into \" + tokenFile);\n+                  }\n                 }\n               }\n             }\n             return null;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public Object run() throws Exception {\n\n            if (print) {\n              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                  0, 0, 0, 0, null).createIdentifier();\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                DataInputStream in \u003d new DataInputStream(\n                    new ByteArrayInputStream(token.getIdentifier()));\n                id.readFields(in);\n                System.out.println(\"Token (\" + id + \") for \" + \n                                   token.getService());\n              }\n            } else if (cancel) {\n              for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n                if (token.isManaged()) {\n                  token.cancel(conf);\n                  if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Cancelled token for \" + token.getService());\n                  }\n                }\n              }\n            } else if (renew) {\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                if (token.isManaged()) {\n                  long result \u003d token.renew(conf);\n                  if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Renewed token for \" + token.getService()\n                        + \" until: \" + new Date(result));\n                  }\n                }\n              }\n            } else {\n              // otherwise we are fetching\n              if (webUrl !\u003d null) {\n                Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                creds.writeTokenStorageFile(tokenFile, conf);\n                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                  if(LOG.isDebugEnabled()) {\t\n                    LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                        + token.getService() + \" into \" + tokenFile);\n                  }\n                }\n              } else {\n                FileSystem fs \u003d FileSystem.get(conf);\n                Credentials cred \u003d new Credentials();\n                Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(renewer, cred);\n                cred.writeTokenStorageFile(tokenFile, conf);\n                if(LOG.isDebugEnabled()) {\n                  for (Token\u003c?\u003e token : tokens) {\n                    LOG.debug(\"Fetched token for \" + token.getService()\n                        + \" into \" + tokenFile);\n                  }\n                }\n              }\n            }\n            return null;\n          }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {}
    },
    "002dd6968b89ded6a77858ccb50c9b2df074c226": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2764. Fix renewal of dfs delegation tokens. Contributed by Owen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1183187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/10/11 6:24 PM",
      "commitName": "002dd6968b89ded6a77858ccb50c9b2df074c226",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "27/09/11 4:16 PM",
      "commitNameOld": "201b7879ba6994400c1aa955f242665c16c2c0ea",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 16.09,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,56 @@\n           public Object run() throws Exception {\n \n             if (print) {\n               DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                   0, 0, 0, 0, null).createIdentifier();\n               for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                 DataInputStream in \u003d new DataInputStream(\n                     new ByteArrayInputStream(token.getIdentifier()));\n                 id.readFields(in);\n-                if(LOG.isDebugEnabled()) {\n-                  LOG.debug(\"Token (\" + id + \") for \" + token.getService());\n+                System.out.println(\"Token (\" + id + \") for \" + \n+                                   token.getService());\n+              }\n+            } else if (cancel) {\n+              for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n+                if (token.isManaged()) {\n+                  token.cancel(conf);\n+                  if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Cancelled token for \" + token.getService());\n+                  }\n                 }\n               }\n-              return null;\n-            }\n-            \n-            if (webUrl !\u003d null) {\n-              if (renew) {\n-                long result;\n-                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n-                  result \u003d renewDelegationToken(webUrl,\n-                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n-                  if(LOG.isDebugEnabled()) {\n-                \t  LOG.debug(\"Renewed token via \" + webUrl + \" for \"\n-                          + token.getService() + \" until: \" + new Date(result));\n+            } else if (renew) {\n+              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n+                if (token.isManaged()) {\n+                  long result \u003d token.renew(conf);\n+                  if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Renewed token for \" + token.getService()\n+                        + \" until: \" + new Date(result));\n                   }\n                 }\n-              } else if (cancel) {\n-                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n-                  cancelDelegationToken(webUrl,\n-                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n-                  if(LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Cancelled token via \" + webUrl + \" for \"\n-                \t    + token.getService());\n-                  }\n-                }\n-              } else {\n+              }\n+            } else {\n+              // otherwise we are fetching\n+              if (webUrl !\u003d null) {\n                 Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                 creds.writeTokenStorageFile(tokenFile, conf);\n                 for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                   if(LOG.isDebugEnabled()) {\t\n                     LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                         + token.getService() + \" into \" + tokenFile);\n                   }\n                 }\n-              }\n-            } else {\n-              FileSystem fs \u003d FileSystem.get(conf);\n-              if (cancel) {\n-                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n-                  ((DistributedFileSystem) fs)\n-                      .cancelDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n-                  if(LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Cancelled token for \"\n-                        + token.getService());\n-                  }\n-                }\n-              } else if (renew) {\n-                long result;\n-                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n-                  result \u003d ((DistributedFileSystem) fs)\n-                      .renewDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n-                  if(LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Renewed token for \" + token.getService()\n-                        + \" until: \" + new Date(result));\n-                  }\n-                }\n               } else {\n+                FileSystem fs \u003d FileSystem.get(conf);\n                 Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n                 Credentials cred \u003d new Credentials();\n                 cred.addToken(token.getService(), token);\n                 cred.writeTokenStorageFile(tokenFile, conf);\n                 if(LOG.isDebugEnabled()) {\n                   LOG.debug(\"Fetched token for \" + token.getService()\n                       + \" into \" + tokenFile);\n                 }\n               }\n             }\n             return null;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public Object run() throws Exception {\n\n            if (print) {\n              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                  0, 0, 0, 0, null).createIdentifier();\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                DataInputStream in \u003d new DataInputStream(\n                    new ByteArrayInputStream(token.getIdentifier()));\n                id.readFields(in);\n                System.out.println(\"Token (\" + id + \") for \" + \n                                   token.getService());\n              }\n            } else if (cancel) {\n              for(Token\u003c?\u003e token: readTokens(tokenFile, conf)) {\n                if (token.isManaged()) {\n                  token.cancel(conf);\n                  if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Cancelled token for \" + token.getService());\n                  }\n                }\n              }\n            } else if (renew) {\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                if (token.isManaged()) {\n                  long result \u003d token.renew(conf);\n                  if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Renewed token for \" + token.getService()\n                        + \" until: \" + new Date(result));\n                  }\n                }\n              }\n            } else {\n              // otherwise we are fetching\n              if (webUrl !\u003d null) {\n                Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                creds.writeTokenStorageFile(tokenFile, conf);\n                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                  if(LOG.isDebugEnabled()) {\t\n                    LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                        + token.getService() + \" into \" + tokenFile);\n                  }\n                }\n              } else {\n                FileSystem fs \u003d FileSystem.get(conf);\n                Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n                Credentials cred \u003d new Credentials();\n                cred.addToken(token.getService(), token);\n                cred.writeTokenStorageFile(tokenFile, conf);\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Fetched token for \" + token.getService()\n                      + \" into \" + tokenFile);\n                }\n              }\n            }\n            return null;\n          }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {}
    },
    "201b7879ba6994400c1aa955f242665c16c2c0ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2373. Commands using webhdfs and hftp print unnecessary debug info on the console with security enabled. Contributed by Arpit Gupta.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176654 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 4:16 PM",
      "commitName": "201b7879ba6994400c1aa955f242665c16c2c0ea",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 33.96,
      "commitsBetweenForRepo": 207,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,80 @@\n           public Object run() throws Exception {\n \n             if (print) {\n               DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                   0, 0, 0, 0, null).createIdentifier();\n               for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                 DataInputStream in \u003d new DataInputStream(\n                     new ByteArrayInputStream(token.getIdentifier()));\n                 id.readFields(in);\n-                System.out.println(\"Token (\" + id + \") for \" + token.getService());\n+                if(LOG.isDebugEnabled()) {\n+                  LOG.debug(\"Token (\" + id + \") for \" + token.getService());\n+                }\n               }\n               return null;\n             }\n             \n             if (webUrl !\u003d null) {\n               if (renew) {\n                 long result;\n                 for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                   result \u003d renewDelegationToken(webUrl,\n                       (Token\u003cDelegationTokenIdentifier\u003e) token);\n-                  System.out.println(\"Renewed token via \" + webUrl + \" for \"\n-                      + token.getService() + \" until: \" + new Date(result));\n+                  if(LOG.isDebugEnabled()) {\n+                \t  LOG.debug(\"Renewed token via \" + webUrl + \" for \"\n+                          + token.getService() + \" until: \" + new Date(result));\n+                  }\n                 }\n               } else if (cancel) {\n                 for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                   cancelDelegationToken(webUrl,\n                       (Token\u003cDelegationTokenIdentifier\u003e) token);\n-                  System.out.println(\"Cancelled token via \" + webUrl + \" for \"\n-                      + token.getService());\n+                  if(LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Cancelled token via \" + webUrl + \" for \"\n+                \t    + token.getService());\n+                  }\n                 }\n               } else {\n                 Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                 creds.writeTokenStorageFile(tokenFile, conf);\n                 for (Token\u003c?\u003e token : creds.getAllTokens()) {\n-                  System.out.println(\"Fetched token via \" + webUrl + \" for \"\n-                      + token.getService() + \" into \" + tokenFile);\n+                  if(LOG.isDebugEnabled()) {\t\n+                    LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n+                        + token.getService() + \" into \" + tokenFile);\n+                  }\n                 }\n               }\n             } else {\n               FileSystem fs \u003d FileSystem.get(conf);\n               if (cancel) {\n                 for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                   ((DistributedFileSystem) fs)\n                       .cancelDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n-                  System.out.println(\"Cancelled token for \"\n-                      + token.getService());\n+                  if(LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Cancelled token for \"\n+                        + token.getService());\n+                  }\n                 }\n               } else if (renew) {\n                 long result;\n                 for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                   result \u003d ((DistributedFileSystem) fs)\n                       .renewDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n-                  System.out.println(\"Renewed token for \" + token.getService()\n-                      + \" until: \" + new Date(result));\n+                  if(LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Renewed token for \" + token.getService()\n+                        + \" until: \" + new Date(result));\n+                  }\n                 }\n               } else {\n                 Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n                 Credentials cred \u003d new Credentials();\n                 cred.addToken(token.getService(), token);\n                 cred.writeTokenStorageFile(tokenFile, conf);\n-                System.out.println(\"Fetched token for \" + token.getService()\n-                    + \" into \" + tokenFile);\n+                if(LOG.isDebugEnabled()) {\n+                  LOG.debug(\"Fetched token for \" + token.getService()\n+                      + \" into \" + tokenFile);\n+                }\n               }\n             }\n             return null;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public Object run() throws Exception {\n\n            if (print) {\n              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                  0, 0, 0, 0, null).createIdentifier();\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                DataInputStream in \u003d new DataInputStream(\n                    new ByteArrayInputStream(token.getIdentifier()));\n                id.readFields(in);\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Token (\" + id + \") for \" + token.getService());\n                }\n              }\n              return null;\n            }\n            \n            if (webUrl !\u003d null) {\n              if (renew) {\n                long result;\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  result \u003d renewDelegationToken(webUrl,\n                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n                  if(LOG.isDebugEnabled()) {\n                \t  LOG.debug(\"Renewed token via \" + webUrl + \" for \"\n                          + token.getService() + \" until: \" + new Date(result));\n                  }\n                }\n              } else if (cancel) {\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  cancelDelegationToken(webUrl,\n                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n                  if(LOG.isDebugEnabled()) {\n                    LOG.debug(\"Cancelled token via \" + webUrl + \" for \"\n                \t    + token.getService());\n                  }\n                }\n              } else {\n                Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                creds.writeTokenStorageFile(tokenFile, conf);\n                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                  if(LOG.isDebugEnabled()) {\t\n                    LOG.debug(\"Fetched token via \" + webUrl + \" for \"\n                        + token.getService() + \" into \" + tokenFile);\n                  }\n                }\n              }\n            } else {\n              FileSystem fs \u003d FileSystem.get(conf);\n              if (cancel) {\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  ((DistributedFileSystem) fs)\n                      .cancelDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n                  if(LOG.isDebugEnabled()) {\n                    LOG.debug(\"Cancelled token for \"\n                        + token.getService());\n                  }\n                }\n              } else if (renew) {\n                long result;\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  result \u003d ((DistributedFileSystem) fs)\n                      .renewDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n                  if(LOG.isDebugEnabled()) {\n                    LOG.debug(\"Renewed token for \" + token.getService()\n                        + \" until: \" + new Date(result));\n                  }\n                }\n              } else {\n                Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n                Credentials cred \u003d new Credentials();\n                cred.addToken(token.getService(), token);\n                cred.writeTokenStorageFile(tokenFile, conf);\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Fetched token for \" + token.getService()\n                      + \" into \" + tokenFile);\n                }\n              }\n            }\n            return null;\n          }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public Object run() throws Exception {\n\n            if (print) {\n              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                  0, 0, 0, 0, null).createIdentifier();\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                DataInputStream in \u003d new DataInputStream(\n                    new ByteArrayInputStream(token.getIdentifier()));\n                id.readFields(in);\n                System.out.println(\"Token (\" + id + \") for \" + token.getService());\n              }\n              return null;\n            }\n            \n            if (webUrl !\u003d null) {\n              if (renew) {\n                long result;\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  result \u003d renewDelegationToken(webUrl,\n                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Renewed token via \" + webUrl + \" for \"\n                      + token.getService() + \" until: \" + new Date(result));\n                }\n              } else if (cancel) {\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  cancelDelegationToken(webUrl,\n                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Cancelled token via \" + webUrl + \" for \"\n                      + token.getService());\n                }\n              } else {\n                Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                creds.writeTokenStorageFile(tokenFile, conf);\n                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                  System.out.println(\"Fetched token via \" + webUrl + \" for \"\n                      + token.getService() + \" into \" + tokenFile);\n                }\n              }\n            } else {\n              FileSystem fs \u003d FileSystem.get(conf);\n              if (cancel) {\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  ((DistributedFileSystem) fs)\n                      .cancelDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Cancelled token for \"\n                      + token.getService());\n                }\n              } else if (renew) {\n                long result;\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  result \u003d ((DistributedFileSystem) fs)\n                      .renewDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Renewed token for \" + token.getService()\n                      + \" until: \" + new Date(result));\n                }\n              } else {\n                Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n                Credentials cred \u003d new Credentials();\n                cred.addToken(token.getService(), token);\n                cred.writeTokenStorageFile(tokenFile, conf);\n                System.out.println(\"Fetched token for \" + token.getService()\n                    + \" into \" + tokenFile);\n              }\n            }\n            return null;\n          }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public Object run() throws Exception {\n\n            if (print) {\n              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                  0, 0, 0, 0, null).createIdentifier();\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                DataInputStream in \u003d new DataInputStream(\n                    new ByteArrayInputStream(token.getIdentifier()));\n                id.readFields(in);\n                System.out.println(\"Token (\" + id + \") for \" + token.getService());\n              }\n              return null;\n            }\n            \n            if (webUrl !\u003d null) {\n              if (renew) {\n                long result;\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  result \u003d renewDelegationToken(webUrl,\n                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Renewed token via \" + webUrl + \" for \"\n                      + token.getService() + \" until: \" + new Date(result));\n                }\n              } else if (cancel) {\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  cancelDelegationToken(webUrl,\n                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Cancelled token via \" + webUrl + \" for \"\n                      + token.getService());\n                }\n              } else {\n                Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                creds.writeTokenStorageFile(tokenFile, conf);\n                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                  System.out.println(\"Fetched token via \" + webUrl + \" for \"\n                      + token.getService() + \" into \" + tokenFile);\n                }\n              }\n            } else {\n              FileSystem fs \u003d FileSystem.get(conf);\n              if (cancel) {\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  ((DistributedFileSystem) fs)\n                      .cancelDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Cancelled token for \"\n                      + token.getService());\n                }\n              } else if (renew) {\n                long result;\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  result \u003d ((DistributedFileSystem) fs)\n                      .renewDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Renewed token for \" + token.getService()\n                      + \" until: \" + new Date(result));\n                }\n              } else {\n                Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n                Credentials cred \u003d new Credentials();\n                cred.addToken(token.getService(), token);\n                cred.writeTokenStorageFile(tokenFile, conf);\n                System.out.println(\"Fetched token for \" + token.getService()\n                    + \" into \" + tokenFile);\n              }\n            }\n            return null;\n          }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,66 @@\n+          public Object run() throws Exception {\n+\n+            if (print) {\n+              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n+                  0, 0, 0, 0, null).createIdentifier();\n+              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n+                DataInputStream in \u003d new DataInputStream(\n+                    new ByteArrayInputStream(token.getIdentifier()));\n+                id.readFields(in);\n+                System.out.println(\"Token (\" + id + \") for \" + token.getService());\n+              }\n+              return null;\n+            }\n+            \n+            if (webUrl !\u003d null) {\n+              if (renew) {\n+                long result;\n+                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n+                  result \u003d renewDelegationToken(webUrl,\n+                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n+                  System.out.println(\"Renewed token via \" + webUrl + \" for \"\n+                      + token.getService() + \" until: \" + new Date(result));\n+                }\n+              } else if (cancel) {\n+                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n+                  cancelDelegationToken(webUrl,\n+                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n+                  System.out.println(\"Cancelled token via \" + webUrl + \" for \"\n+                      + token.getService());\n+                }\n+              } else {\n+                Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n+                creds.writeTokenStorageFile(tokenFile, conf);\n+                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n+                  System.out.println(\"Fetched token via \" + webUrl + \" for \"\n+                      + token.getService() + \" into \" + tokenFile);\n+                }\n+              }\n+            } else {\n+              FileSystem fs \u003d FileSystem.get(conf);\n+              if (cancel) {\n+                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n+                  ((DistributedFileSystem) fs)\n+                      .cancelDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n+                  System.out.println(\"Cancelled token for \"\n+                      + token.getService());\n+                }\n+              } else if (renew) {\n+                long result;\n+                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n+                  result \u003d ((DistributedFileSystem) fs)\n+                      .renewDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n+                  System.out.println(\"Renewed token for \" + token.getService()\n+                      + \" until: \" + new Date(result));\n+                }\n+              } else {\n+                Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n+                Credentials cred \u003d new Credentials();\n+                cred.addToken(token.getService(), token);\n+                cred.writeTokenStorageFile(tokenFile, conf);\n+                System.out.println(\"Fetched token for \" + token.getService()\n+                    + \" into \" + tokenFile);\n+              }\n+            }\n+            return null;\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public Object run() throws Exception {\n\n            if (print) {\n              DelegationTokenIdentifier id \u003d new DelegationTokenSecretManager(\n                  0, 0, 0, 0, null).createIdentifier();\n              for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                DataInputStream in \u003d new DataInputStream(\n                    new ByteArrayInputStream(token.getIdentifier()));\n                id.readFields(in);\n                System.out.println(\"Token (\" + id + \") for \" + token.getService());\n              }\n              return null;\n            }\n            \n            if (webUrl !\u003d null) {\n              if (renew) {\n                long result;\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  result \u003d renewDelegationToken(webUrl,\n                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Renewed token via \" + webUrl + \" for \"\n                      + token.getService() + \" until: \" + new Date(result));\n                }\n              } else if (cancel) {\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  cancelDelegationToken(webUrl,\n                      (Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Cancelled token via \" + webUrl + \" for \"\n                      + token.getService());\n                }\n              } else {\n                Credentials creds \u003d getDTfromRemote(webUrl, renewer);\n                creds.writeTokenStorageFile(tokenFile, conf);\n                for (Token\u003c?\u003e token : creds.getAllTokens()) {\n                  System.out.println(\"Fetched token via \" + webUrl + \" for \"\n                      + token.getService() + \" into \" + tokenFile);\n                }\n              }\n            } else {\n              FileSystem fs \u003d FileSystem.get(conf);\n              if (cancel) {\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  ((DistributedFileSystem) fs)\n                      .cancelDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Cancelled token for \"\n                      + token.getService());\n                }\n              } else if (renew) {\n                long result;\n                for (Token\u003c?\u003e token : readTokens(tokenFile, conf)) {\n                  result \u003d ((DistributedFileSystem) fs)\n                      .renewDelegationToken((Token\u003cDelegationTokenIdentifier\u003e) token);\n                  System.out.println(\"Renewed token for \" + token.getService()\n                      + \" until: \" + new Date(result));\n                }\n              } else {\n                Token\u003c?\u003e token \u003d fs.getDelegationToken(renewer);\n                Credentials cred \u003d new Credentials();\n                cred.addToken(token.getService(), token);\n                cred.writeTokenStorageFile(tokenFile, conf);\n                System.out.println(\"Fetched token for \" + token.getService()\n                    + \" into \" + tokenFile);\n              }\n            }\n            return null;\n          }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DelegationTokenFetcher.java"
    }
  }
}