{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMTimelinePublisher.java",
  "functionName": "publishContainerCreatedEvent",
  "functionId": "publishContainerCreatedEvent___event-ContainerEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
  "functionStartLine": 223,
  "functionEndLine": 256,
  "numCommitsSeen": 33,
  "timeTaken": 3234,
  "changeHistory": [
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7",
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676",
    "092fead5d9875fb3760206bcdd76cdafec5e9481",
    "1f304b0c7f261369dd68839507bb609a949965ad",
    "b5ee7dbd8dde756bc556f823327328f511048021",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "477a30f536277bf95d7181bf1b2fdda52d83bf51"
  ],
  "changeHistoryShort": {
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7": "Ybodychange",
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676": "Ybodychange",
    "092fead5d9875fb3760206bcdd76cdafec5e9481": "Ybodychange",
    "1f304b0c7f261369dd68839507bb609a949965ad": "Ybodychange",
    "b5ee7dbd8dde756bc556f823327328f511048021": "Ybodychange",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": "Ymultichange(Yparameterchange,Ybodychange)",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Ybodychange",
    "477a30f536277bf95d7181bf1b2fdda52d83bf51": "Yintroduced"
  },
  "changeHistoryDetails": {
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9418. ATSV2 /apps//entities/YARN_CONTAINER rest api does not show metrics. Contributed by Prabhu Joseph.\n",
      "commitDate": "01/04/19 11:06 AM",
      "commitName": "332cab5518ba9c70a5f191883db8c4d22e8e48b7",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.78,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n   private void publishContainerCreatedEvent(ContainerEvent event) {\n     if (publishNMContainerEvents) {\n       ContainerId containerId \u003d event.getContainerID();\n       ContainerEntity entity \u003d createContainerEntity(containerId);\n       Container container \u003d context.getContainers().get(containerId);\n       Resource resource \u003d container.getResource();\n \n       Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n       entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n           resource.getMemorySize());\n       entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n           resource.getVirtualCores());\n       entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n           nodeId.getHost());\n       entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n           nodeId.getPort());\n       entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n           container.getPriority().toString());\n       entityInfo.put(\n           ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n           httpAddress);\n       entity.setInfo(entityInfo);\n \n       TimelineEvent tEvent \u003d new TimelineEvent();\n       tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n       tEvent.setTimestamp(event.getTimestamp());\n \n       long containerStartTime \u003d container.getContainerStartTime();\n       entity.addEvent(tEvent);\n       entity.setCreatedTime(containerStartTime);\n-      entity.setIdPrefix(TimelineServiceHelper.invertLong(containerStartTime));\n       dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n           containerId.getApplicationAttemptId().getApplicationId()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEvent event) {\n    if (publishNMContainerEvents) {\n      ContainerId containerId \u003d event.getContainerID();\n      ContainerEntity entity \u003d createContainerEntity(containerId);\n      Container container \u003d context.getContainers().get(containerId);\n      Resource resource \u003d container.getResource();\n\n      Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n          resource.getMemorySize());\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n          resource.getVirtualCores());\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n          nodeId.getHost());\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n          nodeId.getPort());\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n          container.getPriority().toString());\n      entityInfo.put(\n          ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n          httpAddress);\n      entity.setInfo(entityInfo);\n\n      TimelineEvent tEvent \u003d new TimelineEvent();\n      tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n      tEvent.setTimestamp(event.getTimestamp());\n\n      long containerStartTime \u003d container.getContainerStartTime();\n      entity.addEvent(tEvent);\n      entity.setCreatedTime(containerStartTime);\n      dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n          containerId.getApplicationAttemptId().getApplicationId()));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6735. Have a way to turn off container metrics from NMs. Contributed by Abhishek Modi.\n",
      "commitDate": "05/02/19 12:18 AM",
      "commitName": "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "14/06/18 12:08 AM",
      "commitNameOld": "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 236.05,
      "commitsBetweenForRepo": 1785,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   private void publishContainerCreatedEvent(ContainerEvent event) {\n-    ContainerId containerId \u003d event.getContainerID();\n-    ContainerEntity entity \u003d createContainerEntity(containerId);\n-    Container container \u003d context.getContainers().get(containerId);\n-    Resource resource \u003d container.getResource();\n+    if (publishNMContainerEvents) {\n+      ContainerId containerId \u003d event.getContainerID();\n+      ContainerEntity entity \u003d createContainerEntity(containerId);\n+      Container container \u003d context.getContainers().get(containerId);\n+      Resource resource \u003d container.getResource();\n \n-    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n-        resource.getMemorySize());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n-        resource.getVirtualCores());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n-        nodeId.getHost());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n-        nodeId.getPort());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n-        container.getPriority().toString());\n-    entityInfo.put(\n-        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n-        httpAddress);\n-    entity.setInfo(entityInfo);\n+      Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n+      entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n+          resource.getMemorySize());\n+      entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n+          resource.getVirtualCores());\n+      entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n+          nodeId.getHost());\n+      entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n+          nodeId.getPort());\n+      entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n+          container.getPriority().toString());\n+      entityInfo.put(\n+          ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n+          httpAddress);\n+      entity.setInfo(entityInfo);\n \n-    TimelineEvent tEvent \u003d new TimelineEvent();\n-    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n-    tEvent.setTimestamp(event.getTimestamp());\n+      TimelineEvent tEvent \u003d new TimelineEvent();\n+      tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n+      tEvent.setTimestamp(event.getTimestamp());\n \n-    long containerStartTime \u003d container.getContainerStartTime();\n-    entity.addEvent(tEvent);\n-    entity.setCreatedTime(containerStartTime);\n-    entity.setIdPrefix(TimelineServiceHelper.invertLong(containerStartTime));\n-    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n-        containerId.getApplicationAttemptId().getApplicationId()));\n+      long containerStartTime \u003d container.getContainerStartTime();\n+      entity.addEvent(tEvent);\n+      entity.setCreatedTime(containerStartTime);\n+      entity.setIdPrefix(TimelineServiceHelper.invertLong(containerStartTime));\n+      dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n+          containerId.getApplicationAttemptId().getApplicationId()));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEvent event) {\n    if (publishNMContainerEvents) {\n      ContainerId containerId \u003d event.getContainerID();\n      ContainerEntity entity \u003d createContainerEntity(containerId);\n      Container container \u003d context.getContainers().get(containerId);\n      Resource resource \u003d container.getResource();\n\n      Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n          resource.getMemorySize());\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n          resource.getVirtualCores());\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n          nodeId.getHost());\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n          nodeId.getPort());\n      entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n          container.getPriority().toString());\n      entityInfo.put(\n          ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n          httpAddress);\n      entity.setInfo(entityInfo);\n\n      TimelineEvent tEvent \u003d new TimelineEvent();\n      tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n      tEvent.setTimestamp(event.getTimestamp());\n\n      long containerStartTime \u003d container.getContainerStartTime();\n      entity.addEvent(tEvent);\n      entity.setCreatedTime(containerStartTime);\n      entity.setIdPrefix(TimelineServiceHelper.invertLong(containerStartTime));\n      dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n          containerId.getApplicationAttemptId().getApplicationId()));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "092fead5d9875fb3760206bcdd76cdafec5e9481": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5792. Adopt the id prefix for YARN, MR, and DS entities. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "092fead5d9875fb3760206bcdd76cdafec5e9481",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "278bd6fcff8d084acfd85b91a6f4ca7e189e742d",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   private void publishContainerCreatedEvent(ContainerEvent event) {\n     ContainerId containerId \u003d event.getContainerID();\n     ContainerEntity entity \u003d createContainerEntity(containerId);\n     Container container \u003d context.getContainers().get(containerId);\n     Resource resource \u003d container.getResource();\n \n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n         resource.getMemorySize());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n         resource.getVirtualCores());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n         nodeId.getHost());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n         nodeId.getPort());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n         container.getPriority().toString());\n     entityInfo.put(\n         ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n         httpAddress);\n     entity.setInfo(entityInfo);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n     tEvent.setTimestamp(event.getTimestamp());\n \n+    long containerStartTime \u003d container.getContainerStartTime();\n     entity.addEvent(tEvent);\n-    entity.setCreatedTime(event.getTimestamp());\n+    entity.setCreatedTime(containerStartTime);\n+    entity.setIdPrefix(TimelineServiceHelper.invertLong(containerStartTime));\n     dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n         containerId.getApplicationAttemptId().getApplicationId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEvent event) {\n    ContainerId containerId \u003d event.getContainerID();\n    ContainerEntity entity \u003d createContainerEntity(containerId);\n    Container container \u003d context.getContainers().get(containerId);\n    Resource resource \u003d container.getResource();\n\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n        resource.getMemorySize());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n        container.getPriority().toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(event.getTimestamp());\n\n    long containerStartTime \u003d container.getContainerStartTime();\n    entity.addEvent(tEvent);\n    entity.setCreatedTime(containerStartTime);\n    entity.setIdPrefix(TimelineServiceHelper.invertLong(containerStartTime));\n    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n        containerId.getApplicationAttemptId().getApplicationId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "1f304b0c7f261369dd68839507bb609a949965ad": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5699. Retrospect yarn entity fields which are publishing in events info fields. Contributed by Rohith Sharma K S.\n",
      "commitDate": "15/10/16 1:54 PM",
      "commitName": "1f304b0c7f261369dd68839507bb609a949965ad",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "06/09/16 7:31 AM",
      "commitNameOld": "e6fcfe28e304062c7d09231db757acb2953703ce",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 39.27,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void publishContainerCreatedEvent(ContainerEvent event) {\n     ContainerId containerId \u003d event.getContainerID();\n     ContainerEntity entity \u003d createContainerEntity(containerId);\n     Container container \u003d context.getContainers().get(containerId);\n     Resource resource \u003d container.getResource();\n \n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n         resource.getMemorySize());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n         resource.getVirtualCores());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n         nodeId.getHost());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n         nodeId.getPort());\n-    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n         container.getPriority().toString());\n     entityInfo.put(\n-        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n+        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n         httpAddress);\n     entity.setInfo(entityInfo);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n     tEvent.setTimestamp(event.getTimestamp());\n \n     entity.addEvent(tEvent);\n     entity.setCreatedTime(event.getTimestamp());\n     dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n         containerId.getApplicationAttemptId().getApplicationId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEvent event) {\n    ContainerId containerId \u003d event.getContainerID();\n    ContainerEntity entity \u003d createContainerEntity(containerId);\n    Container container \u003d context.getContainers().get(containerId);\n    Resource resource \u003d container.getResource();\n\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO,\n        resource.getMemorySize());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO,\n        container.getPriority().toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(event.getTimestamp());\n\n    entity.addEvent(tEvent);\n    entity.setCreatedTime(event.getTimestamp());\n    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n        containerId.getApplicationAttemptId().getApplicationId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "b5ee7dbd8dde756bc556f823327328f511048021": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5380. NMTimelinePublisher should use getMemorySize instead of getMemory. Contributed by Vrushali C\n",
      "commitDate": "15/07/16 2:04 AM",
      "commitName": "b5ee7dbd8dde756bc556f823327328f511048021",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "6cf6ab7b780de2b0c2c9ea730e1f366965a0d682",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 4.72,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void publishContainerCreatedEvent(ContainerEvent event) {\n     ContainerId containerId \u003d event.getContainerID();\n     ContainerEntity entity \u003d createContainerEntity(containerId);\n     Container container \u003d context.getContainers().get(containerId);\n     Resource resource \u003d container.getResource();\n \n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n-        resource.getMemory());\n+        resource.getMemorySize());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n         resource.getVirtualCores());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n         nodeId.getHost());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n         nodeId.getPort());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n         container.getPriority().toString());\n     entityInfo.put(\n         ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n         httpAddress);\n     entity.setInfo(entityInfo);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n     tEvent.setTimestamp(event.getTimestamp());\n \n     entity.addEvent(tEvent);\n     entity.setCreatedTime(event.getTimestamp());\n     dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n         containerId.getApplicationAttemptId().getApplicationId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEvent event) {\n    ContainerId containerId \u003d event.getContainerID();\n    ContainerEntity entity \u003d createContainerEntity(containerId);\n    Container container \u003d context.getContainers().get(containerId);\n    Resource resource \u003d container.getResource();\n\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n        resource.getMemorySize());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n        container.getPriority().toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(event.getTimestamp());\n\n    entity.addEvent(tEvent);\n    entity.setCreatedTime(event.getTimestamp());\n    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n        containerId.getApplicationAttemptId().getApplicationId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,31 @@\n-  private void publishContainerCreatedEvent(ContainerEntity entity,\n-      ContainerId containerId, Resource resource, Priority priority,\n-      long timestamp) {\n+  private void publishContainerCreatedEvent(ContainerEvent event) {\n+    ContainerId containerId \u003d event.getContainerID();\n+    ContainerEntity entity \u003d createContainerEntity(containerId);\n+    Container container \u003d context.getContainers().get(containerId);\n+    Resource resource \u003d container.getResource();\n+\n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n         resource.getMemory());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n         resource.getVirtualCores());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n         nodeId.getHost());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n         nodeId.getPort());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n-        priority.toString());\n+        container.getPriority().toString());\n     entityInfo.put(\n         ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n         httpAddress);\n     entity.setInfo(entityInfo);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n-    tEvent.setTimestamp(timestamp);\n+    tEvent.setTimestamp(event.getTimestamp());\n \n     entity.addEvent(tEvent);\n-    entity.setCreatedTime(timestamp);\n-    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n+    entity.setCreatedTime(event.getTimestamp());\n+    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n+        containerId.getApplicationAttemptId().getApplicationId()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishContainerCreatedEvent(ContainerEvent event) {\n    ContainerId containerId \u003d event.getContainerID();\n    ContainerEntity entity \u003d createContainerEntity(containerId);\n    Container container \u003d context.getContainers().get(containerId);\n    Resource resource \u003d container.getResource();\n\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n        resource.getMemory());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n        container.getPriority().toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(event.getTimestamp());\n\n    entity.addEvent(tEvent);\n    entity.setCreatedTime(event.getTimestamp());\n    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n        containerId.getApplicationAttemptId().getApplicationId()));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
          "extendedDetails": {
            "oldValue": "[entity-ContainerEntity, containerId-ContainerId, resource-Resource, priority-Priority, timestamp-long]",
            "newValue": "[event-ContainerEvent]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,31 @@\n-  private void publishContainerCreatedEvent(ContainerEntity entity,\n-      ContainerId containerId, Resource resource, Priority priority,\n-      long timestamp) {\n+  private void publishContainerCreatedEvent(ContainerEvent event) {\n+    ContainerId containerId \u003d event.getContainerID();\n+    ContainerEntity entity \u003d createContainerEntity(containerId);\n+    Container container \u003d context.getContainers().get(containerId);\n+    Resource resource \u003d container.getResource();\n+\n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n         resource.getMemory());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n         resource.getVirtualCores());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n         nodeId.getHost());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n         nodeId.getPort());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n-        priority.toString());\n+        container.getPriority().toString());\n     entityInfo.put(\n         ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n         httpAddress);\n     entity.setInfo(entityInfo);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n-    tEvent.setTimestamp(timestamp);\n+    tEvent.setTimestamp(event.getTimestamp());\n \n     entity.addEvent(tEvent);\n-    entity.setCreatedTime(timestamp);\n-    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n+    entity.setCreatedTime(event.getTimestamp());\n+    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n+        containerId.getApplicationAttemptId().getApplicationId()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishContainerCreatedEvent(ContainerEvent event) {\n    ContainerId containerId \u003d event.getContainerID();\n    ContainerEntity entity \u003d createContainerEntity(containerId);\n    Container container \u003d context.getContainers().get(containerId);\n    Resource resource \u003d container.getResource();\n\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n        resource.getMemory());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n        container.getPriority().toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(event.getTimestamp());\n\n    entity.addEvent(tEvent);\n    entity.setCreatedTime(event.getTimestamp());\n    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,\n        containerId.getApplicationAttemptId().getApplicationId()));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
          "extendedDetails": {}
        }
      ]
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   private void publishContainerCreatedEvent(ContainerEntity entity,\n       ContainerId containerId, Resource resource, Priority priority,\n       long timestamp) {\n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n         resource.getMemory());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n         resource.getVirtualCores());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n         nodeId.getHost());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n         nodeId.getPort());\n     entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n         priority.toString());\n     entityInfo.put(\n         ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n         httpAddress);\n     entity.setInfo(entityInfo);\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n     tEvent.setTimestamp(timestamp);\n \n     entity.addEvent(tEvent);\n+    entity.setCreatedTime(timestamp);\n     putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEntity entity,\n      ContainerId containerId, Resource resource, Priority priority,\n      long timestamp) {\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n        resource.getMemory());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n        priority.toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(timestamp);\n\n    entity.addEvent(tEvent);\n    entity.setCreatedTime(timestamp);\n    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "477a30f536277bf95d7181bf1b2fdda52d83bf51": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3045. Implement NM writing container lifecycle events to Timeline Service v2. Contributed by Naganarasimha G R.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "477a30f536277bf95d7181bf1b2fdda52d83bf51",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,26 @@\n+  private void publishContainerCreatedEvent(ContainerEntity entity,\n+      ContainerId containerId, Resource resource, Priority priority,\n+      long timestamp) {\n+    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n+        resource.getMemory());\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n+        resource.getVirtualCores());\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n+        nodeId.getHost());\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n+        nodeId.getPort());\n+    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n+        priority.toString());\n+    entityInfo.put(\n+        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n+        httpAddress);\n+    entity.setInfo(entityInfo);\n+\n+    TimelineEvent tEvent \u003d new TimelineEvent();\n+    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n+    tEvent.setTimestamp(timestamp);\n+\n+    entity.addEvent(tEvent);\n+    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerCreatedEvent(ContainerEntity entity,\n      ContainerId containerId, Resource resource, Priority priority,\n      long timestamp) {\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_ENTITY_INFO,\n        resource.getMemory());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_ENTITY_INFO,\n        resource.getVirtualCores());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_ENTITY_INFO,\n        nodeId.getHost());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_ENTITY_INFO,\n        nodeId.getPort());\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_ENTITY_INFO,\n        priority.toString());\n    entityInfo.put(\n        ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO,\n        httpAddress);\n    entity.setInfo(entityInfo);\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\n    tEvent.setTimestamp(timestamp);\n\n    entity.addEvent(tEvent);\n    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java"
    }
  }
}