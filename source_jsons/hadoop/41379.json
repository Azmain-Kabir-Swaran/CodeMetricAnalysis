{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLeafQueue.java",
  "functionName": "canRunAppAM",
  "functionId": "canRunAppAM___amResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
  "functionStartLine": 535,
  "functionEndLine": 544,
  "numCommitsSeen": 69,
  "timeTaken": 3908,
  "changeHistory": [
    "3b9d3acd203cef4d861c5182fc4dccc55128d347",
    "10468529a9b858bd945e7ecb063c9c1438efa474",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57",
    "819224dcf9c683aa52f58633ac8e13663f1916d8",
    "20f2799938c5cad59f59617cdb0f86e137c3c2c0",
    "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
    "6fcbf9b848c63465d26a40387a9be212e708f80b",
    "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4"
  ],
  "changeHistoryShort": {
    "3b9d3acd203cef4d861c5182fc4dccc55128d347": "Ymultichange(Ymodifierchange,Ybodychange)",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Ymodifierchange",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": "Ybodychange",
    "819224dcf9c683aa52f58633ac8e13663f1916d8": "Ybodychange",
    "20f2799938c5cad59f59617cdb0f86e137c3c2c0": "Ybodychange",
    "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d": "Ybodychange",
    "6fcbf9b848c63465d26a40387a9be212e708f80b": "Ybodychange",
    "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3b9d3acd203cef4d861c5182fc4dccc55128d347": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5890. FairScheduler should log information about AM-resource-usage and max-AM-share for queues\n(Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "29/11/16 12:46 PM",
      "commitName": "3b9d3acd203cef4d861c5182fc4dccc55128d347",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5890. FairScheduler should log information about AM-resource-usage and max-AM-share for queues\n(Contributed by Yufei Gu via Daniel Templeton)\n",
          "commitDate": "29/11/16 12:46 PM",
          "commitName": "3b9d3acd203cef4d861c5182fc4dccc55128d347",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 9:48 PM",
          "commitNameOld": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,10 @@\n-  boolean canRunAppAM(Resource amResource) {\n+  public boolean canRunAppAM(Resource amResource) {\n     if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n       return true;\n     }\n \n-    // If FairShare is zero, use min(maxShare, available resource) to compute\n-    // maxAMResource\n-    Resource maxResource \u003d Resources.clone(getFairShare());\n-    if (maxResource.getMemorySize() \u003d\u003d 0) {\n-      maxResource.setMemorySize(\n-          Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n-                   getMaxShare().getMemorySize()));\n-    }\n-\n-    if (maxResource.getVirtualCores() \u003d\u003d 0) {\n-      maxResource.setVirtualCores(Math.min(\n-          scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n-          getMaxShare().getVirtualCores()));\n-    }\n-\n-    Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n+    Resource maxAMResource \u003d computeMaxAMResource();\n+    getMetrics().setMaxAMShare(maxAMResource);\n     Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n     return Resources.fitsIn(ifRunAMResource, maxAMResource);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean canRunAppAM(Resource amResource) {\n    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n      return true;\n    }\n\n    Resource maxAMResource \u003d computeMaxAMResource();\n    getMetrics().setMaxAMShare(maxAMResource);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n    return Resources.fitsIn(ifRunAMResource, maxAMResource);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5890. FairScheduler should log information about AM-resource-usage and max-AM-share for queues\n(Contributed by Yufei Gu via Daniel Templeton)\n",
          "commitDate": "29/11/16 12:46 PM",
          "commitName": "3b9d3acd203cef4d861c5182fc4dccc55128d347",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 9:48 PM",
          "commitNameOld": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,10 @@\n-  boolean canRunAppAM(Resource amResource) {\n+  public boolean canRunAppAM(Resource amResource) {\n     if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n       return true;\n     }\n \n-    // If FairShare is zero, use min(maxShare, available resource) to compute\n-    // maxAMResource\n-    Resource maxResource \u003d Resources.clone(getFairShare());\n-    if (maxResource.getMemorySize() \u003d\u003d 0) {\n-      maxResource.setMemorySize(\n-          Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n-                   getMaxShare().getMemorySize()));\n-    }\n-\n-    if (maxResource.getVirtualCores() \u003d\u003d 0) {\n-      maxResource.setVirtualCores(Math.min(\n-          scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n-          getMaxShare().getVirtualCores()));\n-    }\n-\n-    Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n+    Resource maxAMResource \u003d computeMaxAMResource();\n+    getMetrics().setMaxAMShare(maxAMResource);\n     Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n     return Resources.fitsIn(ifRunAMResource, maxAMResource);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean canRunAppAM(Resource amResource) {\n    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n      return true;\n    }\n\n    Resource maxAMResource \u003d computeMaxAMResource();\n    getMetrics().setMaxAMShare(maxAMResource);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n    return Resources.fitsIn(ifRunAMResource, maxAMResource);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "09/11/16 11:44 PM",
      "commitNameOld": "86ac1ad9fd65c7dd12278372b369de38dc4616db",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 13.92,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n-  public boolean canRunAppAM(Resource amResource) {\n+  boolean canRunAppAM(Resource amResource) {\n     if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n       return true;\n     }\n \n     // If FairShare is zero, use min(maxShare, available resource) to compute\n     // maxAMResource\n     Resource maxResource \u003d Resources.clone(getFairShare());\n     if (maxResource.getMemorySize() \u003d\u003d 0) {\n       maxResource.setMemorySize(\n           Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n                    getMaxShare().getMemorySize()));\n     }\n \n     if (maxResource.getVirtualCores() \u003d\u003d 0) {\n       maxResource.setVirtualCores(Math.min(\n           scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n           getMaxShare().getVirtualCores()));\n     }\n \n     Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n     Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n     return Resources.fitsIn(ifRunAMResource, maxAMResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canRunAppAM(Resource amResource) {\n    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n      return true;\n    }\n\n    // If FairShare is zero, use min(maxShare, available resource) to compute\n    // maxAMResource\n    Resource maxResource \u003d Resources.clone(getFairShare());\n    if (maxResource.getMemorySize() \u003d\u003d 0) {\n      maxResource.setMemorySize(\n          Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n                   getMaxShare().getMemorySize()));\n    }\n\n    if (maxResource.getVirtualCores() \u003d\u003d 0) {\n      maxResource.setVirtualCores(Math.min(\n          scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n          getMaxShare().getVirtualCores()));\n    }\n\n    Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n    return Resources.fitsIn(ifRunAMResource, maxAMResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[]"
      }
    },
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5264. Store all queue-specific information in FSQueue. (Yufei Gu via kasha)\n",
      "commitDate": "02/09/16 2:56 PM",
      "commitName": "f6ea9be5473ab66798b0536317d2f32c5348eb57",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 52.68,
      "commitsBetweenForRepo": 369,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   public boolean canRunAppAM(Resource amResource) {\n-    float maxAMShare \u003d\n-        scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n     if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n       return true;\n     }\n \n     // If FairShare is zero, use min(maxShare, available resource) to compute\n     // maxAMResource\n     Resource maxResource \u003d Resources.clone(getFairShare());\n     if (maxResource.getMemorySize() \u003d\u003d 0) {\n       maxResource.setMemorySize(\n           Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n                    getMaxShare().getMemorySize()));\n     }\n \n     if (maxResource.getVirtualCores() \u003d\u003d 0) {\n       maxResource.setVirtualCores(Math.min(\n           scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n           getMaxShare().getVirtualCores()));\n     }\n \n     Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n     Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n     return Resources.fitsIn(ifRunAMResource, maxAMResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean canRunAppAM(Resource amResource) {\n    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n      return true;\n    }\n\n    // If FairShare is zero, use min(maxShare, available resource) to compute\n    // maxAMResource\n    Resource maxResource \u003d Resources.clone(getFairShare());\n    if (maxResource.getMemorySize() \u003d\u003d 0) {\n      maxResource.setMemorySize(\n          Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n                   getMaxShare().getMemorySize()));\n    }\n\n    if (maxResource.getVirtualCores() \u003d\u003d 0) {\n      maxResource.setVirtualCores(Math.min(\n          scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n          getMaxShare().getVirtualCores()));\n    }\n\n    Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n    return Resources.fitsIn(ifRunAMResource, maxAMResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "819224dcf9c683aa52f58633ac8e13663f1916d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5270. Solve miscellaneous issues caused by YARN-4844. Contributed by Wangda Tan\n",
      "commitDate": "11/07/16 10:36 PM",
      "commitName": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/06/16 10:24 PM",
      "commitNameOld": "20f2799938c5cad59f59617cdb0f86e137c3c2c0",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 24.01,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public boolean canRunAppAM(Resource amResource) {\n     float maxAMShare \u003d\n         scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n     if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n       return true;\n     }\n \n     // If FairShare is zero, use min(maxShare, available resource) to compute\n     // maxAMResource\n     Resource maxResource \u003d Resources.clone(getFairShare());\n     if (maxResource.getMemorySize() \u003d\u003d 0) {\n-      maxResource.setMemory(\n+      maxResource.setMemorySize(\n           Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n                    getMaxShare().getMemorySize()));\n     }\n \n-    if (maxResource.getVirtualCoresSize() \u003d\u003d 0) {\n+    if (maxResource.getVirtualCores() \u003d\u003d 0) {\n       maxResource.setVirtualCores(Math.min(\n           scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n-          getMaxShare().getVirtualCoresSize()));\n+          getMaxShare().getVirtualCores()));\n     }\n \n     Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n     Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n     return Resources.fitsIn(ifRunAMResource, maxAMResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean canRunAppAM(Resource amResource) {\n    float maxAMShare \u003d\n        scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n      return true;\n    }\n\n    // If FairShare is zero, use min(maxShare, available resource) to compute\n    // maxAMResource\n    Resource maxResource \u003d Resources.clone(getFairShare());\n    if (maxResource.getMemorySize() \u003d\u003d 0) {\n      maxResource.setMemorySize(\n          Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n                   getMaxShare().getMemorySize()));\n    }\n\n    if (maxResource.getVirtualCores() \u003d\u003d 0) {\n      maxResource.setVirtualCores(Math.min(\n          scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n          getMaxShare().getVirtualCores()));\n    }\n\n    Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n    return Resources.fitsIn(ifRunAMResource, maxAMResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "20f2799938c5cad59f59617cdb0f86e137c3c2c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5077. Fix FSLeafQueue#getFairShare() for queues with zero fairshare. (Yufei Gu via kasha)\n",
      "commitDate": "17/06/16 10:24 PM",
      "commitName": "20f2799938c5cad59f59617cdb0f86e137c3c2c0",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "07/06/16 3:06 PM",
      "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 10.3,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public boolean canRunAppAM(Resource amResource) {\n     float maxAMShare \u003d\n         scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n     if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n       return true;\n     }\n-    Resource maxAMResource \u003d Resources.multiply(getFairShare(), maxAMShare);\n-    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n \n-    boolean overMaxAMShareLimit \u003d policy\n-            .checkIfAMResourceUsageOverLimit(ifRunAMResource, maxAMResource);\n-\n-    // For fair policy and fifo policy which doesn\u0027t check VCore usages,\n-    // additionally check if the AM takes all available VCores or\n-    // over maxResource to avoid deadlock.\n-    if (!overMaxAMShareLimit \u0026\u0026 !policy.equals(\n-        SchedulingPolicy.getInstance(DominantResourceFairnessPolicy.class))) {\n-      overMaxAMShareLimit \u003d\n-         isVCoresOverMaxResource(ifRunAMResource.getVirtualCores()) ||\n-         ifRunAMResource.getVirtualCores() \u003e\u003d\n-         scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n+    // If FairShare is zero, use min(maxShare, available resource) to compute\n+    // maxAMResource\n+    Resource maxResource \u003d Resources.clone(getFairShare());\n+    if (maxResource.getMemorySize() \u003d\u003d 0) {\n+      maxResource.setMemory(\n+          Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n+                   getMaxShare().getMemorySize()));\n     }\n \n-    return !overMaxAMShareLimit;\n+    if (maxResource.getVirtualCoresSize() \u003d\u003d 0) {\n+      maxResource.setVirtualCores(Math.min(\n+          scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n+          getMaxShare().getVirtualCoresSize()));\n+    }\n+\n+    Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n+    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n+    return Resources.fitsIn(ifRunAMResource, maxAMResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean canRunAppAM(Resource amResource) {\n    float maxAMShare \u003d\n        scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n      return true;\n    }\n\n    // If FairShare is zero, use min(maxShare, available resource) to compute\n    // maxAMResource\n    Resource maxResource \u003d Resources.clone(getFairShare());\n    if (maxResource.getMemorySize() \u003d\u003d 0) {\n      maxResource.setMemory(\n          Math.min(scheduler.getRootQueueMetrics().getAvailableMB(),\n                   getMaxShare().getMemorySize()));\n    }\n\n    if (maxResource.getVirtualCoresSize() \u003d\u003d 0) {\n      maxResource.setVirtualCores(Math.min(\n          scheduler.getRootQueueMetrics().getAvailableVirtualCores(),\n          getMaxShare().getVirtualCoresSize()));\n    }\n\n    Resource maxAMResource \u003d Resources.multiply(maxResource, maxAMShare);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n    return Resources.fitsIn(ifRunAMResource, maxAMResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4866. FairScheduler: AMs can consume all vcores leading to a livelock when using FAIR policy. (Yufei Gu via kasha)\n",
      "commitDate": "25/05/16 10:13 PM",
      "commitName": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "28/09/15 9:05 AM",
      "commitNameOld": "fb2e525c0775ccf218c8980676e9fb4005a406a6",
      "commitAuthorOld": "Anubhav Dhoot",
      "daysBetweenCommits": 240.55,
      "commitsBetweenForRepo": 1606,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,25 @@\n   public boolean canRunAppAM(Resource amResource) {\n     float maxAMShare \u003d\n         scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n     if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n       return true;\n     }\n     Resource maxAMResource \u003d Resources.multiply(getFairShare(), maxAMShare);\n     Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n-    return !policy\n-        .checkIfAMResourceUsageOverLimit(ifRunAMResource, maxAMResource);\n+\n+    boolean overMaxAMShareLimit \u003d policy\n+            .checkIfAMResourceUsageOverLimit(ifRunAMResource, maxAMResource);\n+\n+    // For fair policy and fifo policy which doesn\u0027t check VCore usages,\n+    // additionally check if the AM takes all available VCores or\n+    // over maxResource to avoid deadlock.\n+    if (!overMaxAMShareLimit \u0026\u0026 !policy.equals(\n+        SchedulingPolicy.getInstance(DominantResourceFairnessPolicy.class))) {\n+      overMaxAMShareLimit \u003d\n+         isVCoresOverMaxResource(ifRunAMResource.getVirtualCores()) ||\n+         ifRunAMResource.getVirtualCores() \u003e\u003d\n+         scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n+    }\n+\n+    return !overMaxAMShareLimit;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean canRunAppAM(Resource amResource) {\n    float maxAMShare \u003d\n        scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n      return true;\n    }\n    Resource maxAMResource \u003d Resources.multiply(getFairShare(), maxAMShare);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n\n    boolean overMaxAMShareLimit \u003d policy\n            .checkIfAMResourceUsageOverLimit(ifRunAMResource, maxAMResource);\n\n    // For fair policy and fifo policy which doesn\u0027t check VCore usages,\n    // additionally check if the AM takes all available VCores or\n    // over maxResource to avoid deadlock.\n    if (!overMaxAMShareLimit \u0026\u0026 !policy.equals(\n        SchedulingPolicy.getInstance(DominantResourceFairnessPolicy.class))) {\n      overMaxAMShareLimit \u003d\n         isVCoresOverMaxResource(ifRunAMResource.getVirtualCores()) ||\n         ifRunAMResource.getVirtualCores() \u003e\u003d\n         scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n    }\n\n    return !overMaxAMShareLimit;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "6fcbf9b848c63465d26a40387a9be212e708f80b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2187. FairScheduler: Disable max-AM-share check by default. (Robert Kanter via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604321 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/14 12:30 AM",
      "commitName": "6fcbf9b848c63465d26a40387a9be212e708f80b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "08/06/14 8:09 PM",
      "commitNameOld": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.18,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,11 @@\n   public boolean canRunAppAM(Resource amResource) {\n     float maxAMShare \u003d\n         scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n+    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n+      return true;\n+    }\n     Resource maxAMResource \u003d Resources.multiply(getFairShare(), maxAMShare);\n     Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n     return !policy\n         .checkIfAMResourceUsageOverLimit(ifRunAMResource, maxAMResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean canRunAppAM(Resource amResource) {\n    float maxAMShare \u003d\n        scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n    if (Math.abs(maxAMShare - -1.0f) \u003c 0.0001) {\n      return true;\n    }\n    Resource maxAMResource \u003d Resources.multiply(getFairShare(), maxAMShare);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n    return !policy\n        .checkIfAMResourceUsageOverLimit(ifRunAMResource, maxAMResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1913. With Fair Scheduler, cluster can logjam when all resources are consumed by AMs (Wei Yan via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1599400 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/06/14 5:56 PM",
      "commitName": "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,8 @@\n+  public boolean canRunAppAM(Resource amResource) {\n+    float maxAMShare \u003d\n+        scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n+    Resource maxAMResource \u003d Resources.multiply(getFairShare(), maxAMShare);\n+    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n+    return !policy\n+        .checkIfAMResourceUsageOverLimit(ifRunAMResource, maxAMResource);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean canRunAppAM(Resource amResource) {\n    float maxAMShare \u003d\n        scheduler.getAllocationConfiguration().getQueueMaxAMShare(getName());\n    Resource maxAMResource \u003d Resources.multiply(getFairShare(), maxAMShare);\n    Resource ifRunAMResource \u003d Resources.add(amResourceUsage, amResource);\n    return !policy\n        .checkIfAMResourceUsageOverLimit(ifRunAMResource, maxAMResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java"
    }
  }
}