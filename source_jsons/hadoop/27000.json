{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BufferPool.java",
  "functionName": "initialize",
  "functionId": "initialize___conf-Configuration",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/BufferPool.java",
  "functionStartLine": 101,
  "functionEndLine": 142,
  "numCommitsSeen": 2,
  "timeTaken": 328,
  "changeHistory": [
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,42 @@\n+  public synchronized void initialize(Configuration conf)\n+      throws IOException {\n+    if (this.isInitialize.get()) {\n+      return;\n+    }\n+    this.singleBufferSize \u003d conf.getLong(CosNConfigKeys.COSN_BLOCK_SIZE_KEY,\n+        CosNConfigKeys.DEFAULT_BLOCK_SIZE);\n+\n+    // The block size of CosN can only support up to 2GB.\n+    if (this.singleBufferSize \u003c Constants.MIN_PART_SIZE\n+        || this.singleBufferSize \u003e Constants.MAX_PART_SIZE) {\n+      String exceptionMsg \u003d String.format(\n+          \"The block size of CosN is limited to %d to %d\",\n+          Constants.MIN_PART_SIZE, Constants.MAX_PART_SIZE);\n+      throw new IOException(exceptionMsg);\n+    }\n+\n+    long memoryBufferLimit \u003d conf.getLong(\n+        CosNConfigKeys.COSN_UPLOAD_BUFFER_SIZE_KEY,\n+        CosNConfigKeys.DEFAULT_UPLOAD_BUFFER_SIZE);\n+\n+    this.diskBufferDir \u003d this.createDir(conf.get(\n+        CosNConfigKeys.COSN_BUFFER_DIR_KEY,\n+        CosNConfigKeys.DEFAULT_BUFFER_DIR));\n+\n+    int bufferPoolSize \u003d (int) (memoryBufferLimit / this.singleBufferSize);\n+    if (0 \u003d\u003d bufferPoolSize) {\n+      throw new IOException(\n+          String.format(\"The total size of the buffer [%d] is \" +\n+                  \"smaller than a single block [%d].\"\n+                  + \"please consider increase the buffer size \" +\n+                  \"or decrease the block size\",\n+              memoryBufferLimit, this.singleBufferSize));\n+    }\n+    this.bufferPool \u003d new LinkedBlockingQueue\u003c\u003e(bufferPoolSize);\n+    for (int i \u003d 0; i \u003c bufferPoolSize; i++) {\n+      this.bufferPool.add(ByteBuffer.allocateDirect(\n+          (int) this.singleBufferSize));\n+    }\n+\n+    this.isInitialize.set(true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void initialize(Configuration conf)\n      throws IOException {\n    if (this.isInitialize.get()) {\n      return;\n    }\n    this.singleBufferSize \u003d conf.getLong(CosNConfigKeys.COSN_BLOCK_SIZE_KEY,\n        CosNConfigKeys.DEFAULT_BLOCK_SIZE);\n\n    // The block size of CosN can only support up to 2GB.\n    if (this.singleBufferSize \u003c Constants.MIN_PART_SIZE\n        || this.singleBufferSize \u003e Constants.MAX_PART_SIZE) {\n      String exceptionMsg \u003d String.format(\n          \"The block size of CosN is limited to %d to %d\",\n          Constants.MIN_PART_SIZE, Constants.MAX_PART_SIZE);\n      throw new IOException(exceptionMsg);\n    }\n\n    long memoryBufferLimit \u003d conf.getLong(\n        CosNConfigKeys.COSN_UPLOAD_BUFFER_SIZE_KEY,\n        CosNConfigKeys.DEFAULT_UPLOAD_BUFFER_SIZE);\n\n    this.diskBufferDir \u003d this.createDir(conf.get(\n        CosNConfigKeys.COSN_BUFFER_DIR_KEY,\n        CosNConfigKeys.DEFAULT_BUFFER_DIR));\n\n    int bufferPoolSize \u003d (int) (memoryBufferLimit / this.singleBufferSize);\n    if (0 \u003d\u003d bufferPoolSize) {\n      throw new IOException(\n          String.format(\"The total size of the buffer [%d] is \" +\n                  \"smaller than a single block [%d].\"\n                  + \"please consider increase the buffer size \" +\n                  \"or decrease the block size\",\n              memoryBufferLimit, this.singleBufferSize));\n    }\n    this.bufferPool \u003d new LinkedBlockingQueue\u003c\u003e(bufferPoolSize);\n    for (int i \u003d 0; i \u003c bufferPoolSize; i++) {\n      this.bufferPool.add(ByteBuffer.allocateDirect(\n          (int) this.singleBufferSize));\n    }\n\n    this.isInitialize.set(true);\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/BufferPool.java"
    }
  }
}