{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMLogAggregationStatusTracker.java",
  "functionName": "rollLogAggregationStatus",
  "functionId": "rollLogAggregationStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/logaggregation/tracker/NMLogAggregationStatusTracker.java",
  "functionStartLine": 197,
  "functionEndLine": 223,
  "numCommitsSeen": 2,
  "timeTaken": 1004,
  "changeHistory": [
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2"
  ],
  "changeHistoryShort": {
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7952. RM should be able to recover log aggregation status after restart/fail-over. (Xuan Gong via wangda)\n\nChange-Id: I725c9afe64831eda0aa6b0bebdbc79d2dd165707\n",
      "commitDate": "15/03/18 1:26 PM",
      "commitName": "4bf622043f034835d65ff2a4785b9b06d0ef1fd2",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,27 @@\n+  private void rollLogAggregationStatus() {\n+    // When we call rollLogAggregationStatus, basically fetch all\n+    // cached log aggregation status and delete the out-of-timeout period\n+    // log aggregation status, we should block the rollLogAggregationStatus\n+    // calls as well as pullCachedLogAggregationReports call. So, the\n+    // writeLocker is used here.\n+    this.writeLocker.lock();\n+    try {\n+      long currentTimeStamp \u003d System.currentTimeMillis();\n+      LOG.info(\"Rolling over the cached log aggregation status.\");\n+      Iterator\u003cEntry\u003cApplicationId, AppLogAggregationStatusForRMRecovery\u003e\u003e it\n+          \u003d recoveryStatuses.entrySet().iterator();\n+      while (it.hasNext()) {\n+        Entry\u003cApplicationId, AppLogAggregationStatusForRMRecovery\u003e tracker \u003d\n+            it.next();\n+        // the application has finished.\n+        if (nmContext.getApplications().get(tracker.getKey()) \u003d\u003d null) {\n+          if (currentTimeStamp - tracker.getValue().getLastModifiedTime()\n+              \u003e rollingInterval) {\n+            it.remove();\n+          }\n+        }\n+      }\n+    } finally {\n+      this.writeLocker.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void rollLogAggregationStatus() {\n    // When we call rollLogAggregationStatus, basically fetch all\n    // cached log aggregation status and delete the out-of-timeout period\n    // log aggregation status, we should block the rollLogAggregationStatus\n    // calls as well as pullCachedLogAggregationReports call. So, the\n    // writeLocker is used here.\n    this.writeLocker.lock();\n    try {\n      long currentTimeStamp \u003d System.currentTimeMillis();\n      LOG.info(\"Rolling over the cached log aggregation status.\");\n      Iterator\u003cEntry\u003cApplicationId, AppLogAggregationStatusForRMRecovery\u003e\u003e it\n          \u003d recoveryStatuses.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry\u003cApplicationId, AppLogAggregationStatusForRMRecovery\u003e tracker \u003d\n            it.next();\n        // the application has finished.\n        if (nmContext.getApplications().get(tracker.getKey()) \u003d\u003d null) {\n          if (currentTimeStamp - tracker.getValue().getLastModifiedTime()\n              \u003e rollingInterval) {\n            it.remove();\n          }\n        }\n      }\n    } finally {\n      this.writeLocker.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/logaggregation/tracker/NMLogAggregationStatusTracker.java"
    }
  }
}