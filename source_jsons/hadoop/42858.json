{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppImpl.java",
  "functionName": "rememberTargetTransitionsAndStoreState",
  "functionId": "rememberTargetTransitionsAndStoreState___event-RMAppEvent__transitionToDo-Object__targetFinalState-RMAppState__stateToBeStored-RMAppState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
  "functionStartLine": 1286,
  "functionEndLine": 1321,
  "numCommitsSeen": 170,
  "timeTaken": 6709,
  "changeHistory": [
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
    "bcc15c6290b3912a054323695a6a931b0de163bd",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
    "5805a81efbc024024d8172489dfdc6cf77879416",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6"
  ],
  "changeHistoryShort": {
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22": "Ybodychange",
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4": "Ybodychange",
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c": "Ybodychange",
    "bcc15c6290b3912a054323695a6a931b0de163bd": "Ybodychange",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": "Ybodychange",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": "Ybodychange",
    "5805a81efbc024024d8172489dfdc6cf77879416": "Ybodychange",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": "Ybodychange",
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5": "Ybodychange",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\n",
      "commitDate": "17/04/18 11:15 AM",
      "commitName": "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/04/18 6:04 AM",
      "commitNameOld": "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n     this.storedFinishTime \u003d this.systemClock.getTime();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n     case ATTEMPT_FINISHED:\n     case ATTEMPT_KILLED:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n     default:\n       break;\n     }\n \n     ApplicationStateData appState \u003d\n         ApplicationStateData.newInstance(this.submitTime, this.startTime,\n             this.user, this.submissionContext,\n-            stateToBeStored, diags, this.storedFinishTime, this.callerContext);\n+            stateToBeStored, diags, this.launchTime, this.storedFinishTime,\n+            this.callerContext);\n     appState.setApplicationTimeouts(this.applicationTimeouts);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d this.systemClock.getTime();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n    case ATTEMPT_FINISHED:\n    case ATTEMPT_KILLED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    default:\n      break;\n    }\n\n    ApplicationStateData appState \u003d\n        ApplicationStateData.newInstance(this.submitTime, this.startTime,\n            this.user, this.submissionContext,\n            stateToBeStored, diags, this.launchTime, this.storedFinishTime,\n            this.callerContext);\n    appState.setApplicationTimeouts(this.applicationTimeouts);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\"\n\nThis reverts commit 0c14b6f0d80d847be7ef3eda1614eadbf835181c.\n",
      "commitDate": "17/04/18 6:04 AM",
      "commitName": "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/04/18 5:59 AM",
      "commitNameOld": "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n     this.storedFinishTime \u003d this.systemClock.getTime();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n     case ATTEMPT_FINISHED:\n     case ATTEMPT_KILLED:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n     default:\n       break;\n     }\n \n     ApplicationStateData appState \u003d\n         ApplicationStateData.newInstance(this.submitTime, this.startTime,\n             this.user, this.submissionContext,\n-            stateToBeStored, diags, this.launchTime, this.storedFinishTime,\n-            this.callerContext);\n+            stateToBeStored, diags, this.storedFinishTime, this.callerContext);\n     appState.setApplicationTimeouts(this.applicationTimeouts);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d this.systemClock.getTime();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n    case ATTEMPT_FINISHED:\n    case ATTEMPT_KILLED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    default:\n      break;\n    }\n\n    ApplicationStateData appState \u003d\n        ApplicationStateData.newInstance(this.submitTime, this.startTime,\n            this.user, this.submissionContext,\n            stateToBeStored, diags, this.storedFinishTime, this.callerContext);\n    appState.setApplicationTimeouts(this.applicationTimeouts);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\n",
      "commitDate": "17/04/18 5:59 AM",
      "commitName": "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "26/03/18 11:19 AM",
      "commitNameOld": "9eef19b2ad78b8464da252d0e23c08675898b9d8",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 21.78,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n     this.storedFinishTime \u003d this.systemClock.getTime();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n     case ATTEMPT_FINISHED:\n     case ATTEMPT_KILLED:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n     default:\n       break;\n     }\n \n     ApplicationStateData appState \u003d\n         ApplicationStateData.newInstance(this.submitTime, this.startTime,\n             this.user, this.submissionContext,\n-            stateToBeStored, diags, this.storedFinishTime, this.callerContext);\n+            stateToBeStored, diags, this.launchTime, this.storedFinishTime,\n+            this.callerContext);\n     appState.setApplicationTimeouts(this.applicationTimeouts);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d this.systemClock.getTime();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n    case ATTEMPT_FINISHED:\n    case ATTEMPT_KILLED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    default:\n      break;\n    }\n\n    ApplicationStateData appState \u003d\n        ApplicationStateData.newInstance(this.submitTime, this.startTime,\n            this.user, this.submissionContext,\n            stateToBeStored, diags, this.launchTime, this.storedFinishTime,\n            this.callerContext);\n    appState.setApplicationTimeouts(this.applicationTimeouts);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "bcc15c6290b3912a054323695a6a931b0de163bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5611. Provide an API to update lifetime of an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "09/11/16 4:08 PM",
      "commitName": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/10/16 8:12 AM",
      "commitNameOld": "4d2f380d787a6145f45c87ba663079fedbf645b8",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 34.37,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n     this.storedFinishTime \u003d this.systemClock.getTime();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n     case ATTEMPT_FINISHED:\n     case ATTEMPT_KILLED:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n     default:\n       break;\n     }\n \n     ApplicationStateData appState \u003d\n         ApplicationStateData.newInstance(this.submitTime, this.startTime,\n             this.user, this.submissionContext,\n             stateToBeStored, diags, this.storedFinishTime, this.callerContext);\n+    appState.setApplicationTimeouts(this.applicationTimeouts);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d this.systemClock.getTime();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n    case ATTEMPT_FINISHED:\n    case ATTEMPT_KILLED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    default:\n      break;\n    }\n\n    ApplicationStateData appState \u003d\n        ApplicationStateData.newInstance(this.submitTime, this.startTime,\n            this.user, this.submissionContext,\n            stateToBeStored, diags, this.storedFinishTime, this.callerContext);\n    appState.setApplicationTimeouts(this.applicationTimeouts);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4349. Support CallerContext in YARN. Contributed by Wangda Tan\n",
      "commitDate": "23/11/15 5:19 PM",
      "commitName": "8676a118a12165ae5a8b80a2a4596c133471ebc1",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/11/15 11:23 AM",
      "commitNameOld": "7f55a18071ebe1c5591ff8a410b227c855c3f428",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 11.25,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n     this.storedFinishTime \u003d this.systemClock.getTime();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n     case ATTEMPT_FINISHED:\n     case ATTEMPT_KILLED:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n     default:\n       break;\n     }\n+\n     ApplicationStateData appState \u003d\n         ApplicationStateData.newInstance(this.submitTime, this.startTime,\n             this.user, this.submissionContext,\n-            stateToBeStored, diags, this.storedFinishTime);\n+            stateToBeStored, diags, this.storedFinishTime, this.callerContext);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d this.systemClock.getTime();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n    case ATTEMPT_FINISHED:\n    case ATTEMPT_KILLED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    default:\n      break;\n    }\n\n    ApplicationStateData appState \u003d\n        ApplicationStateData.newInstance(this.submitTime, this.startTime,\n            this.user, this.submissionContext,\n            stateToBeStored, diags, this.storedFinishTime, this.callerContext);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
      "commitDate": "15/10/15 5:12 PM",
      "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 11:43 PM",
      "commitNameOld": "a9aafad12b1d2f67e55e09a6fa261d61789c9d7e",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 21.73,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,33 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n     this.storedFinishTime \u003d this.systemClock.getTime();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n-      RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n-      diags \u003d rejectedEvent.getMessage();\n-      break;\n     case ATTEMPT_FINISHED:\n-      RMAppFinishedAttemptEvent finishedEvent \u003d\n-          (RMAppFinishedAttemptEvent) event;\n-      diags \u003d finishedEvent.getDiagnostics();\n+    case ATTEMPT_KILLED:\n+      diags \u003d event.getDiagnosticMsg();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n-    case ATTEMPT_KILLED:\n-      diags \u003d getAppKilledDiagnostics();\n-      break;\n     default:\n       break;\n     }\n     ApplicationStateData appState \u003d\n         ApplicationStateData.newInstance(this.submitTime, this.startTime,\n             this.user, this.submissionContext,\n             stateToBeStored, diags, this.storedFinishTime);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d this.systemClock.getTime();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n    case ATTEMPT_FINISHED:\n    case ATTEMPT_KILLED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    default:\n      break;\n    }\n    ApplicationStateData appState \u003d\n        ApplicationStateData.newInstance(this.submitTime, this.startTime,\n            this.user, this.submissionContext,\n            stateToBeStored, diags, this.storedFinishTime);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "5805a81efbc024024d8172489dfdc6cf77879416": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "25/11/14 12:48 PM",
      "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/11/14 3:34 PM",
      "commitNameOld": "d005404ef7211fe96ce1801ed267a249568540fd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 11.88,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n     this.storedFinishTime \u003d this.systemClock.getTime();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n       RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n       diags \u003d rejectedEvent.getMessage();\n       break;\n     case ATTEMPT_FINISHED:\n       RMAppFinishedAttemptEvent finishedEvent \u003d\n           (RMAppFinishedAttemptEvent) event;\n       diags \u003d finishedEvent.getDiagnostics();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n     case ATTEMPT_KILLED:\n       diags \u003d getAppKilledDiagnostics();\n       break;\n     default:\n       break;\n     }\n-    ApplicationState appState \u003d\n-        new ApplicationState(this.submitTime, this.startTime,\n-          this.submissionContext, this.user, stateToBeStored, diags,\n-          this.storedFinishTime);\n+    ApplicationStateData appState \u003d\n+        ApplicationStateData.newInstance(this.submitTime, this.startTime,\n+            this.user, this.submissionContext,\n+            stateToBeStored, diags, this.storedFinishTime);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d this.systemClock.getTime();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n      RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n      diags \u003d rejectedEvent.getMessage();\n      break;\n    case ATTEMPT_FINISHED:\n      RMAppFinishedAttemptEvent finishedEvent \u003d\n          (RMAppFinishedAttemptEvent) event;\n      diags \u003d finishedEvent.getDiagnostics();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    case ATTEMPT_KILLED:\n      diags \u003d getAppKilledDiagnostics();\n      break;\n    default:\n      break;\n    }\n    ApplicationStateData appState \u003d\n        ApplicationStateData.newInstance(this.submitTime, this.startTime,\n            this.user, this.submissionContext,\n            stateToBeStored, diags, this.storedFinishTime);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": {
      "type": "Ybodychange",
      "commitMessage": "YARN-611. Added an API to let apps specify an interval beyond which AM failures should be ignored towards counting max-attempts. Contributed by Xuan Gong.\n",
      "commitDate": "13/09/14 6:04 PM",
      "commitName": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/09/14 7:04 PM",
      "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthorOld": "junping_du",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n-    this.storedFinishTime \u003d System.currentTimeMillis();\n+    this.storedFinishTime \u003d this.systemClock.getTime();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n       RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n       diags \u003d rejectedEvent.getMessage();\n       break;\n     case ATTEMPT_FINISHED:\n       RMAppFinishedAttemptEvent finishedEvent \u003d\n           (RMAppFinishedAttemptEvent) event;\n       diags \u003d finishedEvent.getDiagnostics();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n     case ATTEMPT_KILLED:\n       diags \u003d getAppKilledDiagnostics();\n       break;\n     default:\n       break;\n     }\n     ApplicationState appState \u003d\n         new ApplicationState(this.submitTime, this.startTime,\n           this.submissionContext, this.user, stateToBeStored, diags,\n           this.storedFinishTime);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d this.systemClock.getTime();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n      RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n      diags \u003d rejectedEvent.getMessage();\n      break;\n    case ATTEMPT_FINISHED:\n      RMAppFinishedAttemptEvent finishedEvent \u003d\n          (RMAppFinishedAttemptEvent) event;\n      diags \u003d finishedEvent.getDiagnostics();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    case ATTEMPT_KILLED:\n      diags \u003d getAppKilledDiagnostics();\n      break;\n    default:\n      break;\n    }\n    ApplicationState appState \u003d\n        new ApplicationState(this.submitTime, this.startTime,\n          this.submissionContext, this.user, stateToBeStored, diags,\n          this.storedFinishTime);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1446. Changed client API to retry killing application till RM acknowledges so as to account for RM crashes/failover. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551444 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/13 6:16 PM",
      "commitName": "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/12/13 8:17 PM",
      "commitNameOld": "305ae48136d6e201de4451e824cb7b84f94ba2e0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.92,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n       Object transitionToDo, RMAppState targetFinalState,\n       RMAppState stateToBeStored) {\n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     this.stateBeforeFinalSaving \u003d getState();\n     this.storedFinishTime \u003d System.currentTimeMillis();\n \n     LOG.info(\"Updating application \" + this.applicationId\n         + \" with final state: \" + this.targetedFinalState);\n     // we lost attempt_finished diagnostics in app, because attempt_finished\n     // diagnostics is sent after app final state is saved. Later on, we will\n     // create GetApplicationAttemptReport specifically for getting per attempt\n     // info.\n     String diags \u003d null;\n     switch (event.getType()) {\n     case APP_REJECTED:\n       RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n       diags \u003d rejectedEvent.getMessage();\n       break;\n     case ATTEMPT_FINISHED:\n       RMAppFinishedAttemptEvent finishedEvent \u003d\n           (RMAppFinishedAttemptEvent) event;\n       diags \u003d finishedEvent.getDiagnostics();\n       break;\n     case ATTEMPT_FAILED:\n       RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n       diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n       break;\n-    case KILL:\n+    case ATTEMPT_KILLED:\n       diags \u003d getAppKilledDiagnostics();\n       break;\n     default:\n       break;\n     }\n     ApplicationState appState \u003d\n         new ApplicationState(this.submitTime, this.startTime,\n           this.submissionContext, this.user, stateToBeStored, diags,\n           this.storedFinishTime);\n     this.rmContext.getStateStore().updateApplicationState(appState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d System.currentTimeMillis();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n      RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n      diags \u003d rejectedEvent.getMessage();\n      break;\n    case ATTEMPT_FINISHED:\n      RMAppFinishedAttemptEvent finishedEvent \u003d\n          (RMAppFinishedAttemptEvent) event;\n      diags \u003d finishedEvent.getDiagnostics();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    case ATTEMPT_KILLED:\n      diags \u003d getAppKilledDiagnostics();\n      break;\n    default:\n      break;\n    }\n    ApplicationState appState \u003d\n        new ApplicationState(this.submitTime, this.startTime,\n          this.submissionContext, this.user, stateToBeStored, diags,\n          this.storedFinishTime);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 10:25 AM",
      "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,40 @@\n+  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n+      Object transitionToDo, RMAppState targetFinalState,\n+      RMAppState stateToBeStored) {\n+    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n+    this.stateBeforeFinalSaving \u003d getState();\n+    this.storedFinishTime \u003d System.currentTimeMillis();\n+\n+    LOG.info(\"Updating application \" + this.applicationId\n+        + \" with final state: \" + this.targetedFinalState);\n+    // we lost attempt_finished diagnostics in app, because attempt_finished\n+    // diagnostics is sent after app final state is saved. Later on, we will\n+    // create GetApplicationAttemptReport specifically for getting per attempt\n+    // info.\n+    String diags \u003d null;\n+    switch (event.getType()) {\n+    case APP_REJECTED:\n+      RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n+      diags \u003d rejectedEvent.getMessage();\n+      break;\n+    case ATTEMPT_FINISHED:\n+      RMAppFinishedAttemptEvent finishedEvent \u003d\n+          (RMAppFinishedAttemptEvent) event;\n+      diags \u003d finishedEvent.getDiagnostics();\n+      break;\n+    case ATTEMPT_FAILED:\n+      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n+      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n+      break;\n+    case KILL:\n+      diags \u003d getAppKilledDiagnostics();\n+      break;\n+    default:\n+      break;\n+    }\n+    ApplicationState appState \u003d\n+        new ApplicationState(this.submitTime, this.startTime,\n+          this.submissionContext, this.user, stateToBeStored, diags,\n+          this.storedFinishTime);\n+    this.rmContext.getStateStore().updateApplicationState(appState);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppEvent event,\n      Object transitionToDo, RMAppState targetFinalState,\n      RMAppState stateToBeStored) {\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    this.stateBeforeFinalSaving \u003d getState();\n    this.storedFinishTime \u003d System.currentTimeMillis();\n\n    LOG.info(\"Updating application \" + this.applicationId\n        + \" with final state: \" + this.targetedFinalState);\n    // we lost attempt_finished diagnostics in app, because attempt_finished\n    // diagnostics is sent after app final state is saved. Later on, we will\n    // create GetApplicationAttemptReport specifically for getting per attempt\n    // info.\n    String diags \u003d null;\n    switch (event.getType()) {\n    case APP_REJECTED:\n      RMAppRejectedEvent rejectedEvent \u003d (RMAppRejectedEvent) event;\n      diags \u003d rejectedEvent.getMessage();\n      break;\n    case ATTEMPT_FINISHED:\n      RMAppFinishedAttemptEvent finishedEvent \u003d\n          (RMAppFinishedAttemptEvent) event;\n      diags \u003d finishedEvent.getDiagnostics();\n      break;\n    case ATTEMPT_FAILED:\n      RMAppFailedAttemptEvent failedEvent \u003d (RMAppFailedAttemptEvent) event;\n      diags \u003d getAppAttemptFailedDiagnostics(failedEvent);\n      break;\n    case KILL:\n      diags \u003d getAppKilledDiagnostics();\n      break;\n    default:\n      break;\n    }\n    ApplicationState appState \u003d\n        new ApplicationState(this.submitTime, this.startTime,\n          this.submissionContext, this.user, stateToBeStored, diags,\n          this.storedFinishTime);\n    this.rmContext.getStateStore().updateApplicationState(appState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java"
    }
  }
}