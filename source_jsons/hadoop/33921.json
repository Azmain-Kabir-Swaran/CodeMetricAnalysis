{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsMemoryResourceHandlerImpl.java",
  "functionName": "preStart",
  "functionId": "preStart___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
  "functionStartLine": 150,
  "functionEndLine": 161,
  "numCommitsSeen": 11,
  "timeTaken": 2262,
  "changeHistory": [
    "6341c3a437489737a9c4bf0911b218b0023d8dd9",
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
    "c5d256c7607d3fe80db881c07ad445de467ab24b",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "4e7d32c0db69882cde854ef581056142a997c005"
  ],
  "changeHistoryShort": {
    "6341c3a437489737a9c4bf0911b218b0023d8dd9": "Ybodychange",
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": "Ybodychange",
    "c5d256c7607d3fe80db881c07ad445de467ab24b": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "4e7d32c0db69882cde854ef581056142a997c005": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6341c3a437489737a9c4bf0911b218b0023d8dd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7715. Support NM promotion/demotion of running containers. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "10/05/18 11:01 AM",
      "commitName": "6341c3a437489737a9c4bf0911b218b0023d8dd9",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "26/01/18 4:27 PM",
      "commitNameOld": "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 103.73,
      "commitsBetweenForRepo": 1325,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,12 @@\n   public List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n-\n     String cgroupId \u003d container.getContainerId().toString();\n-    //memory is in MB\n-    long containerSoftLimit \u003d\n-        (long) (container.getResource().getMemorySize() * this.softLimit);\n-    long containerHardLimit \u003d container.getResource().getMemorySize();\n     cGroupsHandler.createCGroup(MEMORY, cgroupId);\n-    if (enforce) {\n-      try {\n-        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-            CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n-            String.valueOf(containerHardLimit) + \"M\");\n-        ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n-        if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n-            ExecutionType.OPPORTUNISTIC) {\n-          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-              CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n-              String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\n-          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-              CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n-              String.valueOf(OPPORTUNISTIC_SWAPPINESS));\n-        } else {\n-          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-              CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n-              String.valueOf(containerSoftLimit) + \"M\");\n-          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-              CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n-              String.valueOf(swappiness));\n-        }\n-      } catch (ResourceHandlerException re) {\n-        cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n-        LOG.warn(\"Could not update cgroup for container\", re);\n-        throw re;\n-      }\n-    }\n+    updateContainer(container);\n     List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n     ret.add(new PrivilegedOperation(\n         PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n         PrivilegedOperation.CGROUP_ARG_PREFIX\n             + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n    String cgroupId \u003d container.getContainerId().toString();\n    cGroupsHandler.createCGroup(MEMORY, cgroupId);\n    updateContainer(container);\n    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n    ret.add(new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n        PrivilegedOperation.CGROUP_ARG_PREFIX\n            + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7064. Use cgroup to get container resource utilization. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "26/01/18 4:27 PM",
      "commitName": "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 157.68,
      "commitsBetweenForRepo": 1196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n \n     String cgroupId \u003d container.getContainerId().toString();\n     //memory is in MB\n     long containerSoftLimit \u003d\n         (long) (container.getResource().getMemorySize() * this.softLimit);\n     long containerHardLimit \u003d container.getResource().getMemorySize();\n     cGroupsHandler.createCGroup(MEMORY, cgroupId);\n-    try {\n-      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-          CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n-          String.valueOf(containerHardLimit) + \"M\");\n-      ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n-      if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n-          ExecutionType.OPPORTUNISTIC) {\n+    if (enforce) {\n+      try {\n         cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-            CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n-            String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\n-        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-            CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n-            String.valueOf(OPPORTUNISTIC_SWAPPINESS));\n-      } else {\n-        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-            CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n-            String.valueOf(containerSoftLimit) + \"M\");\n-        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-            CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n-            String.valueOf(swappiness));\n+            CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n+            String.valueOf(containerHardLimit) + \"M\");\n+        ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n+        if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n+            ExecutionType.OPPORTUNISTIC) {\n+          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+              CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n+              String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\n+          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+              CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n+              String.valueOf(OPPORTUNISTIC_SWAPPINESS));\n+        } else {\n+          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+              CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n+              String.valueOf(containerSoftLimit) + \"M\");\n+          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+              CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n+              String.valueOf(swappiness));\n+        }\n+      } catch (ResourceHandlerException re) {\n+        cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n+        LOG.warn(\"Could not update cgroup for container\", re);\n+        throw re;\n       }\n-    } catch (ResourceHandlerException re) {\n-      cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n-      LOG.warn(\"Could not update cgroup for container\", re);\n-      throw re;\n     }\n     List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n     ret.add(new PrivilegedOperation(\n         PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n         PrivilegedOperation.CGROUP_ARG_PREFIX\n             + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n\n    String cgroupId \u003d container.getContainerId().toString();\n    //memory is in MB\n    long containerSoftLimit \u003d\n        (long) (container.getResource().getMemorySize() * this.softLimit);\n    long containerHardLimit \u003d container.getResource().getMemorySize();\n    cGroupsHandler.createCGroup(MEMORY, cgroupId);\n    if (enforce) {\n      try {\n        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n            CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n            String.valueOf(containerHardLimit) + \"M\");\n        ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n        if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n            ExecutionType.OPPORTUNISTIC) {\n          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n              CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n              String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\n          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n              CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n              String.valueOf(OPPORTUNISTIC_SWAPPINESS));\n        } else {\n          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n              CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n              String.valueOf(containerSoftLimit) + \"M\");\n          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n              CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n              String.valueOf(swappiness));\n        }\n      } catch (ResourceHandlerException re) {\n        cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n        LOG.warn(\"Could not update cgroup for container\", re);\n        throw re;\n      }\n    }\n    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n    ret.add(new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n        PrivilegedOperation.CGROUP_ARG_PREFIX\n            + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "c5d256c7607d3fe80db881c07ad445de467ab24b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6674 Add memory cgroup settings for opportunistic containers.  (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "03/08/17 9:52 AM",
      "commitName": "c5d256c7607d3fe80db881c07ad445de467ab24b",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "11/01/17 4:00 PM",
      "commitNameOld": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 203.7,
      "commitsBetweenForRepo": 1126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,42 @@\n   public List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n \n     String cgroupId \u003d container.getContainerId().toString();\n     //memory is in MB\n     long containerSoftLimit \u003d\n         (long) (container.getResource().getMemorySize() * this.softLimit);\n     long containerHardLimit \u003d container.getResource().getMemorySize();\n     cGroupsHandler.createCGroup(MEMORY, cgroupId);\n     try {\n       cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n           CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n           String.valueOf(containerHardLimit) + \"M\");\n-      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-          CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n-          String.valueOf(containerSoftLimit) + \"M\");\n-      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n-          CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n-          String.valueOf(swappiness));\n+      ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n+      if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n+          ExecutionType.OPPORTUNISTIC) {\n+        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+            CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n+            String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\n+        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+            CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n+            String.valueOf(OPPORTUNISTIC_SWAPPINESS));\n+      } else {\n+        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+            CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n+            String.valueOf(containerSoftLimit) + \"M\");\n+        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+            CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n+            String.valueOf(swappiness));\n+      }\n     } catch (ResourceHandlerException re) {\n       cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n       LOG.warn(\"Could not update cgroup for container\", re);\n       throw re;\n     }\n     List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n     ret.add(new PrivilegedOperation(\n         PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n         PrivilegedOperation.CGROUP_ARG_PREFIX\n             + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n\n    String cgroupId \u003d container.getContainerId().toString();\n    //memory is in MB\n    long containerSoftLimit \u003d\n        (long) (container.getResource().getMemorySize() * this.softLimit);\n    long containerHardLimit \u003d container.getResource().getMemorySize();\n    cGroupsHandler.createCGroup(MEMORY, cgroupId);\n    try {\n      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n          CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n          String.valueOf(containerHardLimit) + \"M\");\n      ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n      if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n          ExecutionType.OPPORTUNISTIC) {\n        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n            CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n            String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\n        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n            CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n            String.valueOf(OPPORTUNISTIC_SWAPPINESS));\n      } else {\n        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n            CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n            String.valueOf(containerSoftLimit) + \"M\");\n        cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n            CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n            String.valueOf(swappiness));\n      }\n    } catch (ResourceHandlerException re) {\n      cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n      LOG.warn(\"Could not update cgroup for container\", re);\n      throw re;\n    }\n    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n    ret.add(new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n        PrivilegedOperation.CGROUP_ARG_PREFIX\n            + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "17/12/15 12:13 PM",
      "commitNameOld": "4e7d32c0db69882cde854ef581056142a997c005",
      "commitAuthorOld": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "daysBetweenCommits": 163.82,
      "commitsBetweenForRepo": 1035,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n \n     String cgroupId \u003d container.getContainerId().toString();\n     //memory is in MB\n     long containerSoftLimit \u003d\n-        (long) (container.getResource().getMemory() * this.softLimit);\n-    long containerHardLimit \u003d container.getResource().getMemory();\n+        (long) (container.getResource().getMemorySize() * this.softLimit);\n+    long containerHardLimit \u003d container.getResource().getMemorySize();\n     cGroupsHandler.createCGroup(MEMORY, cgroupId);\n     try {\n       cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n           CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n           String.valueOf(containerHardLimit) + \"M\");\n       cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n           CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n           String.valueOf(containerSoftLimit) + \"M\");\n       cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n           CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n           String.valueOf(swappiness));\n     } catch (ResourceHandlerException re) {\n       cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n       LOG.warn(\"Could not update cgroup for container\", re);\n       throw re;\n     }\n     List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n     ret.add(new PrivilegedOperation(\n         PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n         PrivilegedOperation.CGROUP_ARG_PREFIX\n             + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n\n    String cgroupId \u003d container.getContainerId().toString();\n    //memory is in MB\n    long containerSoftLimit \u003d\n        (long) (container.getResource().getMemorySize() * this.softLimit);\n    long containerHardLimit \u003d container.getResource().getMemorySize();\n    cGroupsHandler.createCGroup(MEMORY, cgroupId);\n    try {\n      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n          CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n          String.valueOf(containerHardLimit) + \"M\");\n      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n          CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n          String.valueOf(containerSoftLimit) + \"M\");\n      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n          CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n          String.valueOf(swappiness));\n    } catch (ResourceHandlerException re) {\n      cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n      LOG.warn(\"Could not update cgroup for container\", re);\n      throw re;\n    }\n    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n    ret.add(new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n        PrivilegedOperation.CGROUP_ARG_PREFIX\n            + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "4e7d32c0db69882cde854ef581056142a997c005": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1856. Added cgroups based memory monitoring for containers as another alternative to custom memory-monitoring. Contributed by Varun Vasudev.\n",
      "commitDate": "17/12/15 12:13 PM",
      "commitName": "4e7d32c0db69882cde854ef581056142a997c005",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "diff": "@@ -0,0 +1,31 @@\n+  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n+      throws ResourceHandlerException {\n+\n+    String cgroupId \u003d container.getContainerId().toString();\n+    //memory is in MB\n+    long containerSoftLimit \u003d\n+        (long) (container.getResource().getMemory() * this.softLimit);\n+    long containerHardLimit \u003d container.getResource().getMemory();\n+    cGroupsHandler.createCGroup(MEMORY, cgroupId);\n+    try {\n+      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+          CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n+          String.valueOf(containerHardLimit) + \"M\");\n+      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+          CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n+          String.valueOf(containerSoftLimit) + \"M\");\n+      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+          CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n+          String.valueOf(swappiness));\n+    } catch (ResourceHandlerException re) {\n+      cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n+      LOG.warn(\"Could not update cgroup for container\", re);\n+      throw re;\n+    }\n+    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n+    ret.add(new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n+        PrivilegedOperation.CGROUP_ARG_PREFIX\n+            + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n\n    String cgroupId \u003d container.getContainerId().toString();\n    //memory is in MB\n    long containerSoftLimit \u003d\n        (long) (container.getResource().getMemory() * this.softLimit);\n    long containerHardLimit \u003d container.getResource().getMemory();\n    cGroupsHandler.createCGroup(MEMORY, cgroupId);\n    try {\n      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n          CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n          String.valueOf(containerHardLimit) + \"M\");\n      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n          CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n          String.valueOf(containerSoftLimit) + \"M\");\n      cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n          CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n          String.valueOf(swappiness));\n    } catch (ResourceHandlerException re) {\n      cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n      LOG.warn(\"Could not update cgroup for container\", re);\n      throw re;\n    }\n    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n    ret.add(new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n        PrivilegedOperation.CGROUP_ARG_PREFIX\n            + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java"
    }
  }
}