{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeAttributesManagerImpl.java",
  "functionName": "getNodeToAttributes",
  "functionId": "getNodeToAttributes___prefix-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
  "functionStartLine": 449,
  "functionEndLine": 473,
  "numCommitsSeen": 18,
  "timeTaken": 2190,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
    "b9890d1f6604d572cd9f1cb719e2a4da08b31eff"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": "Ybodychange",
    "b9890d1f6604d572cd9f1cb719e2a4da08b31eff": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public List\u003cNodeToAttributes\u003e getNodeToAttributes(Set\u003cString\u003e prefix) {\n+    readLock.lock();\n     try {\n-      readLock.lock();\n       List\u003cNodeToAttributes\u003e nodeToAttributes \u003d new ArrayList\u003c\u003e();\n       nodeCollections.forEach((k, v) -\u003e {\n         List\u003cNodeAttribute\u003e attrs;\n         if (prefix \u003d\u003d null || prefix.isEmpty()) {\n           attrs \u003d new ArrayList\u003c\u003e(v.getAttributes().keySet());\n         } else {\n           attrs \u003d new ArrayList\u003c\u003e();\n           for (Entry\u003cNodeAttribute, AttributeValue\u003e nodeAttr : v.attributes\n               .entrySet()) {\n             if (prefix.contains(\n                 nodeAttr.getKey().getAttributeKey().getAttributePrefix())) {\n               attrs.add(nodeAttr.getKey());\n             }\n           }\n         }\n         nodeToAttributes.add(NodeToAttributes.newInstance(k, attrs));\n       });\n       return nodeToAttributes;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cNodeToAttributes\u003e getNodeToAttributes(Set\u003cString\u003e prefix) {\n    readLock.lock();\n    try {\n      List\u003cNodeToAttributes\u003e nodeToAttributes \u003d new ArrayList\u003c\u003e();\n      nodeCollections.forEach((k, v) -\u003e {\n        List\u003cNodeAttribute\u003e attrs;\n        if (prefix \u003d\u003d null || prefix.isEmpty()) {\n          attrs \u003d new ArrayList\u003c\u003e(v.getAttributes().keySet());\n        } else {\n          attrs \u003d new ArrayList\u003c\u003e();\n          for (Entry\u003cNodeAttribute, AttributeValue\u003e nodeAttr : v.attributes\n              .entrySet()) {\n            if (prefix.contains(\n                nodeAttr.getKey().getAttributeKey().getAttributePrefix())) {\n              attrs.add(nodeAttr.getKey());\n            }\n          }\n        }\n        nodeToAttributes.add(NodeToAttributes.newInstance(k, attrs));\n      });\n      return nodeToAttributes;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "5dc7d6e0f3f46277f0615d61755970a7aa28b8d7",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public List\u003cNodeToAttributes\u003e getNodeToAttributes(Set\u003cString\u003e prefix) {\n     try {\n       readLock.lock();\n       List\u003cNodeToAttributes\u003e nodeToAttributes \u003d new ArrayList\u003c\u003e();\n       nodeCollections.forEach((k, v) -\u003e {\n         List\u003cNodeAttribute\u003e attrs;\n         if (prefix \u003d\u003d null || prefix.isEmpty()) {\n           attrs \u003d new ArrayList\u003c\u003e(v.getAttributes().keySet());\n         } else {\n           attrs \u003d new ArrayList\u003c\u003e();\n           for (Entry\u003cNodeAttribute, AttributeValue\u003e nodeAttr : v.attributes\n               .entrySet()) {\n-            if (prefix.contains(nodeAttr.getKey().getAttributePrefix())) {\n+            if (prefix.contains(\n+                nodeAttr.getKey().getAttributeKey().getAttributePrefix())) {\n               attrs.add(nodeAttr.getKey());\n             }\n           }\n         }\n         nodeToAttributes.add(NodeToAttributes.newInstance(k, attrs));\n       });\n       return nodeToAttributes;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cNodeToAttributes\u003e getNodeToAttributes(Set\u003cString\u003e prefix) {\n    try {\n      readLock.lock();\n      List\u003cNodeToAttributes\u003e nodeToAttributes \u003d new ArrayList\u003c\u003e();\n      nodeCollections.forEach((k, v) -\u003e {\n        List\u003cNodeAttribute\u003e attrs;\n        if (prefix \u003d\u003d null || prefix.isEmpty()) {\n          attrs \u003d new ArrayList\u003c\u003e(v.getAttributes().keySet());\n        } else {\n          attrs \u003d new ArrayList\u003c\u003e();\n          for (Entry\u003cNodeAttribute, AttributeValue\u003e nodeAttr : v.attributes\n              .entrySet()) {\n            if (prefix.contains(\n                nodeAttr.getKey().getAttributeKey().getAttributePrefix())) {\n              attrs.add(nodeAttr.getKey());\n            }\n          }\n        }\n        nodeToAttributes.add(NodeToAttributes.newInstance(k, attrs));\n      });\n      return nodeToAttributes;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "b9890d1f6604d572cd9f1cb719e2a4da08b31eff": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7875. Node Attribute store for storing and recovering attributes. Contributed by Bibin A Chundatt.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "b9890d1f6604d572cd9f1cb719e2a4da08b31eff",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,24 @@\n+  public List\u003cNodeToAttributes\u003e getNodeToAttributes(Set\u003cString\u003e prefix) {\n+    try {\n+      readLock.lock();\n+      List\u003cNodeToAttributes\u003e nodeToAttributes \u003d new ArrayList\u003c\u003e();\n+      nodeCollections.forEach((k, v) -\u003e {\n+        List\u003cNodeAttribute\u003e attrs;\n+        if (prefix \u003d\u003d null || prefix.isEmpty()) {\n+          attrs \u003d new ArrayList\u003c\u003e(v.getAttributes().keySet());\n+        } else {\n+          attrs \u003d new ArrayList\u003c\u003e();\n+          for (Entry\u003cNodeAttribute, AttributeValue\u003e nodeAttr : v.attributes\n+              .entrySet()) {\n+            if (prefix.contains(nodeAttr.getKey().getAttributePrefix())) {\n+              attrs.add(nodeAttr.getKey());\n+            }\n+          }\n+        }\n+        nodeToAttributes.add(NodeToAttributes.newInstance(k, attrs));\n+      });\n+      return nodeToAttributes;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cNodeToAttributes\u003e getNodeToAttributes(Set\u003cString\u003e prefix) {\n    try {\n      readLock.lock();\n      List\u003cNodeToAttributes\u003e nodeToAttributes \u003d new ArrayList\u003c\u003e();\n      nodeCollections.forEach((k, v) -\u003e {\n        List\u003cNodeAttribute\u003e attrs;\n        if (prefix \u003d\u003d null || prefix.isEmpty()) {\n          attrs \u003d new ArrayList\u003c\u003e(v.getAttributes().keySet());\n        } else {\n          attrs \u003d new ArrayList\u003c\u003e();\n          for (Entry\u003cNodeAttribute, AttributeValue\u003e nodeAttr : v.attributes\n              .entrySet()) {\n            if (prefix.contains(nodeAttr.getKey().getAttributePrefix())) {\n              attrs.add(nodeAttr.getKey());\n            }\n          }\n        }\n        nodeToAttributes.add(NodeToAttributes.newInstance(k, attrs));\n      });\n      return nodeToAttributes;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java"
    }
  }
}