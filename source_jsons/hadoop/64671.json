{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "setOptionalCopyObjectRequestParameters",
  "functionId": "setOptionalCopyObjectRequestParameters___srcom-ObjectMetadata__copyObjectRequest-CopyObjectRequest",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 3523,
  "functionEndLine": 3550,
  "numCommitsSeen": 277,
  "timeTaken": 7165,
  "changeHistory": [
    "f864ef742960b805b430841c3a1ccb9e11bcc77c",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502",
    "7f783970364930cc461d1a73833bc58cdd10553e",
    "d7152332b32a575c3a92e3f4c44b95e58462528d",
    "7ac88244c54ce483729af3d2736d9f4731e230ca",
    "839b690ed5edc2ac4984640d58c005bb63cd8a07"
  ],
  "changeHistoryShort": {
    "f864ef742960b805b430841c3a1ccb9e11bcc77c": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Ybodychange",
    "7f783970364930cc461d1a73833bc58cdd10553e": "Ybodychange",
    "d7152332b32a575c3a92e3f4c44b95e58462528d": "Ybodychange",
    "7ac88244c54ce483729af3d2736d9f4731e230ca": "Ybodychange",
    "839b690ed5edc2ac4984640d58c005bb63cd8a07": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f864ef742960b805b430841c3a1ccb9e11bcc77c": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-16794. S3A reverts KMS encryption to the bucket\u0027s default KMS key in rename/copy.\n\n\r\nAreContributed by Mukund Thakur.\r\n\r\nThis addresses an issue which surfaced with KMS encryption: the wrong\r\nKMS key could be picked up in the S3 COPY operation, so\r\nrenamed files, while encrypted, would end up with the\r\nbucket default key.\r\n\r\nAs well as adding tests in the new suite\r\nITestS3AEncryptionWithDefaultS3Settings,\r\nAbstractSTestS3AHugeFiles has a new test method to\r\nverify that the encryption settings also work\r\nfor large files copied via multipart operations.\r\n",
      "commitDate": "02/03/20 9:31 AM",
      "commitName": "f864ef742960b805b430841c3a1ccb9e11bcc77c",
      "commitAuthor": "Mukund Thakur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16794. S3A reverts KMS encryption to the bucket\u0027s default KMS key in rename/copy.\n\n\r\nAreContributed by Mukund Thakur.\r\n\r\nThis addresses an issue which surfaced with KMS encryption: the wrong\r\nKMS key could be picked up in the S3 COPY operation, so\r\nrenamed files, while encrypted, would end up with the\r\nbucket default key.\r\n\r\nAs well as adding tests in the new suite\r\nITestS3AEncryptionWithDefaultS3Settings,\r\nAbstractSTestS3AHugeFiles has a new test method to\r\nverify that the encryption settings also work\r\nfor large files copied via multipart operations.\r\n",
          "commitDate": "02/03/20 9:31 AM",
          "commitName": "f864ef742960b805b430841c3a1ccb9e11bcc77c",
          "commitAuthor": "Mukund Thakur",
          "commitDateOld": "21/02/20 5:44 AM",
          "commitNameOld": "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0",
          "commitAuthorOld": "Mukund Thakur",
          "daysBetweenCommits": 10.16,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,28 @@\n-  protected void setOptionalCopyObjectRequestParameters(\n-      CopyObjectRequest copyObjectRequest) throws IOException {\n-    switch (getServerSideEncryptionAlgorithm()) {\n-    case SSE_KMS:\n-      generateSSEAwsKeyParams().ifPresent(\n-          copyObjectRequest::setSSEAwsKeyManagementParams);\n-      break;\n+  private void setOptionalCopyObjectRequestParameters(\n+          ObjectMetadata srcom,\n+          CopyObjectRequest copyObjectRequest) {\n+    String sourceKMSId \u003d srcom.getSSEAwsKmsKeyId();\n+    if (isNotEmpty(sourceKMSId)) {\n+      // source KMS ID is propagated\n+      LOG.debug(\"Propagating SSE-KMS settings from source {}\",\n+          sourceKMSId);\n+      copyObjectRequest.setSSEAwsKeyManagementParams(\n+              new SSEAwsKeyManagementParams(sourceKMSId));\n+    }\n+    switch(getServerSideEncryptionAlgorithm()) {\n+    /**\n+     * Overriding with client encryption settings.\n+     */\n     case SSE_C:\n       generateSSECustomerKey().ifPresent(customerKey -\u003e {\n         copyObjectRequest.setSourceSSECustomerKey(customerKey);\n         copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n       });\n       break;\n+    case SSE_KMS:\n+      generateSSEAwsKeyParams().ifPresent(\n+              copyObjectRequest::setSSEAwsKeyManagementParams);\n+      break;\n     default:\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setOptionalCopyObjectRequestParameters(\n          ObjectMetadata srcom,\n          CopyObjectRequest copyObjectRequest) {\n    String sourceKMSId \u003d srcom.getSSEAwsKmsKeyId();\n    if (isNotEmpty(sourceKMSId)) {\n      // source KMS ID is propagated\n      LOG.debug(\"Propagating SSE-KMS settings from source {}\",\n          sourceKMSId);\n      copyObjectRequest.setSSEAwsKeyManagementParams(\n              new SSEAwsKeyManagementParams(sourceKMSId));\n    }\n    switch(getServerSideEncryptionAlgorithm()) {\n    /**\n     * Overriding with client encryption settings.\n     */\n    case SSE_C:\n      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      });\n      break;\n    case SSE_KMS:\n      generateSSEAwsKeyParams().ifPresent(\n              copyObjectRequest::setSSEAwsKeyManagementParams);\n      break;\n    default:\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[copyObjectRequest-CopyObjectRequest]",
            "newValue": "[srcom-ObjectMetadata, copyObjectRequest-CopyObjectRequest]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-16794. S3A reverts KMS encryption to the bucket\u0027s default KMS key in rename/copy.\n\n\r\nAreContributed by Mukund Thakur.\r\n\r\nThis addresses an issue which surfaced with KMS encryption: the wrong\r\nKMS key could be picked up in the S3 COPY operation, so\r\nrenamed files, while encrypted, would end up with the\r\nbucket default key.\r\n\r\nAs well as adding tests in the new suite\r\nITestS3AEncryptionWithDefaultS3Settings,\r\nAbstractSTestS3AHugeFiles has a new test method to\r\nverify that the encryption settings also work\r\nfor large files copied via multipart operations.\r\n",
          "commitDate": "02/03/20 9:31 AM",
          "commitName": "f864ef742960b805b430841c3a1ccb9e11bcc77c",
          "commitAuthor": "Mukund Thakur",
          "commitDateOld": "21/02/20 5:44 AM",
          "commitNameOld": "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0",
          "commitAuthorOld": "Mukund Thakur",
          "daysBetweenCommits": 10.16,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,28 @@\n-  protected void setOptionalCopyObjectRequestParameters(\n-      CopyObjectRequest copyObjectRequest) throws IOException {\n-    switch (getServerSideEncryptionAlgorithm()) {\n-    case SSE_KMS:\n-      generateSSEAwsKeyParams().ifPresent(\n-          copyObjectRequest::setSSEAwsKeyManagementParams);\n-      break;\n+  private void setOptionalCopyObjectRequestParameters(\n+          ObjectMetadata srcom,\n+          CopyObjectRequest copyObjectRequest) {\n+    String sourceKMSId \u003d srcom.getSSEAwsKmsKeyId();\n+    if (isNotEmpty(sourceKMSId)) {\n+      // source KMS ID is propagated\n+      LOG.debug(\"Propagating SSE-KMS settings from source {}\",\n+          sourceKMSId);\n+      copyObjectRequest.setSSEAwsKeyManagementParams(\n+              new SSEAwsKeyManagementParams(sourceKMSId));\n+    }\n+    switch(getServerSideEncryptionAlgorithm()) {\n+    /**\n+     * Overriding with client encryption settings.\n+     */\n     case SSE_C:\n       generateSSECustomerKey().ifPresent(customerKey -\u003e {\n         copyObjectRequest.setSourceSSECustomerKey(customerKey);\n         copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n       });\n       break;\n+    case SSE_KMS:\n+      generateSSEAwsKeyParams().ifPresent(\n+              copyObjectRequest::setSSEAwsKeyManagementParams);\n+      break;\n     default:\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setOptionalCopyObjectRequestParameters(\n          ObjectMetadata srcom,\n          CopyObjectRequest copyObjectRequest) {\n    String sourceKMSId \u003d srcom.getSSEAwsKmsKeyId();\n    if (isNotEmpty(sourceKMSId)) {\n      // source KMS ID is propagated\n      LOG.debug(\"Propagating SSE-KMS settings from source {}\",\n          sourceKMSId);\n      copyObjectRequest.setSSEAwsKeyManagementParams(\n              new SSEAwsKeyManagementParams(sourceKMSId));\n    }\n    switch(getServerSideEncryptionAlgorithm()) {\n    /**\n     * Overriding with client encryption settings.\n     */\n    case SSE_C:\n      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      });\n      break;\n    case SSE_KMS:\n      generateSSEAwsKeyParams().ifPresent(\n              copyObjectRequest::setSSEAwsKeyManagementParams);\n      break;\n    default:\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-16794. S3A reverts KMS encryption to the bucket\u0027s default KMS key in rename/copy.\n\n\r\nAreContributed by Mukund Thakur.\r\n\r\nThis addresses an issue which surfaced with KMS encryption: the wrong\r\nKMS key could be picked up in the S3 COPY operation, so\r\nrenamed files, while encrypted, would end up with the\r\nbucket default key.\r\n\r\nAs well as adding tests in the new suite\r\nITestS3AEncryptionWithDefaultS3Settings,\r\nAbstractSTestS3AHugeFiles has a new test method to\r\nverify that the encryption settings also work\r\nfor large files copied via multipart operations.\r\n",
          "commitDate": "02/03/20 9:31 AM",
          "commitName": "f864ef742960b805b430841c3a1ccb9e11bcc77c",
          "commitAuthor": "Mukund Thakur",
          "commitDateOld": "21/02/20 5:44 AM",
          "commitNameOld": "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0",
          "commitAuthorOld": "Mukund Thakur",
          "daysBetweenCommits": 10.16,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,28 @@\n-  protected void setOptionalCopyObjectRequestParameters(\n-      CopyObjectRequest copyObjectRequest) throws IOException {\n-    switch (getServerSideEncryptionAlgorithm()) {\n-    case SSE_KMS:\n-      generateSSEAwsKeyParams().ifPresent(\n-          copyObjectRequest::setSSEAwsKeyManagementParams);\n-      break;\n+  private void setOptionalCopyObjectRequestParameters(\n+          ObjectMetadata srcom,\n+          CopyObjectRequest copyObjectRequest) {\n+    String sourceKMSId \u003d srcom.getSSEAwsKmsKeyId();\n+    if (isNotEmpty(sourceKMSId)) {\n+      // source KMS ID is propagated\n+      LOG.debug(\"Propagating SSE-KMS settings from source {}\",\n+          sourceKMSId);\n+      copyObjectRequest.setSSEAwsKeyManagementParams(\n+              new SSEAwsKeyManagementParams(sourceKMSId));\n+    }\n+    switch(getServerSideEncryptionAlgorithm()) {\n+    /**\n+     * Overriding with client encryption settings.\n+     */\n     case SSE_C:\n       generateSSECustomerKey().ifPresent(customerKey -\u003e {\n         copyObjectRequest.setSourceSSECustomerKey(customerKey);\n         copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n       });\n       break;\n+    case SSE_KMS:\n+      generateSSEAwsKeyParams().ifPresent(\n+              copyObjectRequest::setSSEAwsKeyManagementParams);\n+      break;\n     default:\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setOptionalCopyObjectRequestParameters(\n          ObjectMetadata srcom,\n          CopyObjectRequest copyObjectRequest) {\n    String sourceKMSId \u003d srcom.getSSEAwsKmsKeyId();\n    if (isNotEmpty(sourceKMSId)) {\n      // source KMS ID is propagated\n      LOG.debug(\"Propagating SSE-KMS settings from source {}\",\n          sourceKMSId);\n      copyObjectRequest.setSSEAwsKeyManagementParams(\n              new SSEAwsKeyManagementParams(sourceKMSId));\n    }\n    switch(getServerSideEncryptionAlgorithm()) {\n    /**\n     * Overriding with client encryption settings.\n     */\n    case SSE_C:\n      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      });\n      break;\n    case SSE_KMS:\n      generateSSEAwsKeyParams().ifPresent(\n              copyObjectRequest::setSSEAwsKeyManagementParams);\n      break;\n    default:\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16794. S3A reverts KMS encryption to the bucket\u0027s default KMS key in rename/copy.\n\n\r\nAreContributed by Mukund Thakur.\r\n\r\nThis addresses an issue which surfaced with KMS encryption: the wrong\r\nKMS key could be picked up in the S3 COPY operation, so\r\nrenamed files, while encrypted, would end up with the\r\nbucket default key.\r\n\r\nAs well as adding tests in the new suite\r\nITestS3AEncryptionWithDefaultS3Settings,\r\nAbstractSTestS3AHugeFiles has a new test method to\r\nverify that the encryption settings also work\r\nfor large files copied via multipart operations.\r\n",
          "commitDate": "02/03/20 9:31 AM",
          "commitName": "f864ef742960b805b430841c3a1ccb9e11bcc77c",
          "commitAuthor": "Mukund Thakur",
          "commitDateOld": "21/02/20 5:44 AM",
          "commitNameOld": "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0",
          "commitAuthorOld": "Mukund Thakur",
          "daysBetweenCommits": 10.16,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,28 @@\n-  protected void setOptionalCopyObjectRequestParameters(\n-      CopyObjectRequest copyObjectRequest) throws IOException {\n-    switch (getServerSideEncryptionAlgorithm()) {\n-    case SSE_KMS:\n-      generateSSEAwsKeyParams().ifPresent(\n-          copyObjectRequest::setSSEAwsKeyManagementParams);\n-      break;\n+  private void setOptionalCopyObjectRequestParameters(\n+          ObjectMetadata srcom,\n+          CopyObjectRequest copyObjectRequest) {\n+    String sourceKMSId \u003d srcom.getSSEAwsKmsKeyId();\n+    if (isNotEmpty(sourceKMSId)) {\n+      // source KMS ID is propagated\n+      LOG.debug(\"Propagating SSE-KMS settings from source {}\",\n+          sourceKMSId);\n+      copyObjectRequest.setSSEAwsKeyManagementParams(\n+              new SSEAwsKeyManagementParams(sourceKMSId));\n+    }\n+    switch(getServerSideEncryptionAlgorithm()) {\n+    /**\n+     * Overriding with client encryption settings.\n+     */\n     case SSE_C:\n       generateSSECustomerKey().ifPresent(customerKey -\u003e {\n         copyObjectRequest.setSourceSSECustomerKey(customerKey);\n         copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n       });\n       break;\n+    case SSE_KMS:\n+      generateSSEAwsKeyParams().ifPresent(\n+              copyObjectRequest::setSSEAwsKeyManagementParams);\n+      break;\n     default:\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setOptionalCopyObjectRequestParameters(\n          ObjectMetadata srcom,\n          CopyObjectRequest copyObjectRequest) {\n    String sourceKMSId \u003d srcom.getSSEAwsKmsKeyId();\n    if (isNotEmpty(sourceKMSId)) {\n      // source KMS ID is propagated\n      LOG.debug(\"Propagating SSE-KMS settings from source {}\",\n          sourceKMSId);\n      copyObjectRequest.setSSEAwsKeyManagementParams(\n              new SSEAwsKeyManagementParams(sourceKMSId));\n    }\n    switch(getServerSideEncryptionAlgorithm()) {\n    /**\n     * Overriding with client encryption settings.\n     */\n    case SSE_C:\n      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      });\n      break;\n    case SSE_KMS:\n      generateSSEAwsKeyParams().ifPresent(\n              copyObjectRequest::setSSEAwsKeyManagementParams);\n      break;\n    default:\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/01/19 9:51 PM",
      "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.51,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,16 @@\n   protected void setOptionalCopyObjectRequestParameters(\n       CopyObjectRequest copyObjectRequest) throws IOException {\n-    switch (serverSideEncryptionAlgorithm) {\n+    switch (getServerSideEncryptionAlgorithm()) {\n     case SSE_KMS:\n-      copyObjectRequest.setSSEAwsKeyManagementParams(\n-          generateSSEAwsKeyParams()\n-      );\n+      generateSSEAwsKeyParams().ifPresent(\n+          copyObjectRequest::setSSEAwsKeyManagementParams);\n       break;\n     case SSE_C:\n-      if (isNotBlank(getServerSideEncryptionKey(bucket, getConf()))) {\n-        //at the moment, only supports copy using the same key\n-        SSECustomerKey customerKey \u003d generateSSECustomerKey();\n+      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n         copyObjectRequest.setSourceSSECustomerKey(customerKey);\n         copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n-      }\n+      });\n       break;\n     default:\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setOptionalCopyObjectRequestParameters(\n      CopyObjectRequest copyObjectRequest) throws IOException {\n    switch (getServerSideEncryptionAlgorithm()) {\n    case SSE_KMS:\n      generateSSEAwsKeyParams().ifPresent(\n          copyObjectRequest::setSSEAwsKeyManagementParams);\n      break;\n    case SSE_C:\n      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      });\n      break;\n    default:\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "7f783970364930cc461d1a73833bc58cdd10553e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
      "commitDate": "07/01/19 9:51 PM",
      "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "07/01/19 5:18 AM",
      "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   protected void setOptionalCopyObjectRequestParameters(\n       CopyObjectRequest copyObjectRequest) throws IOException {\n-    switch (getServerSideEncryptionAlgorithm()) {\n+    switch (serverSideEncryptionAlgorithm) {\n     case SSE_KMS:\n-      generateSSEAwsKeyParams().ifPresent(\n-          copyObjectRequest::setSSEAwsKeyManagementParams);\n+      copyObjectRequest.setSSEAwsKeyManagementParams(\n+          generateSSEAwsKeyParams()\n+      );\n       break;\n     case SSE_C:\n-      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n+      if (isNotBlank(getServerSideEncryptionKey(bucket, getConf()))) {\n+        //at the moment, only supports copy using the same key\n+        SSECustomerKey customerKey \u003d generateSSECustomerKey();\n         copyObjectRequest.setSourceSSECustomerKey(customerKey);\n         copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n-      });\n+      }\n       break;\n     default:\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setOptionalCopyObjectRequestParameters(\n      CopyObjectRequest copyObjectRequest) throws IOException {\n    switch (serverSideEncryptionAlgorithm) {\n    case SSE_KMS:\n      copyObjectRequest.setSSEAwsKeyManagementParams(\n          generateSSEAwsKeyParams()\n      );\n      break;\n    case SSE_C:\n      if (isNotBlank(getServerSideEncryptionKey(bucket, getConf()))) {\n        //at the moment, only supports copy using the same key\n        SSECustomerKey customerKey \u003d generateSSECustomerKey();\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      }\n      break;\n    default:\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "d7152332b32a575c3a92e3f4c44b95e58462528d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
      "commitDate": "07/01/19 5:18 AM",
      "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "28/11/18 9:45 AM",
      "commitNameOld": "5d96b74f33ca716c9fe4fadb046f79ed488a3059",
      "commitAuthorOld": "Sean Mackrory",
      "daysBetweenCommits": 39.81,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,16 @@\n   protected void setOptionalCopyObjectRequestParameters(\n       CopyObjectRequest copyObjectRequest) throws IOException {\n-    switch (serverSideEncryptionAlgorithm) {\n+    switch (getServerSideEncryptionAlgorithm()) {\n     case SSE_KMS:\n-      copyObjectRequest.setSSEAwsKeyManagementParams(\n-          generateSSEAwsKeyParams()\n-      );\n+      generateSSEAwsKeyParams().ifPresent(\n+          copyObjectRequest::setSSEAwsKeyManagementParams);\n       break;\n     case SSE_C:\n-      if (isNotBlank(getServerSideEncryptionKey(bucket, getConf()))) {\n-        //at the moment, only supports copy using the same key\n-        SSECustomerKey customerKey \u003d generateSSECustomerKey();\n+      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n         copyObjectRequest.setSourceSSECustomerKey(customerKey);\n         copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n-      }\n+      });\n       break;\n     default:\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setOptionalCopyObjectRequestParameters(\n      CopyObjectRequest copyObjectRequest) throws IOException {\n    switch (getServerSideEncryptionAlgorithm()) {\n    case SSE_KMS:\n      generateSSEAwsKeyParams().ifPresent(\n          copyObjectRequest::setSSEAwsKeyManagementParams);\n      break;\n    case SSE_C:\n      generateSSECustomerKey().ifPresent(customerKey -\u003e {\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      });\n      break;\n    default:\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "7ac88244c54ce483729af3d2736d9f4731e230ca": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
      "commitDate": "16/02/18 8:37 AM",
      "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "15/02/18 7:57 AM",
      "commitNameOld": "9a013b255f301c557c3868dc1ad657202e9e7a67",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   protected void setOptionalCopyObjectRequestParameters(\n       CopyObjectRequest copyObjectRequest) throws IOException {\n     switch (serverSideEncryptionAlgorithm) {\n     case SSE_KMS:\n       copyObjectRequest.setSSEAwsKeyManagementParams(\n           generateSSEAwsKeyParams()\n       );\n       break;\n     case SSE_C:\n-      if (StringUtils.isNotBlank(getServerSideEncryptionKey(getConf()))) {\n+      if (isNotBlank(getServerSideEncryptionKey(bucket, getConf()))) {\n         //at the moment, only supports copy using the same key\n         SSECustomerKey customerKey \u003d generateSSECustomerKey();\n         copyObjectRequest.setSourceSSECustomerKey(customerKey);\n         copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n       }\n       break;\n     default:\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setOptionalCopyObjectRequestParameters(\n      CopyObjectRequest copyObjectRequest) throws IOException {\n    switch (serverSideEncryptionAlgorithm) {\n    case SSE_KMS:\n      copyObjectRequest.setSSEAwsKeyManagementParams(\n          generateSSEAwsKeyParams()\n      );\n      break;\n    case SSE_C:\n      if (isNotBlank(getServerSideEncryptionKey(bucket, getConf()))) {\n        //at the moment, only supports copy using the same key\n        SSECustomerKey customerKey \u003d generateSSECustomerKey();\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      }\n      break;\n    default:\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "839b690ed5edc2ac4984640d58c005bb63cd8a07": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13075. Add support for SSE-KMS and SSE-C in s3a filesystem. (Steve Moist via lei)\n",
      "commitDate": "11/02/17 1:59 PM",
      "commitName": "839b690ed5edc2ac4984640d58c005bb63cd8a07",
      "commitAuthor": "Lei Xu",
      "diff": "@@ -0,0 +1,19 @@\n+  protected void setOptionalCopyObjectRequestParameters(\n+      CopyObjectRequest copyObjectRequest) throws IOException {\n+    switch (serverSideEncryptionAlgorithm) {\n+    case SSE_KMS:\n+      copyObjectRequest.setSSEAwsKeyManagementParams(\n+          generateSSEAwsKeyParams()\n+      );\n+      break;\n+    case SSE_C:\n+      if (StringUtils.isNotBlank(getServerSideEncryptionKey(getConf()))) {\n+        //at the moment, only supports copy using the same key\n+        SSECustomerKey customerKey \u003d generateSSECustomerKey();\n+        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n+        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n+      }\n+      break;\n+    default:\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setOptionalCopyObjectRequestParameters(\n      CopyObjectRequest copyObjectRequest) throws IOException {\n    switch (serverSideEncryptionAlgorithm) {\n    case SSE_KMS:\n      copyObjectRequest.setSSEAwsKeyManagementParams(\n          generateSSEAwsKeyParams()\n      );\n      break;\n    case SSE_C:\n      if (StringUtils.isNotBlank(getServerSideEncryptionKey(getConf()))) {\n        //at the moment, only supports copy using the same key\n        SSECustomerKey customerKey \u003d generateSSECustomerKey();\n        copyObjectRequest.setSourceSSECustomerKey(customerKey);\n        copyObjectRequest.setDestinationSSECustomerKey(customerKey);\n      }\n      break;\n    default:\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}