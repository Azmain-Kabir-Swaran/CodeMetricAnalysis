{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "addNode",
  "functionId": "addNode___nodeManager-RMNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2033,
  "functionEndLine": 2068,
  "numCommitsSeen": 260,
  "timeTaken": 14486,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "52194351e7df33b8438569c3a032f73d696c534d",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "d36b6e045f317c94e97cb41a163aa974d161a404",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15",
    "14dd647c556016d351f425ee956ccf800ccb9ce2",
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "9571db19ebe39a2e654f754fd82c73c8fc865c15",
    "57cdf8626a32b8595a645b7551f46ab950db4789",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "6b608aad7d52b524fa94955a538e8b3524d42d93",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "52194351e7df33b8438569c3a032f73d696c534d": "Ybodychange",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "d36b6e045f317c94e97cb41a163aa974d161a404": "Ybodychange",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": "Ybodychange",
    "14dd647c556016d351f425ee956ccf800ccb9ce2": "Ybodychange",
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb": "Ybodychange",
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "9571db19ebe39a2e654f754fd82c73c8fc865c15": "Ybodychange",
    "57cdf8626a32b8595a645b7551f46ab950db4789": "Ybodychange",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "6b608aad7d52b524fa94955a538e8b3524d42d93": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void addNode(RMNode nodeManager) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n           usePortForNodeName, nodeManager.getNodeLabels());\n       nodeTracker.addNode(schedulerNode);\n \n       // update this node to node label manager\n       if (labelManager !\u003d null) {\n         labelManager.activateNode(nodeManager.getNodeID(),\n             schedulerNode.getTotalResource());\n       }\n \n       // recover attributes from store if any.\n       if (rmContext.getNodeAttributesManager() !\u003d null) {\n         rmContext.getNodeAttributesManager()\n             .refreshNodeAttributesToScheduler(schedulerNode.getNodeID());\n       }\n \n       Resource clusterResource \u003d getClusterResource();\n       getRootQueue().updateClusterResource(clusterResource,\n           new ResourceLimits(clusterResource));\n \n       LOG.info(\n           \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n               + clusterResource);\n \n       if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n         for (AsyncScheduleThread t : asyncSchedulerThreads) {\n           t.beginSchedule();\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addNode(RMNode nodeManager) {\n    writeLock.lock();\n    try {\n      FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n          usePortForNodeName, nodeManager.getNodeLabels());\n      nodeTracker.addNode(schedulerNode);\n\n      // update this node to node label manager\n      if (labelManager !\u003d null) {\n        labelManager.activateNode(nodeManager.getNodeID(),\n            schedulerNode.getTotalResource());\n      }\n\n      // recover attributes from store if any.\n      if (rmContext.getNodeAttributesManager() !\u003d null) {\n        rmContext.getNodeAttributesManager()\n            .refreshNodeAttributesToScheduler(schedulerNode.getNodeID());\n      }\n\n      Resource clusterResource \u003d getClusterResource();\n      getRootQueue().updateClusterResource(clusterResource,\n          new ResourceLimits(clusterResource));\n\n      LOG.info(\n          \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n              + clusterResource);\n\n      if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n        for (AsyncScheduleThread t : asyncSchedulerThreads) {\n          t.beginSchedule();\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "52194351e7df33b8438569c3a032f73d696c534d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8721. Relax NE node-attribute check when attribute doesn\u0027t exist on a node. Contributed by Sunil Govindan.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "52194351e7df33b8438569c3a032f73d696c534d",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n   private void addNode(RMNode nodeManager) {\n     try {\n       writeLock.lock();\n       FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n           usePortForNodeName, nodeManager.getNodeLabels());\n       nodeTracker.addNode(schedulerNode);\n \n       // update this node to node label manager\n       if (labelManager !\u003d null) {\n         labelManager.activateNode(nodeManager.getNodeID(),\n             schedulerNode.getTotalResource());\n       }\n \n+      // recover attributes from store if any.\n+      if (rmContext.getNodeAttributesManager() !\u003d null) {\n+        rmContext.getNodeAttributesManager()\n+            .refreshNodeAttributesToScheduler(schedulerNode.getNodeID());\n+      }\n+\n       Resource clusterResource \u003d getClusterResource();\n       getRootQueue().updateClusterResource(clusterResource,\n           new ResourceLimits(clusterResource));\n \n       LOG.info(\n           \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n               + clusterResource);\n \n       if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n         for (AsyncScheduleThread t : asyncSchedulerThreads) {\n           t.beginSchedule();\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addNode(RMNode nodeManager) {\n    try {\n      writeLock.lock();\n      FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n          usePortForNodeName, nodeManager.getNodeLabels());\n      nodeTracker.addNode(schedulerNode);\n\n      // update this node to node label manager\n      if (labelManager !\u003d null) {\n        labelManager.activateNode(nodeManager.getNodeID(),\n            schedulerNode.getTotalResource());\n      }\n\n      // recover attributes from store if any.\n      if (rmContext.getNodeAttributesManager() !\u003d null) {\n        rmContext.getNodeAttributesManager()\n            .refreshNodeAttributesToScheduler(schedulerNode.getNodeID());\n      }\n\n      Resource clusterResource \u003d getClusterResource();\n      getRootQueue().updateClusterResource(clusterResource,\n          new ResourceLimits(clusterResource));\n\n      LOG.info(\n          \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n              + clusterResource);\n\n      if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n        for (AsyncScheduleThread t : asyncSchedulerThreads) {\n          t.beginSchedule();\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5761. Separate QueueManager from Scheduler. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "30/11/16 1:38 PM",
      "commitName": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthor": "Li Lu",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void addNode(RMNode nodeManager) {\n     try {\n       writeLock.lock();\n       FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n           usePortForNodeName, nodeManager.getNodeLabels());\n       nodeTracker.addNode(schedulerNode);\n \n       // update this node to node label manager\n       if (labelManager !\u003d null) {\n         labelManager.activateNode(nodeManager.getNodeID(),\n             schedulerNode.getTotalResource());\n       }\n \n       Resource clusterResource \u003d getClusterResource();\n-      root.updateClusterResource(clusterResource,\n+      getRootQueue().updateClusterResource(clusterResource,\n           new ResourceLimits(clusterResource));\n \n       LOG.info(\n           \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n               + clusterResource);\n \n       if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n         for (AsyncScheduleThread t : asyncSchedulerThreads) {\n           t.beginSchedule();\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addNode(RMNode nodeManager) {\n    try {\n      writeLock.lock();\n      FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n          usePortForNodeName, nodeManager.getNodeLabels());\n      nodeTracker.addNode(schedulerNode);\n\n      // update this node to node label manager\n      if (labelManager !\u003d null) {\n        labelManager.activateNode(nodeManager.getNodeID(),\n            schedulerNode.getTotalResource());\n      }\n\n      Resource clusterResource \u003d getClusterResource();\n      getRootQueue().updateClusterResource(clusterResource,\n          new ResourceLimits(clusterResource));\n\n      LOG.info(\n          \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n              + clusterResource);\n\n      if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n        for (AsyncScheduleThread t : asyncSchedulerThreads) {\n          t.beginSchedule();\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/11/16 3:02 AM",
      "commitNameOld": "7d2d8d25ba0cb10a3c6192d4123f27ede5ef2ba6",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 6.34,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   private void addNode(RMNode nodeManager) {\n     try {\n       writeLock.lock();\n       FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n           usePortForNodeName, nodeManager.getNodeLabels());\n       nodeTracker.addNode(schedulerNode);\n \n       // update this node to node label manager\n       if (labelManager !\u003d null) {\n         labelManager.activateNode(nodeManager.getNodeID(),\n             schedulerNode.getTotalResource());\n       }\n \n       Resource clusterResource \u003d getClusterResource();\n       root.updateClusterResource(clusterResource,\n           new ResourceLimits(clusterResource));\n \n       LOG.info(\n           \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n               + clusterResource);\n \n       if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n-        asyncSchedulerThread.beginSchedule();\n+        for (AsyncScheduleThread t : asyncSchedulerThreads) {\n+          t.beginSchedule();\n+        }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addNode(RMNode nodeManager) {\n    try {\n      writeLock.lock();\n      FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n          usePortForNodeName, nodeManager.getNodeLabels());\n      nodeTracker.addNode(schedulerNode);\n\n      // update this node to node label manager\n      if (labelManager !\u003d null) {\n        labelManager.activateNode(nodeManager.getNodeID(),\n            schedulerNode.getTotalResource());\n      }\n\n      Resource clusterResource \u003d getClusterResource();\n      root.updateClusterResource(clusterResource,\n          new ResourceLimits(clusterResource));\n\n      LOG.info(\n          \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n              + clusterResource);\n\n      if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n        for (AsyncScheduleThread t : asyncSchedulerThreads) {\n          t.beginSchedule();\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,28 @@\n-  private synchronized void addNode(RMNode nodeManager) {\n-    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n-        usePortForNodeName, nodeManager.getNodeLabels());\n-    nodeTracker.addNode(schedulerNode);\n+  private void addNode(RMNode nodeManager) {\n+    try {\n+      writeLock.lock();\n+      FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n+          usePortForNodeName, nodeManager.getNodeLabels());\n+      nodeTracker.addNode(schedulerNode);\n \n-    // update this node to node label manager\n-    if (labelManager !\u003d null) {\n-      labelManager.activateNode(nodeManager.getNodeID(),\n-          schedulerNode.getTotalResource());\n-    }\n+      // update this node to node label manager\n+      if (labelManager !\u003d null) {\n+        labelManager.activateNode(nodeManager.getNodeID(),\n+            schedulerNode.getTotalResource());\n+      }\n \n-    Resource clusterResource \u003d getClusterResource();\n-    root.updateClusterResource(clusterResource, new ResourceLimits(\n-        clusterResource));\n+      Resource clusterResource \u003d getClusterResource();\n+      root.updateClusterResource(clusterResource,\n+          new ResourceLimits(clusterResource));\n \n-    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n-        \" clusterResource: \" + clusterResource);\n+      LOG.info(\n+          \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n+              + clusterResource);\n \n-    if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n-      asyncSchedulerThread.beginSchedule();\n+      if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n+        asyncSchedulerThread.beginSchedule();\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addNode(RMNode nodeManager) {\n    try {\n      writeLock.lock();\n      FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n          usePortForNodeName, nodeManager.getNodeLabels());\n      nodeTracker.addNode(schedulerNode);\n\n      // update this node to node label manager\n      if (labelManager !\u003d null) {\n        labelManager.activateNode(nodeManager.getNodeID(),\n            schedulerNode.getTotalResource());\n      }\n\n      Resource clusterResource \u003d getClusterResource();\n      root.updateClusterResource(clusterResource,\n          new ResourceLimits(clusterResource));\n\n      LOG.info(\n          \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n              + clusterResource);\n\n      if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n        asyncSchedulerThread.beginSchedule();\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,28 @@\n-  private synchronized void addNode(RMNode nodeManager) {\n-    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n-        usePortForNodeName, nodeManager.getNodeLabels());\n-    nodeTracker.addNode(schedulerNode);\n+  private void addNode(RMNode nodeManager) {\n+    try {\n+      writeLock.lock();\n+      FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n+          usePortForNodeName, nodeManager.getNodeLabels());\n+      nodeTracker.addNode(schedulerNode);\n \n-    // update this node to node label manager\n-    if (labelManager !\u003d null) {\n-      labelManager.activateNode(nodeManager.getNodeID(),\n-          schedulerNode.getTotalResource());\n-    }\n+      // update this node to node label manager\n+      if (labelManager !\u003d null) {\n+        labelManager.activateNode(nodeManager.getNodeID(),\n+            schedulerNode.getTotalResource());\n+      }\n \n-    Resource clusterResource \u003d getClusterResource();\n-    root.updateClusterResource(clusterResource, new ResourceLimits(\n-        clusterResource));\n+      Resource clusterResource \u003d getClusterResource();\n+      root.updateClusterResource(clusterResource,\n+          new ResourceLimits(clusterResource));\n \n-    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n-        \" clusterResource: \" + clusterResource);\n+      LOG.info(\n+          \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n+              + clusterResource);\n \n-    if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n-      asyncSchedulerThread.beginSchedule();\n+      if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n+        asyncSchedulerThread.beginSchedule();\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addNode(RMNode nodeManager) {\n    try {\n      writeLock.lock();\n      FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n          usePortForNodeName, nodeManager.getNodeLabels());\n      nodeTracker.addNode(schedulerNode);\n\n      // update this node to node label manager\n      if (labelManager !\u003d null) {\n        labelManager.activateNode(nodeManager.getNodeID(),\n            schedulerNode.getTotalResource());\n      }\n\n      Resource clusterResource \u003d getClusterResource();\n      root.updateClusterResource(clusterResource,\n          new ResourceLimits(clusterResource));\n\n      LOG.info(\n          \"Added node \" + nodeManager.getNodeAddress() + \" clusterResource: \"\n              + clusterResource);\n\n      if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n        asyncSchedulerThread.beginSchedule();\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "01/03/16 1:14 PM",
      "commitNameOld": "5c465df90414d43250d09084748ab2d41af44eea",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.0,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   private synchronized void addNode(RMNode nodeManager) {\n     FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n         usePortForNodeName, nodeManager.getNodeLabels());\n-    this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n-    Resources.addTo(clusterResource, schedulerNode.getTotalResource());\n+    nodeTracker.addNode(schedulerNode);\n \n     // update this node to node label manager\n     if (labelManager !\u003d null) {\n       labelManager.activateNode(nodeManager.getNodeID(),\n           schedulerNode.getTotalResource());\n     }\n-    \n+\n+    Resource clusterResource \u003d getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n-    int numNodes \u003d numNodeManagers.incrementAndGet();\n-    updateMaximumAllocation(schedulerNode, true);\n-    \n+\n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n \n-    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n+    if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n       asyncSchedulerThread.beginSchedule();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName, nodeManager.getNodeLabels());\n    nodeTracker.addNode(schedulerNode);\n\n    // update this node to node label manager\n    if (labelManager !\u003d null) {\n      labelManager.activateNode(nodeManager.getNodeID(),\n          schedulerNode.getTotalResource());\n    }\n\n    Resource clusterResource \u003d getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 getNumClusterNodes() \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "d36b6e045f317c94e97cb41a163aa974d161a404": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4344. NMs reconnecting with changed capabilities can lead to wrong cluster resource calculations. Contributed by Varun Vasudev\n",
      "commitDate": "23/11/15 12:30 PM",
      "commitName": "d36b6e045f317c94e97cb41a163aa974d161a404",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "24/10/15 10:53 PM",
      "commitNameOld": "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 29.61,
      "commitsBetweenForRepo": 230,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private synchronized void addNode(RMNode nodeManager) {\n     FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n         usePortForNodeName, nodeManager.getNodeLabels());\n     this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n-    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n+    Resources.addTo(clusterResource, schedulerNode.getTotalResource());\n \n     // update this node to node label manager\n     if (labelManager !\u003d null) {\n       labelManager.activateNode(nodeManager.getNodeID(),\n-          nodeManager.getTotalCapability());\n+          schedulerNode.getTotalResource());\n     }\n     \n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n     int numNodes \u003d numNodeManagers.incrementAndGet();\n     updateMaximumAllocation(schedulerNode, true);\n     \n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n \n     if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n       asyncSchedulerThread.beginSchedule();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName, nodeManager.getNodeLabels());\n    this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, schedulerNode.getTotalResource());\n\n    // update this node to node label manager\n    if (labelManager !\u003d null) {\n      labelManager.activateNode(nodeManager.getNodeID(),\n          schedulerNode.getTotalResource());\n    }\n    \n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n    int numNodes \u003d numNodeManagers.incrementAndGet();\n    updateMaximumAllocation(schedulerNode, true);\n    \n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
      "commitDate": "17/03/15 10:24 AM",
      "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/03/15 3:27 AM",
      "commitNameOld": "7179f94f9d000fc52bd9ce5aa9741aba97ec3ee8",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   private synchronized void addNode(RMNode nodeManager) {\n     FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n         usePortForNodeName, nodeManager.getNodeLabels());\n     this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n+\n+    // update this node to node label manager\n+    if (labelManager !\u003d null) {\n+      labelManager.activateNode(nodeManager.getNodeID(),\n+          nodeManager.getTotalCapability());\n+    }\n+    \n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n     int numNodes \u003d numNodeManagers.incrementAndGet();\n     updateMaximumAllocation(schedulerNode, true);\n     \n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n \n     if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n       asyncSchedulerThread.beginSchedule();\n     }\n-    \n-    // update this node to node label manager\n-    if (labelManager !\u003d null) {\n-      labelManager.activateNode(nodeManager.getNodeID(),\n-          nodeManager.getTotalCapability());\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName, nodeManager.getNodeLabels());\n    this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n\n    // update this node to node label manager\n    if (labelManager !\u003d null) {\n      labelManager.activateNode(nodeManager.getNodeID(),\n          nodeManager.getTotalCapability());\n    }\n    \n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n    int numNodes \u003d numNodeManagers.incrementAndGet();\n    updateMaximumAllocation(schedulerNode, true);\n    \n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "14dd647c556016d351f425ee956ccf800ccb9ce2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
      "commitDate": "02/03/15 5:52 PM",
      "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/02/15 8:34 PM",
      "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 20.89,
      "commitsBetweenForRepo": 211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   private synchronized void addNode(RMNode nodeManager) {\n     FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n         usePortForNodeName, nodeManager.getNodeLabels());\n     this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n-    root.updateClusterResource(clusterResource);\n+    root.updateClusterResource(clusterResource, new ResourceLimits(\n+        clusterResource));\n     int numNodes \u003d numNodeManagers.incrementAndGet();\n     updateMaximumAllocation(schedulerNode, true);\n     \n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n \n     if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n       asyncSchedulerThread.beginSchedule();\n     }\n     \n     // update this node to node label manager\n     if (labelManager !\u003d null) {\n       labelManager.activateNode(nodeManager.getNodeID(),\n           nodeManager.getTotalCapability());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName, nodeManager.getNodeLabels());\n    this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n    int numNodes \u003d numNodeManagers.incrementAndGet();\n    updateMaximumAllocation(schedulerNode, true);\n    \n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n    \n    // update this node to node label manager\n    if (labelManager !\u003d null) {\n      labelManager.activateNode(nodeManager.getNodeID(),\n          nodeManager.getTotalCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2920. Changed CapacityScheduler to kill containers on nodes where node labels are changed. Contributed by  Wangda Tan\n",
      "commitDate": "22/12/14 4:51 PM",
      "commitName": "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
      "commitAuthor": "Jian He",
      "commitDateOld": "21/11/14 10:32 AM",
      "commitNameOld": "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 31.26,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   private synchronized void addNode(RMNode nodeManager) {\n-    // update this node to node label manager\n-    if (labelManager !\u003d null) {\n-      labelManager.activateNode(nodeManager.getNodeID(),\n-          nodeManager.getTotalCapability());\n-    }\n     FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n-        usePortForNodeName);\n+        usePortForNodeName, nodeManager.getNodeLabels());\n     this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n     root.updateClusterResource(clusterResource);\n     int numNodes \u003d numNodeManagers.incrementAndGet();\n     updateMaximumAllocation(schedulerNode, true);\n     \n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n \n     if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n       asyncSchedulerThread.beginSchedule();\n     }\n+    \n+    // update this node to node label manager\n+    if (labelManager !\u003d null) {\n+      labelManager.activateNode(nodeManager.getNodeID(),\n+          nodeManager.getTotalCapability());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName, nodeManager.getNodeLabels());\n    this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    int numNodes \u003d numNodeManagers.incrementAndGet();\n    updateMaximumAllocation(schedulerNode, true);\n    \n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n    \n    // update this node to node label manager\n    if (labelManager !\u003d null) {\n      labelManager.activateNode(nodeManager.getNodeID(),\n          nodeManager.getTotalCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2604. Scheduler should consider max-allocation-* in conjunction with the largest node. (Robert Kanter via kasha)\n",
      "commitDate": "21/11/14 10:32 AM",
      "commitName": "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/11/14 5:45 PM",
      "commitNameOld": "b2cd2698028118b6384904732dbf94942f644732",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 16.7,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   private synchronized void addNode(RMNode nodeManager) {\n     // update this node to node label manager\n     if (labelManager !\u003d null) {\n       labelManager.activateNode(nodeManager.getNodeID(),\n           nodeManager.getTotalCapability());\n     }\n-    \n-    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n-        usePortForNodeName));\n+    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n+        usePortForNodeName);\n+    this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n     root.updateClusterResource(clusterResource);\n     int numNodes \u003d numNodeManagers.incrementAndGet();\n+    updateMaximumAllocation(schedulerNode, true);\n     \n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n \n     if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n       asyncSchedulerThread.beginSchedule();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    // update this node to node label manager\n    if (labelManager !\u003d null) {\n      labelManager.activateNode(nodeManager.getNodeID(),\n          nodeManager.getTotalCapability());\n    }\n    FiCaSchedulerNode schedulerNode \u003d new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName);\n    this.nodes.put(nodeManager.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    int numNodes \u003d numNodeManagers.incrementAndGet();\n    updateMaximumAllocation(schedulerNode, true);\n    \n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/10/14 2:09 PM",
      "commitNameOld": "f9680d9a160ee527c8f2c1494584abf1a1f70f82",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.18,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,20 @@\n   private synchronized void addNode(RMNode nodeManager) {\n+    // update this node to node label manager\n+    if (labelManager !\u003d null) {\n+      labelManager.activateNode(nodeManager.getNodeID(),\n+          nodeManager.getTotalCapability());\n+    }\n+    \n     this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n         usePortForNodeName));\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n     root.updateClusterResource(clusterResource);\n     int numNodes \u003d numNodeManagers.incrementAndGet();\n+    \n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n \n     if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n       asyncSchedulerThread.beginSchedule();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    // update this node to node label manager\n    if (labelManager !\u003d null) {\n      labelManager.activateNode(nodeManager.getNodeID(),\n          nodeManager.getTotalCapability());\n    }\n    \n    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    int numNodes \u003d numNodeManagers.incrementAndGet();\n    \n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "9571db19ebe39a2e654f754fd82c73c8fc865c15": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2171. Improved CapacityScheduling to not lock on nodemanager-count when AMs heartbeat in. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/06/14 2:56 PM",
      "commitName": "9571db19ebe39a2e654f754fd82c73c8fc865c15",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/06/14 9:42 PM",
      "commitNameOld": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   private synchronized void addNode(RMNode nodeManager) {\n     this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n         usePortForNodeName));\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n     root.updateClusterResource(clusterResource);\n-    ++numNodeManagers;\n+    int numNodes \u003d numNodeManagers.incrementAndGet();\n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n \n-    if (scheduleAsynchronously \u0026\u0026 numNodeManagers \u003d\u003d 1) {\n+    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n       asyncSchedulerThread.beginSchedule();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    int numNodes \u003d numNodeManagers.incrementAndGet();\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 numNodes \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "57cdf8626a32b8595a645b7551f46ab950db4789": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1512. Enhanced CapacityScheduler to be able to decouple scheduling from node-heartbeats. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578722 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/14 7:53 PM",
      "commitName": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 3:22 PM",
      "commitNameOld": "92317e3459b502f33a3575c247f05d64e5d39a00",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,13 @@\n   private synchronized void addNode(RMNode nodeManager) {\n     this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n         usePortForNodeName));\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n     root.updateClusterResource(clusterResource);\n     ++numNodeManagers;\n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n+\n+    if (scheduleAsynchronously \u0026\u0026 numNodeManagers \u003d\u003d 1) {\n+      asyncSchedulerThread.beginSchedule();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    ++numNodeManagers;\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n\n    if (scheduleAsynchronously \u0026\u0026 numNodeManagers \u003d\u003d 1) {\n      asyncSchedulerThread.beginSchedule();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1008. MiniYARNCluster with multiple nodemanagers, all nodes have same key for allocations. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/08/13 8:39 AM",
      "commitName": "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "20/07/13 7:59 AM",
      "commitNameOld": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 37.03,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,9 @@\n   private synchronized void addNode(RMNode nodeManager) {\n-    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager));\n+    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n+        usePortForNodeName));\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n     root.updateClusterResource(clusterResource);\n     ++numNodeManagers;\n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager,\n        usePortForNodeName));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    ++numNodeManagers;\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    ++numNodeManagers;\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "09/03/12 3:34 PM",
      "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 129.09,
      "commitsBetweenForRepo": 802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   private synchronized void addNode(RMNode nodeManager) {\n-    this.nodes.put(nodeManager.getNodeID(), new SchedulerNode(nodeManager));\n+    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager));\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n     root.updateClusterResource(clusterResource);\n     ++numNodeManagers;\n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    this.nodes.put(nodeManager.getNodeID(), new FiCaSchedulerNode(nodeManager));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    ++numNodeManagers;\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "6b608aad7d52b524fa94955a538e8b3524d42d93": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2697. Enhance CapacityScheduler to cap concurrently running applications per-queue \u0026 per-user.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/11 12:49 PM",
      "commitName": "6b608aad7d52b524fa94955a538e8b3524d42d93",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 11.82,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,8 @@\n   private synchronized void addNode(RMNode nodeManager) {\n     this.nodes.put(nodeManager.getNodeID(), new SchedulerNode(nodeManager));\n     Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n+    root.updateClusterResource(clusterResource);\n     ++numNodeManagers;\n     LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n         \" clusterResource: \" + clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    this.nodes.put(nodeManager.getNodeID(), new SchedulerNode(nodeManager));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    root.updateClusterResource(clusterResource);\n    ++numNodeManagers;\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    this.nodes.put(nodeManager.getNodeID(), new SchedulerNode(nodeManager));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    ++numNodeManagers;\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,7 @@\n+  private synchronized void addNode(RMNode nodeManager) {\n+    this.nodes.put(nodeManager.getNodeID(), new SchedulerNode(nodeManager));\n+    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n+    ++numNodeManagers;\n+    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n+        \" clusterResource: \" + clusterResource);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode nodeManager) {\n    this.nodes.put(nodeManager.getNodeID(), new SchedulerNode(nodeManager));\n    Resources.addTo(clusterResource, nodeManager.getTotalCapability());\n    ++numNodeManagers;\n    LOG.info(\"Added node \" + nodeManager.getNodeAddress() + \n        \" clusterResource: \" + clusterResource);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}