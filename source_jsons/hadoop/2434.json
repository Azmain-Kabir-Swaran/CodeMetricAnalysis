{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PBHelperClient.java",
  "functionName": "convert",
  "functionId": "convert___reportProto-SnapshotDiffReportListingProto",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelperClient.java",
  "functionStartLine": 1575,
  "functionEndLine": 1613,
  "numCommitsSeen": 80,
  "timeTaken": 2527,
  "changeHistory": [
    "b1c7654ee40b372ed777525a42981c7cf55b5c72"
  ],
  "changeHistoryShort": {
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12594. snapshotDiff fails if the report exceeds the RPC response limit. Contributed by Shashikant Banerjee\n",
      "commitDate": "30/11/17 12:18 PM",
      "commitName": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,39 @@\n+  public static SnapshotDiffReportListing convert(\n+      SnapshotDiffReportListingProto reportProto) {\n+    if (reportProto \u003d\u003d null) {\n+      return null;\n+    }\n+    List\u003cSnapshotDiffReportListingEntryProto\u003e modifyList \u003d\n+        reportProto.getModifiedEntriesList();\n+    List\u003cDiffReportListingEntry\u003e modifiedEntries \u003d new ChunkedArrayList\u003c\u003e();\n+    for (SnapshotDiffReportListingEntryProto entryProto : modifyList) {\n+      DiffReportListingEntry entry \u003d convert(entryProto);\n+      if (entry !\u003d null) {\n+        modifiedEntries.add(entry);\n+      }\n+    }\n+    List\u003cSnapshotDiffReportListingEntryProto\u003e createList \u003d\n+        reportProto.getCreatedEntriesList();\n+    List\u003cDiffReportListingEntry\u003e createdEntries \u003d new ChunkedArrayList\u003c\u003e();\n+    for (SnapshotDiffReportListingEntryProto entryProto : createList) {\n+      DiffReportListingEntry entry \u003d convert(entryProto);\n+      if (entry !\u003d null) {\n+        createdEntries.add(entry);\n+      }\n+    }\n+    List\u003cSnapshotDiffReportListingEntryProto\u003e deletedList \u003d\n+        reportProto.getDeletedEntriesList();\n+    List\u003cDiffReportListingEntry\u003e deletedEntries \u003d new ChunkedArrayList\u003c\u003e();\n+    for (SnapshotDiffReportListingEntryProto entryProto : deletedList) {\n+      DiffReportListingEntry entry \u003d convert(entryProto);\n+      if (entry !\u003d null) {\n+        deletedEntries.add(entry);\n+      }\n+    }\n+    byte[] startPath \u003d reportProto.getCursor().getStartPath().toByteArray();\n+    boolean isFromEarlier \u003d reportProto.getIsFromEarlier();\n+\n+    int index \u003d reportProto.getCursor().getIndex();\n+    return new SnapshotDiffReportListing(startPath, modifiedEntries,\n+        createdEntries, deletedEntries, index, isFromEarlier);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static SnapshotDiffReportListing convert(\n      SnapshotDiffReportListingProto reportProto) {\n    if (reportProto \u003d\u003d null) {\n      return null;\n    }\n    List\u003cSnapshotDiffReportListingEntryProto\u003e modifyList \u003d\n        reportProto.getModifiedEntriesList();\n    List\u003cDiffReportListingEntry\u003e modifiedEntries \u003d new ChunkedArrayList\u003c\u003e();\n    for (SnapshotDiffReportListingEntryProto entryProto : modifyList) {\n      DiffReportListingEntry entry \u003d convert(entryProto);\n      if (entry !\u003d null) {\n        modifiedEntries.add(entry);\n      }\n    }\n    List\u003cSnapshotDiffReportListingEntryProto\u003e createList \u003d\n        reportProto.getCreatedEntriesList();\n    List\u003cDiffReportListingEntry\u003e createdEntries \u003d new ChunkedArrayList\u003c\u003e();\n    for (SnapshotDiffReportListingEntryProto entryProto : createList) {\n      DiffReportListingEntry entry \u003d convert(entryProto);\n      if (entry !\u003d null) {\n        createdEntries.add(entry);\n      }\n    }\n    List\u003cSnapshotDiffReportListingEntryProto\u003e deletedList \u003d\n        reportProto.getDeletedEntriesList();\n    List\u003cDiffReportListingEntry\u003e deletedEntries \u003d new ChunkedArrayList\u003c\u003e();\n    for (SnapshotDiffReportListingEntryProto entryProto : deletedList) {\n      DiffReportListingEntry entry \u003d convert(entryProto);\n      if (entry !\u003d null) {\n        deletedEntries.add(entry);\n      }\n    }\n    byte[] startPath \u003d reportProto.getCursor().getStartPath().toByteArray();\n    boolean isFromEarlier \u003d reportProto.getIsFromEarlier();\n\n    int index \u003d reportProto.getCursor().getIndex();\n    return new SnapshotDiffReportListing(startPath, modifiedEntries,\n        createdEntries, deletedEntries, index, isFromEarlier);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelperClient.java"
    }
  }
}