{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "retrieve",
  "functionId": "retrieve___key-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 2258,
  "functionEndLine": 2260,
  "numCommitsSeen": 53,
  "timeTaken": 3440,
  "changeHistory": [
    "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0",
    "5fd9742c83fbeae96bf0913bdcdf77fafbf15b2f",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0": "Ymultichange(Yreturntypechange,Ybodychange)",
    "5fd9742c83fbeae96bf0913bdcdf77fafbf15b2f": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ymultichange(Yexceptionschange,Ybodychange)",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-14535 wasb: implement high-performance random access and seek of block blobs.\nContributed by Thomas Marquardt\n",
      "commitDate": "11/07/17 1:34 PM",
      "commitName": "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-14535 wasb: implement high-performance random access and seek of block blobs.\nContributed by Thomas Marquardt\n",
          "commitDate": "11/07/17 1:34 PM",
          "commitName": "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "28/06/17 2:18 PM",
          "commitNameOld": "990aa34de23c625163745ebc338483065d955bbe",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 12.97,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,3 @@\n-  public DataInputStream retrieve(String key) throws AzureException, IOException {\n-      try {\n-        // Check if a session exists, if not create a session with the\n-        // Azure storage server.\n-        if (null \u003d\u003d storageInteractionLayer) {\n-          final String errMsg \u003d String.format(\n-              \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n-              sessionUri);\n-          throw new AssertionError(errMsg);\n-        }\n-        checkContainer(ContainerAccessType.PureRead);\n-\n-        // Get blob reference and open the input buffer stream.\n-        CloudBlobWrapper blob \u003d getBlobReference(key);\n-\n-        // Return a data input stream.\n-        DataInputStream inDataStream \u003d new DataInputStream(openInputStream(blob));\n-        return inDataStream;\n-    } catch (Exception e) {\n-      // Re-throw as an Azure storage exception.\n-      throw new AzureException(e);\n-    }\n+  public InputStream retrieve(String key) throws AzureException, IOException {\n+    return retrieve(key, 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public InputStream retrieve(String key) throws AzureException, IOException {\n    return retrieve(key, 0);\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "DataInputStream",
            "newValue": "InputStream"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14535 wasb: implement high-performance random access and seek of block blobs.\nContributed by Thomas Marquardt\n",
          "commitDate": "11/07/17 1:34 PM",
          "commitName": "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "28/06/17 2:18 PM",
          "commitNameOld": "990aa34de23c625163745ebc338483065d955bbe",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 12.97,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,3 @@\n-  public DataInputStream retrieve(String key) throws AzureException, IOException {\n-      try {\n-        // Check if a session exists, if not create a session with the\n-        // Azure storage server.\n-        if (null \u003d\u003d storageInteractionLayer) {\n-          final String errMsg \u003d String.format(\n-              \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n-              sessionUri);\n-          throw new AssertionError(errMsg);\n-        }\n-        checkContainer(ContainerAccessType.PureRead);\n-\n-        // Get blob reference and open the input buffer stream.\n-        CloudBlobWrapper blob \u003d getBlobReference(key);\n-\n-        // Return a data input stream.\n-        DataInputStream inDataStream \u003d new DataInputStream(openInputStream(blob));\n-        return inDataStream;\n-    } catch (Exception e) {\n-      // Re-throw as an Azure storage exception.\n-      throw new AzureException(e);\n-    }\n+  public InputStream retrieve(String key) throws AzureException, IOException {\n+    return retrieve(key, 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public InputStream retrieve(String key) throws AzureException, IOException {\n    return retrieve(key, 0);\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "5fd9742c83fbeae96bf0913bdcdf77fafbf15b2f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14478. Optimize NativeAzureFsInputStream for positional reads. Contributed by Rajesh Balamohan\n",
      "commitDate": "05/06/17 3:56 PM",
      "commitName": "5fd9742c83fbeae96bf0913bdcdf77fafbf15b2f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "20/03/17 4:31 PM",
      "commitNameOld": "8e15e240597f821968e14893eabfea39815de207",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 76.98,
      "commitsBetweenForRepo": 425,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,23 @@\n   public DataInputStream retrieve(String key) throws AzureException, IOException {\n       try {\n         // Check if a session exists, if not create a session with the\n         // Azure storage server.\n         if (null \u003d\u003d storageInteractionLayer) {\n           final String errMsg \u003d String.format(\n               \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n               sessionUri);\n           throw new AssertionError(errMsg);\n         }\n         checkContainer(ContainerAccessType.PureRead);\n \n         // Get blob reference and open the input buffer stream.\n         CloudBlobWrapper blob \u003d getBlobReference(key);\n-      BufferedInputStream inBufStream \u003d new BufferedInputStream(\n-          openInputStream(blob));\n \n         // Return a data input stream.\n-        DataInputStream inDataStream \u003d new DataInputStream(inBufStream);\n+        DataInputStream inDataStream \u003d new DataInputStream(openInputStream(blob));\n         return inDataStream;\n     } catch (Exception e) {\n       // Re-throw as an Azure storage exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DataInputStream retrieve(String key) throws AzureException, IOException {\n      try {\n        // Check if a session exists, if not create a session with the\n        // Azure storage server.\n        if (null \u003d\u003d storageInteractionLayer) {\n          final String errMsg \u003d String.format(\n              \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n              sessionUri);\n          throw new AssertionError(errMsg);\n        }\n        checkContainer(ContainerAccessType.PureRead);\n\n        // Get blob reference and open the input buffer stream.\n        CloudBlobWrapper blob \u003d getBlobReference(key);\n\n        // Return a data input stream.\n        DataInputStream inDataStream \u003d new DataInputStream(openInputStream(blob));\n        return inDataStream;\n    } catch (Exception e) {\n      // Re-throw as an Azure storage exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "24/06/14 1:52 PM",
          "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 106.02,
          "commitsBetweenForRepo": 1005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,25 @@\n-  public DataInputStream retrieve(String key) throws AzureException {\n-    InputStream inStream \u003d null;\n-    BufferedInputStream inBufStream \u003d null;\n-    try {\n+  public DataInputStream retrieve(String key) throws AzureException, IOException {\n       try {\n         // Check if a session exists, if not create a session with the\n         // Azure storage server.\n         if (null \u003d\u003d storageInteractionLayer) {\n           final String errMsg \u003d String.format(\n               \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n               sessionUri);\n           throw new AssertionError(errMsg);\n         }\n         checkContainer(ContainerAccessType.PureRead);\n \n         // Get blob reference and open the input buffer stream.\n-        CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n-        inStream \u003d blob.openInputStream(getDownloadOptions(),\n-            getInstrumentedContext(isConcurrentOOBAppendAllowed()));\n-\n-        inBufStream \u003d new BufferedInputStream(inStream);\n+        CloudBlobWrapper blob \u003d getBlobReference(key);\n+      BufferedInputStream inBufStream \u003d new BufferedInputStream(\n+          openInputStream(blob));\n \n         // Return a data input stream.\n         DataInputStream inDataStream \u003d new DataInputStream(inBufStream);\n         return inDataStream;\n-      }\n-      catch (Exception e){\n-        // close the streams on error.\n-        // We use nested try-catch as stream.close() can throw IOException.\n-        if(inBufStream !\u003d null){\n-          inBufStream.close();\n-        }\n-        if(inStream !\u003d null){\n-          inStream.close();\n-        }\n-        throw e;\n-      }\n     } catch (Exception e) {\n       // Re-throw as an Azure storage exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DataInputStream retrieve(String key) throws AzureException, IOException {\n      try {\n        // Check if a session exists, if not create a session with the\n        // Azure storage server.\n        if (null \u003d\u003d storageInteractionLayer) {\n          final String errMsg \u003d String.format(\n              \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n              sessionUri);\n          throw new AssertionError(errMsg);\n        }\n        checkContainer(ContainerAccessType.PureRead);\n\n        // Get blob reference and open the input buffer stream.\n        CloudBlobWrapper blob \u003d getBlobReference(key);\n      BufferedInputStream inBufStream \u003d new BufferedInputStream(\n          openInputStream(blob));\n\n        // Return a data input stream.\n        DataInputStream inDataStream \u003d new DataInputStream(inBufStream);\n        return inDataStream;\n    } catch (Exception e) {\n      // Re-throw as an Azure storage exception.\n      throw new AzureException(e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[AzureException]",
            "newValue": "[AzureException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "24/06/14 1:52 PM",
          "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 106.02,
          "commitsBetweenForRepo": 1005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,25 @@\n-  public DataInputStream retrieve(String key) throws AzureException {\n-    InputStream inStream \u003d null;\n-    BufferedInputStream inBufStream \u003d null;\n-    try {\n+  public DataInputStream retrieve(String key) throws AzureException, IOException {\n       try {\n         // Check if a session exists, if not create a session with the\n         // Azure storage server.\n         if (null \u003d\u003d storageInteractionLayer) {\n           final String errMsg \u003d String.format(\n               \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n               sessionUri);\n           throw new AssertionError(errMsg);\n         }\n         checkContainer(ContainerAccessType.PureRead);\n \n         // Get blob reference and open the input buffer stream.\n-        CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n-        inStream \u003d blob.openInputStream(getDownloadOptions(),\n-            getInstrumentedContext(isConcurrentOOBAppendAllowed()));\n-\n-        inBufStream \u003d new BufferedInputStream(inStream);\n+        CloudBlobWrapper blob \u003d getBlobReference(key);\n+      BufferedInputStream inBufStream \u003d new BufferedInputStream(\n+          openInputStream(blob));\n \n         // Return a data input stream.\n         DataInputStream inDataStream \u003d new DataInputStream(inBufStream);\n         return inDataStream;\n-      }\n-      catch (Exception e){\n-        // close the streams on error.\n-        // We use nested try-catch as stream.close() can throw IOException.\n-        if(inBufStream !\u003d null){\n-          inBufStream.close();\n-        }\n-        if(inStream !\u003d null){\n-          inStream.close();\n-        }\n-        throw e;\n-      }\n     } catch (Exception e) {\n       // Re-throw as an Azure storage exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DataInputStream retrieve(String key) throws AzureException, IOException {\n      try {\n        // Check if a session exists, if not create a session with the\n        // Azure storage server.\n        if (null \u003d\u003d storageInteractionLayer) {\n          final String errMsg \u003d String.format(\n              \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n              sessionUri);\n          throw new AssertionError(errMsg);\n        }\n        checkContainer(ContainerAccessType.PureRead);\n\n        // Get blob reference and open the input buffer stream.\n        CloudBlobWrapper blob \u003d getBlobReference(key);\n      BufferedInputStream inBufStream \u003d new BufferedInputStream(\n          openInputStream(blob));\n\n        // Return a data input stream.\n        DataInputStream inDataStream \u003d new DataInputStream(inBufStream);\n        return inDataStream;\n    } catch (Exception e) {\n      // Re-throw as an Azure storage exception.\n      throw new AzureException(e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,42 @@\n+  public DataInputStream retrieve(String key) throws AzureException {\n+    InputStream inStream \u003d null;\n+    BufferedInputStream inBufStream \u003d null;\n+    try {\n+      try {\n+        // Check if a session exists, if not create a session with the\n+        // Azure storage server.\n+        if (null \u003d\u003d storageInteractionLayer) {\n+          final String errMsg \u003d String.format(\n+              \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n+              sessionUri);\n+          throw new AssertionError(errMsg);\n+        }\n+        checkContainer(ContainerAccessType.PureRead);\n+\n+        // Get blob reference and open the input buffer stream.\n+        CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n+        inStream \u003d blob.openInputStream(getDownloadOptions(),\n+            getInstrumentedContext(isConcurrentOOBAppendAllowed()));\n+\n+        inBufStream \u003d new BufferedInputStream(inStream);\n+\n+        // Return a data input stream.\n+        DataInputStream inDataStream \u003d new DataInputStream(inBufStream);\n+        return inDataStream;\n+      }\n+      catch (Exception e){\n+        // close the streams on error.\n+        // We use nested try-catch as stream.close() can throw IOException.\n+        if(inBufStream !\u003d null){\n+          inBufStream.close();\n+        }\n+        if(inStream !\u003d null){\n+          inStream.close();\n+        }\n+        throw e;\n+      }\n+    } catch (Exception e) {\n+      // Re-throw as an Azure storage exception.\n+      throw new AzureException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DataInputStream retrieve(String key) throws AzureException {\n    InputStream inStream \u003d null;\n    BufferedInputStream inBufStream \u003d null;\n    try {\n      try {\n        // Check if a session exists, if not create a session with the\n        // Azure storage server.\n        if (null \u003d\u003d storageInteractionLayer) {\n          final String errMsg \u003d String.format(\n              \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n              sessionUri);\n          throw new AssertionError(errMsg);\n        }\n        checkContainer(ContainerAccessType.PureRead);\n\n        // Get blob reference and open the input buffer stream.\n        CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n        inStream \u003d blob.openInputStream(getDownloadOptions(),\n            getInstrumentedContext(isConcurrentOOBAppendAllowed()));\n\n        inBufStream \u003d new BufferedInputStream(inStream);\n\n        // Return a data input stream.\n        DataInputStream inDataStream \u003d new DataInputStream(inBufStream);\n        return inDataStream;\n      }\n      catch (Exception e){\n        // close the streams on error.\n        // We use nested try-catch as stream.close() can throw IOException.\n        if(inBufStream !\u003d null){\n          inBufStream.close();\n        }\n        if(inStream !\u003d null){\n          inStream.close();\n        }\n        throw e;\n      }\n    } catch (Exception e) {\n      // Re-throw as an Azure storage exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}