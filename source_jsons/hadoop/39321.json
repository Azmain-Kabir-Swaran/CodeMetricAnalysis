{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "removeQueue",
  "functionId": "removeQueue___queueName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2359,
  "functionEndLine": 2390,
  "numCommitsSeen": 239,
  "timeTaken": 7580,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "cf9d3c925608e8bc650d43975382ed3014081057",
    "eb3e40b833b9d82c1556843f960194dc42e482f3"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": "Ybodychange",
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9": "Ybodychange",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "cf9d3c925608e8bc650d43975382ed3014081057": "Ybodychange",
    "eb3e40b833b9d82c1556843f960194dc42e482f3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void removeQueue(String queueName)\n       throws SchedulerDynamicEditException {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       LOG.info(\"Removing queue: \" + queueName);\n       CSQueue q \u003d this.getQueue(queueName);\n       if (!(AbstractAutoCreatedLeafQueue.class.isAssignableFrom(\n           q.getClass()))) {\n         throw new SchedulerDynamicEditException(\n             \"The queue that we are asked \" + \"to remove (\" + queueName\n                 + \") is not a AutoCreatedLeafQueue or ReservationQueue\");\n       }\n       AbstractAutoCreatedLeafQueue disposableLeafQueue \u003d\n           (AbstractAutoCreatedLeafQueue) q;\n       // at this point we should have no more apps\n       if (disposableLeafQueue.getNumApplications() \u003e 0) {\n         throw new SchedulerDynamicEditException(\n             \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                 .getApplications().size() + \" active apps \"\n                 + disposableLeafQueue.getPendingApplications().size()\n                 + \" pending apps\");\n       }\n \n       ((AbstractManagedParentQueue) disposableLeafQueue.getParent())\n           .removeChildQueue(q);\n       this.queueManager.removeQueue(queueName);\n       LOG.info(\n           \"Removal of AutoCreatedLeafQueue \" + queueName + \" has succeeded\");\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeQueue(String queueName)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      LOG.info(\"Removing queue: \" + queueName);\n      CSQueue q \u003d this.getQueue(queueName);\n      if (!(AbstractAutoCreatedLeafQueue.class.isAssignableFrom(\n          q.getClass()))) {\n        throw new SchedulerDynamicEditException(\n            \"The queue that we are asked \" + \"to remove (\" + queueName\n                + \") is not a AutoCreatedLeafQueue or ReservationQueue\");\n      }\n      AbstractAutoCreatedLeafQueue disposableLeafQueue \u003d\n          (AbstractAutoCreatedLeafQueue) q;\n      // at this point we should have no more apps\n      if (disposableLeafQueue.getNumApplications() \u003e 0) {\n        throw new SchedulerDynamicEditException(\n            \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                .getApplications().size() + \" active apps \"\n                + disposableLeafQueue.getPendingApplications().size()\n                + \" pending apps\");\n      }\n\n      ((AbstractManagedParentQueue) disposableLeafQueue.getParent())\n          .removeChildQueue(q);\n      this.queueManager.removeQueue(queueName);\n      LOG.info(\n          \"Removal of AutoCreatedLeafQueue \" + queueName + \" has succeeded\");\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
      "commitDate": "08/12/17 3:10 PM",
      "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "30/11/17 3:57 PM",
      "commitNameOld": "a63d19d36520fa55bf523483f14329756f6eadd3",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 7.97,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   public void removeQueue(String queueName)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       LOG.info(\"Removing queue: \" + queueName);\n       CSQueue q \u003d this.getQueue(queueName);\n-      if (!(q instanceof AutoCreatedLeafQueue)) {\n+      if (!(AbstractAutoCreatedLeafQueue.class.isAssignableFrom(\n+          q.getClass()))) {\n         throw new SchedulerDynamicEditException(\n             \"The queue that we are asked \" + \"to remove (\" + queueName\n-                + \") is not a AutoCreatedLeafQueue\");\n+                + \") is not a AutoCreatedLeafQueue or ReservationQueue\");\n       }\n-      AutoCreatedLeafQueue disposableLeafQueue \u003d (AutoCreatedLeafQueue) q;\n+      AbstractAutoCreatedLeafQueue disposableLeafQueue \u003d\n+          (AbstractAutoCreatedLeafQueue) q;\n       // at this point we should have no more apps\n       if (disposableLeafQueue.getNumApplications() \u003e 0) {\n         throw new SchedulerDynamicEditException(\n             \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                 .getApplications().size() + \" active apps \"\n                 + disposableLeafQueue.getPendingApplications().size()\n                 + \" pending apps\");\n       }\n \n       ((AbstractManagedParentQueue) disposableLeafQueue.getParent())\n           .removeChildQueue(q);\n       this.queueManager.removeQueue(queueName);\n-      LOG.info(\"Removal of AutoCreatedLeafQueue \"\n-          + queueName + \" has succeeded\");\n+      LOG.info(\n+          \"Removal of AutoCreatedLeafQueue \" + queueName + \" has succeeded\");\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeQueue(String queueName)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      LOG.info(\"Removing queue: \" + queueName);\n      CSQueue q \u003d this.getQueue(queueName);\n      if (!(AbstractAutoCreatedLeafQueue.class.isAssignableFrom(\n          q.getClass()))) {\n        throw new SchedulerDynamicEditException(\n            \"The queue that we are asked \" + \"to remove (\" + queueName\n                + \") is not a AutoCreatedLeafQueue or ReservationQueue\");\n      }\n      AbstractAutoCreatedLeafQueue disposableLeafQueue \u003d\n          (AbstractAutoCreatedLeafQueue) q;\n      // at this point we should have no more apps\n      if (disposableLeafQueue.getNumApplications() \u003e 0) {\n        throw new SchedulerDynamicEditException(\n            \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                .getApplications().size() + \" active apps \"\n                + disposableLeafQueue.getPendingApplications().size()\n                + \" pending apps\");\n      }\n\n      ((AbstractManagedParentQueue) disposableLeafQueue.getParent())\n          .removeChildQueue(q);\n      this.queueManager.removeQueue(queueName);\n      LOG.info(\n          \"Removal of AutoCreatedLeafQueue \" + queueName + \" has succeeded\");\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7394. Merge code paths for Reservation/Plan queues and Auto Created queues. (Suma Shivaprasad via wangda)\n",
      "commitDate": "06/11/17 9:38 PM",
      "commitName": "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/11/17 1:25 AM",
      "commitNameOld": "940ffe3f9ce74286a8863e3743faf88a33c817a3",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 4.88,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public void removeQueue(String queueName)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       LOG.info(\"Removing queue: \" + queueName);\n       CSQueue q \u003d this.getQueue(queueName);\n-      if (!(q instanceof ReservationQueue)) {\n+      if (!(q instanceof AutoCreatedLeafQueue)) {\n         throw new SchedulerDynamicEditException(\n             \"The queue that we are asked \" + \"to remove (\" + queueName\n-                + \") is not a ReservationQueue\");\n+                + \") is not a AutoCreatedLeafQueue\");\n       }\n-      ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n+      AutoCreatedLeafQueue disposableLeafQueue \u003d (AutoCreatedLeafQueue) q;\n       // at this point we should have no more apps\n       if (disposableLeafQueue.getNumApplications() \u003e 0) {\n         throw new SchedulerDynamicEditException(\n             \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                 .getApplications().size() + \" active apps \"\n                 + disposableLeafQueue.getPendingApplications().size()\n                 + \" pending apps\");\n       }\n \n-      ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n+      ((AbstractManagedParentQueue) disposableLeafQueue.getParent())\n+          .removeChildQueue(q);\n       this.queueManager.removeQueue(queueName);\n-      LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n+      LOG.info(\"Removal of AutoCreatedLeafQueue \"\n+          + queueName + \" has succeeded\");\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeQueue(String queueName)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      LOG.info(\"Removing queue: \" + queueName);\n      CSQueue q \u003d this.getQueue(queueName);\n      if (!(q instanceof AutoCreatedLeafQueue)) {\n        throw new SchedulerDynamicEditException(\n            \"The queue that we are asked \" + \"to remove (\" + queueName\n                + \") is not a AutoCreatedLeafQueue\");\n      }\n      AutoCreatedLeafQueue disposableLeafQueue \u003d (AutoCreatedLeafQueue) q;\n      // at this point we should have no more apps\n      if (disposableLeafQueue.getNumApplications() \u003e 0) {\n        throw new SchedulerDynamicEditException(\n            \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                .getApplications().size() + \" active apps \"\n                + disposableLeafQueue.getPendingApplications().size()\n                + \" pending apps\");\n      }\n\n      ((AbstractManagedParentQueue) disposableLeafQueue.getParent())\n          .removeChildQueue(q);\n      this.queueManager.removeQueue(queueName);\n      LOG.info(\"Removal of AutoCreatedLeafQueue \"\n          + queueName + \" has succeeded\");\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5761. Separate QueueManager from Scheduler. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "30/11/16 1:38 PM",
      "commitName": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthor": "Li Lu",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void removeQueue(String queueName)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       LOG.info(\"Removing queue: \" + queueName);\n       CSQueue q \u003d this.getQueue(queueName);\n       if (!(q instanceof ReservationQueue)) {\n         throw new SchedulerDynamicEditException(\n             \"The queue that we are asked \" + \"to remove (\" + queueName\n                 + \") is not a ReservationQueue\");\n       }\n       ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n       // at this point we should have no more apps\n       if (disposableLeafQueue.getNumApplications() \u003e 0) {\n         throw new SchedulerDynamicEditException(\n             \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                 .getApplications().size() + \" active apps \"\n                 + disposableLeafQueue.getPendingApplications().size()\n                 + \" pending apps\");\n       }\n \n       ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n-      this.queues.remove(queueName);\n+      this.queueManager.removeQueue(queueName);\n       LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeQueue(String queueName)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      LOG.info(\"Removing queue: \" + queueName);\n      CSQueue q \u003d this.getQueue(queueName);\n      if (!(q instanceof ReservationQueue)) {\n        throw new SchedulerDynamicEditException(\n            \"The queue that we are asked \" + \"to remove (\" + queueName\n                + \") is not a ReservationQueue\");\n      }\n      ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n      // at this point we should have no more apps\n      if (disposableLeafQueue.getNumApplications() \u003e 0) {\n        throw new SchedulerDynamicEditException(\n            \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                .getApplications().size() + \" active apps \"\n                + disposableLeafQueue.getPendingApplications().size()\n                + \" pending apps\");\n      }\n\n      ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n      this.queueManager.removeQueue(queueName);\n      LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,28 @@\n-  public synchronized void removeQueue(String queueName)\n+  public void removeQueue(String queueName)\n       throws SchedulerDynamicEditException {\n-    LOG.info(\"Removing queue: \" + queueName);\n-    CSQueue q \u003d this.getQueue(queueName);\n-    if (!(q instanceof ReservationQueue)) {\n-      throw new SchedulerDynamicEditException(\"The queue that we are asked \"\n-          + \"to remove (\" + queueName + \") is not a ReservationQueue\");\n-    }\n-    ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n-    // at this point we should have no more apps\n-    if (disposableLeafQueue.getNumApplications() \u003e 0) {\n-      throw new SchedulerDynamicEditException(\"The queue \" + queueName\n-          + \" is not empty \" + disposableLeafQueue.getApplications().size()\n-          + \" active apps \" + disposableLeafQueue.getPendingApplications().size()\n-          + \" pending apps\");\n-    }\n+    try {\n+      writeLock.lock();\n+      LOG.info(\"Removing queue: \" + queueName);\n+      CSQueue q \u003d this.getQueue(queueName);\n+      if (!(q instanceof ReservationQueue)) {\n+        throw new SchedulerDynamicEditException(\n+            \"The queue that we are asked \" + \"to remove (\" + queueName\n+                + \") is not a ReservationQueue\");\n+      }\n+      ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n+      // at this point we should have no more apps\n+      if (disposableLeafQueue.getNumApplications() \u003e 0) {\n+        throw new SchedulerDynamicEditException(\n+            \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n+                .getApplications().size() + \" active apps \"\n+                + disposableLeafQueue.getPendingApplications().size()\n+                + \" pending apps\");\n+      }\n \n-    ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n-    this.queues.remove(queueName);\n-    LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n+      ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n+      this.queues.remove(queueName);\n+      LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void removeQueue(String queueName)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      LOG.info(\"Removing queue: \" + queueName);\n      CSQueue q \u003d this.getQueue(queueName);\n      if (!(q instanceof ReservationQueue)) {\n        throw new SchedulerDynamicEditException(\n            \"The queue that we are asked \" + \"to remove (\" + queueName\n                + \") is not a ReservationQueue\");\n      }\n      ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n      // at this point we should have no more apps\n      if (disposableLeafQueue.getNumApplications() \u003e 0) {\n        throw new SchedulerDynamicEditException(\n            \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                .getApplications().size() + \" active apps \"\n                + disposableLeafQueue.getPendingApplications().size()\n                + \" pending apps\");\n      }\n\n      ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n      this.queues.remove(queueName);\n      LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,28 @@\n-  public synchronized void removeQueue(String queueName)\n+  public void removeQueue(String queueName)\n       throws SchedulerDynamicEditException {\n-    LOG.info(\"Removing queue: \" + queueName);\n-    CSQueue q \u003d this.getQueue(queueName);\n-    if (!(q instanceof ReservationQueue)) {\n-      throw new SchedulerDynamicEditException(\"The queue that we are asked \"\n-          + \"to remove (\" + queueName + \") is not a ReservationQueue\");\n-    }\n-    ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n-    // at this point we should have no more apps\n-    if (disposableLeafQueue.getNumApplications() \u003e 0) {\n-      throw new SchedulerDynamicEditException(\"The queue \" + queueName\n-          + \" is not empty \" + disposableLeafQueue.getApplications().size()\n-          + \" active apps \" + disposableLeafQueue.getPendingApplications().size()\n-          + \" pending apps\");\n-    }\n+    try {\n+      writeLock.lock();\n+      LOG.info(\"Removing queue: \" + queueName);\n+      CSQueue q \u003d this.getQueue(queueName);\n+      if (!(q instanceof ReservationQueue)) {\n+        throw new SchedulerDynamicEditException(\n+            \"The queue that we are asked \" + \"to remove (\" + queueName\n+                + \") is not a ReservationQueue\");\n+      }\n+      ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n+      // at this point we should have no more apps\n+      if (disposableLeafQueue.getNumApplications() \u003e 0) {\n+        throw new SchedulerDynamicEditException(\n+            \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n+                .getApplications().size() + \" active apps \"\n+                + disposableLeafQueue.getPendingApplications().size()\n+                + \" pending apps\");\n+      }\n \n-    ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n-    this.queues.remove(queueName);\n-    LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n+      ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n+      this.queues.remove(queueName);\n+      LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void removeQueue(String queueName)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      LOG.info(\"Removing queue: \" + queueName);\n      CSQueue q \u003d this.getQueue(queueName);\n      if (!(q instanceof ReservationQueue)) {\n        throw new SchedulerDynamicEditException(\n            \"The queue that we are asked \" + \"to remove (\" + queueName\n                + \") is not a ReservationQueue\");\n      }\n      ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n      // at this point we should have no more apps\n      if (disposableLeafQueue.getNumApplications() \u003e 0) {\n        throw new SchedulerDynamicEditException(\n            \"The queue \" + queueName + \" is not empty \" + disposableLeafQueue\n                .getApplications().size() + \" active apps \"\n                + disposableLeafQueue.getPendingApplications().size()\n                + \" pending apps\");\n      }\n\n      ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n      this.queues.remove(queueName);\n      LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cf9d3c925608e8bc650d43975382ed3014081057": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3873. PendingApplications in LeafQueue should also use OrderingPolicy. (Sunil G via wangda)\n",
      "commitDate": "10/08/15 2:54 PM",
      "commitName": "cf9d3c925608e8bc650d43975382ed3014081057",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/08/15 9:46 AM",
      "commitNameOld": "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public synchronized void removeQueue(String queueName)\n       throws SchedulerDynamicEditException {\n     LOG.info(\"Removing queue: \" + queueName);\n     CSQueue q \u003d this.getQueue(queueName);\n     if (!(q instanceof ReservationQueue)) {\n       throw new SchedulerDynamicEditException(\"The queue that we are asked \"\n           + \"to remove (\" + queueName + \") is not a ReservationQueue\");\n     }\n     ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n     // at this point we should have no more apps\n     if (disposableLeafQueue.getNumApplications() \u003e 0) {\n       throw new SchedulerDynamicEditException(\"The queue \" + queueName\n           + \" is not empty \" + disposableLeafQueue.getApplications().size()\n-          + \" active apps \" + disposableLeafQueue.pendingApplications.size()\n+          + \" active apps \" + disposableLeafQueue.getPendingApplications().size()\n           + \" pending apps\");\n     }\n \n     ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n     this.queues.remove(queueName);\n     LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeQueue(String queueName)\n      throws SchedulerDynamicEditException {\n    LOG.info(\"Removing queue: \" + queueName);\n    CSQueue q \u003d this.getQueue(queueName);\n    if (!(q instanceof ReservationQueue)) {\n      throw new SchedulerDynamicEditException(\"The queue that we are asked \"\n          + \"to remove (\" + queueName + \") is not a ReservationQueue\");\n    }\n    ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n    // at this point we should have no more apps\n    if (disposableLeafQueue.getNumApplications() \u003e 0) {\n      throw new SchedulerDynamicEditException(\"The queue \" + queueName\n          + \" is not empty \" + disposableLeafQueue.getApplications().size()\n          + \" active apps \" + disposableLeafQueue.getPendingApplications().size()\n          + \" pending apps\");\n    }\n\n    ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n    this.queues.remove(queueName);\n    LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "eb3e40b833b9d82c1556843f960194dc42e482f3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1707. Introduce APIs to add/remove/resize queues in the CapacityScheduler. Contributed by Carlo Curino and Subru Krishnan\n(cherry picked from commit aac47fda7fecda9fc18ade34d633eca895865a70)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "eb3e40b833b9d82c1556843f960194dc42e482f3",
      "commitAuthor": "carlo curino",
      "diff": "@@ -0,0 +1,21 @@\n+  public synchronized void removeQueue(String queueName)\n+      throws SchedulerDynamicEditException {\n+    LOG.info(\"Removing queue: \" + queueName);\n+    CSQueue q \u003d this.getQueue(queueName);\n+    if (!(q instanceof ReservationQueue)) {\n+      throw new SchedulerDynamicEditException(\"The queue that we are asked \"\n+          + \"to remove (\" + queueName + \") is not a ReservationQueue\");\n+    }\n+    ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n+    // at this point we should have no more apps\n+    if (disposableLeafQueue.getNumApplications() \u003e 0) {\n+      throw new SchedulerDynamicEditException(\"The queue \" + queueName\n+          + \" is not empty \" + disposableLeafQueue.getApplications().size()\n+          + \" active apps \" + disposableLeafQueue.pendingApplications.size()\n+          + \" pending apps\");\n+    }\n+\n+    ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n+    this.queues.remove(queueName);\n+    LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeQueue(String queueName)\n      throws SchedulerDynamicEditException {\n    LOG.info(\"Removing queue: \" + queueName);\n    CSQueue q \u003d this.getQueue(queueName);\n    if (!(q instanceof ReservationQueue)) {\n      throw new SchedulerDynamicEditException(\"The queue that we are asked \"\n          + \"to remove (\" + queueName + \") is not a ReservationQueue\");\n    }\n    ReservationQueue disposableLeafQueue \u003d (ReservationQueue) q;\n    // at this point we should have no more apps\n    if (disposableLeafQueue.getNumApplications() \u003e 0) {\n      throw new SchedulerDynamicEditException(\"The queue \" + queueName\n          + \" is not empty \" + disposableLeafQueue.getApplications().size()\n          + \" active apps \" + disposableLeafQueue.pendingApplications.size()\n          + \" pending apps\");\n    }\n\n    ((PlanQueue) disposableLeafQueue.getParent()).removeChildQueue(q);\n    this.queues.remove(queueName);\n    LOG.info(\"Removal of ReservationQueue \" + queueName + \" has succeeded\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}