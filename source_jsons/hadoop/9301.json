{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "getSnapshotDiffReportListing",
  "functionId": "getSnapshotDiffReportListing___path-String__fromSnapshot-String__toSnapshot-String__startPath-byte[]__index-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 7082,
  "functionEndLine": 7116,
  "numCommitsSeen": 873,
  "timeTaken": 10498,
  "changeHistory": [
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd",
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "b1c7654ee40b372ed777525a42981c7cf55b5c72"
  ],
  "changeHistoryShort": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": "Ybodychange",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": "Ybodychange",
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ybodychange",
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n       String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n       throws IOException {\n     final String operationName \u003d \"computeSnapshotDiff\";\n     SnapshotDiffReportListing diffs \u003d null;\n     checkOperation(OperationCategory.READ);\n     String fromSnapshotRoot \u003d\n         (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n             Snapshot.getSnapshotPath(path, fromSnapshot);\n     String toSnapshotRoot \u003d\n         (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n             Snapshot.getSnapshotPath(path, toSnapshot);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     FSPermissionChecker.setOperationType(operationName);\n     try {\n       readLock();\n       try {\n         checkOperation(OperationCategory.READ);\n         diffs \u003d FSDirSnapshotOp\n             .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n                 fromSnapshot, toSnapshot, startPath, index,\n                 snapshotDiffReportLimit);\n       } finally {\n-        readUnlock(operationName);\n+        readUnlock(operationName, getLockReportInfoSupplier(fromSnapshotRoot,\n+            toSnapshotRoot));\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, fromSnapshotRoot, toSnapshotRoot,\n           null);\n       throw ace;\n     }\n     logAuditEvent(true, operationName, fromSnapshotRoot, toSnapshotRoot,\n         null);\n     return diffs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n      String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n      throws IOException {\n    final String operationName \u003d \"computeSnapshotDiff\";\n    SnapshotDiffReportListing diffs \u003d null;\n    checkOperation(OperationCategory.READ);\n    String fromSnapshotRoot \u003d\n        (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, fromSnapshot);\n    String toSnapshotRoot \u003d\n        (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, toSnapshot);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        diffs \u003d FSDirSnapshotOp\n            .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n                fromSnapshot, toSnapshot, startPath, index,\n                snapshotDiffReportLimit);\n      } finally {\n        readUnlock(operationName, getLockReportInfoSupplier(fromSnapshotRoot,\n            toSnapshotRoot));\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, fromSnapshotRoot, toSnapshotRoot,\n          null);\n      throw ace;\n    }\n    logAuditEvent(true, operationName, fromSnapshotRoot, toSnapshotRoot,\n        null);\n    return diffs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14743. Enhance INodeAttributeProvider/ AccessControlEnforcer Interface in HDFS to support Authorization of mkdir, rm, rmdir, copy, move etc... (#1829)\n\nReviewed-by: Xiaoyu Yao \u003cxyao@apache.org\u003e",
      "commitDate": "13/03/20 11:29 AM",
      "commitName": "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/02/20 8:49 AM",
      "commitNameOld": "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 15.07,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n       String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n       throws IOException {\n     final String operationName \u003d \"computeSnapshotDiff\";\n     SnapshotDiffReportListing diffs \u003d null;\n     checkOperation(OperationCategory.READ);\n     String fromSnapshotRoot \u003d\n         (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n             Snapshot.getSnapshotPath(path, fromSnapshot);\n     String toSnapshotRoot \u003d\n         (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n             Snapshot.getSnapshotPath(path, toSnapshot);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n+    FSPermissionChecker.setOperationType(operationName);\n     try {\n       readLock();\n       try {\n         checkOperation(OperationCategory.READ);\n         diffs \u003d FSDirSnapshotOp\n             .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n                 fromSnapshot, toSnapshot, startPath, index,\n                 snapshotDiffReportLimit);\n       } finally {\n         readUnlock(operationName);\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, fromSnapshotRoot, toSnapshotRoot,\n           null);\n       throw ace;\n     }\n     logAuditEvent(true, operationName, fromSnapshotRoot, toSnapshotRoot,\n         null);\n     return diffs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n      String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n      throws IOException {\n    final String operationName \u003d \"computeSnapshotDiff\";\n    SnapshotDiffReportListing diffs \u003d null;\n    checkOperation(OperationCategory.READ);\n    String fromSnapshotRoot \u003d\n        (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, fromSnapshot);\n    String toSnapshotRoot \u003d\n        (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, toSnapshot);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        diffs \u003d FSDirSnapshotOp\n            .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n                fromSnapshot, toSnapshot, startPath, index,\n                snapshotDiffReportLimit);\n      } finally {\n        readUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, fromSnapshotRoot, toSnapshotRoot,\n          null);\n      throw ace;\n    }\n    logAuditEvent(true, operationName, fromSnapshotRoot, toSnapshotRoot,\n        null);\n    return diffs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11246. FSNameSystem#logAuditEvent should be called outside the read or write locks. Contributed by He Xiaoqiao, Kuhu Shukla.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nCo-authored-by: Kuhu Shukla \u003ckshukla@apache.org\u003e\n",
      "commitDate": "29/08/19 10:10 AM",
      "commitName": "f600fbb6c4987c69292faea6b5abf022bb213ffd",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "27/08/19 3:26 PM",
      "commitNameOld": "dde9399b37bffb77da17c025f0b9b673d7088bc6",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n       String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n       throws IOException {\n     final String operationName \u003d \"computeSnapshotDiff\";\n     SnapshotDiffReportListing diffs \u003d null;\n     checkOperation(OperationCategory.READ);\n-    boolean success \u003d false;\n     String fromSnapshotRoot \u003d\n         (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n             Snapshot.getSnapshotPath(path, fromSnapshot);\n     String toSnapshotRoot \u003d\n         (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n             Snapshot.getSnapshotPath(path, toSnapshot);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n-    readLock();\n     try {\n-      checkOperation(OperationCategory.READ);\n-      diffs \u003d FSDirSnapshotOp\n-          .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n-              fromSnapshot, toSnapshot, startPath, index,\n-              snapshotDiffReportLimit);\n-      success \u003d true;\n+      readLock();\n+      try {\n+        checkOperation(OperationCategory.READ);\n+        diffs \u003d FSDirSnapshotOp\n+            .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n+                fromSnapshot, toSnapshot, startPath, index,\n+                snapshotDiffReportLimit);\n+      } finally {\n+        readUnlock(operationName);\n+      }\n     } catch (AccessControlException ace) {\n-      logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n+      logAuditEvent(false, operationName, fromSnapshotRoot, toSnapshotRoot,\n           null);\n       throw ace;\n-    } finally {\n-      readUnlock(operationName);\n     }\n-    logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n+    logAuditEvent(true, operationName, fromSnapshotRoot, toSnapshotRoot,\n         null);\n     return diffs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n      String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n      throws IOException {\n    final String operationName \u003d \"computeSnapshotDiff\";\n    SnapshotDiffReportListing diffs \u003d null;\n    checkOperation(OperationCategory.READ);\n    String fromSnapshotRoot \u003d\n        (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, fromSnapshot);\n    String toSnapshotRoot \u003d\n        (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, toSnapshot);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        diffs \u003d FSDirSnapshotOp\n            .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n                fromSnapshot, toSnapshot, startPath, index,\n                snapshotDiffReportLimit);\n      } finally {\n        readUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, fromSnapshotRoot, toSnapshotRoot,\n          null);\n      throw ace;\n    }\n    logAuditEvent(true, operationName, fromSnapshotRoot, toSnapshotRoot,\n        null);\n    return diffs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n       String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n       throws IOException {\n     final String operationName \u003d \"computeSnapshotDiff\";\n     SnapshotDiffReportListing diffs \u003d null;\n     checkOperation(OperationCategory.READ);\n     boolean success \u003d false;\n     String fromSnapshotRoot \u003d\n         (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n             Snapshot.getSnapshotPath(path, fromSnapshot);\n     String toSnapshotRoot \u003d\n         (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n             Snapshot.getSnapshotPath(path, toSnapshot);\n+    final FSPermissionChecker pc \u003d getPermissionChecker();\n     readLock();\n     try {\n       checkOperation(OperationCategory.READ);\n       diffs \u003d FSDirSnapshotOp\n-          .getSnapshotDiffReportListing(dir, snapshotManager, path,\n+          .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n               fromSnapshot, toSnapshot, startPath, index,\n               snapshotDiffReportLimit);\n       success \u003d true;\n     } catch (AccessControlException ace) {\n       logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n           null);\n       throw ace;\n     } finally {\n       readUnlock(operationName);\n     }\n     logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n         null);\n     return diffs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n      String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n      throws IOException {\n    final String operationName \u003d \"computeSnapshotDiff\";\n    SnapshotDiffReportListing diffs \u003d null;\n    checkOperation(OperationCategory.READ);\n    boolean success \u003d false;\n    String fromSnapshotRoot \u003d\n        (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, fromSnapshot);\n    String toSnapshotRoot \u003d\n        (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, toSnapshot);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    readLock();\n    try {\n      checkOperation(OperationCategory.READ);\n      diffs \u003d FSDirSnapshotOp\n          .getSnapshotDiffReportListing(dir, pc, snapshotManager, path,\n              fromSnapshot, toSnapshot, startPath, index,\n              snapshotDiffReportLimit);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n          null);\n      throw ace;\n    } finally {\n      readUnlock(operationName);\n    }\n    logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n        null);\n    return diffs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12594. snapshotDiff fails if the report exceeds the RPC response limit. Contributed by Shashikant Banerjee\n",
      "commitDate": "30/11/17 12:18 PM",
      "commitName": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,32 @@\n+  SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n+      String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n+      throws IOException {\n+    final String operationName \u003d \"computeSnapshotDiff\";\n+    SnapshotDiffReportListing diffs \u003d null;\n+    checkOperation(OperationCategory.READ);\n+    boolean success \u003d false;\n+    String fromSnapshotRoot \u003d\n+        (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n+            Snapshot.getSnapshotPath(path, fromSnapshot);\n+    String toSnapshotRoot \u003d\n+        (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n+            Snapshot.getSnapshotPath(path, toSnapshot);\n+    readLock();\n+    try {\n+      checkOperation(OperationCategory.READ);\n+      diffs \u003d FSDirSnapshotOp\n+          .getSnapshotDiffReportListing(dir, snapshotManager, path,\n+              fromSnapshot, toSnapshot, startPath, index,\n+              snapshotDiffReportLimit);\n+      success \u003d true;\n+    } catch (AccessControlException ace) {\n+      logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n+          null);\n+      throw ace;\n+    } finally {\n+      readUnlock(operationName);\n+    }\n+    logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n+        null);\n+    return diffs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiffReportListing getSnapshotDiffReportListing(String path,\n      String fromSnapshot, String toSnapshot, byte[] startPath, int index)\n      throws IOException {\n    final String operationName \u003d \"computeSnapshotDiff\";\n    SnapshotDiffReportListing diffs \u003d null;\n    checkOperation(OperationCategory.READ);\n    boolean success \u003d false;\n    String fromSnapshotRoot \u003d\n        (fromSnapshot \u003d\u003d null || fromSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, fromSnapshot);\n    String toSnapshotRoot \u003d\n        (toSnapshot \u003d\u003d null || toSnapshot.isEmpty()) ? path :\n            Snapshot.getSnapshotPath(path, toSnapshot);\n    readLock();\n    try {\n      checkOperation(OperationCategory.READ);\n      diffs \u003d FSDirSnapshotOp\n          .getSnapshotDiffReportListing(dir, snapshotManager, path,\n              fromSnapshot, toSnapshot, startPath, index,\n              snapshotDiffReportLimit);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n          null);\n      throw ace;\n    } finally {\n      readUnlock(operationName);\n    }\n    logAuditEvent(success, operationName, fromSnapshotRoot, toSnapshotRoot,\n        null);\n    return diffs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}