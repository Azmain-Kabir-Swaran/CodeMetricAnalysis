{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CryptoAdmin.java",
  "functionName": "run",
  "functionId": "run___conf-Configuration__args-List__String__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java",
  "functionStartLine": 315,
  "functionEndLine": 351,
  "numCommitsSeen": 15,
  "timeTaken": 2400,
  "changeHistory": [
    "9ef6ed9c1c83b9752e772ece7a716a33045752bf",
    "1000a2af04b24c123a3b08168f36b4e90420cab7",
    "dcd03df9f9e0080d7e179060ffc8148336c31b3e",
    "dacd1f50feb24ccdf6155b2b7a6126fe21a47ad0",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
    "26763657999765d08cc2de609d5f7860dfd14137"
  ],
  "changeHistoryShort": {
    "9ef6ed9c1c83b9752e772ece7a716a33045752bf": "Ybodychange",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Ybodychange",
    "dcd03df9f9e0080d7e179060ffc8148336c31b3e": "Ybodychange",
    "dacd1f50feb24ccdf6155b2b7a6126fe21a47ad0": "Ybodychange",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": "Ybodychange",
    "26763657999765d08cc2de609d5f7860dfd14137": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9ef6ed9c1c83b9752e772ece7a716a33045752bf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14931. hdfs crypto commands limit column width. Contributed by Eric Badger\n",
      "commitDate": "28/10/19 9:37 AM",
      "commitName": "9ef6ed9c1c83b9752e772ece7a716a33045752bf",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "28/02/18 8:37 AM",
      "commitNameOld": "2574375bf571b1fbc15ede7ba3b2826dc1dd3e70",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 607.0,
      "commitsBetweenForRepo": 5228,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       HdfsAdmin admin \u003d new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);\n       try {\n         final TableListing listing \u003d\n             new TableListing.Builder().addField(\"Zone Name\").addField(\"Status\")\n                 .addField(\"EZKey Version Name\").addField(\"Submission Time\")\n                 .addField(\"Is Canceled?\").addField(\"Completion Time\")\n                 .addField(\"Number of files re-encrypted\")\n                 .addField(\"Number of failures\")\n                 .addField(\"Last File Checkpointed\")\n-                .wrapWidth(AdminHelper.MAX_LINE_WIDTH).showHeaders().build();\n+                .showHeaders().build();\n         final RemoteIterator\u003cZoneReencryptionStatus\u003e it \u003d\n             admin.listReencryptionStatus();\n         boolean failuresMet \u003d false;\n         while (it.hasNext()) {\n           ZoneReencryptionStatus zs \u003d it.next();\n           final long completion \u003d zs.getCompletionTime();\n           listing.addRow(zs.getZoneName(), zs.getState().toString(),\n               zs.getEzKeyVersionName(), Time.formatTime(zs.getSubmissionTime()),\n               Boolean.toString(zs.isCanceled()),\n               completion \u003d\u003d 0 ? \"N/A\" : Time.formatTime(completion),\n               Long.toString(zs.getFilesReencrypted()),\n               Long.toString(zs.getNumReencryptionFailures()),\n               zs.getLastCheckpointFile());\n           if (zs.getNumReencryptionFailures() \u003e 0) {\n             failuresMet \u003d true;\n           }\n         }\n         System.out.println(listing.toString());\n         if (failuresMet) {\n           System.out.println(\"There are re-encryption failures. Files that are\"\n               + \" failed to re-encrypt are still using the old EDEKs. \"\n               + \"Please check NameNode log to see which files failed,\"\n               + \" then either fix the error and re-encrypt again,\"\n               + \" or manually copy the failed files to use new EDEKs.\");\n         }\n       } catch (IOException e) {\n         System.err.println(prettifyException(e));\n         return 2;\n       }\n \n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      HdfsAdmin admin \u003d new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);\n      try {\n        final TableListing listing \u003d\n            new TableListing.Builder().addField(\"Zone Name\").addField(\"Status\")\n                .addField(\"EZKey Version Name\").addField(\"Submission Time\")\n                .addField(\"Is Canceled?\").addField(\"Completion Time\")\n                .addField(\"Number of files re-encrypted\")\n                .addField(\"Number of failures\")\n                .addField(\"Last File Checkpointed\")\n                .showHeaders().build();\n        final RemoteIterator\u003cZoneReencryptionStatus\u003e it \u003d\n            admin.listReencryptionStatus();\n        boolean failuresMet \u003d false;\n        while (it.hasNext()) {\n          ZoneReencryptionStatus zs \u003d it.next();\n          final long completion \u003d zs.getCompletionTime();\n          listing.addRow(zs.getZoneName(), zs.getState().toString(),\n              zs.getEzKeyVersionName(), Time.formatTime(zs.getSubmissionTime()),\n              Boolean.toString(zs.isCanceled()),\n              completion \u003d\u003d 0 ? \"N/A\" : Time.formatTime(completion),\n              Long.toString(zs.getFilesReencrypted()),\n              Long.toString(zs.getNumReencryptionFailures()),\n              zs.getLastCheckpointFile());\n          if (zs.getNumReencryptionFailures() \u003e 0) {\n            failuresMet \u003d true;\n          }\n        }\n        System.out.println(listing.toString());\n        if (failuresMet) {\n          System.out.println(\"There are re-encryption failures. Files that are\"\n              + \" failed to re-encrypt are still using the old EDEKs. \"\n              + \"Please check NameNode log to see which files failed,\"\n              + \" then either fix the error and re-encrypt again,\"\n              + \" or manually copy the failed files to use new EDEKs.\");\n        }\n      } catch (IOException e) {\n        System.err.println(prettifyException(e));\n        return 2;\n      }\n\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java",
      "extendedDetails": {}
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "17/03/17 11:26 AM",
      "commitNameOld": "92ea6d74ecd84b86771e285902dd2a80bccbe3ea",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 159.24,
      "commitsBetweenForRepo": 903,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,43 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n-      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n-\n-      if (!args.isEmpty()) {\n-        System.err.println(\"Can\u0027t understand argument: \" + args.get(0));\n-        return 1;\n-      }\n-      Path p \u003d new Path(path);\n-      HdfsAdmin admin \u003d new HdfsAdmin(p.toUri(), conf);\n+      HdfsAdmin admin \u003d new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);\n       try {\n-        admin.provisionEncryptionZoneTrash(p);\n-        System.out.println(\"Created a trash directory for \" + path);\n-      } catch (IOException ioe) {\n-        System.err.println(prettifyException(ioe));\n+        final TableListing listing \u003d\n+            new TableListing.Builder().addField(\"Zone Name\").addField(\"Status\")\n+                .addField(\"EZKey Version Name\").addField(\"Submission Time\")\n+                .addField(\"Is Canceled?\").addField(\"Completion Time\")\n+                .addField(\"Number of files re-encrypted\")\n+                .addField(\"Number of failures\")\n+                .addField(\"Last File Checkpointed\")\n+                .wrapWidth(AdminHelper.MAX_LINE_WIDTH).showHeaders().build();\n+        final RemoteIterator\u003cZoneReencryptionStatus\u003e it \u003d\n+            admin.listReencryptionStatus();\n+        boolean failuresMet \u003d false;\n+        while (it.hasNext()) {\n+          ZoneReencryptionStatus zs \u003d it.next();\n+          final long completion \u003d zs.getCompletionTime();\n+          listing.addRow(zs.getZoneName(), zs.getState().toString(),\n+              zs.getEzKeyVersionName(), Time.formatTime(zs.getSubmissionTime()),\n+              Boolean.toString(zs.isCanceled()),\n+              completion \u003d\u003d 0 ? \"N/A\" : Time.formatTime(completion),\n+              Long.toString(zs.getFilesReencrypted()),\n+              Long.toString(zs.getNumReencryptionFailures()),\n+              zs.getLastCheckpointFile());\n+          if (zs.getNumReencryptionFailures() \u003e 0) {\n+            failuresMet \u003d true;\n+          }\n+        }\n+        System.out.println(listing.toString());\n+        if (failuresMet) {\n+          System.out.println(\"There are re-encryption failures. Files that are\"\n+              + \" failed to re-encrypt are still using the old EDEKs. \"\n+              + \"Please check NameNode log to see which files failed,\"\n+              + \" then either fix the error and re-encrypt again,\"\n+              + \" or manually copy the failed files to use new EDEKs.\");\n+        }\n+      } catch (IOException e) {\n+        System.err.println(prettifyException(e));\n         return 2;\n       }\n+\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      HdfsAdmin admin \u003d new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);\n      try {\n        final TableListing listing \u003d\n            new TableListing.Builder().addField(\"Zone Name\").addField(\"Status\")\n                .addField(\"EZKey Version Name\").addField(\"Submission Time\")\n                .addField(\"Is Canceled?\").addField(\"Completion Time\")\n                .addField(\"Number of files re-encrypted\")\n                .addField(\"Number of failures\")\n                .addField(\"Last File Checkpointed\")\n                .wrapWidth(AdminHelper.MAX_LINE_WIDTH).showHeaders().build();\n        final RemoteIterator\u003cZoneReencryptionStatus\u003e it \u003d\n            admin.listReencryptionStatus();\n        boolean failuresMet \u003d false;\n        while (it.hasNext()) {\n          ZoneReencryptionStatus zs \u003d it.next();\n          final long completion \u003d zs.getCompletionTime();\n          listing.addRow(zs.getZoneName(), zs.getState().toString(),\n              zs.getEzKeyVersionName(), Time.formatTime(zs.getSubmissionTime()),\n              Boolean.toString(zs.isCanceled()),\n              completion \u003d\u003d 0 ? \"N/A\" : Time.formatTime(completion),\n              Long.toString(zs.getFilesReencrypted()),\n              Long.toString(zs.getNumReencryptionFailures()),\n              zs.getLastCheckpointFile());\n          if (zs.getNumReencryptionFailures() \u003e 0) {\n            failuresMet \u003d true;\n          }\n        }\n        System.out.println(listing.toString());\n        if (failuresMet) {\n          System.out.println(\"There are re-encryption failures. Files that are\"\n              + \" failed to re-encrypt are still using the old EDEKs. \"\n              + \"Please check NameNode log to see which files failed,\"\n              + \" then either fix the error and re-encrypt again,\"\n              + \" or manually copy the failed files to use new EDEKs.\");\n        }\n      } catch (IOException e) {\n        System.err.println(prettifyException(e));\n        return 2;\n      }\n\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java",
      "extendedDetails": {}
    },
    "dcd03df9f9e0080d7e179060ffc8148336c31b3e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11432. Federation : Support fully qualified path for Quota/Snapshot/cacheadmin/cryptoadmin commands. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "28/02/17 9:15 PM",
      "commitName": "dcd03df9f9e0080d7e179060ffc8148336c31b3e",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "12/12/16 6:21 PM",
      "commitNameOld": "754f15bae61b81ad3c2e3f722d1feaebf374e2c4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 78.12,
      "commitsBetweenForRepo": 375,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n \n       if (!args.isEmpty()) {\n         System.err.println(\"Can\u0027t understand argument: \" + args.get(0));\n         return 1;\n       }\n-\n-      HdfsAdmin admin \u003d new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);\n+      Path p \u003d new Path(path);\n+      HdfsAdmin admin \u003d new HdfsAdmin(p.toUri(), conf);\n       try {\n-        admin.provisionEncryptionZoneTrash(new Path(path));\n+        admin.provisionEncryptionZoneTrash(p);\n         System.out.println(\"Created a trash directory for \" + path);\n       } catch (IOException ioe) {\n         System.err.println(prettifyException(ioe));\n         return 2;\n       }\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n\n      if (!args.isEmpty()) {\n        System.err.println(\"Can\u0027t understand argument: \" + args.get(0));\n        return 1;\n      }\n      Path p \u003d new Path(path);\n      HdfsAdmin admin \u003d new HdfsAdmin(p.toUri(), conf);\n      try {\n        admin.provisionEncryptionZoneTrash(p);\n        System.out.println(\"Created a trash directory for \" + path);\n      } catch (IOException ioe) {\n        System.err.println(prettifyException(ioe));\n        return 2;\n      }\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java",
      "extendedDetails": {}
    },
    "dacd1f50feb24ccdf6155b2b7a6126fe21a47ad0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10324. Trash directory in an encryption zone should be pre-created with correct permissions. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "05/05/16 6:08 PM",
      "commitName": "dacd1f50feb24ccdf6155b2b7a6126fe21a47ad0",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "12/01/15 5:32 PM",
      "commitNameOld": "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 478.98,
      "commitsBetweenForRepo": 3707,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,18 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n+      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n+\n       if (!args.isEmpty()) {\n         System.err.println(\"Can\u0027t understand argument: \" + args.get(0));\n         return 1;\n       }\n \n-      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n+      HdfsAdmin admin \u003d new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);\n       try {\n-        final TableListing listing \u003d new TableListing.Builder()\n-          .addField(\"\").addField(\"\", true)\n-          .wrapWidth(AdminHelper.MAX_LINE_WIDTH).hideHeaders().build();\n-        final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n-        while (it.hasNext()) {\n-          EncryptionZone ez \u003d it.next();\n-          listing.addRow(ez.getPath(), ez.getKeyName());\n-        }\n-        System.out.println(listing.toString());\n-      } catch (IOException e) {\n-        System.err.println(prettifyException(e));\n+        admin.provisionEncryptionZoneTrash(new Path(path));\n+        System.out.println(\"Created a trash directory for \" + path);\n+      } catch (IOException ioe) {\n+        System.err.println(prettifyException(ioe));\n         return 2;\n       }\n-\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n\n      if (!args.isEmpty()) {\n        System.err.println(\"Can\u0027t understand argument: \" + args.get(0));\n        return 1;\n      }\n\n      HdfsAdmin admin \u003d new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);\n      try {\n        admin.provisionEncryptionZoneTrash(new Path(path));\n        System.out.println(\"Created a trash directory for \" + path);\n      } catch (IOException ioe) {\n        System.err.println(prettifyException(ioe));\n        return 2;\n      }\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java",
      "extendedDetails": {}
    },
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7600. Refine hdfs admin classes to reuse common code. Contributed by Jing Zhao.\n",
      "commitDate": "12/01/15 5:32 PM",
      "commitName": "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "05/08/14 2:49 PM",
      "commitNameOld": "ac47ad11de83013eacbe303a39d1cc9593da6785",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 160.15,
      "commitsBetweenForRepo": 1358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,24 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n-      if (args.size() \u003d\u003d 0) {\n-        for (Command command : COMMANDS) {\n-          System.err.println(command.getLongUsage());\n-        }\n-        return 0;\n-      }\n-      if (args.size() !\u003d 1) {\n-        System.out.println(\"You must give exactly one argument to -help.\");\n-        return 0;\n-      }\n-      final String commandName \u003d args.get(0);\n-      // prepend a dash to match against the command names\n-      final Command command \u003d determineCommand(\"-\"+commandName);\n-      if (command \u003d\u003d null) {\n-        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n-          commandName + \"\u0027.\\n\");\n-        System.err.print(\"Valid help command names are:\\n\");\n-        String separator \u003d \"\";\n-        for (Command c : COMMANDS) {\n-          System.err.print(separator + c.getName().substring(1));\n-          separator \u003d \", \";\n-        }\n-        System.err.print(\"\\n\");\n+      if (!args.isEmpty()) {\n+        System.err.println(\"Can\u0027t understand argument: \" + args.get(0));\n         return 1;\n       }\n-      System.err.print(command.getLongUsage());\n+\n+      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n+      try {\n+        final TableListing listing \u003d new TableListing.Builder()\n+          .addField(\"\").addField(\"\", true)\n+          .wrapWidth(AdminHelper.MAX_LINE_WIDTH).hideHeaders().build();\n+        final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n+        while (it.hasNext()) {\n+          EncryptionZone ez \u003d it.next();\n+          listing.addRow(ez.getPath(), ez.getKeyName());\n+        }\n+        System.out.println(listing.toString());\n+      } catch (IOException e) {\n+        System.err.println(prettifyException(e));\n+        return 2;\n+      }\n+\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (!args.isEmpty()) {\n        System.err.println(\"Can\u0027t understand argument: \" + args.get(0));\n        return 1;\n      }\n\n      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n      try {\n        final TableListing listing \u003d new TableListing.Builder()\n          .addField(\"\").addField(\"\", true)\n          .wrapWidth(AdminHelper.MAX_LINE_WIDTH).hideHeaders().build();\n        final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n        while (it.hasNext()) {\n          EncryptionZone ez \u003d it.next();\n          listing.addRow(ez.getPath(), ez.getKeyName());\n        }\n        System.out.println(listing.toString());\n      } catch (IOException e) {\n        System.err.println(prettifyException(e));\n        return 2;\n      }\n\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java",
      "extendedDetails": {}
    },
    "26763657999765d08cc2de609d5f7860dfd14137": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6387. HDFS CLI admin tool for creating \u0026 deleting an encryption zone. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1605518 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/06/14 10:42 AM",
      "commitName": "26763657999765d08cc2de609d5f7860dfd14137",
      "commitAuthor": "Charles Lamb",
      "diff": "@@ -0,0 +1,29 @@\n+    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n+      if (args.size() \u003d\u003d 0) {\n+        for (Command command : COMMANDS) {\n+          System.err.println(command.getLongUsage());\n+        }\n+        return 0;\n+      }\n+      if (args.size() !\u003d 1) {\n+        System.out.println(\"You must give exactly one argument to -help.\");\n+        return 0;\n+      }\n+      final String commandName \u003d args.get(0);\n+      // prepend a dash to match against the command names\n+      final Command command \u003d determineCommand(\"-\"+commandName);\n+      if (command \u003d\u003d null) {\n+        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n+          commandName + \"\u0027.\\n\");\n+        System.err.print(\"Valid help command names are:\\n\");\n+        String separator \u003d \"\";\n+        for (Command c : COMMANDS) {\n+          System.err.print(separator + c.getName().substring(1));\n+          separator \u003d \", \";\n+        }\n+        System.err.print(\"\\n\");\n+        return 1;\n+      }\n+      System.err.print(command.getLongUsage());\n+      return 0;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      final String commandName \u003d args.get(0);\n      // prepend a dash to match against the command names\n      final Command command \u003d determineCommand(\"-\"+commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n          commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid help command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName().substring(1));\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java"
    }
  }
}