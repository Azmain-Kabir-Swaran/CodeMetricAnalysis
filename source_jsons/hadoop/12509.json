{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Dispatcher.java",
  "functionName": "dispatchBlockMoves",
  "functionId": "dispatchBlockMoves",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
  "functionStartLine": 1165,
  "functionEndLine": 1216,
  "numCommitsSeen": 110,
  "timeTaken": 9010,
  "changeHistory": [
    "b2cc8b6b4a78f31cdd937dc4d1a2255f80c5881e",
    "8e3a992eccff26a7344c3f0e719898fa97706b8c",
    "28eb2aabebd15c15a357d86e23ca407d3c85211c",
    "673280df24f0228bf01777035ceeab8807da8c40",
    "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
    "a26aa6bd0716da89853566961390d711511084e3",
    "c3cf331dc91e2beef2afeed11105084843b02858",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b2cc8b6b4a78f31cdd937dc4d1a2255f80c5881e": "Ybodychange",
    "8e3a992eccff26a7344c3f0e719898fa97706b8c": "Ybodychange",
    "28eb2aabebd15c15a357d86e23ca407d3c85211c": "Ybodychange",
    "673280df24f0228bf01777035ceeab8807da8c40": "Ybodychange",
    "ae71a671a3b4b454aa393c2974b6f1f16dd61405": "Ybodychange",
    "a26aa6bd0716da89853566961390d711511084e3": "Ybodychange",
    "c3cf331dc91e2beef2afeed11105084843b02858": "Ymultichange(Ymovefromfile,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2cc8b6b4a78f31cdd937dc4d1a2255f80c5881e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14973. More strictly enforce Balancer/Mover/SPS throttling of getBlocks RPCs to NameNodes. Contributed by Erik Krogen.\n",
      "commitDate": "15/11/19 10:10 AM",
      "commitName": "b2cc8b6b4a78f31cdd937dc4d1a2255f80c5881e",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "18/02/19 3:30 PM",
      "commitNameOld": "1de25d134f64d815f9b43606fa426ece5ddbc430",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 269.78,
      "commitsBetweenForRepo": 1985,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,52 @@\n   private long dispatchBlockMoves() throws InterruptedException {\n     final long bytesLastMoved \u003d getBytesMoved();\n     final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n \n     int concurrentThreads \u003d Math.min(sources.size(),\n         ((ThreadPoolExecutor)dispatchExecutor).getCorePoolSize());\n     assert concurrentThreads \u003e 0 : \"Number of concurrent threads is 0.\";\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Balancer allowed RPCs per sec \u003d \" + BALANCER_NUM_RPC_PER_SEC);\n-      LOG.debug(\"Balancer concurrent threads \u003d \" + concurrentThreads);\n-      LOG.debug(\"Disperse Interval sec \u003d \" +\n-          concurrentThreads / BALANCER_NUM_RPC_PER_SEC);\n-    }\n+    LOG.debug(\"Balancer concurrent dispatcher threads \u003d {}\", concurrentThreads);\n \n     // Determine the size of each mover thread pool per target\n     int threadsPerTarget \u003d maxMoverThreads/targets.size();\n     if (threadsPerTarget \u003d\u003d 0) {\n       // Some scheduled moves will get ignored as some targets won\u0027t have\n       // any threads allocated.\n       moverThreadAllocator.setLotSize(1);\n       LOG.warn(DFSConfigKeys.DFS_BALANCER_MOVERTHREADS_KEY + \"\u003d\" +\n           maxMoverThreads + \" is too small for moving blocks to \" +\n           targets.size() + \" targets. Balancing may be slower.\");\n     } else {\n       if  (threadsPerTarget \u003e maxConcurrentMovesPerNode) {\n         threadsPerTarget \u003d maxConcurrentMovesPerNode;\n         LOG.info(\"Limiting threads per target to the specified max.\");\n       }\n       moverThreadAllocator.setLotSize(threadsPerTarget);\n       LOG.info(\"Allocating \" + threadsPerTarget + \" threads per target.\");\n     }\n \n-    long dSec \u003d 0;\n     final Iterator\u003cSource\u003e i \u003d sources.iterator();\n     for (int j \u003d 0; j \u003c futures.length; j++) {\n       final Source s \u003d i.next();\n-      final long delay \u003d dSec * 1000;\n       futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n         @Override\n         public void run() {\n-          s.dispatchBlocks(delay);\n+          s.dispatchBlocks();\n         }\n       });\n-      // Calculate delay in seconds for the next iteration\n-      if(j \u003e\u003d concurrentThreads) {\n-        dSec \u003d 0;\n-      } else if((j + 1) % BALANCER_NUM_RPC_PER_SEC \u003d\u003d 0) {\n-        dSec++;\n-      }\n     }\n \n     // wait for all dispatcher threads to finish\n     for (Future\u003c?\u003e future : futures) {\n       try {\n         future.get();\n       } catch (ExecutionException e) {\n         LOG.warn(\"Dispatcher thread failed\", e.getCause());\n       }\n     }\n \n     // wait for all reportedBlock moving to be done\n     waitForMoveCompletion(targets);\n \n     return getBytesMoved() - bytesLastMoved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    final long bytesLastMoved \u003d getBytesMoved();\n    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n\n    int concurrentThreads \u003d Math.min(sources.size(),\n        ((ThreadPoolExecutor)dispatchExecutor).getCorePoolSize());\n    assert concurrentThreads \u003e 0 : \"Number of concurrent threads is 0.\";\n    LOG.debug(\"Balancer concurrent dispatcher threads \u003d {}\", concurrentThreads);\n\n    // Determine the size of each mover thread pool per target\n    int threadsPerTarget \u003d maxMoverThreads/targets.size();\n    if (threadsPerTarget \u003d\u003d 0) {\n      // Some scheduled moves will get ignored as some targets won\u0027t have\n      // any threads allocated.\n      moverThreadAllocator.setLotSize(1);\n      LOG.warn(DFSConfigKeys.DFS_BALANCER_MOVERTHREADS_KEY + \"\u003d\" +\n          maxMoverThreads + \" is too small for moving blocks to \" +\n          targets.size() + \" targets. Balancing may be slower.\");\n    } else {\n      if  (threadsPerTarget \u003e maxConcurrentMovesPerNode) {\n        threadsPerTarget \u003d maxConcurrentMovesPerNode;\n        LOG.info(\"Limiting threads per target to the specified max.\");\n      }\n      moverThreadAllocator.setLotSize(threadsPerTarget);\n      LOG.info(\"Allocating \" + threadsPerTarget + \" threads per target.\");\n    }\n\n    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n    for (int j \u003d 0; j \u003c futures.length; j++) {\n      final Source s \u003d i.next();\n      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n        @Override\n        public void run() {\n          s.dispatchBlocks();\n        }\n      });\n    }\n\n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n\n    // wait for all reportedBlock moving to be done\n    waitForMoveCompletion(targets);\n\n    return getBytesMoved() - bytesLastMoved;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "8e3a992eccff26a7344c3f0e719898fa97706b8c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11742. Improve balancer usability after HDFS-8818. Contributed by Kihwal Lee\n",
      "commitDate": "21/07/17 7:14 AM",
      "commitName": "8e3a992eccff26a7344c3f0e719898fa97706b8c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "05/05/17 12:01 PM",
      "commitNameOld": "a3954ccab148bddc290cb96528e63ff19799bcc9",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 76.8,
      "commitsBetweenForRepo": 373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,65 @@\n   private long dispatchBlockMoves() throws InterruptedException {\n     final long bytesLastMoved \u003d getBytesMoved();\n     final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n \n     int concurrentThreads \u003d Math.min(sources.size(),\n         ((ThreadPoolExecutor)dispatchExecutor).getCorePoolSize());\n     assert concurrentThreads \u003e 0 : \"Number of concurrent threads is 0.\";\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Balancer allowed RPCs per sec \u003d \" + BALANCER_NUM_RPC_PER_SEC);\n       LOG.debug(\"Balancer concurrent threads \u003d \" + concurrentThreads);\n       LOG.debug(\"Disperse Interval sec \u003d \" +\n           concurrentThreads / BALANCER_NUM_RPC_PER_SEC);\n     }\n+\n+    // Determine the size of each mover thread pool per target\n+    int threadsPerTarget \u003d maxMoverThreads/targets.size();\n+    if (threadsPerTarget \u003d\u003d 0) {\n+      // Some scheduled moves will get ignored as some targets won\u0027t have\n+      // any threads allocated.\n+      moverThreadAllocator.setLotSize(1);\n+      LOG.warn(DFSConfigKeys.DFS_BALANCER_MOVERTHREADS_KEY + \"\u003d\" +\n+          maxMoverThreads + \" is too small for moving blocks to \" +\n+          targets.size() + \" targets. Balancing may be slower.\");\n+    } else {\n+      if  (threadsPerTarget \u003e maxConcurrentMovesPerNode) {\n+        threadsPerTarget \u003d maxConcurrentMovesPerNode;\n+        LOG.info(\"Limiting threads per target to the specified max.\");\n+      }\n+      moverThreadAllocator.setLotSize(threadsPerTarget);\n+      LOG.info(\"Allocating \" + threadsPerTarget + \" threads per target.\");\n+    }\n+\n     long dSec \u003d 0;\n     final Iterator\u003cSource\u003e i \u003d sources.iterator();\n     for (int j \u003d 0; j \u003c futures.length; j++) {\n       final Source s \u003d i.next();\n       final long delay \u003d dSec * 1000;\n       futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n         @Override\n         public void run() {\n           s.dispatchBlocks(delay);\n         }\n       });\n       // Calculate delay in seconds for the next iteration\n       if(j \u003e\u003d concurrentThreads) {\n         dSec \u003d 0;\n       } else if((j + 1) % BALANCER_NUM_RPC_PER_SEC \u003d\u003d 0) {\n         dSec++;\n       }\n     }\n \n     // wait for all dispatcher threads to finish\n     for (Future\u003c?\u003e future : futures) {\n       try {\n         future.get();\n       } catch (ExecutionException e) {\n         LOG.warn(\"Dispatcher thread failed\", e.getCause());\n       }\n     }\n \n     // wait for all reportedBlock moving to be done\n     waitForMoveCompletion(targets);\n \n     return getBytesMoved() - bytesLastMoved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    final long bytesLastMoved \u003d getBytesMoved();\n    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n\n    int concurrentThreads \u003d Math.min(sources.size(),\n        ((ThreadPoolExecutor)dispatchExecutor).getCorePoolSize());\n    assert concurrentThreads \u003e 0 : \"Number of concurrent threads is 0.\";\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Balancer allowed RPCs per sec \u003d \" + BALANCER_NUM_RPC_PER_SEC);\n      LOG.debug(\"Balancer concurrent threads \u003d \" + concurrentThreads);\n      LOG.debug(\"Disperse Interval sec \u003d \" +\n          concurrentThreads / BALANCER_NUM_RPC_PER_SEC);\n    }\n\n    // Determine the size of each mover thread pool per target\n    int threadsPerTarget \u003d maxMoverThreads/targets.size();\n    if (threadsPerTarget \u003d\u003d 0) {\n      // Some scheduled moves will get ignored as some targets won\u0027t have\n      // any threads allocated.\n      moverThreadAllocator.setLotSize(1);\n      LOG.warn(DFSConfigKeys.DFS_BALANCER_MOVERTHREADS_KEY + \"\u003d\" +\n          maxMoverThreads + \" is too small for moving blocks to \" +\n          targets.size() + \" targets. Balancing may be slower.\");\n    } else {\n      if  (threadsPerTarget \u003e maxConcurrentMovesPerNode) {\n        threadsPerTarget \u003d maxConcurrentMovesPerNode;\n        LOG.info(\"Limiting threads per target to the specified max.\");\n      }\n      moverThreadAllocator.setLotSize(threadsPerTarget);\n      LOG.info(\"Allocating \" + threadsPerTarget + \" threads per target.\");\n    }\n\n    long dSec \u003d 0;\n    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n    for (int j \u003d 0; j \u003c futures.length; j++) {\n      final Source s \u003d i.next();\n      final long delay \u003d dSec * 1000;\n      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n        @Override\n        public void run() {\n          s.dispatchBlocks(delay);\n        }\n      });\n      // Calculate delay in seconds for the next iteration\n      if(j \u003e\u003d concurrentThreads) {\n        dSec \u003d 0;\n      } else if((j + 1) % BALANCER_NUM_RPC_PER_SEC \u003d\u003d 0) {\n        dSec++;\n      }\n    }\n\n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n\n    // wait for all reportedBlock moving to be done\n    waitForMoveCompletion(targets);\n\n    return getBytesMoved() - bytesLastMoved;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "28eb2aabebd15c15a357d86e23ca407d3c85211c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11384. Balancer disperses getBlocks calls to avoid NameNode\u0027s rpc queue saturation. Contributed by Konstantin V Shvachko.",
      "commitDate": "26/04/17 5:28 PM",
      "commitName": "28eb2aabebd15c15a357d86e23ca407d3c85211c",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "25/04/17 11:57 PM",
      "commitNameOld": "2f73396b5901fd5fe29f6cd76fc1b3134b854b37",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 0.73,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,46 @@\n   private long dispatchBlockMoves() throws InterruptedException {\n     final long bytesLastMoved \u003d getBytesMoved();\n     final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n \n+    int concurrentThreads \u003d Math.min(sources.size(),\n+        ((ThreadPoolExecutor)dispatchExecutor).getCorePoolSize());\n+    assert concurrentThreads \u003e 0 : \"Number of concurrent threads is 0.\";\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Balancer allowed RPCs per sec \u003d \" + BALANCER_NUM_RPC_PER_SEC);\n+      LOG.debug(\"Balancer concurrent threads \u003d \" + concurrentThreads);\n+      LOG.debug(\"Disperse Interval sec \u003d \" +\n+          concurrentThreads / BALANCER_NUM_RPC_PER_SEC);\n+    }\n+    long dSec \u003d 0;\n     final Iterator\u003cSource\u003e i \u003d sources.iterator();\n     for (int j \u003d 0; j \u003c futures.length; j++) {\n       final Source s \u003d i.next();\n+      final long delay \u003d dSec * 1000;\n       futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n         @Override\n         public void run() {\n-          s.dispatchBlocks();\n+          s.dispatchBlocks(delay);\n         }\n       });\n+      // Calculate delay in seconds for the next iteration\n+      if(j \u003e\u003d concurrentThreads) {\n+        dSec \u003d 0;\n+      } else if((j + 1) % BALANCER_NUM_RPC_PER_SEC \u003d\u003d 0) {\n+        dSec++;\n+      }\n     }\n \n     // wait for all dispatcher threads to finish\n     for (Future\u003c?\u003e future : futures) {\n       try {\n         future.get();\n       } catch (ExecutionException e) {\n         LOG.warn(\"Dispatcher thread failed\", e.getCause());\n       }\n     }\n \n     // wait for all reportedBlock moving to be done\n     waitForMoveCompletion(targets);\n \n     return getBytesMoved() - bytesLastMoved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    final long bytesLastMoved \u003d getBytesMoved();\n    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n\n    int concurrentThreads \u003d Math.min(sources.size(),\n        ((ThreadPoolExecutor)dispatchExecutor).getCorePoolSize());\n    assert concurrentThreads \u003e 0 : \"Number of concurrent threads is 0.\";\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Balancer allowed RPCs per sec \u003d \" + BALANCER_NUM_RPC_PER_SEC);\n      LOG.debug(\"Balancer concurrent threads \u003d \" + concurrentThreads);\n      LOG.debug(\"Disperse Interval sec \u003d \" +\n          concurrentThreads / BALANCER_NUM_RPC_PER_SEC);\n    }\n    long dSec \u003d 0;\n    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n    for (int j \u003d 0; j \u003c futures.length; j++) {\n      final Source s \u003d i.next();\n      final long delay \u003d dSec * 1000;\n      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n        @Override\n        public void run() {\n          s.dispatchBlocks(delay);\n        }\n      });\n      // Calculate delay in seconds for the next iteration\n      if(j \u003e\u003d concurrentThreads) {\n        dSec \u003d 0;\n      } else if((j + 1) % BALANCER_NUM_RPC_PER_SEC \u003d\u003d 0) {\n        dSec++;\n      }\n    }\n\n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n\n    // wait for all reportedBlock moving to be done\n    waitForMoveCompletion(targets);\n\n    return getBytesMoved() - bytesLastMoved;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "673280df24f0228bf01777035ceeab8807da8c40": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7621. Erasure Coding: update the Balancer/Mover data migration logic. Contributed by Walter Su.\n",
      "commitDate": "03/06/15 11:51 AM",
      "commitName": "673280df24f0228bf01777035ceeab8807da8c40",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "05/05/15 3:41 PM",
      "commitNameOld": "4da8490b512a33a255ed27309860859388d7c168",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 28.84,
      "commitsBetweenForRepo": 380,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private long dispatchBlockMoves() throws InterruptedException {\n     final long bytesLastMoved \u003d getBytesMoved();\n     final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n \n     final Iterator\u003cSource\u003e i \u003d sources.iterator();\n     for (int j \u003d 0; j \u003c futures.length; j++) {\n       final Source s \u003d i.next();\n       futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n         @Override\n         public void run() {\n           s.dispatchBlocks();\n         }\n       });\n     }\n \n     // wait for all dispatcher threads to finish\n     for (Future\u003c?\u003e future : futures) {\n       try {\n         future.get();\n       } catch (ExecutionException e) {\n         LOG.warn(\"Dispatcher thread failed\", e.getCause());\n       }\n     }\n \n-    // wait for all block moving to be done\n+    // wait for all reportedBlock moving to be done\n     waitForMoveCompletion(targets);\n \n     return getBytesMoved() - bytesLastMoved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    final long bytesLastMoved \u003d getBytesMoved();\n    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n\n    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n    for (int j \u003d 0; j \u003c futures.length; j++) {\n      final Source s \u003d i.next();\n      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n        @Override\n        public void run() {\n          s.dispatchBlocks();\n        }\n      });\n    }\n\n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n\n    // wait for all reportedBlock moving to be done\n    waitForMoveCompletion(targets);\n\n    return getBytesMoved() - bytesLastMoved;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "ae71a671a3b4b454aa393c2974b6f1f16dd61405": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7364. Balancer always shows zero Bytes Already Moved. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "06/11/14 5:48 PM",
      "commitName": "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "28/10/14 6:11 AM",
      "commitNameOld": "58c0bb9ed9f4a2491395b63c68046562a73526c9",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 9.53,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private long dispatchBlockMoves() throws InterruptedException {\n-    final long bytesLastMoved \u003d bytesMoved.get();\n+    final long bytesLastMoved \u003d getBytesMoved();\n     final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n \n     final Iterator\u003cSource\u003e i \u003d sources.iterator();\n     for (int j \u003d 0; j \u003c futures.length; j++) {\n       final Source s \u003d i.next();\n       futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n         @Override\n         public void run() {\n           s.dispatchBlocks();\n         }\n       });\n     }\n \n     // wait for all dispatcher threads to finish\n     for (Future\u003c?\u003e future : futures) {\n       try {\n         future.get();\n       } catch (ExecutionException e) {\n         LOG.warn(\"Dispatcher thread failed\", e.getCause());\n       }\n     }\n \n     // wait for all block moving to be done\n     waitForMoveCompletion(targets);\n \n-    return bytesMoved.get() - bytesLastMoved;\n+    return getBytesMoved() - bytesLastMoved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    final long bytesLastMoved \u003d getBytesMoved();\n    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n\n    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n    for (int j \u003d 0; j \u003c futures.length; j++) {\n      final Source s \u003d i.next();\n      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n        @Override\n        public void run() {\n          s.dispatchBlocks();\n        }\n      });\n    }\n\n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n\n    // wait for all block moving to be done\n    waitForMoveCompletion(targets);\n\n    return getBytesMoved() - bytesLastMoved;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "a26aa6bd0716da89853566961390d711511084e3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
      "commitDate": "27/08/14 2:20 PM",
      "commitName": "a26aa6bd0716da89853566961390d711511084e3",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/08/14 10:38 AM",
      "commitNameOld": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private long dispatchBlockMoves() throws InterruptedException {\n     final long bytesLastMoved \u003d bytesMoved.get();\n     final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n \n     final Iterator\u003cSource\u003e i \u003d sources.iterator();\n     for (int j \u003d 0; j \u003c futures.length; j++) {\n       final Source s \u003d i.next();\n       futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n         @Override\n         public void run() {\n           s.dispatchBlocks();\n         }\n       });\n     }\n \n     // wait for all dispatcher threads to finish\n     for (Future\u003c?\u003e future : futures) {\n       try {\n         future.get();\n       } catch (ExecutionException e) {\n         LOG.warn(\"Dispatcher thread failed\", e.getCause());\n       }\n     }\n \n     // wait for all block moving to be done\n-    waitForMoveCompletion();\n+    waitForMoveCompletion(targets);\n \n     return bytesMoved.get() - bytesLastMoved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    final long bytesLastMoved \u003d bytesMoved.get();\n    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n\n    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n    for (int j \u003d 0; j \u003c futures.length; j++) {\n      final Source s \u003d i.next();\n      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n        @Override\n        public void run() {\n          s.dispatchBlocks();\n        }\n      });\n    }\n\n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n\n    // wait for all block moving to be done\n    waitForMoveCompletion(targets);\n\n    return bytesMoved.get() - bytesLastMoved;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "c3cf331dc91e2beef2afeed11105084843b02858": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-6828. Separate block replica dispatching from Balancer. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 2:33 PM",
      "commitName": "c3cf331dc91e2beef2afeed11105084843b02858",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-6828. Separate block replica dispatching from Balancer. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616889 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/14 2:33 PM",
          "commitName": "c3cf331dc91e2beef2afeed11105084843b02858",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/08/14 2:22 PM",
          "commitNameOld": "05d1bf4157e6660610f11951845e59899260596e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,29 @@\n   private long dispatchBlockMoves() throws InterruptedException {\n-    long bytesLastMoved \u003d bytesMoved.get();\n-    Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n-    int i\u003d0;\n-    for (Source source : sources) {\n-      futures[i++] \u003d dispatcherExecutor.submit(source.new BlockMoveDispatcher());\n+    final long bytesLastMoved \u003d bytesMoved.get();\n+    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n+\n+    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n+    for (int j \u003d 0; j \u003c futures.length; j++) {\n+      final Source s \u003d i.next();\n+      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n+        @Override\n+        public void run() {\n+          s.dispatchBlocks();\n+        }\n+      });\n     }\n-    \n+\n     // wait for all dispatcher threads to finish\n     for (Future\u003c?\u003e future : futures) {\n       try {\n         future.get();\n       } catch (ExecutionException e) {\n         LOG.warn(\"Dispatcher thread failed\", e.getCause());\n       }\n     }\n-    \n+\n     // wait for all block moving to be done\n     waitForMoveCompletion();\n-    \n-    return bytesMoved.get()-bytesLastMoved;\n+\n+    return bytesMoved.get() - bytesLastMoved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    final long bytesLastMoved \u003d bytesMoved.get();\n    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n\n    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n    for (int j \u003d 0; j \u003c futures.length; j++) {\n      final Source s \u003d i.next();\n      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n        @Override\n        public void run() {\n          s.dispatchBlocks();\n        }\n      });\n    }\n\n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n\n    // wait for all block moving to be done\n    waitForMoveCompletion();\n\n    return bytesMoved.get() - bytesLastMoved;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
            "oldMethodName": "dispatchBlockMoves",
            "newMethodName": "dispatchBlockMoves"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6828. Separate block replica dispatching from Balancer. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616889 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/14 2:33 PM",
          "commitName": "c3cf331dc91e2beef2afeed11105084843b02858",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/08/14 2:22 PM",
          "commitNameOld": "05d1bf4157e6660610f11951845e59899260596e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,29 @@\n   private long dispatchBlockMoves() throws InterruptedException {\n-    long bytesLastMoved \u003d bytesMoved.get();\n-    Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n-    int i\u003d0;\n-    for (Source source : sources) {\n-      futures[i++] \u003d dispatcherExecutor.submit(source.new BlockMoveDispatcher());\n+    final long bytesLastMoved \u003d bytesMoved.get();\n+    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n+\n+    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n+    for (int j \u003d 0; j \u003c futures.length; j++) {\n+      final Source s \u003d i.next();\n+      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n+        @Override\n+        public void run() {\n+          s.dispatchBlocks();\n+        }\n+      });\n     }\n-    \n+\n     // wait for all dispatcher threads to finish\n     for (Future\u003c?\u003e future : futures) {\n       try {\n         future.get();\n       } catch (ExecutionException e) {\n         LOG.warn(\"Dispatcher thread failed\", e.getCause());\n       }\n     }\n-    \n+\n     // wait for all block moving to be done\n     waitForMoveCompletion();\n-    \n-    return bytesMoved.get()-bytesLastMoved;\n+\n+    return bytesMoved.get() - bytesLastMoved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    final long bytesLastMoved \u003d bytesMoved.get();\n    final Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n\n    final Iterator\u003cSource\u003e i \u003d sources.iterator();\n    for (int j \u003d 0; j \u003c futures.length; j++) {\n      final Source s \u003d i.next();\n      futures[j] \u003d dispatchExecutor.submit(new Runnable() {\n        @Override\n        public void run() {\n          s.dispatchBlocks();\n        }\n      });\n    }\n\n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n\n    // wait for all block moving to be done\n    waitForMoveCompletion();\n\n    return bytesMoved.get() - bytesLastMoved;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    long bytesLastMoved \u003d bytesMoved.get();\n    Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n    int i\u003d0;\n    for (Source source : sources) {\n      futures[i++] \u003d dispatcherExecutor.submit(source.new BlockMoveDispatcher());\n    }\n    \n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n    \n    // wait for all block moving to be done\n    waitForMoveCompletion();\n    \n    return bytesMoved.get()-bytesLastMoved;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    long bytesLastMoved \u003d bytesMoved.get();\n    Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n    int i\u003d0;\n    for (Source source : sources) {\n      futures[i++] \u003d dispatcherExecutor.submit(source.new BlockMoveDispatcher());\n    }\n    \n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n    \n    // wait for all block moving to be done\n    waitForMoveCompletion();\n    \n    return bytesMoved.get()-bytesLastMoved;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+  private long dispatchBlockMoves() throws InterruptedException {\n+    long bytesLastMoved \u003d bytesMoved.get();\n+    Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n+    int i\u003d0;\n+    for (Source source : sources) {\n+      futures[i++] \u003d dispatcherExecutor.submit(source.new BlockMoveDispatcher());\n+    }\n+    \n+    // wait for all dispatcher threads to finish\n+    for (Future\u003c?\u003e future : futures) {\n+      try {\n+        future.get();\n+      } catch (ExecutionException e) {\n+        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n+      }\n+    }\n+    \n+    // wait for all block moving to be done\n+    waitForMoveCompletion();\n+    \n+    return bytesMoved.get()-bytesLastMoved;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private long dispatchBlockMoves() throws InterruptedException {\n    long bytesLastMoved \u003d bytesMoved.get();\n    Future\u003c?\u003e[] futures \u003d new Future\u003c?\u003e[sources.size()];\n    int i\u003d0;\n    for (Source source : sources) {\n      futures[i++] \u003d dispatcherExecutor.submit(source.new BlockMoveDispatcher());\n    }\n    \n    // wait for all dispatcher threads to finish\n    for (Future\u003c?\u003e future : futures) {\n      try {\n        future.get();\n      } catch (ExecutionException e) {\n        LOG.warn(\"Dispatcher thread failed\", e.getCause());\n      }\n    }\n    \n    // wait for all block moving to be done\n    waitForMoveCompletion();\n    \n    return bytesMoved.get()-bytesLastMoved;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
    }
  }
}