{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryAliasMapProtocolClientSideTranslatorPB.java",
  "functionName": "list",
  "functionId": "list___marker-Optional__Block__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/InMemoryAliasMapProtocolClientSideTranslatorPB.java",
  "functionStartLine": 132,
  "functionEndLine": 163,
  "numCommitsSeen": 6,
  "timeTaken": 1306,
  "changeHistory": [
    "9c35be86e17021202823bfd3c2067ff3b312ce5c",
    "352f994b6484524cdcfcda021046c59905b62f31"
  ],
  "changeHistoryShort": {
    "9c35be86e17021202823bfd3c2067ff3b312ce5c": "Ybodychange",
    "352f994b6484524cdcfcda021046c59905b62f31": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c35be86e17021202823bfd3c2067ff3b312ce5c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12713. [READ] Refactor FileRegion and BlockAliasMap to separate out HDFS metadata and PROVIDED storage metadata. Contributed by Ewan Higgs\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "9c35be86e17021202823bfd3c2067ff3b312ce5c",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "a027055dd2bf5009fe272e9ceb08305bd0a8cc31",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   public InMemoryAliasMap.IterationResult list(Optional\u003cBlock\u003e marker)\n       throws IOException {\n     ListRequestProto.Builder builder \u003d ListRequestProto.newBuilder();\n     if (marker.isPresent()) {\n       builder.setMarker(PBHelperClient.convert(marker.get()));\n     }\n     ListRequestProto request \u003d builder.build();\n     try {\n       ListResponseProto response \u003d rpcProxy.list(null, request);\n       List\u003cKeyValueProto\u003e fileRegionsList \u003d response.getFileRegionsList();\n \n       List\u003cFileRegion\u003e fileRegions \u003d fileRegionsList\n           .stream()\n           .map(kv -\u003e new FileRegion(\n               PBHelperClient.convert(kv.getKey()),\n-              PBHelperClient.convert(kv.getValue()),\n-              null\n+              PBHelperClient.convert(kv.getValue())\n           ))\n           .collect(Collectors.toList());\n       BlockProto nextMarker \u003d response.getNextMarker();\n \n       if (nextMarker.isInitialized()) {\n         return new InMemoryAliasMap.IterationResult(fileRegions,\n             Optional.of(PBHelperClient.convert(nextMarker)));\n       } else {\n         return new InMemoryAliasMap.IterationResult(fileRegions,\n             Optional.empty());\n       }\n \n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public InMemoryAliasMap.IterationResult list(Optional\u003cBlock\u003e marker)\n      throws IOException {\n    ListRequestProto.Builder builder \u003d ListRequestProto.newBuilder();\n    if (marker.isPresent()) {\n      builder.setMarker(PBHelperClient.convert(marker.get()));\n    }\n    ListRequestProto request \u003d builder.build();\n    try {\n      ListResponseProto response \u003d rpcProxy.list(null, request);\n      List\u003cKeyValueProto\u003e fileRegionsList \u003d response.getFileRegionsList();\n\n      List\u003cFileRegion\u003e fileRegions \u003d fileRegionsList\n          .stream()\n          .map(kv -\u003e new FileRegion(\n              PBHelperClient.convert(kv.getKey()),\n              PBHelperClient.convert(kv.getValue())\n          ))\n          .collect(Collectors.toList());\n      BlockProto nextMarker \u003d response.getNextMarker();\n\n      if (nextMarker.isInitialized()) {\n        return new InMemoryAliasMap.IterationResult(fileRegions,\n            Optional.of(PBHelperClient.convert(nextMarker)));\n      } else {\n        return new InMemoryAliasMap.IterationResult(fileRegions,\n            Optional.empty());\n      }\n\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/InMemoryAliasMapProtocolClientSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "352f994b6484524cdcfcda021046c59905b62f31": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12665. [AliasMap] Create a version of the AliasMap that runs in memory in the Namenode (leveldb). Contributed by Ewan Higgs.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "352f994b6484524cdcfcda021046c59905b62f31",
      "commitAuthor": "Virajith Jalaparti",
      "diff": "@@ -0,0 +1,33 @@\n+  public InMemoryAliasMap.IterationResult list(Optional\u003cBlock\u003e marker)\n+      throws IOException {\n+    ListRequestProto.Builder builder \u003d ListRequestProto.newBuilder();\n+    if (marker.isPresent()) {\n+      builder.setMarker(PBHelperClient.convert(marker.get()));\n+    }\n+    ListRequestProto request \u003d builder.build();\n+    try {\n+      ListResponseProto response \u003d rpcProxy.list(null, request);\n+      List\u003cKeyValueProto\u003e fileRegionsList \u003d response.getFileRegionsList();\n+\n+      List\u003cFileRegion\u003e fileRegions \u003d fileRegionsList\n+          .stream()\n+          .map(kv -\u003e new FileRegion(\n+              PBHelperClient.convert(kv.getKey()),\n+              PBHelperClient.convert(kv.getValue()),\n+              null\n+          ))\n+          .collect(Collectors.toList());\n+      BlockProto nextMarker \u003d response.getNextMarker();\n+\n+      if (nextMarker.isInitialized()) {\n+        return new InMemoryAliasMap.IterationResult(fileRegions,\n+            Optional.of(PBHelperClient.convert(nextMarker)));\n+      } else {\n+        return new InMemoryAliasMap.IterationResult(fileRegions,\n+            Optional.empty());\n+      }\n+\n+    } catch (ServiceException e) {\n+      throw ProtobufHelper.getRemoteException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public InMemoryAliasMap.IterationResult list(Optional\u003cBlock\u003e marker)\n      throws IOException {\n    ListRequestProto.Builder builder \u003d ListRequestProto.newBuilder();\n    if (marker.isPresent()) {\n      builder.setMarker(PBHelperClient.convert(marker.get()));\n    }\n    ListRequestProto request \u003d builder.build();\n    try {\n      ListResponseProto response \u003d rpcProxy.list(null, request);\n      List\u003cKeyValueProto\u003e fileRegionsList \u003d response.getFileRegionsList();\n\n      List\u003cFileRegion\u003e fileRegions \u003d fileRegionsList\n          .stream()\n          .map(kv -\u003e new FileRegion(\n              PBHelperClient.convert(kv.getKey()),\n              PBHelperClient.convert(kv.getValue()),\n              null\n          ))\n          .collect(Collectors.toList());\n      BlockProto nextMarker \u003d response.getNextMarker();\n\n      if (nextMarker.isInitialized()) {\n        return new InMemoryAliasMap.IterationResult(fileRegions,\n            Optional.of(PBHelperClient.convert(nextMarker)));\n      } else {\n        return new InMemoryAliasMap.IterationResult(fileRegions,\n            Optional.empty());\n      }\n\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/InMemoryAliasMapProtocolClientSideTranslatorPB.java"
    }
  }
}