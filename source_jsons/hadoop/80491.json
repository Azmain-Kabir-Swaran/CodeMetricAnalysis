{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "getInternal",
  "functionId": "getInternal___uri-URI__conf-Configuration__key-Key",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 3465,
  "functionEndLine": 3501,
  "numCommitsSeen": 188,
  "timeTaken": 5630,
  "changeHistory": [
    "aebac6d2d2e612e400a7d73be67dafb47e239211",
    "9a44a832a99eb967aa4e34338dfa75baf35f9845",
    "8fdd5083bf4dc7f7f6bd33ac71dea2307fdb0ac5",
    "8a0c7323ce36032a56c228fc8076d9d3214274ba",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7b1ac5ac13f5af483065788e59807fe08d2299f3",
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "aebac6d2d2e612e400a7d73be67dafb47e239211": "Ybodychange",
    "9a44a832a99eb967aa4e34338dfa75baf35f9845": "Ybodychange",
    "8fdd5083bf4dc7f7f6bd33ac71dea2307fdb0ac5": "Ybodychange",
    "8a0c7323ce36032a56c228fc8076d9d3214274ba": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7b1ac5ac13f5af483065788e59807fe08d2299f3": "Ybodychange",
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aebac6d2d2e612e400a7d73be67dafb47e239211": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16461. Regression: FileSystem cache lock parses XML within the lock.\n\nContributed by Gopal V.\n\nChange-Id: If6654f850e9c24ee0d9519a46fd6269b18e1a7a4\n",
      "commitDate": "26/07/19 3:32 AM",
      "commitName": "aebac6d2d2e612e400a7d73be67dafb47e239211",
      "commitAuthor": "Gopal V",
      "commitDateOld": "30/05/19 1:21 PM",
      "commitNameOld": "6f5a36c13c4d2eb24e207aa99a9781c0be11660b",
      "commitAuthorOld": "Shweta Yakkali",
      "daysBetweenCommits": 56.59,
      "commitsBetweenForRepo": 464,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,37 @@\n     private FileSystem getInternal(URI uri, Configuration conf, Key key)\n         throws IOException{\n       FileSystem fs;\n       synchronized (this) {\n         fs \u003d map.get(key);\n       }\n       if (fs !\u003d null) {\n         return fs;\n       }\n \n       fs \u003d createFileSystem(uri, conf);\n+      final long timeout \u003d conf.getTimeDuration(SERVICE_SHUTDOWN_TIMEOUT,\n+          SERVICE_SHUTDOWN_TIMEOUT_DEFAULT,\n+          ShutdownHookManager.TIME_UNIT_DEFAULT);\n       synchronized (this) { // refetch the lock again\n         FileSystem oldfs \u003d map.get(key);\n         if (oldfs !\u003d null) { // a file system is created while lock is releasing\n           fs.close(); // close the new file system\n           return oldfs;  // return the old file system\n         }\n \n         // now insert the new file system into the map\n         if (map.isEmpty()\n                 \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n-          ShutdownHookManager.get().addShutdownHook(clientFinalizer, SHUTDOWN_HOOK_PRIORITY);\n+          ShutdownHookManager.get().addShutdownHook(clientFinalizer,\n+              SHUTDOWN_HOOK_PRIORITY, timeout,\n+              ShutdownHookManager.TIME_UNIT_DEFAULT);\n         }\n         fs.key \u003d key;\n         map.put(key, fs);\n         if (conf.getBoolean(\n             FS_AUTOMATIC_CLOSE_KEY, FS_AUTOMATIC_CLOSE_DEFAULT)) {\n           toAutoClose.add(key);\n         }\n         return fs;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key)\n        throws IOException{\n      FileSystem fs;\n      synchronized (this) {\n        fs \u003d map.get(key);\n      }\n      if (fs !\u003d null) {\n        return fs;\n      }\n\n      fs \u003d createFileSystem(uri, conf);\n      final long timeout \u003d conf.getTimeDuration(SERVICE_SHUTDOWN_TIMEOUT,\n          SERVICE_SHUTDOWN_TIMEOUT_DEFAULT,\n          ShutdownHookManager.TIME_UNIT_DEFAULT);\n      synchronized (this) { // refetch the lock again\n        FileSystem oldfs \u003d map.get(key);\n        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n          fs.close(); // close the new file system\n          return oldfs;  // return the old file system\n        }\n\n        // now insert the new file system into the map\n        if (map.isEmpty()\n                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n          ShutdownHookManager.get().addShutdownHook(clientFinalizer,\n              SHUTDOWN_HOOK_PRIORITY, timeout,\n              ShutdownHookManager.TIME_UNIT_DEFAULT);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n        if (conf.getBoolean(\n            FS_AUTOMATIC_CLOSE_KEY, FS_AUTOMATIC_CLOSE_DEFAULT)) {\n          toAutoClose.add(key);\n        }\n        return fs;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "9a44a832a99eb967aa4e34338dfa75baf35f9845": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13658. Replace config key literal strings with names I: hadoop common. Contributed by Chen Liang\n",
      "commitDate": "27/09/16 5:36 PM",
      "commitName": "9a44a832a99eb967aa4e34338dfa75baf35f9845",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "16/09/16 3:37 PM",
      "commitNameOld": "8a40953058d50d421d62b71067a13b626b3cba1f",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 11.08,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n     private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n       FileSystem fs;\n       synchronized (this) {\n         fs \u003d map.get(key);\n       }\n       if (fs !\u003d null) {\n         return fs;\n       }\n \n       fs \u003d createFileSystem(uri, conf);\n       synchronized (this) { // refetch the lock again\n         FileSystem oldfs \u003d map.get(key);\n         if (oldfs !\u003d null) { // a file system is created while lock is releasing\n           fs.close(); // close the new file system\n           return oldfs;  // return the old file system\n         }\n         \n         // now insert the new file system into the map\n         if (map.isEmpty()\n                 \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n           ShutdownHookManager.get().addShutdownHook(clientFinalizer, SHUTDOWN_HOOK_PRIORITY);\n         }\n         fs.key \u003d key;\n         map.put(key, fs);\n-        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n+        if (conf.getBoolean(\n+            FS_AUTOMATIC_CLOSE_KEY, FS_AUTOMATIC_CLOSE_DEFAULT)) {\n           toAutoClose.add(key);\n         }\n         return fs;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs;\n      synchronized (this) {\n        fs \u003d map.get(key);\n      }\n      if (fs !\u003d null) {\n        return fs;\n      }\n\n      fs \u003d createFileSystem(uri, conf);\n      synchronized (this) { // refetch the lock again\n        FileSystem oldfs \u003d map.get(key);\n        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n          fs.close(); // close the new file system\n          return oldfs;  // return the old file system\n        }\n        \n        // now insert the new file system into the map\n        if (map.isEmpty()\n                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n          ShutdownHookManager.get().addShutdownHook(clientFinalizer, SHUTDOWN_HOOK_PRIORITY);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n        if (conf.getBoolean(\n            FS_AUTOMATIC_CLOSE_KEY, FS_AUTOMATIC_CLOSE_DEFAULT)) {\n          toAutoClose.add(key);\n        }\n        return fs;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "8fdd5083bf4dc7f7f6bd33ac71dea2307fdb0ac5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4841. FsShell commands using secure webhfds fail ClientFinalizer shutdown hook. (rkanter via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1501005 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/13 4:07 PM",
      "commitName": "8fdd5083bf4dc7f7f6bd33ac71dea2307fdb0ac5",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "03/07/13 4:29 PM",
      "commitNameOld": "33fe54a25f04673048f0f0db4abaa42535f043ec",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 4.98,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n     private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n       FileSystem fs;\n       synchronized (this) {\n         fs \u003d map.get(key);\n       }\n       if (fs !\u003d null) {\n         return fs;\n       }\n \n       fs \u003d createFileSystem(uri, conf);\n       synchronized (this) { // refetch the lock again\n         FileSystem oldfs \u003d map.get(key);\n         if (oldfs !\u003d null) { // a file system is created while lock is releasing\n           fs.close(); // close the new file system\n           return oldfs;  // return the old file system\n         }\n         \n         // now insert the new file system into the map\n-        if (map.isEmpty() ) {\n+        if (map.isEmpty()\n+                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n           ShutdownHookManager.get().addShutdownHook(clientFinalizer, SHUTDOWN_HOOK_PRIORITY);\n         }\n         fs.key \u003d key;\n         map.put(key, fs);\n         if (conf.getBoolean(\"fs.automatic.close\", true)) {\n           toAutoClose.add(key);\n         }\n         return fs;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs;\n      synchronized (this) {\n        fs \u003d map.get(key);\n      }\n      if (fs !\u003d null) {\n        return fs;\n      }\n\n      fs \u003d createFileSystem(uri, conf);\n      synchronized (this) { // refetch the lock again\n        FileSystem oldfs \u003d map.get(key);\n        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n          fs.close(); // close the new file system\n          return oldfs;  // return the old file system\n        }\n        \n        // now insert the new file system into the map\n        if (map.isEmpty()\n                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n          ShutdownHookManager.get().addShutdownHook(clientFinalizer, SHUTDOWN_HOOK_PRIORITY);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n          toAutoClose.add(key);\n        }\n        return fs;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "8a0c7323ce36032a56c228fc8076d9d3214274ba": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8325. Add a ShutdownHookManager to be used by different components instead of the JVM shutdownhook (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332345 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/12 12:21 PM",
      "commitName": "8a0c7323ce36032a56c228fc8076d9d3214274ba",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/04/12 1:33 PM",
      "commitNameOld": "706e861a859a247661b027f4e473814995556c2e",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 5.95,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n       FileSystem fs;\n       synchronized (this) {\n         fs \u003d map.get(key);\n       }\n       if (fs !\u003d null) {\n         return fs;\n       }\n \n       fs \u003d createFileSystem(uri, conf);\n       synchronized (this) { // refetch the lock again\n         FileSystem oldfs \u003d map.get(key);\n         if (oldfs !\u003d null) { // a file system is created while lock is releasing\n           fs.close(); // close the new file system\n           return oldfs;  // return the old file system\n         }\n         \n         // now insert the new file system into the map\n-        if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n-          Runtime.getRuntime().addShutdownHook(clientFinalizer);\n+        if (map.isEmpty() ) {\n+          ShutdownHookManager.get().addShutdownHook(clientFinalizer, SHUTDOWN_HOOK_PRIORITY);\n         }\n         fs.key \u003d key;\n         map.put(key, fs);\n         if (conf.getBoolean(\"fs.automatic.close\", true)) {\n           toAutoClose.add(key);\n         }\n         return fs;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs;\n      synchronized (this) {\n        fs \u003d map.get(key);\n      }\n      if (fs !\u003d null) {\n        return fs;\n      }\n\n      fs \u003d createFileSystem(uri, conf);\n      synchronized (this) { // refetch the lock again\n        FileSystem oldfs \u003d map.get(key);\n        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n          fs.close(); // close the new file system\n          return oldfs;  // return the old file system\n        }\n        \n        // now insert the new file system into the map\n        if (map.isEmpty() ) {\n          ShutdownHookManager.get().addShutdownHook(clientFinalizer, SHUTDOWN_HOOK_PRIORITY);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n          toAutoClose.add(key);\n        }\n        return fs;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs;\n      synchronized (this) {\n        fs \u003d map.get(key);\n      }\n      if (fs !\u003d null) {\n        return fs;\n      }\n\n      fs \u003d createFileSystem(uri, conf);\n      synchronized (this) { // refetch the lock again\n        FileSystem oldfs \u003d map.get(key);\n        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n          fs.close(); // close the new file system\n          return oldfs;  // return the old file system\n        }\n        \n        // now insert the new file system into the map\n        if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n          Runtime.getRuntime().addShutdownHook(clientFinalizer);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n          toAutoClose.add(key);\n        }\n        return fs;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs;\n      synchronized (this) {\n        fs \u003d map.get(key);\n      }\n      if (fs !\u003d null) {\n        return fs;\n      }\n\n      fs \u003d createFileSystem(uri, conf);\n      synchronized (this) { // refetch the lock again\n        FileSystem oldfs \u003d map.get(key);\n        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n          fs.close(); // close the new file system\n          return oldfs;  // return the old file system\n        }\n        \n        // now insert the new file system into the map\n        if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n          Runtime.getRuntime().addShutdownHook(clientFinalizer);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n          toAutoClose.add(key);\n        }\n        return fs;\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs;\n      synchronized (this) {\n        fs \u003d map.get(key);\n      }\n      if (fs !\u003d null) {\n        return fs;\n      }\n\n      fs \u003d createFileSystem(uri, conf);\n      synchronized (this) { // refetch the lock again\n        FileSystem oldfs \u003d map.get(key);\n        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n          fs.close(); // close the new file system\n          return oldfs;  // return the old file system\n        }\n        \n        // now insert the new file system into the map\n        if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n          Runtime.getRuntime().addShutdownHook(clientFinalizer);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n          toAutoClose.add(key);\n        }\n        return fs;\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "7b1ac5ac13f5af483065788e59807fe08d2299f3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6640. FileSystem.get() does RPC retries within a static synchronized block. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@930096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/10 1:58 PM",
      "commitName": "7b1ac5ac13f5af483065788e59807fe08d2299f3",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "20/02/10 12:13 PM",
      "commitNameOld": "115ef5b8c7563374b57258201f786510a716a973",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 40.03,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,29 @@\n     private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n-      FileSystem fs \u003d map.get(key);\n-      if (fs \u003d\u003d null) {\n-        fs \u003d createFileSystem(uri, conf);\n+      FileSystem fs;\n+      synchronized (this) {\n+        fs \u003d map.get(key);\n+      }\n+      if (fs !\u003d null) {\n+        return fs;\n+      }\n+\n+      fs \u003d createFileSystem(uri, conf);\n+      synchronized (this) { // refetch the lock again\n+        FileSystem oldfs \u003d map.get(key);\n+        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n+          fs.close(); // close the new file system\n+          return oldfs;  // return the old file system\n+        }\n+        \n+        // now insert the new file system into the map\n         if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n           Runtime.getRuntime().addShutdownHook(clientFinalizer);\n         }\n         fs.key \u003d key;\n         map.put(key, fs);\n-\n         if (conf.getBoolean(\"fs.automatic.close\", true)) {\n           toAutoClose.add(key);\n         }\n+        return fs;\n       }\n-      return fs;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs;\n      synchronized (this) {\n        fs \u003d map.get(key);\n      }\n      if (fs !\u003d null) {\n        return fs;\n      }\n\n      fs \u003d createFileSystem(uri, conf);\n      synchronized (this) { // refetch the lock again\n        FileSystem oldfs \u003d map.get(key);\n        if (oldfs !\u003d null) { // a file system is created while lock is releasing\n          fs.close(); // close the new file system\n          return oldfs;  // return the old file system\n        }\n        \n        // now insert the new file system into the map\n        if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n          Runtime.getRuntime().addShutdownHook(clientFinalizer);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n          toAutoClose.add(key);\n        }\n        return fs;\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58": {
      "type": "Ybodychange",
      "commitMessage": "Merged src/core, src/test/core, src/contrib/eclipse-plugin, and\nsrc/contrib/ec2 from trunk 776174:784663\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/09 1:28 PM",
      "commitName": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 27.67,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,16 @@\n     private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n       FileSystem fs \u003d map.get(key);\n       if (fs \u003d\u003d null) {\n         fs \u003d createFileSystem(uri, conf);\n         if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n           Runtime.getRuntime().addShutdownHook(clientFinalizer);\n         }\n         fs.key \u003d key;\n         map.put(key, fs);\n+\n+        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n+          toAutoClose.add(key);\n+        }\n       }\n       return fs;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs \u003d map.get(key);\n      if (fs \u003d\u003d null) {\n        fs \u003d createFileSystem(uri, conf);\n        if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n          Runtime.getRuntime().addShutdownHook(clientFinalizer);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n\n        if (conf.getBoolean(\"fs.automatic.close\", true)) {\n          toAutoClose.add(key);\n        }\n      }\n      return fs;\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,12 @@\n+    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n+      FileSystem fs \u003d map.get(key);\n+      if (fs \u003d\u003d null) {\n+        fs \u003d createFileSystem(uri, conf);\n+        if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n+          Runtime.getRuntime().addShutdownHook(clientFinalizer);\n+        }\n+        fs.key \u003d key;\n+        map.put(key, fs);\n+      }\n+      return fs;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{\n      FileSystem fs \u003d map.get(key);\n      if (fs \u003d\u003d null) {\n        fs \u003d createFileSystem(uri, conf);\n        if (map.isEmpty() \u0026\u0026 !clientFinalizer.isAlive()) {\n          Runtime.getRuntime().addShutdownHook(clientFinalizer);\n        }\n        fs.key \u003d key;\n        map.put(key, fs);\n      }\n      return fs;\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}