{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "updateYarnSysFS",
  "functionId": "updateYarnSysFS___ctx-Context__user-String__appId-String__spec-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 1014,
  "functionEndLine": 1052,
  "numCommitsSeen": 84,
  "timeTaken": 1931,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "d07e873b7db6cb317eccb4768607c1afb505c99b"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "d07e873b7db6cb317eccb4768607c1afb505c99b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public synchronized void updateYarnSysFS(Context ctx, String user,\n       String appId, String spec) throws IOException {\n     LocalDirsHandlerService dirsHandler \u003d nmContext.getLocalDirsHandler();\n     Path sysFSPath \u003d dirsHandler.getLocalPathForWrite(\n         \"nmPrivate/\" + appId + \"/sysfs/app.json\");\n     File file \u003d new File(sysFSPath.toString());\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     if (file.exists()) {\n       if (!file.delete()) {\n-        LOG.warn(\"Unable to delete \" + sysFSPath.toString());\n+        LOG.warn(\"Unable to delete {}\", sysFSPath);\n       }\n     }\n     if (file.createNewFile()) {\n       FileOutputStream output \u003d new FileOutputStream(file);\n       try {\n         output.write(spec.getBytes(\"UTF-8\"));\n       } finally {\n         output.close();\n       }\n     }\n     PrivilegedOperation privOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.SYNC_YARN_SYSFS);\n     String runAsUser \u003d getRunAsUser(user);\n     privOp.appendArgs(runAsUser,\n         user,\n         Integer.toString(PrivilegedOperation.RunAsUserCommand\n         .SYNC_YARN_SYSFS.getValue()),\n         appId, StringUtils.join(PrivilegedOperation\n             .LINUX_FILE_PATH_SEPARATOR, localDirs));\n     privOp.disableFailureLogging();\n     PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n         PrivilegedOperationExecutor.getInstance(nmContext.getConf());\n     try {\n       privilegedOperationExecutor.executePrivilegedOperation(null,\n             privOp, null, null, false, false);\n     } catch (PrivilegedOperationException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateYarnSysFS(Context ctx, String user,\n      String appId, String spec) throws IOException {\n    LocalDirsHandlerService dirsHandler \u003d nmContext.getLocalDirsHandler();\n    Path sysFSPath \u003d dirsHandler.getLocalPathForWrite(\n        \"nmPrivate/\" + appId + \"/sysfs/app.json\");\n    File file \u003d new File(sysFSPath.toString());\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    if (file.exists()) {\n      if (!file.delete()) {\n        LOG.warn(\"Unable to delete {}\", sysFSPath);\n      }\n    }\n    if (file.createNewFile()) {\n      FileOutputStream output \u003d new FileOutputStream(file);\n      try {\n        output.write(spec.getBytes(\"UTF-8\"));\n      } finally {\n        output.close();\n      }\n    }\n    PrivilegedOperation privOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.SYNC_YARN_SYSFS);\n    String runAsUser \u003d getRunAsUser(user);\n    privOp.appendArgs(runAsUser,\n        user,\n        Integer.toString(PrivilegedOperation.RunAsUserCommand\n        .SYNC_YARN_SYSFS.getValue()),\n        appId, StringUtils.join(PrivilegedOperation\n            .LINUX_FILE_PATH_SEPARATOR, localDirs));\n    privOp.disableFailureLogging();\n    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n        PrivilegedOperationExecutor.getInstance(nmContext.getConf());\n    try {\n      privilegedOperationExecutor.executePrivilegedOperation(null,\n            privOp, null, null, false, false);\n    } catch (PrivilegedOperationException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "d07e873b7db6cb317eccb4768607c1afb505c99b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8569. Create an interface to provide cluster information to application. Contributed by Eric Yang\n",
      "commitDate": "26/10/18 5:57 PM",
      "commitName": "d07e873b7db6cb317eccb4768607c1afb505c99b",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,39 @@\n+  public synchronized void updateYarnSysFS(Context ctx, String user,\n+      String appId, String spec) throws IOException {\n+    LocalDirsHandlerService dirsHandler \u003d nmContext.getLocalDirsHandler();\n+    Path sysFSPath \u003d dirsHandler.getLocalPathForWrite(\n+        \"nmPrivate/\" + appId + \"/sysfs/app.json\");\n+    File file \u003d new File(sysFSPath.toString());\n+    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n+    if (file.exists()) {\n+      if (!file.delete()) {\n+        LOG.warn(\"Unable to delete \" + sysFSPath.toString());\n+      }\n+    }\n+    if (file.createNewFile()) {\n+      FileOutputStream output \u003d new FileOutputStream(file);\n+      try {\n+        output.write(spec.getBytes(\"UTF-8\"));\n+      } finally {\n+        output.close();\n+      }\n+    }\n+    PrivilegedOperation privOp \u003d new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.SYNC_YARN_SYSFS);\n+    String runAsUser \u003d getRunAsUser(user);\n+    privOp.appendArgs(runAsUser,\n+        user,\n+        Integer.toString(PrivilegedOperation.RunAsUserCommand\n+        .SYNC_YARN_SYSFS.getValue()),\n+        appId, StringUtils.join(PrivilegedOperation\n+            .LINUX_FILE_PATH_SEPARATOR, localDirs));\n+    privOp.disableFailureLogging();\n+    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n+        PrivilegedOperationExecutor.getInstance(nmContext.getConf());\n+    try {\n+      privilegedOperationExecutor.executePrivilegedOperation(null,\n+            privOp, null, null, false, false);\n+    } catch (PrivilegedOperationException e) {\n+      throw new IOException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateYarnSysFS(Context ctx, String user,\n      String appId, String spec) throws IOException {\n    LocalDirsHandlerService dirsHandler \u003d nmContext.getLocalDirsHandler();\n    Path sysFSPath \u003d dirsHandler.getLocalPathForWrite(\n        \"nmPrivate/\" + appId + \"/sysfs/app.json\");\n    File file \u003d new File(sysFSPath.toString());\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    if (file.exists()) {\n      if (!file.delete()) {\n        LOG.warn(\"Unable to delete \" + sysFSPath.toString());\n      }\n    }\n    if (file.createNewFile()) {\n      FileOutputStream output \u003d new FileOutputStream(file);\n      try {\n        output.write(spec.getBytes(\"UTF-8\"));\n      } finally {\n        output.close();\n      }\n    }\n    PrivilegedOperation privOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.SYNC_YARN_SYSFS);\n    String runAsUser \u003d getRunAsUser(user);\n    privOp.appendArgs(runAsUser,\n        user,\n        Integer.toString(PrivilegedOperation.RunAsUserCommand\n        .SYNC_YARN_SYSFS.getValue()),\n        appId, StringUtils.join(PrivilegedOperation\n            .LINUX_FILE_PATH_SEPARATOR, localDirs));\n    privOp.disableFailureLogging();\n    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n        PrivilegedOperationExecutor.getInstance(nmContext.getConf());\n    try {\n      privilegedOperationExecutor.executePrivilegedOperation(null,\n            privOp, null, null, false, false);\n    } catch (PrivilegedOperationException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}