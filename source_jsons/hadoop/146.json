{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramNfs3.java",
  "functionName": "create",
  "functionId": "create___xdr-XDR__info-RpcInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
  "functionStartLine": 920,
  "functionEndLine": 922,
  "numCommitsSeen": 105,
  "timeTaken": 4108,
  "changeHistory": [
    "c9aa74743773c61be938cc1a6ea811ae1404bca2",
    "2ecab65e3e290a1ee192b39ec70868863853543a",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
    "05f35518f19d48890770128727289582cca3457b",
    "5c02d2f6225144772dcb975d3144b057b71d6476",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597",
    "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
    "37f587563a943a827fbff865f5302bac6d202415"
  ],
  "changeHistoryShort": {
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": "Ybodychange",
    "2ecab65e3e290a1ee192b39ec70868863853543a": "Ymultichange(Yparameterchange,Ybodychange)",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": "Ybodychange",
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45": "Ybodychange",
    "05f35518f19d48890770128727289582cca3457b": "Ybodychange",
    "5c02d2f6225144772dcb975d3144b057b71d6476": "Ybodychange",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": "Ymultichange(Yparameterchange,Ybodychange)",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": "Ymultichange(Yparameterchange,Ybodychange)",
    "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4": "Ybodychange",
    "37f587563a943a827fbff865f5302bac6d202415": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6451. NFS should not return NFS3ERR_IO for AccessControlException. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 10:40 AM",
      "commitName": "c9aa74743773c61be938cc1a6ea811ae1404bca2",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "23/07/14 2:22 PM",
      "commitNameOld": "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 11.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,3 @@\n   public CREATE3Response create(XDR xdr, RpcInfo info) {\n-    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n-    SocketAddress remoteAddress \u003d info.remoteAddress();\n-    return create(xdr, securityHandler, remoteAddress);\n+    return create(xdr, getSecurityHandler(info), info.remoteAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, RpcInfo info) {\n    return create(xdr, getSecurityHandler(info), info.remoteAddress());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "2ecab65e3e290a1ee192b39ec70868863853543a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 1:45 PM",
      "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,129 +1,5 @@\n-  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n-    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n-    if (dfsClient \u003d\u003d null) {\n-      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      return response;\n-    }\n-    \n-    CREATE3Request request \u003d null;\n-\n-    try {\n-      request \u003d new CREATE3Request(xdr);\n-    } catch (IOException e) {\n-      LOG.error(\"Invalid CREATE request\");\n-      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n-    }\n-\n-    FileHandle dirHandle \u003d request.getHandle();\n-    String fileName \u003d request.getName();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n-          + \" filename: \" + fileName);\n-    }\n-\n-    int createMode \u003d request.getMode();\n-    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n-        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n-        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n-      LOG.error(\"Setting file size is not supported when creating file: \"\n-          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n-      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n-    }\n-\n-    HdfsDataOutputStream fos \u003d null;\n-    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n-    Nfs3FileAttributes preOpDirAttr \u003d null;\n-    Nfs3FileAttributes postOpObjAttr \u003d null;\n-    FileHandle fileHandle \u003d null;\n-    WccData dirWcc \u003d null;\n-    try {\n-      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n-      if (preOpDirAttr \u003d\u003d null) {\n-        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n-      }\n-      \n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n-            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-                preOpDirAttr));\n-      }\n-\n-      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n-      SetAttr3 setAttr3 \u003d request.getObjAttr();\n-      assert (setAttr3 !\u003d null);\n-      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n-          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n-          : FsPermission.getDefault().applyUMask(umask);\n-          \n-      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n-          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n-          EnumSet.of(CreateFlag.CREATE);\n-      \n-      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n-          flag, false, replication, blockSize, null, bufferSize, null),\n-          statistics);\n-      \n-      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n-          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n-        // Set group if it\u0027s not specified in the request.\n-        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n-          setAttr3.getUpdateFields().add(SetAttrField.GID);\n-          setAttr3.setGid(securityHandler.getGid());\n-        }\n-        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n-      }\n-\n-      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n-      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-          dfsClient, dirFileIdPath, iug);\n-      \n-      // Add open stream\n-      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n-          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n-      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n-      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n-        LOG.warn(\"Can\u0027t add more stream, close it.\"\n-            + \" Future write will become append\");\n-        fos.close();\n-        fos \u003d null;\n-      } else {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n-              + fileHandle.getFileId());\n-        }\n-      }\n-      \n-    } catch (IOException e) {\n-      LOG.error(\"Exception\", e);\n-      if (fos !\u003d null) {\n-        try {\n-          fos.close();\n-        } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n-              + \" filename: \" + fileName, e1);\n-        }\n-      }\n-      if (dirWcc \u003d\u003d null) {\n-        try {\n-          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-              dfsClient, dirFileIdPath, iug);\n-        } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n-              + dirHandle.getFileId(), e1);\n-        }\n-      }\n-      if (e instanceof AccessControlException) {\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n-            postOpObjAttr, dirWcc);\n-      } else {\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n-            postOpObjAttr, dirWcc);\n-      }\n-    }\n-    \n-    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n-        dirWcc);\n+  public CREATE3Response create(XDR xdr, RpcInfo info) {\n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n+    SocketAddress remoteAddress \u003d info.remoteAddress();\n+    return create(xdr, securityHandler, remoteAddress);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr, RpcInfo info) {\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    SocketAddress remoteAddress \u003d info.remoteAddress();\n    return create(xdr, securityHandler, remoteAddress);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]",
            "newValue": "[xdr-XDR, info-RpcInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,129 +1,5 @@\n-  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n-    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n-    if (dfsClient \u003d\u003d null) {\n-      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      return response;\n-    }\n-    \n-    CREATE3Request request \u003d null;\n-\n-    try {\n-      request \u003d new CREATE3Request(xdr);\n-    } catch (IOException e) {\n-      LOG.error(\"Invalid CREATE request\");\n-      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n-    }\n-\n-    FileHandle dirHandle \u003d request.getHandle();\n-    String fileName \u003d request.getName();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n-          + \" filename: \" + fileName);\n-    }\n-\n-    int createMode \u003d request.getMode();\n-    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n-        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n-        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n-      LOG.error(\"Setting file size is not supported when creating file: \"\n-          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n-      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n-    }\n-\n-    HdfsDataOutputStream fos \u003d null;\n-    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n-    Nfs3FileAttributes preOpDirAttr \u003d null;\n-    Nfs3FileAttributes postOpObjAttr \u003d null;\n-    FileHandle fileHandle \u003d null;\n-    WccData dirWcc \u003d null;\n-    try {\n-      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n-      if (preOpDirAttr \u003d\u003d null) {\n-        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n-      }\n-      \n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n-            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-                preOpDirAttr));\n-      }\n-\n-      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n-      SetAttr3 setAttr3 \u003d request.getObjAttr();\n-      assert (setAttr3 !\u003d null);\n-      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n-          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n-          : FsPermission.getDefault().applyUMask(umask);\n-          \n-      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n-          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n-          EnumSet.of(CreateFlag.CREATE);\n-      \n-      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n-          flag, false, replication, blockSize, null, bufferSize, null),\n-          statistics);\n-      \n-      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n-          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n-        // Set group if it\u0027s not specified in the request.\n-        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n-          setAttr3.getUpdateFields().add(SetAttrField.GID);\n-          setAttr3.setGid(securityHandler.getGid());\n-        }\n-        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n-      }\n-\n-      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n-      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-          dfsClient, dirFileIdPath, iug);\n-      \n-      // Add open stream\n-      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n-          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n-      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n-      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n-        LOG.warn(\"Can\u0027t add more stream, close it.\"\n-            + \" Future write will become append\");\n-        fos.close();\n-        fos \u003d null;\n-      } else {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n-              + fileHandle.getFileId());\n-        }\n-      }\n-      \n-    } catch (IOException e) {\n-      LOG.error(\"Exception\", e);\n-      if (fos !\u003d null) {\n-        try {\n-          fos.close();\n-        } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n-              + \" filename: \" + fileName, e1);\n-        }\n-      }\n-      if (dirWcc \u003d\u003d null) {\n-        try {\n-          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-              dfsClient, dirFileIdPath, iug);\n-        } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n-              + dirHandle.getFileId(), e1);\n-        }\n-      }\n-      if (e instanceof AccessControlException) {\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n-            postOpObjAttr, dirWcc);\n-      } else {\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n-            postOpObjAttr, dirWcc);\n-      }\n-    }\n-    \n-    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n-        dirWcc);\n+  public CREATE3Response create(XDR xdr, RpcInfo info) {\n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n+    SocketAddress remoteAddress \u003d info.remoteAddress();\n+    return create(xdr, securityHandler, remoteAddress);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr, RpcInfo info) {\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    SocketAddress remoteAddress \u003d info.remoteAddress();\n    return create(xdr, securityHandler, remoteAddress);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6050. NFS does not handle exceptions correctly in a few places. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 1:49 PM",
      "commitName": "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "13/03/14 2:03 PM",
      "commitNameOld": "842aa2bc9432cc137bda0a5aec9c9eef12b000ce",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 10.99,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,129 @@\n   public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n       \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n       \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n-              + \" filename: \" + fileName);\n+              + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n-              + dirHandle.getFileId());\n+              + dirHandle.getFileId(), e1);\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n      \n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n      \n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5364. Add OpenFileCtx cache. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 1:49 PM",
      "commitName": "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "07/11/13 10:02 AM",
      "commitNameOld": "16c6755554cc5ecd9d4e0ba74b75b10c74bb0ab4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,129 @@\n   public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n-        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n+        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n+        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n+      \n+      // Add open stream\n+      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n+          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n+      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n+      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n+        LOG.warn(\"Can\u0027t add more stream, close it.\"\n+            + \" Future write will become append\");\n+        fos.close();\n+        fos \u003d null;\n+      } else {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n+              + fileHandle.getFileId());\n+        }\n+      }\n+      \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n-    // Add open stream\n-    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n-        + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n-    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n-    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n-          + fileHandle.getFileId());\n-    }\n-    \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n      \n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n      \n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "05f35518f19d48890770128727289582cca3457b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5171. NFS should create input stream for a file and try to share it with multiple read requests. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 4:40 PM",
      "commitName": "05f35518f19d48890770128727289582cca3457b",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "15/10/13 2:23 PM",
      "commitNameOld": "a9befa6f0a8a27b49b1e6483e749661f493f06cf",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 9.1,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,121 @@\n   public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n+    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "5c02d2f6225144772dcb975d3144b057b71d6476": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5281. COMMIT request should not block. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530461 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/13 4:40 PM",
      "commitName": "5c02d2f6225144772dcb975d3144b057b71d6476",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "30/09/13 12:21 PM",
      "commitNameOld": "25cdbdb71a65242b2bc08ca1d61f2c0f7d7ea891",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 8.18,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,121 @@\n   public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n-        + \"/\" + postOpObjAttr.getFileId());\n+        + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 12:29 PM",
      "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,121 +1,121 @@\n-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n+  public CREATE3Response create(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n-          setAttr3.setGid(authSys.getGid());\n+          setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]",
            "newValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,121 +1,121 @@\n-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n+  public CREATE3Response create(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n-          setAttr3.setGid(authSys.getGid());\n+          setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 2:14 PM",
      "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,115 +1,121 @@\n-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n+  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n-    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n-      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n+      \n+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n+            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+                preOpDirAttr));\n+      }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n-      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n-          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n-          .of(CreateFlag.CREATE);\n+      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n+          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n+          EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(authSys.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n-      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n-          iug);\n+      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n-          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-              dirFileIdPath, iug);\n+          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+              dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(authSys.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys]",
            "newValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,115 +1,121 @@\n-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n+  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n-    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n-      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n+      \n+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n+            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+                preOpDirAttr));\n+      }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n-      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n-          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n-          .of(CreateFlag.CREATE);\n+      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n+          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n+          EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(authSys.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n-      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n-          iug);\n+      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n-          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-              dirFileIdPath, iug);\n+          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+              dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(authSys.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5110 Change FSDataOutputStream to HdfsDataOutputStream for opened streams to fix type cast error. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1515624 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/13 2:54 PM",
      "commitName": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "10/07/13 10:01 AM",
      "commitNameOld": "58d75576c4d2a03d4954174bc223ed0334b34fee",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 40.2,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,114 +1,115 @@\n   public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n-    FSDataOutputStream fos \u003d null;\n+    HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     WccAttr preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n           .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n           .of(CreateFlag.CREATE);\n-      fos \u003d new FSDataOutputStream(dfsClient.create(fileIdPath, permission,\n+      \n+      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(authSys.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n           iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n               dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    WccAttr preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n          .of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(authSys.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n          iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n              dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "37f587563a943a827fbff865f5302bac6d202415": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4762 Provide HDFS based NFSv3 and Mountd implementation. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/13 10:31 AM",
      "commitName": "37f587563a943a827fbff865f5302bac6d202415",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,114 @@\n+  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n+    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n+    String uname \u003d authSysCheck(authSys);\n+    DFSClient dfsClient \u003d clientCache.get(uname);\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+    \n+    CREATE3Request request \u003d null;\n+\n+    try {\n+      request \u003d new CREATE3Request(xdr);\n+    } catch (IOException e) {\n+      LOG.error(\"Invalid CREATE request\");\n+      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n+    }\n+\n+    FileHandle dirHandle \u003d request.getHandle();\n+    String fileName \u003d request.getName();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n+          + \" filename: \" + fileName);\n+    }\n+\n+    int createMode \u003d request.getMode();\n+    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n+        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n+      LOG.error(\"Setting file size is not supported when creating file: \"\n+          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n+      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n+    }\n+\n+    FSDataOutputStream fos \u003d null;\n+    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n+    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes postOpObjAttr \u003d null;\n+    FileHandle fileHandle \u003d null;\n+    WccData dirWcc \u003d null;\n+    try {\n+      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      if (preOpDirAttr \u003d\u003d null) {\n+        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n+      }\n+\n+      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n+      SetAttr3 setAttr3 \u003d request.getObjAttr();\n+      assert (setAttr3 !\u003d null);\n+      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n+          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n+          : FsPermission.getDefault().applyUMask(umask);\n+          \n+      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n+          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n+          .of(CreateFlag.CREATE);\n+      fos \u003d new FSDataOutputStream(dfsClient.create(fileIdPath, permission,\n+          flag, false, replication, blockSize, null, bufferSize, null),\n+          statistics);\n+      \n+      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n+          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n+        // Set group if it\u0027s not specified in the request.\n+        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n+          setAttr3.getUpdateFields().add(SetAttrField.GID);\n+          setAttr3.setGid(authSys.getGid());\n+        }\n+        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n+      }\n+\n+      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n+      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n+          iug);\n+    } catch (IOException e) {\n+      LOG.error(\"Exception\", e);\n+      if (fos !\u003d null) {\n+        try {\n+          fos.close();\n+        } catch (IOException e1) {\n+          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n+              + \" filename: \" + fileName);\n+        }\n+      }\n+      if (dirWcc \u003d\u003d null) {\n+        try {\n+          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n+              dirFileIdPath, iug);\n+        } catch (IOException e1) {\n+          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n+              + dirHandle.getFileId());\n+        }\n+      }\n+      if (e instanceof AccessControlException) {\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n+            postOpObjAttr, dirWcc);\n+      } else {\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n+            postOpObjAttr, dirWcc);\n+      }\n+    }\n+    \n+    // Add open stream\n+    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n+        + \"/\" + postOpObjAttr.getFileId());\n+    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n+    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n+          + fileHandle.getFileId());\n+    }\n+    \n+    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n+        dirWcc);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FSDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    WccAttr preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n          .of(CreateFlag.CREATE);\n      fos \u003d new FSDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(authSys.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n          iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n              dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java"
    }
  }
}