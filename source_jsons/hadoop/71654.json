{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryDNS.java",
  "functionName": "doAXFR",
  "functionId": "doAXFR___name-Name__query-Message__tsig-TSIG__qtsig-TSIGRecord__s-Socket",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
  "functionStartLine": 1550,
  "functionEndLine": 1587,
  "numCommitsSeen": 15,
  "timeTaken": 1399,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "f934f62fc71b4776e88f86d4254de0ea12147511"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "f934f62fc71b4776e88f86d4254de0ea12147511": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  byte[] doAXFR(Name name, Message query, TSIG tsig, TSIGRecord qtsig,\n      Socket s) {\n    boolean first \u003d true;\n    Zone zone \u003d findBestZone(name);\n    if (zone \u003d\u003d null) {\n      return errorMessage(query, Rcode.REFUSED);\n    }\n    Iterator it \u003d zone.AXFR();\n    try {\n      DataOutputStream dataOut;\n      dataOut \u003d new DataOutputStream(s.getOutputStream());\n      int id \u003d query.getHeader().getID();\n      while (it.hasNext()) {\n        RRset rrset \u003d (RRset) it.next();\n        Message response \u003d new Message(id);\n        Header header \u003d response.getHeader();\n        header.setFlag(Flags.QR);\n        header.setFlag(Flags.AA);\n        addRRset(rrset.getName(), response, rrset,\n            Section.ANSWER, FLAG_DNSSECOK);\n        if (tsig !\u003d null) {\n          tsig.applyStream(response, qtsig, first);\n          qtsig \u003d response.getTSIG();\n        }\n        first \u003d false;\n        byte[] out \u003d response.toWire();\n        dataOut.writeShort(out.length);\n        dataOut.write(out);\n      }\n    } catch (IOException ex) {\n      System.out.println(\"AXFR failed\");\n    }\n    try {\n      s.close();\n    } catch (IOException ex) {\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
      }
    },
    "f934f62fc71b4776e88f86d4254de0ea12147511": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5218. Initial core change for DNS for YARN. Contributed by Jonathan Maron\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f934f62fc71b4776e88f86d4254de0ea12147511",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,38 @@\n+  byte[] doAXFR(Name name, Message query, TSIG tsig, TSIGRecord qtsig,\n+      Socket s) {\n+    boolean first \u003d true;\n+    Zone zone \u003d findBestZone(name);\n+    if (zone \u003d\u003d null) {\n+      return errorMessage(query, Rcode.REFUSED);\n+    }\n+    Iterator it \u003d zone.AXFR();\n+    try {\n+      DataOutputStream dataOut;\n+      dataOut \u003d new DataOutputStream(s.getOutputStream());\n+      int id \u003d query.getHeader().getID();\n+      while (it.hasNext()) {\n+        RRset rrset \u003d (RRset) it.next();\n+        Message response \u003d new Message(id);\n+        Header header \u003d response.getHeader();\n+        header.setFlag(Flags.QR);\n+        header.setFlag(Flags.AA);\n+        addRRset(rrset.getName(), response, rrset,\n+            Section.ANSWER, FLAG_DNSSECOK);\n+        if (tsig !\u003d null) {\n+          tsig.applyStream(response, qtsig, first);\n+          qtsig \u003d response.getTSIG();\n+        }\n+        first \u003d false;\n+        byte[] out \u003d response.toWire();\n+        dataOut.writeShort(out.length);\n+        dataOut.write(out);\n+      }\n+    } catch (IOException ex) {\n+      System.out.println(\"AXFR failed\");\n+    }\n+    try {\n+      s.close();\n+    } catch (IOException ex) {\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  byte[] doAXFR(Name name, Message query, TSIG tsig, TSIGRecord qtsig,\n      Socket s) {\n    boolean first \u003d true;\n    Zone zone \u003d findBestZone(name);\n    if (zone \u003d\u003d null) {\n      return errorMessage(query, Rcode.REFUSED);\n    }\n    Iterator it \u003d zone.AXFR();\n    try {\n      DataOutputStream dataOut;\n      dataOut \u003d new DataOutputStream(s.getOutputStream());\n      int id \u003d query.getHeader().getID();\n      while (it.hasNext()) {\n        RRset rrset \u003d (RRset) it.next();\n        Message response \u003d new Message(id);\n        Header header \u003d response.getHeader();\n        header.setFlag(Flags.QR);\n        header.setFlag(Flags.AA);\n        addRRset(rrset.getName(), response, rrset,\n            Section.ANSWER, FLAG_DNSSECOK);\n        if (tsig !\u003d null) {\n          tsig.applyStream(response, qtsig, first);\n          qtsig \u003d response.getTSIG();\n        }\n        first \u003d false;\n        byte[] out \u003d response.toWire();\n        dataOut.writeShort(out.length);\n        dataOut.write(out);\n      }\n    } catch (IOException ex) {\n      System.out.println(\"AXFR failed\");\n    }\n    try {\n      s.close();\n    } catch (IOException ex) {\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
    }
  }
}