{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "validateConfigs",
  "functionId": "validateConfigs___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 614,
  "functionEndLine": 646,
  "numCommitsSeen": 192,
  "timeTaken": 4629,
  "changeHistory": [
    "23481ad378de7f8e95eabefbd102825f757714b8",
    "ca5de53bc62b3d2adfc139f8a98cf44b5e05cbf8",
    "334de8d21189109dcd2423d13fab56477980872b",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "bc6777dd5bdcbaef09897b506bc6511ae456033d",
    "07573640147bb4cf3568078acae7b245e9299cf7"
  ],
  "changeHistoryShort": {
    "23481ad378de7f8e95eabefbd102825f757714b8": "Ybodychange",
    "ca5de53bc62b3d2adfc139f8a98cf44b5e05cbf8": "Ybodychange",
    "334de8d21189109dcd2423d13fab56477980872b": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "bc6777dd5bdcbaef09897b506bc6511ae456033d": "Ybodychange",
    "07573640147bb4cf3568078acae7b245e9299cf7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "23481ad378de7f8e95eabefbd102825f757714b8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10212. Create separate configuration for max global AM attempts. Contributed by Bilwa S T\n",
      "commitDate": "09/04/20 11:06 AM",
      "commitName": "23481ad378de7f8e95eabefbd102825f757714b8",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "26/11/19 12:22 PM",
      "commitNameOld": "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 134.91,
      "commitsBetweenForRepo": 450,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,33 @@\n   protected static void validateConfigs(Configuration conf) {\n     // validate max-attempts\n-    int globalMaxAppAttempts \u003d\n-        conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n+    int rmMaxAppAttempts \u003d conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n         YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n+    if (rmMaxAppAttempts \u003c\u003d 0) {\n+      throw new YarnRuntimeException(\"Invalid rm am max attempts configuration\"\n+          + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n+          + \"\u003d\" + rmMaxAppAttempts + \", it should be a positive integer.\");\n+    }\n+    int globalMaxAppAttempts \u003d conf.getInt(\n+        YarnConfiguration.GLOBAL_RM_AM_MAX_ATTEMPTS,\n+        conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n+            YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS));\n     if (globalMaxAppAttempts \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid global max attempts configuration\"\n-          + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n+          + \", \" + YarnConfiguration.GLOBAL_RM_AM_MAX_ATTEMPTS\n           + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n     }\n \n     // validate expireIntvl \u003e\u003d heartbeatIntvl\n     long expireIntvl \u003d conf.getLong(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     long heartbeatIntvl \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (expireIntvl \u003c heartbeatIntvl) {\n       throw new YarnRuntimeException(\"Nodemanager expiry interval should be no\"\n           + \" less than heartbeat interval, \"\n           + YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS + \"\u003d\" + expireIntvl\n           + \", \" + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS + \"\u003d\"\n           + heartbeatIntvl);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected static void validateConfigs(Configuration conf) {\n    // validate max-attempts\n    int rmMaxAppAttempts \u003d conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    if (rmMaxAppAttempts \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid rm am max attempts configuration\"\n          + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n          + \"\u003d\" + rmMaxAppAttempts + \", it should be a positive integer.\");\n    }\n    int globalMaxAppAttempts \u003d conf.getInt(\n        YarnConfiguration.GLOBAL_RM_AM_MAX_ATTEMPTS,\n        conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n            YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS));\n    if (globalMaxAppAttempts \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid global max attempts configuration\"\n          + \", \" + YarnConfiguration.GLOBAL_RM_AM_MAX_ATTEMPTS\n          + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n    }\n\n    // validate expireIntvl \u003e\u003d heartbeatIntvl\n    long expireIntvl \u003d conf.getLong(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    long heartbeatIntvl \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (expireIntvl \u003c heartbeatIntvl) {\n      throw new YarnRuntimeException(\"Nodemanager expiry interval should be no\"\n          + \" less than heartbeat interval, \"\n          + YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS + \"\u003d\" + expireIntvl\n          + \", \" + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS + \"\u003d\"\n          + heartbeatIntvl);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "ca5de53bc62b3d2adfc139f8a98cf44b5e05cbf8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1083. Changed ResourceManager to fail when the expiry interval is less than the configured node-heartbeat interval. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/08/13 4:54 PM",
      "commitName": "ca5de53bc62b3d2adfc139f8a98cf44b5e05cbf8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/08/13 3:59 PM",
      "commitNameOld": "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,25 @@\n   protected static void validateConfigs(Configuration conf) {\n     // validate max-attempts\n     int globalMaxAppAttempts \u003d\n         conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n         YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n     if (globalMaxAppAttempts \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid global max attempts configuration\"\n           + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n           + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n     }\n+\n+    // validate expireIntvl \u003e\u003d heartbeatIntvl\n+    long expireIntvl \u003d conf.getLong(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n+        YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n+    long heartbeatIntvl \u003d\n+        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n+            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n+    if (expireIntvl \u003c heartbeatIntvl) {\n+      throw new YarnRuntimeException(\"Nodemanager expiry interval should be no\"\n+          + \" less than heartbeat interval, \"\n+          + YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS + \"\u003d\" + expireIntvl\n+          + \", \" + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS + \"\u003d\"\n+          + heartbeatIntvl);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected static void validateConfigs(Configuration conf) {\n    // validate max-attempts\n    int globalMaxAppAttempts \u003d\n        conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    if (globalMaxAppAttempts \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid global max attempts configuration\"\n          + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n          + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n    }\n\n    // validate expireIntvl \u003e\u003d heartbeatIntvl\n    long expireIntvl \u003d conf.getLong(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    long heartbeatIntvl \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (expireIntvl \u003c heartbeatIntvl) {\n      throw new YarnRuntimeException(\"Nodemanager expiry interval should be no\"\n          + \" less than heartbeat interval, \"\n          + YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS + \"\u003d\" + expireIntvl\n          + \", \" + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS + \"\u003d\"\n          + heartbeatIntvl);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "334de8d21189109dcd2423d13fab56477980872b": {
      "type": "Ybodychange",
      "commitMessage": " ARN-803. factor out scheduler config validation from the ResourceManager to each scheduler implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493160 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/13 10:07 AM",
      "commitName": "334de8d21189109dcd2423d13fab56477980872b",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/06/13 5:06 PM",
      "commitNameOld": "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,11 @@\n   protected static void validateConfigs(Configuration conf) {\n     // validate max-attempts\n     int globalMaxAppAttempts \u003d\n         conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n         YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n     if (globalMaxAppAttempts \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid global max attempts configuration\"\n           + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n           + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n     }\n-\n-    // validate scheduler memory allocation setting\n-    int minMem \u003d conf.getInt(\n-        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n-    int maxMem \u003d conf.getInt(\n-        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n-\n-    if (minMem \u003c\u003d 0 || minMem \u003e maxMem) {\n-      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n-          + \" allocation configuration\"\n-          + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n-          + \"\u003d\" + minMem\n-          + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n-          + \"\u003d\" + maxMem + \", min and max should be greater than 0\"\n-          + \", max should be no smaller than min.\");\n-    }\n-\n-    // validate scheduler vcores allocation setting\n-    int minVcores \u003d conf.getInt(\n-        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n-    int maxVcores \u003d conf.getInt(\n-        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n-\n-    if (minVcores \u003c\u003d 0 || minVcores \u003e maxVcores) {\n-      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n-          + \" allocation configuration\"\n-          + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n-          + \"\u003d\" + minVcores\n-          + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n-          + \"\u003d\" + maxVcores + \", min and max should be greater than 0\"\n-          + \", max should be no smaller than min.\");\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected static void validateConfigs(Configuration conf) {\n    // validate max-attempts\n    int globalMaxAppAttempts \u003d\n        conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    if (globalMaxAppAttempts \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid global max attempts configuration\"\n          + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n          + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/05/13 9:14 PM",
      "commitNameOld": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   protected static void validateConfigs(Configuration conf) {\n     // validate max-attempts\n     int globalMaxAppAttempts \u003d\n         conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n         YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n     if (globalMaxAppAttempts \u003c\u003d 0) {\n-      throw new YarnException(\"Invalid global max attempts configuration\"\n+      throw new YarnRuntimeException(\"Invalid global max attempts configuration\"\n           + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n           + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n     }\n \n     // validate scheduler memory allocation setting\n     int minMem \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     int maxMem \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n \n     if (minMem \u003c\u003d 0 || minMem \u003e maxMem) {\n-      throw new YarnException(\"Invalid resource scheduler memory\"\n+      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n           + \" allocation configuration\"\n           + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n           + \"\u003d\" + minMem\n           + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n           + \"\u003d\" + maxMem + \", min and max should be greater than 0\"\n           + \", max should be no smaller than min.\");\n     }\n \n     // validate scheduler vcores allocation setting\n     int minVcores \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n     int maxVcores \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n \n     if (minVcores \u003c\u003d 0 || minVcores \u003e maxVcores) {\n-      throw new YarnException(\"Invalid resource scheduler vcores\"\n+      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n           + \" allocation configuration\"\n           + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n           + \"\u003d\" + minVcores\n           + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n           + \"\u003d\" + maxVcores + \", min and max should be greater than 0\"\n           + \", max should be no smaller than min.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected static void validateConfigs(Configuration conf) {\n    // validate max-attempts\n    int globalMaxAppAttempts \u003d\n        conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    if (globalMaxAppAttempts \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid global max attempts configuration\"\n          + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n          + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n    }\n\n    // validate scheduler memory allocation setting\n    int minMem \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    int maxMem \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n\n    if (minMem \u003c\u003d 0 || minMem \u003e maxMem) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n          + \" allocation configuration\"\n          + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n          + \"\u003d\" + minMem\n          + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n          + \"\u003d\" + maxMem + \", min and max should be greater than 0\"\n          + \", max should be no smaller than min.\");\n    }\n\n    // validate scheduler vcores allocation setting\n    int minVcores \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    int maxVcores \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n\n    if (minVcores \u003c\u003d 0 || minVcores \u003e maxVcores) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n          + \" allocation configuration\"\n          + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n          + \"\u003d\" + minVcores\n          + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n          + \"\u003d\" + maxVcores + \", min and max should be greater than 0\"\n          + \", max should be no smaller than min.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "bc6777dd5bdcbaef09897b506bc6511ae456033d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-193. Scheduler.normalizeRequest does not account for allocation requests that exceed maximumAllocation limits (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465067 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/04/13 10:45 AM",
      "commitName": "bc6777dd5bdcbaef09897b506bc6511ae456033d",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "25/03/13 2:11 PM",
      "commitNameOld": "07573640147bb4cf3568078acae7b245e9299cf7",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.86,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,47 @@\n   protected static void validateConfigs(Configuration conf) {\n-    int globalMaxAppAttempts \u003d conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n+    // validate max-attempts\n+    int globalMaxAppAttempts \u003d\n+        conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n         YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n     if (globalMaxAppAttempts \u003c\u003d 0) {\n-      throw new YarnException(\n-          \"The global max attempts should be a positive integer.\");\n+      throw new YarnException(\"Invalid global max attempts configuration\"\n+          + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n+          + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n+    }\n+\n+    // validate scheduler memory allocation setting\n+    int minMem \u003d conf.getInt(\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n+    int maxMem \u003d conf.getInt(\n+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n+\n+    if (minMem \u003c\u003d 0 || minMem \u003e maxMem) {\n+      throw new YarnException(\"Invalid resource scheduler memory\"\n+          + \" allocation configuration\"\n+          + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n+          + \"\u003d\" + minMem\n+          + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n+          + \"\u003d\" + maxMem + \", min and max should be greater than 0\"\n+          + \", max should be no smaller than min.\");\n+    }\n+\n+    // validate scheduler vcores allocation setting\n+    int minVcores \u003d conf.getInt(\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n+    int maxVcores \u003d conf.getInt(\n+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n+\n+    if (minVcores \u003c\u003d 0 || minVcores \u003e maxVcores) {\n+      throw new YarnException(\"Invalid resource scheduler vcores\"\n+          + \" allocation configuration\"\n+          + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n+          + \"\u003d\" + minVcores\n+          + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n+          + \"\u003d\" + maxVcores + \", min and max should be greater than 0\"\n+          + \", max should be no smaller than min.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected static void validateConfigs(Configuration conf) {\n    // validate max-attempts\n    int globalMaxAppAttempts \u003d\n        conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    if (globalMaxAppAttempts \u003c\u003d 0) {\n      throw new YarnException(\"Invalid global max attempts configuration\"\n          + \", \" + YarnConfiguration.RM_AM_MAX_ATTEMPTS\n          + \"\u003d\" + globalMaxAppAttempts + \", it should be a positive integer.\");\n    }\n\n    // validate scheduler memory allocation setting\n    int minMem \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    int maxMem \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n\n    if (minMem \u003c\u003d 0 || minMem \u003e maxMem) {\n      throw new YarnException(\"Invalid resource scheduler memory\"\n          + \" allocation configuration\"\n          + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n          + \"\u003d\" + minMem\n          + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n          + \"\u003d\" + maxMem + \", min and max should be greater than 0\"\n          + \", max should be no smaller than min.\");\n    }\n\n    // validate scheduler vcores allocation setting\n    int minVcores \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    int maxVcores \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n\n    if (minVcores \u003c\u003d 0 || minVcores \u003e maxVcores) {\n      throw new YarnException(\"Invalid resource scheduler vcores\"\n          + \" allocation configuration\"\n          + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n          + \"\u003d\" + minVcores\n          + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n          + \"\u003d\" + maxVcores + \", min and max should be greater than 0\"\n          + \", max should be no smaller than min.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "07573640147bb4cf3568078acae7b245e9299cf7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-378. Fix RM to make the AM max attempts/retries to be configurable per application by clients. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460895 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 2:11 PM",
      "commitName": "07573640147bb4cf3568078acae7b245e9299cf7",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,8 @@\n+  protected static void validateConfigs(Configuration conf) {\n+    int globalMaxAppAttempts \u003d conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n+        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n+    if (globalMaxAppAttempts \u003c\u003d 0) {\n+      throw new YarnException(\n+          \"The global max attempts should be a positive integer.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected static void validateConfigs(Configuration conf) {\n    int globalMaxAppAttempts \u003d conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    if (globalMaxAppAttempts \u003c\u003d 0) {\n      throw new YarnException(\n          \"The global max attempts should be a positive integer.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}