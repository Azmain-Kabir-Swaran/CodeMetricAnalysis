{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyFieldBasedComparator.java",
  "functionName": "compare",
  "functionId": "compare___b1-byte[]__s1-int__l1-int__b2-byte[]__s2-int__l2-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
  "functionStartLine": 78,
  "functionEndLine": 109,
  "numCommitsSeen": 4,
  "timeTaken": 4309,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int compare(byte[] b1, int s1, int l1,\n      byte[] b2, int s2, int l2) {\n    int n1 \u003d WritableUtils.decodeVIntSize(b1[s1]);\n    int n2 \u003d WritableUtils.decodeVIntSize(b2[s2]);\n    List \u003cKeyDescription\u003e allKeySpecs \u003d keyFieldHelper.keySpecs();\n\n    if (allKeySpecs.size() \u003d\u003d 0) {\n      return compareBytes(b1, s1 + n1, l1 - n1, b2, s2 + n2, l2 - n2);\n    }\n    \n    int []lengthIndicesFirst \u003d \n      keyFieldHelper.getWordLengths(b1, s1 + n1, s1 + l1);\n    int []lengthIndicesSecond \u003d \n      keyFieldHelper.getWordLengths(b2, s2 + n2, s2 + l2);\n    \n    for (KeyDescription keySpec : allKeySpecs) {\n      int startCharFirst \u003d keyFieldHelper.getStartOffset(b1, s1 + n1, s1 + l1,\n        lengthIndicesFirst, keySpec);\n      int endCharFirst \u003d keyFieldHelper.getEndOffset(b1, s1 + n1, s1 + l1, \n        lengthIndicesFirst, keySpec);\n      int startCharSecond \u003d keyFieldHelper.getStartOffset(b2, s2 + n2, s2 + l2,\n        lengthIndicesSecond, keySpec);\n      int endCharSecond \u003d keyFieldHelper.getEndOffset(b2, s2 + n2, s2 + l2, \n        lengthIndicesSecond, keySpec);\n      int result;\n      if ((result \u003d compareByteSequence(b1, startCharFirst, endCharFirst, b2, \n          startCharSecond, endCharSecond, keySpec)) !\u003d 0) {\n        return result;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int compare(byte[] b1, int s1, int l1,\n      byte[] b2, int s2, int l2) {\n    int n1 \u003d WritableUtils.decodeVIntSize(b1[s1]);\n    int n2 \u003d WritableUtils.decodeVIntSize(b2[s2]);\n    List \u003cKeyDescription\u003e allKeySpecs \u003d keyFieldHelper.keySpecs();\n\n    if (allKeySpecs.size() \u003d\u003d 0) {\n      return compareBytes(b1, s1 + n1, l1 - n1, b2, s2 + n2, l2 - n2);\n    }\n    \n    int []lengthIndicesFirst \u003d \n      keyFieldHelper.getWordLengths(b1, s1 + n1, s1 + l1);\n    int []lengthIndicesSecond \u003d \n      keyFieldHelper.getWordLengths(b2, s2 + n2, s2 + l2);\n    \n    for (KeyDescription keySpec : allKeySpecs) {\n      int startCharFirst \u003d keyFieldHelper.getStartOffset(b1, s1 + n1, s1 + l1,\n        lengthIndicesFirst, keySpec);\n      int endCharFirst \u003d keyFieldHelper.getEndOffset(b1, s1 + n1, s1 + l1, \n        lengthIndicesFirst, keySpec);\n      int startCharSecond \u003d keyFieldHelper.getStartOffset(b2, s2 + n2, s2 + l2,\n        lengthIndicesSecond, keySpec);\n      int endCharSecond \u003d keyFieldHelper.getEndOffset(b2, s2 + n2, s2 + l2, \n        lengthIndicesSecond, keySpec);\n      int result;\n      if ((result \u003d compareByteSequence(b1, startCharFirst, endCharFirst, b2, \n          startCharSecond, endCharSecond, keySpec)) !\u003d 0) {\n        return result;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,32 @@\n+  public int compare(byte[] b1, int s1, int l1,\n+      byte[] b2, int s2, int l2) {\n+    int n1 \u003d WritableUtils.decodeVIntSize(b1[s1]);\n+    int n2 \u003d WritableUtils.decodeVIntSize(b2[s2]);\n+    List \u003cKeyDescription\u003e allKeySpecs \u003d keyFieldHelper.keySpecs();\n+\n+    if (allKeySpecs.size() \u003d\u003d 0) {\n+      return compareBytes(b1, s1 + n1, l1 - n1, b2, s2 + n2, l2 - n2);\n+    }\n+    \n+    int []lengthIndicesFirst \u003d \n+      keyFieldHelper.getWordLengths(b1, s1 + n1, s1 + l1);\n+    int []lengthIndicesSecond \u003d \n+      keyFieldHelper.getWordLengths(b2, s2 + n2, s2 + l2);\n+    \n+    for (KeyDescription keySpec : allKeySpecs) {\n+      int startCharFirst \u003d keyFieldHelper.getStartOffset(b1, s1 + n1, s1 + l1,\n+        lengthIndicesFirst, keySpec);\n+      int endCharFirst \u003d keyFieldHelper.getEndOffset(b1, s1 + n1, s1 + l1, \n+        lengthIndicesFirst, keySpec);\n+      int startCharSecond \u003d keyFieldHelper.getStartOffset(b2, s2 + n2, s2 + l2,\n+        lengthIndicesSecond, keySpec);\n+      int endCharSecond \u003d keyFieldHelper.getEndOffset(b2, s2 + n2, s2 + l2, \n+        lengthIndicesSecond, keySpec);\n+      int result;\n+      if ((result \u003d compareByteSequence(b1, startCharFirst, endCharFirst, b2, \n+          startCharSecond, endCharSecond, keySpec)) !\u003d 0) {\n+        return result;\n+      }\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int compare(byte[] b1, int s1, int l1,\n      byte[] b2, int s2, int l2) {\n    int n1 \u003d WritableUtils.decodeVIntSize(b1[s1]);\n    int n2 \u003d WritableUtils.decodeVIntSize(b2[s2]);\n    List \u003cKeyDescription\u003e allKeySpecs \u003d keyFieldHelper.keySpecs();\n\n    if (allKeySpecs.size() \u003d\u003d 0) {\n      return compareBytes(b1, s1 + n1, l1 - n1, b2, s2 + n2, l2 - n2);\n    }\n    \n    int []lengthIndicesFirst \u003d \n      keyFieldHelper.getWordLengths(b1, s1 + n1, s1 + l1);\n    int []lengthIndicesSecond \u003d \n      keyFieldHelper.getWordLengths(b2, s2 + n2, s2 + l2);\n    \n    for (KeyDescription keySpec : allKeySpecs) {\n      int startCharFirst \u003d keyFieldHelper.getStartOffset(b1, s1 + n1, s1 + l1,\n        lengthIndicesFirst, keySpec);\n      int endCharFirst \u003d keyFieldHelper.getEndOffset(b1, s1 + n1, s1 + l1, \n        lengthIndicesFirst, keySpec);\n      int startCharSecond \u003d keyFieldHelper.getStartOffset(b2, s2 + n2, s2 + l2,\n        lengthIndicesSecond, keySpec);\n      int endCharSecond \u003d keyFieldHelper.getEndOffset(b2, s2 + n2, s2 + l2, \n        lengthIndicesSecond, keySpec);\n      int result;\n      if ((result \u003d compareByteSequence(b1, startCharFirst, endCharFirst, b2, \n          startCharSecond, endCharSecond, keySpec)) !\u003d 0) {\n        return result;\n      }\n    }\n    return 0;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java"
    }
  }
}