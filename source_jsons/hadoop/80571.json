{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "build",
  "functionId": "build",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 4382,
  "functionEndLine": 4401,
  "numCommitsSeen": 145,
  "timeTaken": 5024,
  "changeHistory": [
    "5e2ce370a322a46b496541ccd17443197fcfeb5a",
    "f365957c6326f88734bc0a5d01cfb7eac713db20",
    "9586b0e24fce29c278134658e68b8c47cd9d8c51",
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52",
    "332a997e10cca88d9ab3aa8252102366b628eaec"
  ],
  "changeHistoryShort": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Ymultichange(Yreturntypechange,Ybodychange)",
    "9586b0e24fce29c278134658e68b8c47cd9d8c51": "Ybodychange",
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52": "Ymultichange(Ymovefromfile,Ybodychange)",
    "332a997e10cca88d9ab3aa8252102366b628eaec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
      "commitDate": "21/01/20 2:31 PM",
      "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "15/01/20 5:22 PM",
      "commitNameOld": "d7c4f8ab21c56a52afcfbd0a56d9120e61376d0c",
      "commitAuthorOld": "Chao Sun",
      "daysBetweenCommits": 5.88,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,15 @@\n     public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n       Optional\u003cPath\u003e optionalPath \u003d getOptionalPath();\n+      OpenFileParameters parameters \u003d new OpenFileParameters()\n+          .withMandatoryKeys(getMandatoryKeys())\n+          .withOptions(getOptions())\n+          .withBufferSize(getBufferSize())\n+          .withStatus(super.getStatus());  // explicit to avoid IDE warnings\n       if(optionalPath.isPresent()) {\n         return getFS().openFileWithOptions(optionalPath.get(),\n-            getMandatoryKeys(), getOptions(), getBufferSize());\n+            parameters);\n       } else {\n         return getFS().openFileWithOptions(getPathHandle(),\n-            getMandatoryKeys(), getOptions(), getBufferSize());\n+            parameters);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n      Optional\u003cPath\u003e optionalPath \u003d getOptionalPath();\n      OpenFileParameters parameters \u003d new OpenFileParameters()\n          .withMandatoryKeys(getMandatoryKeys())\n          .withOptions(getOptions())\n          .withBufferSize(getBufferSize())\n          .withStatus(super.getStatus());  // explicit to avoid IDE warnings\n      if(optionalPath.isPresent()) {\n        return getFS().openFileWithOptions(optionalPath.get(),\n            parameters);\n      } else {\n        return getFS().openFileWithOptions(getPathHandle(),\n            parameters);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
          "commitDate": "05/02/19 3:51 AM",
          "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/12/18 9:54 PM",
          "commitNameOld": "788e7473a404fa074b3af522416ee3d2fae865a0",
          "commitAuthorOld": "Surendra Singh Lilhore",
          "daysBetweenCommits": 50.25,
          "commitsBetweenForRepo": 336,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,10 @@\n-    public FSDataOutputStream build() throws IOException {\n-      if (getFlags().contains(CreateFlag.CREATE) ||\n-          getFlags().contains(CreateFlag.OVERWRITE)) {\n-        if (isRecursive()) {\n-          return getFS().create(getPath(), getPermission(), getFlags(),\n-              getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n-              getChecksumOpt());\n-        } else {\n-          return getFS().createNonRecursive(getPath(), getPermission(),\n-              getFlags(), getBufferSize(), getReplication(), getBlockSize(),\n-              getProgress());\n-        }\n-      } else if (getFlags().contains(CreateFlag.APPEND)) {\n-        return getFS().append(getPath(), getBufferSize(), getProgress());\n+    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n+      Optional\u003cPath\u003e optionalPath \u003d getOptionalPath();\n+      if(optionalPath.isPresent()) {\n+        return getFS().openFileWithOptions(optionalPath.get(),\n+            getMandatoryKeys(), getOptions(), getBufferSize());\n+      } else {\n+        return getFS().openFileWithOptions(getPathHandle(),\n+            getMandatoryKeys(), getOptions(), getBufferSize());\n       }\n-      throw new IOException(\"Must specify either create, overwrite or append\");\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n      Optional\u003cPath\u003e optionalPath \u003d getOptionalPath();\n      if(optionalPath.isPresent()) {\n        return getFS().openFileWithOptions(optionalPath.get(),\n            getMandatoryKeys(), getOptions(), getBufferSize());\n      } else {\n        return getFS().openFileWithOptions(getPathHandle(),\n            getMandatoryKeys(), getOptions(), getBufferSize());\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
          "extendedDetails": {
            "oldValue": "FSDataOutputStream",
            "newValue": "CompletableFuture\u003cFSDataInputStream\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
          "commitDate": "05/02/19 3:51 AM",
          "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/12/18 9:54 PM",
          "commitNameOld": "788e7473a404fa074b3af522416ee3d2fae865a0",
          "commitAuthorOld": "Surendra Singh Lilhore",
          "daysBetweenCommits": 50.25,
          "commitsBetweenForRepo": 336,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,10 @@\n-    public FSDataOutputStream build() throws IOException {\n-      if (getFlags().contains(CreateFlag.CREATE) ||\n-          getFlags().contains(CreateFlag.OVERWRITE)) {\n-        if (isRecursive()) {\n-          return getFS().create(getPath(), getPermission(), getFlags(),\n-              getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n-              getChecksumOpt());\n-        } else {\n-          return getFS().createNonRecursive(getPath(), getPermission(),\n-              getFlags(), getBufferSize(), getReplication(), getBlockSize(),\n-              getProgress());\n-        }\n-      } else if (getFlags().contains(CreateFlag.APPEND)) {\n-        return getFS().append(getPath(), getBufferSize(), getProgress());\n+    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n+      Optional\u003cPath\u003e optionalPath \u003d getOptionalPath();\n+      if(optionalPath.isPresent()) {\n+        return getFS().openFileWithOptions(optionalPath.get(),\n+            getMandatoryKeys(), getOptions(), getBufferSize());\n+      } else {\n+        return getFS().openFileWithOptions(getPathHandle(),\n+            getMandatoryKeys(), getOptions(), getBufferSize());\n       }\n-      throw new IOException(\"Must specify either create, overwrite or append\");\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public CompletableFuture\u003cFSDataInputStream\u003e build() throws IOException {\n      Optional\u003cPath\u003e optionalPath \u003d getOptionalPath();\n      if(optionalPath.isPresent()) {\n        return getFS().openFileWithOptions(optionalPath.get(),\n            getMandatoryKeys(), getOptions(), getBufferSize());\n      } else {\n        return getFS().openFileWithOptions(getPathHandle(),\n            getMandatoryKeys(), getOptions(), getBufferSize());\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "9586b0e24fce29c278134658e68b8c47cd9d8c51": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14397. Pull up the builder pattern to FileSystem and add AbstractContractCreateTest for it. (Lei (Eddy) Xu)\n",
      "commitDate": "31/07/17 8:12 PM",
      "commitName": "9586b0e24fce29c278134658e68b8c47cd9d8c51",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "16/06/17 5:24 PM",
      "commitNameOld": "6460df21a09a7fcc29eceb8dc3859d6298da6882",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 45.12,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,17 @@\n     public FSDataOutputStream build() throws IOException {\n-      return getFS().create(getPath(), getPermission(), getFlags(),\n-          getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n-          getChecksumOpt());\n+      if (getFlags().contains(CreateFlag.CREATE) ||\n+          getFlags().contains(CreateFlag.OVERWRITE)) {\n+        if (isRecursive()) {\n+          return getFS().create(getPath(), getPermission(), getFlags(),\n+              getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n+              getChecksumOpt());\n+        } else {\n+          return getFS().createNonRecursive(getPath(), getPermission(),\n+              getFlags(), getBufferSize(), getReplication(), getBlockSize(),\n+              getProgress());\n+        }\n+      } else if (getFlags().contains(CreateFlag.APPEND)) {\n+        return getFS().append(getPath(), getBufferSize(), getProgress());\n+      }\n+      throw new IOException(\"Must specify either create, overwrite or append\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public FSDataOutputStream build() throws IOException {\n      if (getFlags().contains(CreateFlag.CREATE) ||\n          getFlags().contains(CreateFlag.OVERWRITE)) {\n        if (isRecursive()) {\n          return getFS().create(getPath(), getPermission(), getFlags(),\n              getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n              getChecksumOpt());\n        } else {\n          return getFS().createNonRecursive(getPath(), getPermission(),\n              getFlags(), getBufferSize(), getReplication(), getBlockSize(),\n              getProgress());\n        }\n      } else if (getFlags().contains(CreateFlag.APPEND)) {\n        return getFS().append(getPath(), getBufferSize(), getProgress());\n      }\n      throw new IOException(\"Must specify either create, overwrite or append\");\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-14394. Provide Builder pattern for DistributedFileSystem.create. (lei)\n",
      "commitDate": "15/06/17 10:59 AM",
      "commitName": "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-14394. Provide Builder pattern for DistributedFileSystem.create. (lei)\n",
          "commitDate": "15/06/17 10:59 AM",
          "commitName": "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "15/06/17 10:40 AM",
          "commitNameOld": "ef8edab930338646551cbe3c7e7cf954e21c0f9a",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,5 @@\n-  public FSDataOutputStream build() throws IOException {\n-    return fs.create(getPath(), getPermission(), getFlags(), getBufferSize(),\n-        getReplication(), getBlockSize(), getProgress(), getChecksumOpt());\n-  }\n\\ No newline at end of file\n+    public FSDataOutputStream build() throws IOException {\n+      return getFS().create(getPath(), getPermission(), getFlags(),\n+          getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n+          getChecksumOpt());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public FSDataOutputStream build() throws IOException {\n      return getFS().create(getPath(), getPermission(), getFlags(),\n          getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n          getChecksumOpt());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSDataOutputStreamBuilder.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
            "oldMethodName": "build",
            "newMethodName": "build"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14394. Provide Builder pattern for DistributedFileSystem.create. (lei)\n",
          "commitDate": "15/06/17 10:59 AM",
          "commitName": "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "15/06/17 10:40 AM",
          "commitNameOld": "ef8edab930338646551cbe3c7e7cf954e21c0f9a",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,5 @@\n-  public FSDataOutputStream build() throws IOException {\n-    return fs.create(getPath(), getPermission(), getFlags(), getBufferSize(),\n-        getReplication(), getBlockSize(), getProgress(), getChecksumOpt());\n-  }\n\\ No newline at end of file\n+    public FSDataOutputStream build() throws IOException {\n+      return getFS().create(getPath(), getPermission(), getFlags(),\n+          getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n+          getChecksumOpt());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public FSDataOutputStream build() throws IOException {\n      return getFS().create(getPath(), getPermission(), getFlags(),\n          getBufferSize(), getReplication(), getBlockSize(), getProgress(),\n          getChecksumOpt());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "332a997e10cca88d9ab3aa8252102366b628eaec": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11170. Add builder-based create API to FileSystem. Contributed by SammiChen and Wei Zhou.\n",
      "commitDate": "24/03/17 12:56 PM",
      "commitName": "332a997e10cca88d9ab3aa8252102366b628eaec",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,4 @@\n+  public FSDataOutputStream build() throws IOException {\n+    return fs.create(getPath(), getPermission(), getFlags(), getBufferSize(),\n+        getReplication(), getBlockSize(), getProgress(), getChecksumOpt());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream build() throws IOException {\n    return fs.create(getPath(), getPermission(), getFlags(), getBufferSize(),\n        getReplication(), getBlockSize(), getProgress(), getChecksumOpt());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSDataOutputStreamBuilder.java"
    }
  }
}