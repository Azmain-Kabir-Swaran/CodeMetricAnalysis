{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationService.java",
  "functionName": "initApp",
  "functionId": "initApp___appId-ApplicationId(modifiers-final)__user-String__credentials-Credentials__appAcls-Map__ApplicationAccessType,String____logAggregationContext-LogAggregationContext__recoveredLogInitedTime-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
  "functionStartLine": 217,
  "functionEndLine": 233,
  "numCommitsSeen": 116,
  "timeTaken": 11458,
  "changeHistory": [
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
    "e07519b8dbb96d73c48e910a4de12563c5c2f8aa",
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
    "34cdcaad71cad76c0874a4e5266b4074009d2ffc",
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "967b62f5d23e5e3b3573caab5cf03d089e5bcc11",
    "5889f54ad1d144add94a0295e4a8ddb3ccd282df",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1cf60106758c482991f08caa136446885d5f8f27",
    "25cceb65ceb3aafbb078d4a112169ab5dca7f200",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": "Ybodychange",
    "e07519b8dbb96d73c48e910a4de12563c5c2f8aa": "Ymultichange(Yparameterchange,Ybodychange)",
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": "Ymultichange(Yparameterchange,Ybodychange)",
    "34cdcaad71cad76c0874a4e5266b4074009d2ffc": "Ymultichange(Yparameterchange,Ybodychange)",
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "967b62f5d23e5e3b3573caab5cf03d089e5bcc11": "Ybodychange",
    "5889f54ad1d144add94a0295e4a8ddb3ccd282df": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1cf60106758c482991f08caa136446885d5f8f27": "Ybodychange",
    "25cceb65ceb3aafbb078d4a112169ab5dca7f200": "Ybodychange",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "24/08/17 1:36 PM",
      "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
      "commitAuthor": "Junping Du",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 2.52,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n       LogAggregationContext logAggregationContext,\n       long recoveredLogInitedTime) {\n     ApplicationEvent eventResponse;\n     try {\n-      verifyAndCreateRemoteLogDir(getConfig());\n       initAppAggregator(appId, user, credentials, appAcls,\n           logAggregationContext, recoveredLogInitedTime);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnRuntimeException e) {\n       LOG.warn(\"Application failed to init aggregation\", e);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext,\n      long recoveredLogInitedTime) {\n    ApplicationEvent eventResponse;\n    try {\n      initAppAggregator(appId, user, credentials, appAcls,\n          logAggregationContext, recoveredLogInitedTime);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation\", e);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "e07519b8dbb96d73c48e910a4de12563c5c2f8aa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4766. NM should not aggregate logs older than the retention policy (haibochen via rkanter)\n",
      "commitDate": "25/05/16 10:25 AM",
      "commitName": "e07519b8dbb96d73c48e910a4de12563c5c2f8aa",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4766. NM should not aggregate logs older than the retention policy (haibochen via rkanter)\n",
          "commitDate": "25/05/16 10:25 AM",
          "commitName": "e07519b8dbb96d73c48e910a4de12563c5c2f8aa",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "22/05/16 4:04 PM",
          "commitNameOld": "6161d9ba5230f553db5f5490dce67e2afd1e29ca",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n-      LogAggregationContext logAggregationContext) {\n+      LogAggregationContext logAggregationContext,\n+      long recoveredLogInitedTime) {\n     ApplicationEvent eventResponse;\n     try {\n       verifyAndCreateRemoteLogDir(getConfig());\n       initAppAggregator(appId, user, credentials, appAcls,\n-          logAggregationContext);\n+          logAggregationContext, recoveredLogInitedTime);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnRuntimeException e) {\n       LOG.warn(\"Application failed to init aggregation\", e);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext,\n      long recoveredLogInitedTime) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, appAcls,\n          logAggregationContext, recoveredLogInitedTime);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation\", e);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId(modifiers-final), user-String, credentials-Credentials, appAcls-Map\u003cApplicationAccessType,String\u003e, logAggregationContext-LogAggregationContext]",
            "newValue": "[appId-ApplicationId(modifiers-final), user-String, credentials-Credentials, appAcls-Map\u003cApplicationAccessType,String\u003e, logAggregationContext-LogAggregationContext, recoveredLogInitedTime-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4766. NM should not aggregate logs older than the retention policy (haibochen via rkanter)\n",
          "commitDate": "25/05/16 10:25 AM",
          "commitName": "e07519b8dbb96d73c48e910a4de12563c5c2f8aa",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "22/05/16 4:04 PM",
          "commitNameOld": "6161d9ba5230f553db5f5490dce67e2afd1e29ca",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n-      LogAggregationContext logAggregationContext) {\n+      LogAggregationContext logAggregationContext,\n+      long recoveredLogInitedTime) {\n     ApplicationEvent eventResponse;\n     try {\n       verifyAndCreateRemoteLogDir(getConfig());\n       initAppAggregator(appId, user, credentials, appAcls,\n-          logAggregationContext);\n+          logAggregationContext, recoveredLogInitedTime);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnRuntimeException e) {\n       LOG.warn(\"Application failed to init aggregation\", e);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext,\n      long recoveredLogInitedTime) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, appAcls,\n          logAggregationContext, recoveredLogInitedTime);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation\", e);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-221. NM should provide a way for AM to tell it not to aggregate\nlogs. Contributed by Ming Ma\n",
      "commitDate": "22/08/15 4:25 PM",
      "commitName": "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-221. NM should provide a way for AM to tell it not to aggregate\nlogs. Contributed by Ming Ma\n",
          "commitDate": "22/08/15 4:25 PM",
          "commitName": "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
          "commitAuthor": "Xuan",
          "commitDateOld": "08/05/15 3:10 PM",
          "commitNameOld": "088156de43abb07bec590a3fcd1a5af2feb02cd2",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 106.05,
          "commitsBetweenForRepo": 708,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,17 @@\n   private void initApp(final ApplicationId appId, String user,\n-      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n-      Map\u003cApplicationAccessType, String\u003e appAcls,\n+      Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n       LogAggregationContext logAggregationContext) {\n     ApplicationEvent eventResponse;\n     try {\n       verifyAndCreateRemoteLogDir(getConfig());\n-      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls,\n+      initAppAggregator(appId, user, credentials, appAcls,\n           logAggregationContext);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnRuntimeException e) {\n       LOG.warn(\"Application failed to init aggregation\", e);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, appAcls,\n          logAggregationContext);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation\", e);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId(modifiers-final), user-String, credentials-Credentials, logRetentionPolicy-ContainerLogsRetentionPolicy, appAcls-Map\u003cApplicationAccessType,String\u003e, logAggregationContext-LogAggregationContext]",
            "newValue": "[appId-ApplicationId(modifiers-final), user-String, credentials-Credentials, appAcls-Map\u003cApplicationAccessType,String\u003e, logAggregationContext-LogAggregationContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-221. NM should provide a way for AM to tell it not to aggregate\nlogs. Contributed by Ming Ma\n",
          "commitDate": "22/08/15 4:25 PM",
          "commitName": "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
          "commitAuthor": "Xuan",
          "commitDateOld": "08/05/15 3:10 PM",
          "commitNameOld": "088156de43abb07bec590a3fcd1a5af2feb02cd2",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 106.05,
          "commitsBetweenForRepo": 708,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,17 @@\n   private void initApp(final ApplicationId appId, String user,\n-      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n-      Map\u003cApplicationAccessType, String\u003e appAcls,\n+      Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n       LogAggregationContext logAggregationContext) {\n     ApplicationEvent eventResponse;\n     try {\n       verifyAndCreateRemoteLogDir(getConfig());\n-      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls,\n+      initAppAggregator(appId, user, credentials, appAcls,\n           logAggregationContext);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnRuntimeException e) {\n       LOG.warn(\"Application failed to init aggregation\", e);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, appAcls,\n          logAggregationContext);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation\", e);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "34cdcaad71cad76c0874a4e5266b4074009d2ffc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2468. Enhanced NodeManager to support log handling APIs (YARN-2569) for use by long running services. Contributed by Xuan Gong.\n",
      "commitDate": "03/10/14 12:15 PM",
      "commitName": "34cdcaad71cad76c0874a4e5266b4074009d2ffc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2468. Enhanced NodeManager to support log handling APIs (YARN-2569) for use by long running services. Contributed by Xuan Gong.\n",
          "commitDate": "03/10/14 12:15 PM",
          "commitName": "34cdcaad71cad76c0874a4e5266b4074009d2ffc",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/08/14 3:56 AM",
          "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 52.35,
          "commitsBetweenForRepo": 563,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n-      Map\u003cApplicationAccessType, String\u003e appAcls) {\n+      Map\u003cApplicationAccessType, String\u003e appAcls,\n+      LogAggregationContext logAggregationContext) {\n     ApplicationEvent eventResponse;\n     try {\n       verifyAndCreateRemoteLogDir(getConfig());\n-      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n+      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls,\n+          logAggregationContext);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnRuntimeException e) {\n       LOG.warn(\"Application failed to init aggregation\", e);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls,\n          logAggregationContext);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation\", e);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId(modifiers-final), user-String, credentials-Credentials, logRetentionPolicy-ContainerLogsRetentionPolicy, appAcls-Map\u003cApplicationAccessType,String\u003e]",
            "newValue": "[appId-ApplicationId(modifiers-final), user-String, credentials-Credentials, logRetentionPolicy-ContainerLogsRetentionPolicy, appAcls-Map\u003cApplicationAccessType,String\u003e, logAggregationContext-LogAggregationContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2468. Enhanced NodeManager to support log handling APIs (YARN-2569) for use by long running services. Contributed by Xuan Gong.\n",
          "commitDate": "03/10/14 12:15 PM",
          "commitName": "34cdcaad71cad76c0874a4e5266b4074009d2ffc",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/08/14 3:56 AM",
          "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 52.35,
          "commitsBetweenForRepo": 563,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n-      Map\u003cApplicationAccessType, String\u003e appAcls) {\n+      Map\u003cApplicationAccessType, String\u003e appAcls,\n+      LogAggregationContext logAggregationContext) {\n     ApplicationEvent eventResponse;\n     try {\n       verifyAndCreateRemoteLogDir(getConfig());\n-      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n+      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls,\n+          logAggregationContext);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnRuntimeException e) {\n       LOG.warn(\"Application failed to init aggregation\", e);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls,\n          logAggregationContext);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation\", e);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-742. Log aggregation causes a lot of redundant setPermission calls. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/13 1:49 PM",
      "commitName": "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n       Map\u003cApplicationAccessType, String\u003e appAcls) {\n     ApplicationEvent eventResponse;\n     try {\n       verifyAndCreateRemoteLogDir(getConfig());\n       initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnRuntimeException e) {\n-      LOG.warn(\"Application failed to init aggregation: \" + e.getMessage());\n+      LOG.warn(\"Application failed to init aggregation\", e);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation\", e);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/05/13 7:25 AM",
      "commitNameOld": "31c96829c767a093d6de8bdc30e06089eeba860b",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 5.57,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n       Map\u003cApplicationAccessType, String\u003e appAcls) {\n     ApplicationEvent eventResponse;\n     try {\n       verifyAndCreateRemoteLogDir(getConfig());\n       initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n-    } catch (YarnException e) {\n+    } catch (YarnRuntimeException e) {\n       LOG.warn(\"Application failed to init aggregation: \" + e.getMessage());\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnRuntimeException e) {\n      LOG.warn(\"Application failed to init aggregation: \" + e.getMessage());\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "967b62f5d23e5e3b3573caab5cf03d089e5bcc11": {
      "type": "Ybodychange",
      "commitMessage": "YARN-24. Nodemanager fails to start if log aggregation enabled and namenode unavailable. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461891 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/03/13 4:14 PM",
      "commitName": "967b62f5d23e5e3b3573caab5cf03d089e5bcc11",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "04/03/13 1:47 PM",
      "commitNameOld": "5889f54ad1d144add94a0295e4a8ddb3ccd282df",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 23.06,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n       Map\u003cApplicationAccessType, String\u003e appAcls) {\n     ApplicationEvent eventResponse;\n     try {\n+      verifyAndCreateRemoteLogDir(getConfig());\n       initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnException e) {\n       LOG.warn(\"Application failed to init aggregation: \" + e.getMessage());\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n    ApplicationEvent eventResponse;\n    try {\n      verifyAndCreateRemoteLogDir(getConfig());\n      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnException e) {\n      LOG.warn(\"Application failed to init aggregation: \" + e.getMessage());\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "5889f54ad1d144add94a0295e4a8ddb3ccd282df": {
      "type": "Ybodychange",
      "commitMessage": "YARN-345. Many InvalidStateTransitonException errors for ApplicationImpl in Node Manager. Contributed by Robert Parker\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452548 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/13 1:47 PM",
      "commitName": "5889f54ad1d144add94a0295e4a8ddb3ccd282df",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "05/09/12 12:39 PM",
      "commitNameOld": "726b48f51ab8f48e69a0b6bc2e8a73234aaea07a",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 180.09,
      "commitsBetweenForRepo": 859,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n       Map\u003cApplicationAccessType, String\u003e appAcls) {\n     ApplicationEvent eventResponse;\n     try {\n       initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n       eventResponse \u003d new ApplicationEvent(appId,\n           ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n     } catch (YarnException e) {\n-      eventResponse \u003d new ApplicationFinishEvent(appId,\n-          \"Application failed to init aggregation: \" + e.getMessage());\n+      LOG.warn(\"Application failed to init aggregation: \" + e.getMessage());\n+      eventResponse \u003d new ApplicationEvent(appId,\n+          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n     }\n     this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n    ApplicationEvent eventResponse;\n    try {\n      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnException e) {\n      LOG.warn(\"Application failed to init aggregation: \" + e.getMessage());\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n    ApplicationEvent eventResponse;\n    try {\n      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnException e) {\n      eventResponse \u003d new ApplicationFinishEvent(appId,\n          \"Application failed to init aggregation: \" + e.getMessage());\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
      }
    },
    "1cf60106758c482991f08caa136446885d5f8f27": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4302. NM goes down if error encountered during log aggregation (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1345362 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/12 2:54 PM",
      "commitName": "1cf60106758c482991f08caa136446885d5f8f27",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "06/03/12 3:44 PM",
      "commitNameOld": "25cceb65ceb3aafbb078d4a112169ab5dca7f200",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 86.92,
      "commitsBetweenForRepo": 585,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,14 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n       Map\u003cApplicationAccessType, String\u003e appAcls) {\n-\n-    // Get user\u0027s FileSystem credentials\n-    UserGroupInformation userUgi \u003d\n-        UserGroupInformation.createRemoteUser(user);\n-    if (credentials !\u003d null) {\n-      for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n-          .getAllTokens()) {\n-        userUgi.addToken(token);\n-      }\n+    ApplicationEvent eventResponse;\n+    try {\n+      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n+      eventResponse \u003d new ApplicationEvent(appId,\n+          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n+    } catch (YarnException e) {\n+      eventResponse \u003d new ApplicationFinishEvent(appId,\n+          \"Application failed to init aggregation: \" + e.getMessage());\n     }\n-\n-    // Create the app dir\n-    createAppDir(user, appId, userUgi);\n-\n-    // New application\n-    final AppLogAggregator appLogAggregator \u003d\n-        new AppLogAggregatorImpl(this.dispatcher, this.deletionService,\n-            getConfig(), appId, userUgi, dirsHandler,\n-            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy,\n-            appAcls);\n-    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n-      throw new YarnException(\"Duplicate initApp for \" + appId);\n-    }\n-\n-\n-    // TODO Get the user configuration for the list of containers that need log\n-    // aggregation.\n-\n-    // Schedule the aggregator.\n-    Runnable aggregatorWrapper \u003d new Runnable() {\n-      public void run() {\n-        try {\n-          appLogAggregator.run();\n-        } finally {\n-          appLogAggregators.remove(appId);\n-        }\n-      }\n-    };\n-    this.threadPool.execute(aggregatorWrapper);\n+    this.dispatcher.getEventHandler().handle(eventResponse);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n    ApplicationEvent eventResponse;\n    try {\n      initAppAggregator(appId, user, credentials, logRetentionPolicy, appAcls);\n      eventResponse \u003d new ApplicationEvent(appId,\n          ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\n    } catch (YarnException e) {\n      eventResponse \u003d new ApplicationFinishEvent(appId,\n          \"Application failed to init aggregation: \" + e.getMessage());\n    }\n    this.dispatcher.getEventHandler().handle(eventResponse);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "25cceb65ceb3aafbb078d4a112169ab5dca7f200": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3977. LogAggregationService leaks log aggregator objects (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/12 3:44 PM",
      "commitName": "25cceb65ceb3aafbb078d4a112169ab5dca7f200",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 98.02,
      "commitsBetweenForRepo": 725,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,43 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n       Map\u003cApplicationAccessType, String\u003e appAcls) {\n \n     // Get user\u0027s FileSystem credentials\n     UserGroupInformation userUgi \u003d\n         UserGroupInformation.createRemoteUser(user);\n     if (credentials !\u003d null) {\n       for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n           .getAllTokens()) {\n         userUgi.addToken(token);\n       }\n     }\n \n     // Create the app dir\n     createAppDir(user, appId, userUgi);\n \n     // New application\n-    AppLogAggregator appLogAggregator \u003d\n+    final AppLogAggregator appLogAggregator \u003d\n         new AppLogAggregatorImpl(this.dispatcher, this.deletionService,\n             getConfig(), appId, userUgi, dirsHandler,\n             getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy,\n             appAcls);\n     if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n       throw new YarnException(\"Duplicate initApp for \" + appId);\n     }\n \n \n     // TODO Get the user configuration for the list of containers that need log\n     // aggregation.\n \n     // Schedule the aggregator.\n-    this.threadPool.execute(appLogAggregator);\n+    Runnable aggregatorWrapper \u003d new Runnable() {\n+      public void run() {\n+        try {\n+          appLogAggregator.run();\n+        } finally {\n+          appLogAggregators.remove(appId);\n+        }\n+      }\n+    };\n+    this.threadPool.execute(aggregatorWrapper);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n\n    // Get user\u0027s FileSystem credentials\n    UserGroupInformation userUgi \u003d\n        UserGroupInformation.createRemoteUser(user);\n    if (credentials !\u003d null) {\n      for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n          .getAllTokens()) {\n        userUgi.addToken(token);\n      }\n    }\n\n    // Create the app dir\n    createAppDir(user, appId, userUgi);\n\n    // New application\n    final AppLogAggregator appLogAggregator \u003d\n        new AppLogAggregatorImpl(this.dispatcher, this.deletionService,\n            getConfig(), appId, userUgi, dirsHandler,\n            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy,\n            appAcls);\n    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n      throw new YarnException(\"Duplicate initApp for \" + appId);\n    }\n\n\n    // TODO Get the user configuration for the list of containers that need log\n    // aggregation.\n\n    // Schedule the aggregator.\n    Runnable aggregatorWrapper \u003d new Runnable() {\n      public void run() {\n        try {\n          appLogAggregator.run();\n        } finally {\n          appLogAggregators.remove(appId);\n        }\n      }\n    };\n    this.threadPool.execute(aggregatorWrapper);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "03/11/11 1:02 AM",
      "commitNameOld": "c27601fefebd0af887a12d684bfc6f90d9fc0321",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.64,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   private void initApp(final ApplicationId appId, String user,\n       Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n       Map\u003cApplicationAccessType, String\u003e appAcls) {\n \n     // Get user\u0027s FileSystem credentials\n     UserGroupInformation userUgi \u003d\n         UserGroupInformation.createRemoteUser(user);\n     if (credentials !\u003d null) {\n       for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n           .getAllTokens()) {\n         userUgi.addToken(token);\n       }\n     }\n \n     // Create the app dir\n     createAppDir(user, appId, userUgi);\n \n     // New application\n     AppLogAggregator appLogAggregator \u003d\n-        new AppLogAggregatorImpl(this.dispatcher, this.deletionService, getConfig(), appId,\n-            userUgi, this.localRootLogDirs, \n-            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy, appAcls);\n+        new AppLogAggregatorImpl(this.dispatcher, this.deletionService,\n+            getConfig(), appId, userUgi, dirsHandler,\n+            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy,\n+            appAcls);\n     if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n       throw new YarnException(\"Duplicate initApp for \" + appId);\n     }\n \n \n     // TODO Get the user configuration for the list of containers that need log\n     // aggregation.\n \n     // Schedule the aggregator.\n     this.threadPool.execute(appLogAggregator);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n\n    // Get user\u0027s FileSystem credentials\n    UserGroupInformation userUgi \u003d\n        UserGroupInformation.createRemoteUser(user);\n    if (credentials !\u003d null) {\n      for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n          .getAllTokens()) {\n        userUgi.addToken(token);\n      }\n    }\n\n    // Create the app dir\n    createAppDir(user, appId, userUgi);\n\n    // New application\n    AppLogAggregator appLogAggregator \u003d\n        new AppLogAggregatorImpl(this.dispatcher, this.deletionService,\n            getConfig(), appId, userUgi, dirsHandler,\n            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy,\n            appAcls);\n    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n      throw new YarnException(\"Duplicate initApp for \" + appId);\n    }\n\n\n    // TODO Get the user configuration for the list of containers that need log\n    // aggregation.\n\n    // Schedule the aggregator.\n    this.threadPool.execute(appLogAggregator);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/10/11 11:45 PM",
          "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/10/11 12:27 PM",
          "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 127,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,33 @@\n   private void initApp(final ApplicationId appId, String user,\n-      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy) {\n+      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n+      Map\u003cApplicationAccessType, String\u003e appAcls) {\n \n     // Get user\u0027s FileSystem credentials\n     UserGroupInformation userUgi \u003d\n         UserGroupInformation.createRemoteUser(user);\n     if (credentials !\u003d null) {\n       for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n           .getAllTokens()) {\n         userUgi.addToken(token);\n       }\n     }\n \n+    // Create the app dir\n+    createAppDir(user, appId, userUgi);\n+\n     // New application\n     AppLogAggregator appLogAggregator \u003d\n-        new AppLogAggregatorImpl(this.deletionService, getConfig(), appId,\n-            userUgi, this.localRootLogDirs,\n-            getRemoteNodeLogFileForApp(appId), logRetentionPolicy);\n+        new AppLogAggregatorImpl(this.dispatcher, this.deletionService, getConfig(), appId,\n+            userUgi, this.localRootLogDirs, \n+            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy, appAcls);\n     if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n       throw new YarnException(\"Duplicate initApp for \" + appId);\n     }\n \n-    // Create the app dir\n-    try {\n-      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n-        @Override\n-        public Object run() throws Exception {\n-          // TODO: Reuse FS for user?\n-          FileSystem remoteFS \u003d FileSystem.get(getConfig());\n-          remoteFS.mkdirs(getRemoteAppLogDir(\n-              LogAggregationService.this.remoteRootLogDir, appId)\n-              .makeQualified(remoteFS.getUri(),\n-                  remoteFS.getWorkingDirectory()));\n-          return null;\n-        }\n-      });\n-    } catch (Exception e) {\n-      throw new YarnException(e);\n-    }\n \n-    // Get the user configuration for the list of containers that need log\n+    // TODO Get the user configuration for the list of containers that need log\n     // aggregation.\n \n     // Schedule the aggregator.\n     this.threadPool.execute(appLogAggregator);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n\n    // Get user\u0027s FileSystem credentials\n    UserGroupInformation userUgi \u003d\n        UserGroupInformation.createRemoteUser(user);\n    if (credentials !\u003d null) {\n      for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n          .getAllTokens()) {\n        userUgi.addToken(token);\n      }\n    }\n\n    // Create the app dir\n    createAppDir(user, appId, userUgi);\n\n    // New application\n    AppLogAggregator appLogAggregator \u003d\n        new AppLogAggregatorImpl(this.dispatcher, this.deletionService, getConfig(), appId,\n            userUgi, this.localRootLogDirs, \n            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy, appAcls);\n    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n      throw new YarnException(\"Duplicate initApp for \" + appId);\n    }\n\n\n    // TODO Get the user configuration for the list of containers that need log\n    // aggregation.\n\n    // Schedule the aggregator.\n    this.threadPool.execute(appLogAggregator);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId(modifiers-final), user-String, credentials-Credentials, logRetentionPolicy-ContainerLogsRetentionPolicy]",
            "newValue": "[appId-ApplicationId(modifiers-final), user-String, credentials-Credentials, logRetentionPolicy-ContainerLogsRetentionPolicy, appAcls-Map\u003cApplicationAccessType,String\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/10/11 11:45 PM",
          "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/10/11 12:27 PM",
          "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 127,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,33 @@\n   private void initApp(final ApplicationId appId, String user,\n-      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy) {\n+      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n+      Map\u003cApplicationAccessType, String\u003e appAcls) {\n \n     // Get user\u0027s FileSystem credentials\n     UserGroupInformation userUgi \u003d\n         UserGroupInformation.createRemoteUser(user);\n     if (credentials !\u003d null) {\n       for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n           .getAllTokens()) {\n         userUgi.addToken(token);\n       }\n     }\n \n+    // Create the app dir\n+    createAppDir(user, appId, userUgi);\n+\n     // New application\n     AppLogAggregator appLogAggregator \u003d\n-        new AppLogAggregatorImpl(this.deletionService, getConfig(), appId,\n-            userUgi, this.localRootLogDirs,\n-            getRemoteNodeLogFileForApp(appId), logRetentionPolicy);\n+        new AppLogAggregatorImpl(this.dispatcher, this.deletionService, getConfig(), appId,\n+            userUgi, this.localRootLogDirs, \n+            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy, appAcls);\n     if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n       throw new YarnException(\"Duplicate initApp for \" + appId);\n     }\n \n-    // Create the app dir\n-    try {\n-      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n-        @Override\n-        public Object run() throws Exception {\n-          // TODO: Reuse FS for user?\n-          FileSystem remoteFS \u003d FileSystem.get(getConfig());\n-          remoteFS.mkdirs(getRemoteAppLogDir(\n-              LogAggregationService.this.remoteRootLogDir, appId)\n-              .makeQualified(remoteFS.getUri(),\n-                  remoteFS.getWorkingDirectory()));\n-          return null;\n-        }\n-      });\n-    } catch (Exception e) {\n-      throw new YarnException(e);\n-    }\n \n-    // Get the user configuration for the list of containers that need log\n+    // TODO Get the user configuration for the list of containers that need log\n     // aggregation.\n \n     // Schedule the aggregator.\n     this.threadPool.execute(appLogAggregator);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n\n    // Get user\u0027s FileSystem credentials\n    UserGroupInformation userUgi \u003d\n        UserGroupInformation.createRemoteUser(user);\n    if (credentials !\u003d null) {\n      for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n          .getAllTokens()) {\n        userUgi.addToken(token);\n      }\n    }\n\n    // Create the app dir\n    createAppDir(user, appId, userUgi);\n\n    // New application\n    AppLogAggregator appLogAggregator \u003d\n        new AppLogAggregatorImpl(this.dispatcher, this.deletionService, getConfig(), appId,\n            userUgi, this.localRootLogDirs, \n            getRemoteNodeLogFileForApp(appId, user), logRetentionPolicy, appAcls);\n    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n      throw new YarnException(\"Duplicate initApp for \" + appId);\n    }\n\n\n    // TODO Get the user configuration for the list of containers that need log\n    // aggregation.\n\n    // Schedule the aggregator.\n    this.threadPool.execute(appLogAggregator);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy) {\n\n    // Get user\u0027s FileSystem credentials\n    UserGroupInformation userUgi \u003d\n        UserGroupInformation.createRemoteUser(user);\n    if (credentials !\u003d null) {\n      for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n          .getAllTokens()) {\n        userUgi.addToken(token);\n      }\n    }\n\n    // New application\n    AppLogAggregator appLogAggregator \u003d\n        new AppLogAggregatorImpl(this.deletionService, getConfig(), appId,\n            userUgi, this.localRootLogDirs,\n            getRemoteNodeLogFileForApp(appId), logRetentionPolicy);\n    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n      throw new YarnException(\"Duplicate initApp for \" + appId);\n    }\n\n    // Create the app dir\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          // TODO: Reuse FS for user?\n          FileSystem remoteFS \u003d FileSystem.get(getConfig());\n          remoteFS.mkdirs(getRemoteAppLogDir(\n              LogAggregationService.this.remoteRootLogDir, appId)\n              .makeQualified(remoteFS.getUri(),\n                  remoteFS.getWorkingDirectory()));\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnException(e);\n    }\n\n    // Get the user configuration for the list of containers that need log\n    // aggregation.\n\n    // Schedule the aggregator.\n    this.threadPool.execute(appLogAggregator);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,46 @@\n+  private void initApp(final ApplicationId appId, String user,\n+      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy) {\n+\n+    // Get user\u0027s FileSystem credentials\n+    UserGroupInformation userUgi \u003d\n+        UserGroupInformation.createRemoteUser(user);\n+    if (credentials !\u003d null) {\n+      for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n+          .getAllTokens()) {\n+        userUgi.addToken(token);\n+      }\n+    }\n+\n+    // New application\n+    AppLogAggregator appLogAggregator \u003d\n+        new AppLogAggregatorImpl(this.deletionService, getConfig(), appId,\n+            userUgi, this.localRootLogDirs,\n+            getRemoteNodeLogFileForApp(appId), logRetentionPolicy);\n+    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n+      throw new YarnException(\"Duplicate initApp for \" + appId);\n+    }\n+\n+    // Create the app dir\n+    try {\n+      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n+        @Override\n+        public Object run() throws Exception {\n+          // TODO: Reuse FS for user?\n+          FileSystem remoteFS \u003d FileSystem.get(getConfig());\n+          remoteFS.mkdirs(getRemoteAppLogDir(\n+              LogAggregationService.this.remoteRootLogDir, appId)\n+              .makeQualified(remoteFS.getUri(),\n+                  remoteFS.getWorkingDirectory()));\n+          return null;\n+        }\n+      });\n+    } catch (Exception e) {\n+      throw new YarnException(e);\n+    }\n+\n+    // Get the user configuration for the list of containers that need log\n+    // aggregation.\n+\n+    // Schedule the aggregator.\n+    this.threadPool.execute(appLogAggregator);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initApp(final ApplicationId appId, String user,\n      Credentials credentials, ContainerLogsRetentionPolicy logRetentionPolicy) {\n\n    // Get user\u0027s FileSystem credentials\n    UserGroupInformation userUgi \u003d\n        UserGroupInformation.createRemoteUser(user);\n    if (credentials !\u003d null) {\n      for (Token\u003c? extends TokenIdentifier\u003e token : credentials\n          .getAllTokens()) {\n        userUgi.addToken(token);\n      }\n    }\n\n    // New application\n    AppLogAggregator appLogAggregator \u003d\n        new AppLogAggregatorImpl(this.deletionService, getConfig(), appId,\n            userUgi, this.localRootLogDirs,\n            getRemoteNodeLogFileForApp(appId), logRetentionPolicy);\n    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) !\u003d null) {\n      throw new YarnException(\"Duplicate initApp for \" + appId);\n    }\n\n    // Create the app dir\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          // TODO: Reuse FS for user?\n          FileSystem remoteFS \u003d FileSystem.get(getConfig());\n          remoteFS.mkdirs(getRemoteAppLogDir(\n              LogAggregationService.this.remoteRootLogDir, appId)\n              .makeQualified(remoteFS.getUri(),\n                  remoteFS.getWorkingDirectory()));\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnException(e);\n    }\n\n    // Get the user configuration for the list of containers that need log\n    // aggregation.\n\n    // Schedule the aggregator.\n    this.threadPool.execute(appLogAggregator);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
    }
  }
}