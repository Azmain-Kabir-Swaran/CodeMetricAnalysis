{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WriteOperationHelper.java",
  "functionName": "finalizeMultipartUpload",
  "functionId": "finalizeMultipartUpload___destKey-String__uploadId-String__partETags-List__PartETag____length-long__retrying-Retried__operationState-BulkOperationState(annotations-@Nullable)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/WriteOperationHelper.java",
  "functionStartLine": 249,
  "functionEndLine": 277,
  "numCommitsSeen": 29,
  "timeTaken": 4119,
  "changeHistory": [
    "e02eb24e0a9139418120027b694492e0738df20a",
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "0af4011580878566213016af0c32633eabd15100",
    "f365957c6326f88734bc0a5d01cfb7eac713db20",
    "2ec97abb2e93c1a8127e7a146c08e26454b583fa",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c"
  ],
  "changeHistoryShort": {
    "e02eb24e0a9139418120027b694492e0738df20a": "Ymultichange(Yparameterchange,Ybodychange)",
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "0af4011580878566213016af0c32633eabd15100": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Ybodychange",
    "2ec97abb2e93c1a8127e7a146c08e26454b583fa": "Ybodychange",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
          "commitDate": "20/06/19 1:56 AM",
          "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "19/05/19 2:29 PM",
          "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 31.48,
          "commitsBetweenForRepo": 242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   private CompleteMultipartUploadResult finalizeMultipartUpload(\n       String destKey,\n       String uploadId,\n       List\u003cPartETag\u003e partETags,\n       long length,\n-      Retried retrying) throws IOException {\n+      Retried retrying,\n+      @Nullable BulkOperationState operationState) throws IOException {\n     if (partETags.isEmpty()) {\n       throw new IOException(\n           \"No upload parts in multipart upload to \" + destKey);\n     }\n     CompleteMultipartUploadResult uploadResult \u003d\n         invoker.retry(\"Completing multipart commit\", destKey,\n             true,\n             retrying,\n             () -\u003e {\n               // a copy of the list is required, so that the AWS SDK doesn\u0027t\n               // attempt to sort an unmodifiable list.\n               return owner.getAmazonS3Client().completeMultipartUpload(\n                   new CompleteMultipartUploadRequest(bucket,\n                       destKey,\n                       uploadId,\n                       new ArrayList\u003c\u003e(partETags)));\n             }\n     );\n     owner.finishedWrite(destKey, length, uploadResult.getETag(),\n-        uploadResult.getVersionId());\n+        uploadResult.getVersionId(), operationState);\n     return uploadResult;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CompleteMultipartUploadResult finalizeMultipartUpload(\n      String destKey,\n      String uploadId,\n      List\u003cPartETag\u003e partETags,\n      long length,\n      Retried retrying,\n      @Nullable BulkOperationState operationState) throws IOException {\n    if (partETags.isEmpty()) {\n      throw new IOException(\n          \"No upload parts in multipart upload to \" + destKey);\n    }\n    CompleteMultipartUploadResult uploadResult \u003d\n        invoker.retry(\"Completing multipart commit\", destKey,\n            true,\n            retrying,\n            () -\u003e {\n              // a copy of the list is required, so that the AWS SDK doesn\u0027t\n              // attempt to sort an unmodifiable list.\n              return owner.getAmazonS3Client().completeMultipartUpload(\n                  new CompleteMultipartUploadRequest(bucket,\n                      destKey,\n                      uploadId,\n                      new ArrayList\u003c\u003e(partETags)));\n            }\n    );\n    owner.finishedWrite(destKey, length, uploadResult.getETag(),\n        uploadResult.getVersionId(), operationState);\n    return uploadResult;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/WriteOperationHelper.java",
          "extendedDetails": {
            "oldValue": "[destKey-String, uploadId-String, partETags-List\u003cPartETag\u003e, length-long, retrying-Retried]",
            "newValue": "[destKey-String, uploadId-String, partETags-List\u003cPartETag\u003e, length-long, retrying-Retried, operationState-BulkOperationState(annotations-@Nullable)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
          "commitDate": "20/06/19 1:56 AM",
          "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "19/05/19 2:29 PM",
          "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 31.48,
          "commitsBetweenForRepo": 242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   private CompleteMultipartUploadResult finalizeMultipartUpload(\n       String destKey,\n       String uploadId,\n       List\u003cPartETag\u003e partETags,\n       long length,\n-      Retried retrying) throws IOException {\n+      Retried retrying,\n+      @Nullable BulkOperationState operationState) throws IOException {\n     if (partETags.isEmpty()) {\n       throw new IOException(\n           \"No upload parts in multipart upload to \" + destKey);\n     }\n     CompleteMultipartUploadResult uploadResult \u003d\n         invoker.retry(\"Completing multipart commit\", destKey,\n             true,\n             retrying,\n             () -\u003e {\n               // a copy of the list is required, so that the AWS SDK doesn\u0027t\n               // attempt to sort an unmodifiable list.\n               return owner.getAmazonS3Client().completeMultipartUpload(\n                   new CompleteMultipartUploadRequest(bucket,\n                       destKey,\n                       uploadId,\n                       new ArrayList\u003c\u003e(partETags)));\n             }\n     );\n     owner.finishedWrite(destKey, length, uploadResult.getETag(),\n-        uploadResult.getVersionId());\n+        uploadResult.getVersionId(), operationState);\n     return uploadResult;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CompleteMultipartUploadResult finalizeMultipartUpload(\n      String destKey,\n      String uploadId,\n      List\u003cPartETag\u003e partETags,\n      long length,\n      Retried retrying,\n      @Nullable BulkOperationState operationState) throws IOException {\n    if (partETags.isEmpty()) {\n      throw new IOException(\n          \"No upload parts in multipart upload to \" + destKey);\n    }\n    CompleteMultipartUploadResult uploadResult \u003d\n        invoker.retry(\"Completing multipart commit\", destKey,\n            true,\n            retrying,\n            () -\u003e {\n              // a copy of the list is required, so that the AWS SDK doesn\u0027t\n              // attempt to sort an unmodifiable list.\n              return owner.getAmazonS3Client().completeMultipartUpload(\n                  new CompleteMultipartUploadRequest(bucket,\n                      destKey,\n                      uploadId,\n                      new ArrayList\u003c\u003e(partETags)));\n            }\n    );\n    owner.finishedWrite(destKey, length, uploadResult.getETag(),\n        uploadResult.getVersionId(), operationState);\n    return uploadResult;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/WriteOperationHelper.java",
          "extendedDetails": {}
        }
      ]
    },
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "30/04/19 3:53 AM",
      "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 19.44,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   private CompleteMultipartUploadResult finalizeMultipartUpload(\n       String destKey,\n       String uploadId,\n       List\u003cPartETag\u003e partETags,\n       long length,\n       Retried retrying) throws IOException {\n     if (partETags.isEmpty()) {\n       throw new IOException(\n           \"No upload parts in multipart upload to \" + destKey);\n     }\n-    CompleteMultipartUploadResult uploadResult \u003d invoker.retry(\"Completing multipart commit\", destKey,\n-        true,\n-        retrying,\n-        () -\u003e {\n-          // a copy of the list is required, so that the AWS SDK doesn\u0027t\n-          // attempt to sort an unmodifiable list.\n-          return owner.getAmazonS3Client().completeMultipartUpload(\n-              new CompleteMultipartUploadRequest(bucket,\n-                  destKey,\n-                  uploadId,\n-                  new ArrayList\u003c\u003e(partETags)));\n-        }\n+    CompleteMultipartUploadResult uploadResult \u003d\n+        invoker.retry(\"Completing multipart commit\", destKey,\n+            true,\n+            retrying,\n+            () -\u003e {\n+              // a copy of the list is required, so that the AWS SDK doesn\u0027t\n+              // attempt to sort an unmodifiable list.\n+              return owner.getAmazonS3Client().completeMultipartUpload(\n+                  new CompleteMultipartUploadRequest(bucket,\n+                      destKey,\n+                      uploadId,\n+                      new ArrayList\u003c\u003e(partETags)));\n+            }\n     );\n-    owner.finishedWrite(destKey, length);\n+    owner.finishedWrite(destKey, length, uploadResult.getETag(),\n+        uploadResult.getVersionId());\n     return uploadResult;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CompleteMultipartUploadResult finalizeMultipartUpload(\n      String destKey,\n      String uploadId,\n      List\u003cPartETag\u003e partETags,\n      long length,\n      Retried retrying) throws IOException {\n    if (partETags.isEmpty()) {\n      throw new IOException(\n          \"No upload parts in multipart upload to \" + destKey);\n    }\n    CompleteMultipartUploadResult uploadResult \u003d\n        invoker.retry(\"Completing multipart commit\", destKey,\n            true,\n            retrying,\n            () -\u003e {\n              // a copy of the list is required, so that the AWS SDK doesn\u0027t\n              // attempt to sort an unmodifiable list.\n              return owner.getAmazonS3Client().completeMultipartUpload(\n                  new CompleteMultipartUploadRequest(bucket,\n                      destKey,\n                      uploadId,\n                      new ArrayList\u003c\u003e(partETags)));\n            }\n    );\n    owner.finishedWrite(destKey, length, uploadResult.getETag(),\n        uploadResult.getVersionId());\n    return uploadResult;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/WriteOperationHelper.java",
      "extendedDetails": {}
    },
    "0af4011580878566213016af0c32633eabd15100": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16221. S3Guard: add option to fail operation on metadata write failure.\n",
      "commitDate": "30/04/19 3:53 AM",
      "commitName": "0af4011580878566213016af0c32633eabd15100",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "26/02/19 9:10 AM",
      "commitNameOld": "52b2eab575d0b4d8ce7fa57661aaca6b8a123cc2",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 62.74,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   private CompleteMultipartUploadResult finalizeMultipartUpload(\n       String destKey,\n       String uploadId,\n       List\u003cPartETag\u003e partETags,\n       long length,\n       Retried retrying) throws IOException {\n     if (partETags.isEmpty()) {\n       throw new IOException(\n           \"No upload parts in multipart upload to \" + destKey);\n     }\n-    return invoker.retry(\"Completing multipart commit\", destKey,\n+    CompleteMultipartUploadResult uploadResult \u003d invoker.retry(\"Completing multipart commit\", destKey,\n         true,\n         retrying,\n         () -\u003e {\n           // a copy of the list is required, so that the AWS SDK doesn\u0027t\n           // attempt to sort an unmodifiable list.\n-          CompleteMultipartUploadResult result \u003d\n-              owner.getAmazonS3Client().completeMultipartUpload(\n-                  new CompleteMultipartUploadRequest(bucket,\n-                      destKey,\n-                      uploadId,\n-                      new ArrayList\u003c\u003e(partETags)));\n-          owner.finishedWrite(destKey, length);\n-          return result;\n+          return owner.getAmazonS3Client().completeMultipartUpload(\n+              new CompleteMultipartUploadRequest(bucket,\n+                  destKey,\n+                  uploadId,\n+                  new ArrayList\u003c\u003e(partETags)));\n         }\n     );\n+    owner.finishedWrite(destKey, length);\n+    return uploadResult;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CompleteMultipartUploadResult finalizeMultipartUpload(\n      String destKey,\n      String uploadId,\n      List\u003cPartETag\u003e partETags,\n      long length,\n      Retried retrying) throws IOException {\n    if (partETags.isEmpty()) {\n      throw new IOException(\n          \"No upload parts in multipart upload to \" + destKey);\n    }\n    CompleteMultipartUploadResult uploadResult \u003d invoker.retry(\"Completing multipart commit\", destKey,\n        true,\n        retrying,\n        () -\u003e {\n          // a copy of the list is required, so that the AWS SDK doesn\u0027t\n          // attempt to sort an unmodifiable list.\n          return owner.getAmazonS3Client().completeMultipartUpload(\n              new CompleteMultipartUploadRequest(bucket,\n                  destKey,\n                  uploadId,\n                  new ArrayList\u003c\u003e(partETags)));\n        }\n    );\n    owner.finishedWrite(destKey, length);\n    return uploadResult;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/WriteOperationHelper.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "16/10/18 12:02 PM",
      "commitNameOld": "d59ca43bff8a457ce7ab62a61acd89aacbe71b93",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 111.7,
      "commitsBetweenForRepo": 781,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private CompleteMultipartUploadResult finalizeMultipartUpload(\n       String destKey,\n       String uploadId,\n       List\u003cPartETag\u003e partETags,\n       long length,\n       Retried retrying) throws IOException {\n     if (partETags.isEmpty()) {\n       throw new IOException(\n           \"No upload parts in multipart upload to \" + destKey);\n     }\n     return invoker.retry(\"Completing multipart commit\", destKey,\n         true,\n         retrying,\n         () -\u003e {\n           // a copy of the list is required, so that the AWS SDK doesn\u0027t\n           // attempt to sort an unmodifiable list.\n           CompleteMultipartUploadResult result \u003d\n               owner.getAmazonS3Client().completeMultipartUpload(\n-                  new CompleteMultipartUploadRequest(owner.getBucket(),\n+                  new CompleteMultipartUploadRequest(bucket,\n                       destKey,\n                       uploadId,\n                       new ArrayList\u003c\u003e(partETags)));\n           owner.finishedWrite(destKey, length);\n           return result;\n         }\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CompleteMultipartUploadResult finalizeMultipartUpload(\n      String destKey,\n      String uploadId,\n      List\u003cPartETag\u003e partETags,\n      long length,\n      Retried retrying) throws IOException {\n    if (partETags.isEmpty()) {\n      throw new IOException(\n          \"No upload parts in multipart upload to \" + destKey);\n    }\n    return invoker.retry(\"Completing multipart commit\", destKey,\n        true,\n        retrying,\n        () -\u003e {\n          // a copy of the list is required, so that the AWS SDK doesn\u0027t\n          // attempt to sort an unmodifiable list.\n          CompleteMultipartUploadResult result \u003d\n              owner.getAmazonS3Client().completeMultipartUpload(\n                  new CompleteMultipartUploadRequest(bucket,\n                      destKey,\n                      uploadId,\n                      new ArrayList\u003c\u003e(partETags)));\n          owner.finishedWrite(destKey, length);\n          return result;\n        }\n    );\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/WriteOperationHelper.java",
      "extendedDetails": {}
    },
    "2ec97abb2e93c1a8127e7a146c08e26454b583fa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15576. S3A Multipart Uploader to work with S3Guard and encryption Originally contributed by Ewan Higgs with refinements by Steve Loughran.\n",
      "commitDate": "08/08/18 4:50 AM",
      "commitName": "2ec97abb2e93c1a8127e7a146c08e26454b583fa",
      "commitAuthor": "Ewan Higgs",
      "commitDateOld": "18/01/18 5:13 AM",
      "commitNameOld": "1093a73689912f78547e6d23023be2fd1c7ddc85",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 201.94,
      "commitsBetweenForRepo": 2012,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   private CompleteMultipartUploadResult finalizeMultipartUpload(\n       String destKey,\n       String uploadId,\n       List\u003cPartETag\u003e partETags,\n       long length,\n       Retried retrying) throws IOException {\n+    if (partETags.isEmpty()) {\n+      throw new IOException(\n+          \"No upload parts in multipart upload to \" + destKey);\n+    }\n     return invoker.retry(\"Completing multipart commit\", destKey,\n         true,\n         retrying,\n         () -\u003e {\n           // a copy of the list is required, so that the AWS SDK doesn\u0027t\n           // attempt to sort an unmodifiable list.\n           CompleteMultipartUploadResult result \u003d\n               owner.getAmazonS3Client().completeMultipartUpload(\n                   new CompleteMultipartUploadRequest(owner.getBucket(),\n                       destKey,\n                       uploadId,\n                       new ArrayList\u003c\u003e(partETags)));\n           owner.finishedWrite(destKey, length);\n           return result;\n         }\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CompleteMultipartUploadResult finalizeMultipartUpload(\n      String destKey,\n      String uploadId,\n      List\u003cPartETag\u003e partETags,\n      long length,\n      Retried retrying) throws IOException {\n    if (partETags.isEmpty()) {\n      throw new IOException(\n          \"No upload parts in multipart upload to \" + destKey);\n    }\n    return invoker.retry(\"Completing multipart commit\", destKey,\n        true,\n        retrying,\n        () -\u003e {\n          // a copy of the list is required, so that the AWS SDK doesn\u0027t\n          // attempt to sort an unmodifiable list.\n          CompleteMultipartUploadResult result \u003d\n              owner.getAmazonS3Client().completeMultipartUpload(\n                  new CompleteMultipartUploadRequest(owner.getBucket(),\n                      destKey,\n                      uploadId,\n                      new ArrayList\u003c\u003e(partETags)));\n          owner.finishedWrite(destKey, length);\n          return result;\n        }\n    );\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/WriteOperationHelper.java",
      "extendedDetails": {}
    },
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,23 @@\n+  private CompleteMultipartUploadResult finalizeMultipartUpload(\n+      String destKey,\n+      String uploadId,\n+      List\u003cPartETag\u003e partETags,\n+      long length,\n+      Retried retrying) throws IOException {\n+    return invoker.retry(\"Completing multipart commit\", destKey,\n+        true,\n+        retrying,\n+        () -\u003e {\n+          // a copy of the list is required, so that the AWS SDK doesn\u0027t\n+          // attempt to sort an unmodifiable list.\n+          CompleteMultipartUploadResult result \u003d\n+              owner.getAmazonS3Client().completeMultipartUpload(\n+                  new CompleteMultipartUploadRequest(owner.getBucket(),\n+                      destKey,\n+                      uploadId,\n+                      new ArrayList\u003c\u003e(partETags)));\n+          owner.finishedWrite(destKey, length);\n+          return result;\n+        }\n+    );\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CompleteMultipartUploadResult finalizeMultipartUpload(\n      String destKey,\n      String uploadId,\n      List\u003cPartETag\u003e partETags,\n      long length,\n      Retried retrying) throws IOException {\n    return invoker.retry(\"Completing multipart commit\", destKey,\n        true,\n        retrying,\n        () -\u003e {\n          // a copy of the list is required, so that the AWS SDK doesn\u0027t\n          // attempt to sort an unmodifiable list.\n          CompleteMultipartUploadResult result \u003d\n              owner.getAmazonS3Client().completeMultipartUpload(\n                  new CompleteMultipartUploadRequest(owner.getBucket(),\n                      destKey,\n                      uploadId,\n                      new ArrayList\u003c\u003e(partETags)));\n          owner.finishedWrite(destKey, length);\n          return result;\n        }\n    );\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/WriteOperationHelper.java"
    }
  }
}