{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebAppUtils.java",
  "functionName": "getResolvedRMWebAppURLWithoutScheme",
  "functionId": "getResolvedRMWebAppURLWithoutScheme___conf-Configuration__httpPolicy-Policy",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
  "functionStartLine": 245,
  "functionEndLine": 260,
  "numCommitsSeen": 30,
  "timeTaken": 2137,
  "changeHistory": [
    "20b49224eb90c796f042ac4251508f3979fd4787",
    "683897fd028dcc2185383f73b52d15245a69e0cb",
    "4224e613409ec97ff52ba28a7cedfe0485577257",
    "21181b65531449e5fda321c11f0672c3067641aa",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434"
  ],
  "changeHistoryShort": {
    "20b49224eb90c796f042ac4251508f3979fd4787": "Ybodychange",
    "683897fd028dcc2185383f73b52d15245a69e0cb": "Ybodychange",
    "4224e613409ec97ff52ba28a7cedfe0485577257": "Ybodychange",
    "21181b65531449e5fda321c11f0672c3067641aa": "Ymultichange(Yparameterchange,Ybodychange)",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": "Yintroduced"
  },
  "changeHistoryDetails": {
    "20b49224eb90c796f042ac4251508f3979fd4787": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3351. AppMaster tracking URL is broken in HA. (Anubhav Dhoot via kasha)\n",
      "commitDate": "18/03/15 4:30 PM",
      "commitName": "20b49224eb90c796f042ac4251508f3979fd4787",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "24/10/14 3:00 PM",
      "commitNameOld": "683897fd028dcc2185383f73b52d15245a69e0cb",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 145.06,
      "commitsBetweenForRepo": 1146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,16 @@\n   public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n       Policy httpPolicy) {\n     InetSocketAddress address \u003d null;\n-    String rmId \u003d null;\n-    if (HAUtil.isHAEnabled(conf)) {\n-      // If HA enabled, pick one of the RM-IDs and rely on redirect to go to\n-      // the Active RM\n-      rmId \u003d (String) HAUtil.getRMHAIds(conf).toArray()[0];\n-    }\n-\n     if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n       address \u003d\n-          conf.getSocketAddr(\n-              rmId \u003d\u003d null\n-                  ? YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS\n-                  : HAUtil.addSuffix(\n-                  YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS, rmId),\n+          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n     } else {\n       address \u003d\n-          conf.getSocketAddr(\n-              rmId \u003d\u003d null\n-                  ? YarnConfiguration.RM_WEBAPP_ADDRESS\n-                  : HAUtil.addSuffix(\n-                  YarnConfiguration.RM_WEBAPP_ADDRESS, rmId),\n+          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n     }\n     return getResolvedAddress(address);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n      Policy httpPolicy) {\n    InetSocketAddress address \u003d null;\n    if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n    } else {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n    }\n    return getResolvedAddress(address);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
      "extendedDetails": {}
    },
    "683897fd028dcc2185383f73b52d15245a69e0cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2713. \"RM Home\" link in NM should point to one of the RMs in an HA setup. (kasha)\n",
      "commitDate": "24/10/14 3:00 PM",
      "commitName": "683897fd028dcc2185383f73b52d15245a69e0cb",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "12/08/14 11:29 AM",
      "commitNameOld": "0c9b8f2d7ffa3e7c36bc317ff3facb992f7a154c",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 73.15,
      "commitsBetweenForRepo": 738,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,31 @@\n   public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n       Policy httpPolicy) {\n     InetSocketAddress address \u003d null;\n+    String rmId \u003d null;\n+    if (HAUtil.isHAEnabled(conf)) {\n+      // If HA enabled, pick one of the RM-IDs and rely on redirect to go to\n+      // the Active RM\n+      rmId \u003d (String) HAUtil.getRMHAIds(conf).toArray()[0];\n+    }\n+\n     if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n       address \u003d\n-          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n+          conf.getSocketAddr(\n+              rmId \u003d\u003d null\n+                  ? YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS\n+                  : HAUtil.addSuffix(\n+                  YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS, rmId),\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n     } else {\n       address \u003d\n-          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n+          conf.getSocketAddr(\n+              rmId \u003d\u003d null\n+                  ? YarnConfiguration.RM_WEBAPP_ADDRESS\n+                  : HAUtil.addSuffix(\n+                  YarnConfiguration.RM_WEBAPP_ADDRESS, rmId),\n               YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n     }\n     return getResolvedAddress(address);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n      Policy httpPolicy) {\n    InetSocketAddress address \u003d null;\n    String rmId \u003d null;\n    if (HAUtil.isHAEnabled(conf)) {\n      // If HA enabled, pick one of the RM-IDs and rely on redirect to go to\n      // the Active RM\n      rmId \u003d (String) HAUtil.getRMHAIds(conf).toArray()[0];\n    }\n\n    if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n      address \u003d\n          conf.getSocketAddr(\n              rmId \u003d\u003d null\n                  ? YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS\n                  : HAUtil.addSuffix(\n                  YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS, rmId),\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n    } else {\n      address \u003d\n          conf.getSocketAddr(\n              rmId \u003d\u003d null\n                  ? YarnConfiguration.RM_WEBAPP_ADDRESS\n                  : HAUtil.addSuffix(\n                  YarnConfiguration.RM_WEBAPP_ADDRESS, rmId),\n              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n    }\n    return getResolvedAddress(address);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
      "extendedDetails": {}
    },
    "4224e613409ec97ff52ba28a7cedfe0485577257": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1811. Fixed AMFilters in YARN to correctly accept requests from either web-app proxy or the RMs when HA is enabled. Contributed by Robert Kanter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579877 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/03/14 9:20 PM",
      "commitName": "4224e613409ec97ff52ba28a7cedfe0485577257",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 2:36 PM",
      "commitNameOld": "8314674947ec087899d2515ae6b668c6c39cabbd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.28,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,16 @@\n   public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n       Policy httpPolicy) {\n     InetSocketAddress address \u003d null;\n     if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n       address \u003d\n           conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n     } else {\n       address \u003d\n           conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n     }\n-    address \u003d NetUtils.getConnectAddress(address);\n-    StringBuffer sb \u003d new StringBuffer();\n-    InetAddress resolved \u003d address.getAddress();\n-    if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n-        resolved.isLoopbackAddress()) {\n-      String lh \u003d address.getHostName();\n-      try {\n-        lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n-      } catch (UnknownHostException e) {\n-        //Ignore and fallback.\n-      }\n-      sb.append(lh);\n-    } else {\n-      sb.append(address.getHostName());\n-    }\n-    sb.append(\":\").append(address.getPort());\n-    return sb.toString();\n+    return getResolvedAddress(address);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n      Policy httpPolicy) {\n    InetSocketAddress address \u003d null;\n    if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n    } else {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n    }\n    return getResolvedAddress(address);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
      "extendedDetails": {}
    },
    "21181b65531449e5fda321c11f0672c3067641aa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1277. Added a policy based configuration for http/https in common HttpServer and using the same in YARN - related\nto per project https config support via HADOOP-10022. Contributed by Suresh Srinivas and Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529662 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 11:43 AM",
      "commitName": "21181b65531449e5fda321c11f0672c3067641aa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1277. Added a policy based configuration for http/https in common HttpServer and using the same in YARN - related\nto per project https config support via HADOOP-10022. Contributed by Suresh Srinivas and Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529662 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/10/13 11:43 AM",
          "commitName": "21181b65531449e5fda321c11f0672c3067641aa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/09/13 10:20 AM",
          "commitNameOld": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 12.06,
          "commitsBetweenForRepo": 104,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n+  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n+      Policy httpPolicy) {\n     InetSocketAddress address \u003d null;\n-    if (HttpConfig.isSecure()) {\n+    if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n       address \u003d\n           conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n     } else {\n       address \u003d\n           conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n     }\n     address \u003d NetUtils.getConnectAddress(address);\n     StringBuffer sb \u003d new StringBuffer();\n     InetAddress resolved \u003d address.getAddress();\n     if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n         resolved.isLoopbackAddress()) {\n       String lh \u003d address.getHostName();\n       try {\n         lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n       } catch (UnknownHostException e) {\n         //Ignore and fallback.\n       }\n       sb.append(lh);\n     } else {\n       sb.append(address.getHostName());\n     }\n     sb.append(\":\").append(address.getPort());\n     return sb.toString();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n      Policy httpPolicy) {\n    InetSocketAddress address \u003d null;\n    if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n    } else {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n    }\n    address \u003d NetUtils.getConnectAddress(address);\n    StringBuffer sb \u003d new StringBuffer();\n    InetAddress resolved \u003d address.getAddress();\n    if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n        resolved.isLoopbackAddress()) {\n      String lh \u003d address.getHostName();\n      try {\n        lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n      } catch (UnknownHostException e) {\n        //Ignore and fallback.\n      }\n      sb.append(lh);\n    } else {\n      sb.append(address.getHostName());\n    }\n    sb.append(\":\").append(address.getPort());\n    return sb.toString();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[conf-Configuration, httpPolicy-Policy]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1277. Added a policy based configuration for http/https in common HttpServer and using the same in YARN - related\nto per project https config support via HADOOP-10022. Contributed by Suresh Srinivas and Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529662 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/10/13 11:43 AM",
          "commitName": "21181b65531449e5fda321c11f0672c3067641aa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/09/13 10:20 AM",
          "commitNameOld": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 12.06,
          "commitsBetweenForRepo": 104,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n+  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n+      Policy httpPolicy) {\n     InetSocketAddress address \u003d null;\n-    if (HttpConfig.isSecure()) {\n+    if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n       address \u003d\n           conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n     } else {\n       address \u003d\n           conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n     }\n     address \u003d NetUtils.getConnectAddress(address);\n     StringBuffer sb \u003d new StringBuffer();\n     InetAddress resolved \u003d address.getAddress();\n     if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n         resolved.isLoopbackAddress()) {\n       String lh \u003d address.getHostName();\n       try {\n         lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n       } catch (UnknownHostException e) {\n         //Ignore and fallback.\n       }\n       sb.append(lh);\n     } else {\n       sb.append(address.getHostName());\n     }\n     sb.append(\":\").append(address.getPort());\n     return sb.toString();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf,\n      Policy httpPolicy) {\n    InetSocketAddress address \u003d null;\n    if (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n    } else {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n    }\n    address \u003d NetUtils.getConnectAddress(address);\n    StringBuffer sb \u003d new StringBuffer();\n    InetAddress resolved \u003d address.getAddress();\n    if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n        resolved.isLoopbackAddress()) {\n      String lh \u003d address.getHostName();\n      try {\n        lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n      } catch (UnknownHostException e) {\n        //Ignore and fallback.\n      }\n      sb.append(lh);\n    } else {\n      sb.append(address.getHostName());\n    }\n    sb.append(\":\").append(address.getPort());\n    return sb.toString();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1204. Added separate configuration properties for https for RM and NM without which servers enabled with https will also start on http ports. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5523. Added separate configuration properties for https for JHS without which even when https is enabled, it starts on http port itself. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1525947 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/09/13 10:20 AM",
      "commitName": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,31 @@\n+  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n+    InetSocketAddress address \u003d null;\n+    if (HttpConfig.isSecure()) {\n+      address \u003d\n+          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n+    } else {\n+      address \u003d\n+          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n+    }\n+    address \u003d NetUtils.getConnectAddress(address);\n+    StringBuffer sb \u003d new StringBuffer();\n+    InetAddress resolved \u003d address.getAddress();\n+    if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n+        resolved.isLoopbackAddress()) {\n+      String lh \u003d address.getHostName();\n+      try {\n+        lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n+      } catch (UnknownHostException e) {\n+        //Ignore and fallback.\n+      }\n+      sb.append(lh);\n+    } else {\n+      sb.append(address.getHostName());\n+    }\n+    sb.append(\":\").append(address.getPort());\n+    return sb.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n    InetSocketAddress address \u003d null;\n    if (HttpConfig.isSecure()) {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n    } else {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n    }\n    address \u003d NetUtils.getConnectAddress(address);\n    StringBuffer sb \u003d new StringBuffer();\n    InetAddress resolved \u003d address.getAddress();\n    if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n        resolved.isLoopbackAddress()) {\n      String lh \u003d address.getHostName();\n      try {\n        lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n      } catch (UnknownHostException e) {\n        //Ignore and fallback.\n      }\n      sb.append(lh);\n    } else {\n      sb.append(address.getHostName());\n    }\n    sb.append(\":\").append(address.getPort());\n    return sb.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java"
    }
  }
}