{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3GuardTool.java",
  "functionName": "processArgs",
  "functionId": "processArgs___args-List__String____out-PrintStream",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
  "functionStartLine": 1539,
  "functionEndLine": 1590,
  "numCommitsSeen": 42,
  "timeTaken": 1476,
  "changeHistory": [
    "1093a73689912f78547e6d23023be2fd1c7ddc85"
  ],
  "changeHistoryShort": {
    "1093a73689912f78547e6d23023be2fd1c7ddc85": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1093a73689912f78547e6d23023be2fd1c7ddc85": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\nContributed by Aaron Fabbri\n",
      "commitDate": "18/01/18 5:13 AM",
      "commitName": "1093a73689912f78547e6d23023be2fd1c7ddc85",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,52 @@\n+    private void processArgs(List\u003cString\u003e args, PrintStream out)\n+        throws IOException {\n+      CommandFormat commands \u003d getCommandFormat();\n+      String err \u003d \"Can only specify one of -\" + LIST + \", \" +\n+          \" -\" + ABORT + \", and \" + EXPECT;\n+\n+      // Three mutually-exclusive options\n+      if (commands.getOpt(LIST)) {\n+        mode \u003d Mode.LIST;\n+      }\n+      if (commands.getOpt(ABORT)) {\n+        if (mode !\u003d null) {\n+          throw invalidArgs(err);\n+        }\n+        mode \u003d Mode.ABORT;\n+      }\n+\n+      String expectVal \u003d commands.getOptValue(EXPECT);\n+      if (expectVal !\u003d null) {\n+        if (mode !\u003d null) {\n+          throw invalidArgs(err);\n+        }\n+        mode \u003d Mode.EXPECT;\n+        expectedCount \u003d Integer.parseInt(expectVal);\n+      }\n+\n+      // Default to list\n+      if (mode \u003d\u003d null) {\n+        vprintln(out, \"No mode specified, defaulting to -\" + LIST);\n+        mode \u003d Mode.LIST;\n+      }\n+\n+      // Other flags\n+      if (commands.getOpt(VERBOSE)) {\n+        verbose \u003d true;\n+      }\n+      if (commands.getOpt(FORCE)) {\n+        force \u003d true;\n+      }\n+      ageMsec \u003d ageOptionsToMsec();\n+\n+      String s3Path \u003d args.get(0);\n+      URI uri \u003d S3GuardTool.toUri(s3Path);\n+      prefix \u003d uri.getPath();\n+      if (prefix.length() \u003e 0) {\n+        prefix \u003d prefix.substring(1);\n+      }\n+      vprintln(out, \"Command: %s, age %d msec, path %s (prefix \\\"%s\\\")\",\n+          mode.name(), ageMsec, s3Path, prefix);\n+\n+      initS3AFileSystem(s3Path);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processArgs(List\u003cString\u003e args, PrintStream out)\n        throws IOException {\n      CommandFormat commands \u003d getCommandFormat();\n      String err \u003d \"Can only specify one of -\" + LIST + \", \" +\n          \" -\" + ABORT + \", and \" + EXPECT;\n\n      // Three mutually-exclusive options\n      if (commands.getOpt(LIST)) {\n        mode \u003d Mode.LIST;\n      }\n      if (commands.getOpt(ABORT)) {\n        if (mode !\u003d null) {\n          throw invalidArgs(err);\n        }\n        mode \u003d Mode.ABORT;\n      }\n\n      String expectVal \u003d commands.getOptValue(EXPECT);\n      if (expectVal !\u003d null) {\n        if (mode !\u003d null) {\n          throw invalidArgs(err);\n        }\n        mode \u003d Mode.EXPECT;\n        expectedCount \u003d Integer.parseInt(expectVal);\n      }\n\n      // Default to list\n      if (mode \u003d\u003d null) {\n        vprintln(out, \"No mode specified, defaulting to -\" + LIST);\n        mode \u003d Mode.LIST;\n      }\n\n      // Other flags\n      if (commands.getOpt(VERBOSE)) {\n        verbose \u003d true;\n      }\n      if (commands.getOpt(FORCE)) {\n        force \u003d true;\n      }\n      ageMsec \u003d ageOptionsToMsec();\n\n      String s3Path \u003d args.get(0);\n      URI uri \u003d S3GuardTool.toUri(s3Path);\n      prefix \u003d uri.getPath();\n      if (prefix.length() \u003e 0) {\n        prefix \u003d prefix.substring(1);\n      }\n      vprintln(out, \"Command: %s, age %d msec, path %s (prefix \\\"%s\\\")\",\n          mode.name(), ageMsec, s3Path, prefix);\n\n      initS3AFileSystem(s3Path);\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java"
    }
  }
}