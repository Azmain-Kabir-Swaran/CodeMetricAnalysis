{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PathData.java",
  "functionName": "stringToUri",
  "functionId": "stringToUri___pathString-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
  "functionStartLine": 555,
  "functionEndLine": 596,
  "numCommitsSeen": 18,
  "timeTaken": 1076,
  "changeHistory": [
    "638801cce16fc1dc3259c541dc30a599faaddda1",
    "659ea4c540e440004d9f1a7dedefa91c0bec8b04"
  ],
  "changeHistoryShort": {
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Ymultichange(Yexceptionschange,Ybodychange)",
    "659ea4c540e440004d9f1a7dedefa91c0bec8b04": "Yintroduced"
  },
  "changeHistoryDetails": {
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/03/13 11:15 AM",
          "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "26/11/12 4:40 PM",
          "commitNameOld": "3b3a72e622992122461fa72dee419fc162019e8f",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 99.77,
          "commitsBetweenForRepo": 414,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-  private static URI stringToUri(String pathString) {\n+  private static URI stringToUri(String pathString) throws IOException {\n     // We can\u0027t use \u0027new URI(String)\u0027 directly. Since it doesn\u0027t do quoting\n     // internally, the internal parser may fail or break the string at wrong\n     // places. Use of multi-argument ctors will quote those chars for us,\n     // but we need to do our own parsing and assembly.\n     \n     // parse uri components\n     String scheme \u003d null;\n     String authority \u003d null;\n-\n     int start \u003d 0;\n \n+    pathString \u003d normalizeWindowsPath(pathString);\n+\n     // parse uri scheme, if any\n     int colon \u003d pathString.indexOf(\u0027:\u0027);\n     int slash \u003d pathString.indexOf(\u0027/\u0027);\n     if (colon \u003e 0 \u0026\u0026 (slash \u003d\u003d colon +1)) {\n       // has a non zero-length scheme\n       scheme \u003d pathString.substring(0, colon);\n       start \u003d colon + 1;\n     }\n \n     // parse uri authority, if any\n     if (pathString.startsWith(\"//\", start) \u0026\u0026\n         (pathString.length()-start \u003e 2)) {\n       start +\u003d 2;\n       int nextSlash \u003d pathString.indexOf(\u0027/\u0027, start);\n       int authEnd \u003d nextSlash \u003e 0 ? nextSlash : pathString.length();\n       authority \u003d pathString.substring(start, authEnd);\n       start \u003d authEnd;\n     }\n-\n-    // uri path is the rest of the string. ? or # are not interpreated,\n+    // uri path is the rest of the string. ? or # are not interpreted,\n     // but any occurrence of them will be quoted by the URI ctor.\n     String path \u003d pathString.substring(start, pathString.length());\n \n     // Construct the URI\n     try {\n       return new URI(scheme, authority, path, null, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static URI stringToUri(String pathString) throws IOException {\n    // We can\u0027t use \u0027new URI(String)\u0027 directly. Since it doesn\u0027t do quoting\n    // internally, the internal parser may fail or break the string at wrong\n    // places. Use of multi-argument ctors will quote those chars for us,\n    // but we need to do our own parsing and assembly.\n    \n    // parse uri components\n    String scheme \u003d null;\n    String authority \u003d null;\n    int start \u003d 0;\n\n    pathString \u003d normalizeWindowsPath(pathString);\n\n    // parse uri scheme, if any\n    int colon \u003d pathString.indexOf(\u0027:\u0027);\n    int slash \u003d pathString.indexOf(\u0027/\u0027);\n    if (colon \u003e 0 \u0026\u0026 (slash \u003d\u003d colon +1)) {\n      // has a non zero-length scheme\n      scheme \u003d pathString.substring(0, colon);\n      start \u003d colon + 1;\n    }\n\n    // parse uri authority, if any\n    if (pathString.startsWith(\"//\", start) \u0026\u0026\n        (pathString.length()-start \u003e 2)) {\n      start +\u003d 2;\n      int nextSlash \u003d pathString.indexOf(\u0027/\u0027, start);\n      int authEnd \u003d nextSlash \u003e 0 ? nextSlash : pathString.length();\n      authority \u003d pathString.substring(start, authEnd);\n      start \u003d authEnd;\n    }\n    // uri path is the rest of the string. ? or # are not interpreted,\n    // but any occurrence of them will be quoted by the URI ctor.\n    String path \u003d pathString.substring(start, pathString.length());\n\n    // Construct the URI\n    try {\n      return new URI(scheme, authority, path, null, null);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/03/13 11:15 AM",
          "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "26/11/12 4:40 PM",
          "commitNameOld": "3b3a72e622992122461fa72dee419fc162019e8f",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 99.77,
          "commitsBetweenForRepo": 414,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-  private static URI stringToUri(String pathString) {\n+  private static URI stringToUri(String pathString) throws IOException {\n     // We can\u0027t use \u0027new URI(String)\u0027 directly. Since it doesn\u0027t do quoting\n     // internally, the internal parser may fail or break the string at wrong\n     // places. Use of multi-argument ctors will quote those chars for us,\n     // but we need to do our own parsing and assembly.\n     \n     // parse uri components\n     String scheme \u003d null;\n     String authority \u003d null;\n-\n     int start \u003d 0;\n \n+    pathString \u003d normalizeWindowsPath(pathString);\n+\n     // parse uri scheme, if any\n     int colon \u003d pathString.indexOf(\u0027:\u0027);\n     int slash \u003d pathString.indexOf(\u0027/\u0027);\n     if (colon \u003e 0 \u0026\u0026 (slash \u003d\u003d colon +1)) {\n       // has a non zero-length scheme\n       scheme \u003d pathString.substring(0, colon);\n       start \u003d colon + 1;\n     }\n \n     // parse uri authority, if any\n     if (pathString.startsWith(\"//\", start) \u0026\u0026\n         (pathString.length()-start \u003e 2)) {\n       start +\u003d 2;\n       int nextSlash \u003d pathString.indexOf(\u0027/\u0027, start);\n       int authEnd \u003d nextSlash \u003e 0 ? nextSlash : pathString.length();\n       authority \u003d pathString.substring(start, authEnd);\n       start \u003d authEnd;\n     }\n-\n-    // uri path is the rest of the string. ? or # are not interpreated,\n+    // uri path is the rest of the string. ? or # are not interpreted,\n     // but any occurrence of them will be quoted by the URI ctor.\n     String path \u003d pathString.substring(start, pathString.length());\n \n     // Construct the URI\n     try {\n       return new URI(scheme, authority, path, null, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static URI stringToUri(String pathString) throws IOException {\n    // We can\u0027t use \u0027new URI(String)\u0027 directly. Since it doesn\u0027t do quoting\n    // internally, the internal parser may fail or break the string at wrong\n    // places. Use of multi-argument ctors will quote those chars for us,\n    // but we need to do our own parsing and assembly.\n    \n    // parse uri components\n    String scheme \u003d null;\n    String authority \u003d null;\n    int start \u003d 0;\n\n    pathString \u003d normalizeWindowsPath(pathString);\n\n    // parse uri scheme, if any\n    int colon \u003d pathString.indexOf(\u0027:\u0027);\n    int slash \u003d pathString.indexOf(\u0027/\u0027);\n    if (colon \u003e 0 \u0026\u0026 (slash \u003d\u003d colon +1)) {\n      // has a non zero-length scheme\n      scheme \u003d pathString.substring(0, colon);\n      start \u003d colon + 1;\n    }\n\n    // parse uri authority, if any\n    if (pathString.startsWith(\"//\", start) \u0026\u0026\n        (pathString.length()-start \u003e 2)) {\n      start +\u003d 2;\n      int nextSlash \u003d pathString.indexOf(\u0027/\u0027, start);\n      int authEnd \u003d nextSlash \u003e 0 ? nextSlash : pathString.length();\n      authority \u003d pathString.substring(start, authEnd);\n      start \u003d authEnd;\n    }\n    // uri path is the rest of the string. ? or # are not interpreted,\n    // but any occurrence of them will be quoted by the URI ctor.\n    String path \u003d pathString.substring(start, pathString.length());\n\n    // Construct the URI\n    try {\n      return new URI(scheme, authority, path, null, null);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
          "extendedDetails": {}
        }
      ]
    },
    "659ea4c540e440004d9f1a7dedefa91c0bec8b04": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7360. Preserve relative paths that do not contain globs in FsShell.  Contributed by Daryn Sharp and Kihwal Lee \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190109 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 6:13 PM",
      "commitName": "659ea4c540e440004d9f1a7dedefa91c0bec8b04",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,42 @@\n+  private static URI stringToUri(String pathString) {\n+    // We can\u0027t use \u0027new URI(String)\u0027 directly. Since it doesn\u0027t do quoting\n+    // internally, the internal parser may fail or break the string at wrong\n+    // places. Use of multi-argument ctors will quote those chars for us,\n+    // but we need to do our own parsing and assembly.\n+    \n+    // parse uri components\n+    String scheme \u003d null;\n+    String authority \u003d null;\n+\n+    int start \u003d 0;\n+\n+    // parse uri scheme, if any\n+    int colon \u003d pathString.indexOf(\u0027:\u0027);\n+    int slash \u003d pathString.indexOf(\u0027/\u0027);\n+    if (colon \u003e 0 \u0026\u0026 (slash \u003d\u003d colon +1)) {\n+      // has a non zero-length scheme\n+      scheme \u003d pathString.substring(0, colon);\n+      start \u003d colon + 1;\n+    }\n+\n+    // parse uri authority, if any\n+    if (pathString.startsWith(\"//\", start) \u0026\u0026\n+        (pathString.length()-start \u003e 2)) {\n+      start +\u003d 2;\n+      int nextSlash \u003d pathString.indexOf(\u0027/\u0027, start);\n+      int authEnd \u003d nextSlash \u003e 0 ? nextSlash : pathString.length();\n+      authority \u003d pathString.substring(start, authEnd);\n+      start \u003d authEnd;\n+    }\n+\n+    // uri path is the rest of the string. ? or # are not interpreated,\n+    // but any occurrence of them will be quoted by the URI ctor.\n+    String path \u003d pathString.substring(start, pathString.length());\n+\n+    // Construct the URI\n+    try {\n+      return new URI(scheme, authority, path, null, null);\n+    } catch (URISyntaxException e) {\n+      throw new IllegalArgumentException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static URI stringToUri(String pathString) {\n    // We can\u0027t use \u0027new URI(String)\u0027 directly. Since it doesn\u0027t do quoting\n    // internally, the internal parser may fail or break the string at wrong\n    // places. Use of multi-argument ctors will quote those chars for us,\n    // but we need to do our own parsing and assembly.\n    \n    // parse uri components\n    String scheme \u003d null;\n    String authority \u003d null;\n\n    int start \u003d 0;\n\n    // parse uri scheme, if any\n    int colon \u003d pathString.indexOf(\u0027:\u0027);\n    int slash \u003d pathString.indexOf(\u0027/\u0027);\n    if (colon \u003e 0 \u0026\u0026 (slash \u003d\u003d colon +1)) {\n      // has a non zero-length scheme\n      scheme \u003d pathString.substring(0, colon);\n      start \u003d colon + 1;\n    }\n\n    // parse uri authority, if any\n    if (pathString.startsWith(\"//\", start) \u0026\u0026\n        (pathString.length()-start \u003e 2)) {\n      start +\u003d 2;\n      int nextSlash \u003d pathString.indexOf(\u0027/\u0027, start);\n      int authEnd \u003d nextSlash \u003e 0 ? nextSlash : pathString.length();\n      authority \u003d pathString.substring(start, authEnd);\n      start \u003d authEnd;\n    }\n\n    // uri path is the rest of the string. ? or # are not interpreated,\n    // but any occurrence of them will be quoted by the URI ctor.\n    String path \u003d pathString.substring(start, pathString.length());\n\n    // Construct the URI\n    try {\n      return new URI(scheme, authority, path, null, null);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java"
    }
  }
}