{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActivitiesManager.java",
  "functionName": "getAppActivitiesInfo",
  "functionId": "getAppActivitiesInfo___applicationId-ApplicationId__requestPriorities-Set__Integer____allocationRequestIds-Set__Long____groupBy-RMWSConsts.ActivitiesGroupBy__limit-int__summarize-boolean__maxTimeInSeconds-double",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
  "functionStartLine": 127,
  "functionEndLine": 166,
  "numCommitsSeen": 60,
  "timeTaken": 7711,
  "changeHistory": [
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
    "90add05caa6c48659f0c592ec391b30f2a76069e",
    "7fa73fac2676875561269e9408215e012269a18c",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188"
  ],
  "changeHistoryShort": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Yparameterchange",
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea": "Ymultichange(Yparameterchange,Ybodychange)",
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8": "Ymultichange(Yparameterchange,Ybodychange)",
    "90add05caa6c48659f0c592ec391b30f2a76069e": "Ymultichange(Yparameterchange,Ybodychange)",
    "7fa73fac2676875561269e9408215e012269a18c": "Ybodychange",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "28/06/19 8:24 AM",
      "commitNameOld": "cbae2413201bc470b5f16421ea69d1cd9edb64a8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 61.78,
      "commitsBetweenForRepo": 517,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n-      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n+      Set\u003cInteger\u003e requestPriorities, Set\u003cLong\u003e allocationRequestIds,\n       RMWSConsts.ActivitiesGroupBy groupBy, int limit, boolean summarize,\n       double maxTimeInSeconds) {\n     RMApp app \u003d rmContext.getRMApps().get(applicationId);\n     if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n         \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n       Queue\u003cAppAllocation\u003e curAllocations \u003d\n           completedAppAllocations.get(applicationId);\n       List\u003cAppAllocation\u003e allocations \u003d null;\n       if (curAllocations !\u003d null) {\n         if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n             .isNotEmpty(allocationRequestIds)) {\n           allocations \u003d curAllocations.stream().map(e -\u003e e\n               .filterAllocationAttempts(requestPriorities,\n                   allocationRequestIds))\n               .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n               .collect(Collectors.toList());\n         } else {\n           allocations \u003d new ArrayList(curAllocations);\n         }\n       }\n       if (summarize \u0026\u0026 allocations !\u003d null) {\n         AppAllocation summaryAppAllocation \u003d\n             getSummarizedAppAllocation(allocations, maxTimeInSeconds);\n         if (summaryAppAllocation !\u003d null) {\n           allocations \u003d Lists.newArrayList(summaryAppAllocation);\n         }\n       }\n       if (allocations !\u003d null \u0026\u0026 limit \u003e 0 \u0026\u0026 limit \u003c allocations.size()) {\n         allocations \u003d\n             allocations.subList(allocations.size() - limit, allocations.size());\n       }\n       return new AppActivitiesInfo(allocations, applicationId, groupBy);\n     } else {\n       return new AppActivitiesInfo(\n           \"fail to get application activities after finished\",\n           applicationId.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n      Set\u003cInteger\u003e requestPriorities, Set\u003cLong\u003e allocationRequestIds,\n      RMWSConsts.ActivitiesGroupBy groupBy, int limit, boolean summarize,\n      double maxTimeInSeconds) {\n    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      Queue\u003cAppAllocation\u003e curAllocations \u003d\n          completedAppAllocations.get(applicationId);\n      List\u003cAppAllocation\u003e allocations \u003d null;\n      if (curAllocations !\u003d null) {\n        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n            .isNotEmpty(allocationRequestIds)) {\n          allocations \u003d curAllocations.stream().map(e -\u003e e\n              .filterAllocationAttempts(requestPriorities,\n                  allocationRequestIds))\n              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n              .collect(Collectors.toList());\n        } else {\n          allocations \u003d new ArrayList(curAllocations);\n        }\n      }\n      if (summarize \u0026\u0026 allocations !\u003d null) {\n        AppAllocation summaryAppAllocation \u003d\n            getSummarizedAppAllocation(allocations, maxTimeInSeconds);\n        if (summaryAppAllocation !\u003d null) {\n          allocations \u003d Lists.newArrayList(summaryAppAllocation);\n        }\n      }\n      if (allocations !\u003d null \u0026\u0026 limit \u003e 0 \u0026\u0026 limit \u003c allocations.size()) {\n        allocations \u003d\n            allocations.subList(allocations.size() - limit, allocations.size());\n      }\n      return new AppActivitiesInfo(allocations, applicationId, groupBy);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
      "extendedDetails": {
        "oldValue": "[applicationId-ApplicationId, requestPriorities-Set\u003cString\u003e, allocationRequestIds-Set\u003cString\u003e, groupBy-RMWSConsts.ActivitiesGroupBy, limit-int, summarize-boolean, maxTimeInSeconds-double]",
        "newValue": "[applicationId-ApplicationId, requestPriorities-Set\u003cInteger\u003e, allocationRequestIds-Set\u003cLong\u003e, groupBy-RMWSConsts.ActivitiesGroupBy, limit-int, summarize-boolean, maxTimeInSeconds-double]"
      }
    },
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.\n",
      "commitDate": "12/06/19 7:44 PM",
      "commitName": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.\n",
          "commitDate": "12/06/19 7:44 PM",
          "commitName": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "06/06/19 6:59 AM",
          "commitNameOld": "09763925025a3709e6098186348e1afd80cb9f71",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 6.53,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,40 @@\n   public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n       Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n-      RMWSConsts.ActivitiesGroupBy groupBy) {\n+      RMWSConsts.ActivitiesGroupBy groupBy, int limit, boolean summarize,\n+      double maxTimeInSeconds) {\n     RMApp app \u003d rmContext.getRMApps().get(applicationId);\n     if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n         \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n       Queue\u003cAppAllocation\u003e curAllocations \u003d\n           completedAppAllocations.get(applicationId);\n       List\u003cAppAllocation\u003e allocations \u003d null;\n       if (curAllocations !\u003d null) {\n         if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n             .isNotEmpty(allocationRequestIds)) {\n           allocations \u003d curAllocations.stream().map(e -\u003e e\n               .filterAllocationAttempts(requestPriorities,\n                   allocationRequestIds))\n               .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n               .collect(Collectors.toList());\n         } else {\n           allocations \u003d new ArrayList(curAllocations);\n         }\n       }\n+      if (summarize \u0026\u0026 allocations !\u003d null) {\n+        AppAllocation summaryAppAllocation \u003d\n+            getSummarizedAppAllocation(allocations, maxTimeInSeconds);\n+        if (summaryAppAllocation !\u003d null) {\n+          allocations \u003d Lists.newArrayList(summaryAppAllocation);\n+        }\n+      }\n+      if (allocations !\u003d null \u0026\u0026 limit \u003e 0 \u0026\u0026 limit \u003c allocations.size()) {\n+        allocations \u003d\n+            allocations.subList(allocations.size() - limit, allocations.size());\n+      }\n       return new AppActivitiesInfo(allocations, applicationId, groupBy);\n     } else {\n       return new AppActivitiesInfo(\n           \"fail to get application activities after finished\",\n           applicationId.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n      RMWSConsts.ActivitiesGroupBy groupBy, int limit, boolean summarize,\n      double maxTimeInSeconds) {\n    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      Queue\u003cAppAllocation\u003e curAllocations \u003d\n          completedAppAllocations.get(applicationId);\n      List\u003cAppAllocation\u003e allocations \u003d null;\n      if (curAllocations !\u003d null) {\n        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n            .isNotEmpty(allocationRequestIds)) {\n          allocations \u003d curAllocations.stream().map(e -\u003e e\n              .filterAllocationAttempts(requestPriorities,\n                  allocationRequestIds))\n              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n              .collect(Collectors.toList());\n        } else {\n          allocations \u003d new ArrayList(curAllocations);\n        }\n      }\n      if (summarize \u0026\u0026 allocations !\u003d null) {\n        AppAllocation summaryAppAllocation \u003d\n            getSummarizedAppAllocation(allocations, maxTimeInSeconds);\n        if (summaryAppAllocation !\u003d null) {\n          allocations \u003d Lists.newArrayList(summaryAppAllocation);\n        }\n      }\n      if (allocations !\u003d null \u0026\u0026 limit \u003e 0 \u0026\u0026 limit \u003c allocations.size()) {\n        allocations \u003d\n            allocations.subList(allocations.size() - limit, allocations.size());\n      }\n      return new AppActivitiesInfo(allocations, applicationId, groupBy);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, requestPriorities-Set\u003cString\u003e, allocationRequestIds-Set\u003cString\u003e, groupBy-RMWSConsts.ActivitiesGroupBy]",
            "newValue": "[applicationId-ApplicationId, requestPriorities-Set\u003cString\u003e, allocationRequestIds-Set\u003cString\u003e, groupBy-RMWSConsts.ActivitiesGroupBy, limit-int, summarize-boolean, maxTimeInSeconds-double]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.\n",
          "commitDate": "12/06/19 7:44 PM",
          "commitName": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "06/06/19 6:59 AM",
          "commitNameOld": "09763925025a3709e6098186348e1afd80cb9f71",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 6.53,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,40 @@\n   public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n       Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n-      RMWSConsts.ActivitiesGroupBy groupBy) {\n+      RMWSConsts.ActivitiesGroupBy groupBy, int limit, boolean summarize,\n+      double maxTimeInSeconds) {\n     RMApp app \u003d rmContext.getRMApps().get(applicationId);\n     if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n         \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n       Queue\u003cAppAllocation\u003e curAllocations \u003d\n           completedAppAllocations.get(applicationId);\n       List\u003cAppAllocation\u003e allocations \u003d null;\n       if (curAllocations !\u003d null) {\n         if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n             .isNotEmpty(allocationRequestIds)) {\n           allocations \u003d curAllocations.stream().map(e -\u003e e\n               .filterAllocationAttempts(requestPriorities,\n                   allocationRequestIds))\n               .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n               .collect(Collectors.toList());\n         } else {\n           allocations \u003d new ArrayList(curAllocations);\n         }\n       }\n+      if (summarize \u0026\u0026 allocations !\u003d null) {\n+        AppAllocation summaryAppAllocation \u003d\n+            getSummarizedAppAllocation(allocations, maxTimeInSeconds);\n+        if (summaryAppAllocation !\u003d null) {\n+          allocations \u003d Lists.newArrayList(summaryAppAllocation);\n+        }\n+      }\n+      if (allocations !\u003d null \u0026\u0026 limit \u003e 0 \u0026\u0026 limit \u003c allocations.size()) {\n+        allocations \u003d\n+            allocations.subList(allocations.size() - limit, allocations.size());\n+      }\n       return new AppActivitiesInfo(allocations, applicationId, groupBy);\n     } else {\n       return new AppActivitiesInfo(\n           \"fail to get application activities after finished\",\n           applicationId.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n      RMWSConsts.ActivitiesGroupBy groupBy, int limit, boolean summarize,\n      double maxTimeInSeconds) {\n    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      Queue\u003cAppAllocation\u003e curAllocations \u003d\n          completedAppAllocations.get(applicationId);\n      List\u003cAppAllocation\u003e allocations \u003d null;\n      if (curAllocations !\u003d null) {\n        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n            .isNotEmpty(allocationRequestIds)) {\n          allocations \u003d curAllocations.stream().map(e -\u003e e\n              .filterAllocationAttempts(requestPriorities,\n                  allocationRequestIds))\n              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n              .collect(Collectors.toList());\n        } else {\n          allocations \u003d new ArrayList(curAllocations);\n        }\n      }\n      if (summarize \u0026\u0026 allocations !\u003d null) {\n        AppAllocation summaryAppAllocation \u003d\n            getSummarizedAppAllocation(allocations, maxTimeInSeconds);\n        if (summaryAppAllocation !\u003d null) {\n          allocations \u003d Lists.newArrayList(summaryAppAllocation);\n        }\n      }\n      if (allocations !\u003d null \u0026\u0026 limit \u003e 0 \u0026\u0026 limit \u003c allocations.size()) {\n        allocations \u003d\n            allocations.subList(allocations.size() - limit, allocations.size());\n      }\n      return new AppActivitiesInfo(allocations, applicationId, groupBy);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "26/05/19 6:56 AM",
      "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "26/05/19 6:56 AM",
          "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "12/05/19 10:31 PM",
          "commitNameOld": "1a47c2b7aed1ccd562d393b79772d01244ccab44",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 13.35,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n   public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n-      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds) {\n+      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n+      RMWSConsts.ActivitiesGroupBy groupBy) {\n     RMApp app \u003d rmContext.getRMApps().get(applicationId);\n     if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n         \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n       Queue\u003cAppAllocation\u003e curAllocations \u003d\n           completedAppAllocations.get(applicationId);\n       List\u003cAppAllocation\u003e allocations \u003d null;\n       if (curAllocations !\u003d null) {\n         if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n             .isNotEmpty(allocationRequestIds)) {\n           allocations \u003d curAllocations.stream().map(e -\u003e e\n               .filterAllocationAttempts(requestPriorities,\n                   allocationRequestIds))\n               .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n               .collect(Collectors.toList());\n         } else {\n           allocations \u003d new ArrayList(curAllocations);\n         }\n       }\n-      return new AppActivitiesInfo(allocations, applicationId);\n+      return new AppActivitiesInfo(allocations, applicationId, groupBy);\n     } else {\n       return new AppActivitiesInfo(\n           \"fail to get application activities after finished\",\n           applicationId.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n      RMWSConsts.ActivitiesGroupBy groupBy) {\n    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      Queue\u003cAppAllocation\u003e curAllocations \u003d\n          completedAppAllocations.get(applicationId);\n      List\u003cAppAllocation\u003e allocations \u003d null;\n      if (curAllocations !\u003d null) {\n        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n            .isNotEmpty(allocationRequestIds)) {\n          allocations \u003d curAllocations.stream().map(e -\u003e e\n              .filterAllocationAttempts(requestPriorities,\n                  allocationRequestIds))\n              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n              .collect(Collectors.toList());\n        } else {\n          allocations \u003d new ArrayList(curAllocations);\n        }\n      }\n      return new AppActivitiesInfo(allocations, applicationId, groupBy);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, requestPriorities-Set\u003cString\u003e, allocationRequestIds-Set\u003cString\u003e]",
            "newValue": "[applicationId-ApplicationId, requestPriorities-Set\u003cString\u003e, allocationRequestIds-Set\u003cString\u003e, groupBy-RMWSConsts.ActivitiesGroupBy]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "26/05/19 6:56 AM",
          "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "12/05/19 10:31 PM",
          "commitNameOld": "1a47c2b7aed1ccd562d393b79772d01244ccab44",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 13.35,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n   public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n-      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds) {\n+      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n+      RMWSConsts.ActivitiesGroupBy groupBy) {\n     RMApp app \u003d rmContext.getRMApps().get(applicationId);\n     if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n         \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n       Queue\u003cAppAllocation\u003e curAllocations \u003d\n           completedAppAllocations.get(applicationId);\n       List\u003cAppAllocation\u003e allocations \u003d null;\n       if (curAllocations !\u003d null) {\n         if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n             .isNotEmpty(allocationRequestIds)) {\n           allocations \u003d curAllocations.stream().map(e -\u003e e\n               .filterAllocationAttempts(requestPriorities,\n                   allocationRequestIds))\n               .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n               .collect(Collectors.toList());\n         } else {\n           allocations \u003d new ArrayList(curAllocations);\n         }\n       }\n-      return new AppActivitiesInfo(allocations, applicationId);\n+      return new AppActivitiesInfo(allocations, applicationId, groupBy);\n     } else {\n       return new AppActivitiesInfo(\n           \"fail to get application activities after finished\",\n           applicationId.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds,\n      RMWSConsts.ActivitiesGroupBy groupBy) {\n    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      Queue\u003cAppAllocation\u003e curAllocations \u003d\n          completedAppAllocations.get(applicationId);\n      List\u003cAppAllocation\u003e allocations \u003d null;\n      if (curAllocations !\u003d null) {\n        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n            .isNotEmpty(allocationRequestIds)) {\n          allocations \u003d curAllocations.stream().map(e -\u003e e\n              .filterAllocationAttempts(requestPriorities,\n                  allocationRequestIds))\n              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n              .collect(Collectors.toList());\n        } else {\n          allocations \u003d new ArrayList(curAllocations);\n        }\n      }\n      return new AppActivitiesInfo(allocations, applicationId, groupBy);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "90add05caa6c48659f0c592ec391b30f2a76069e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9489. Support filtering by request-priorities and allocation-request-ids for query results of app activities. Contributed by Tao Yang.\n",
      "commitDate": "09/05/19 6:54 AM",
      "commitName": "90add05caa6c48659f0c592ec391b30f2a76069e",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9489. Support filtering by request-priorities and allocation-request-ids for query results of app activities. Contributed by Tao Yang.\n",
          "commitDate": "09/05/19 6:54 AM",
          "commitName": "90add05caa6c48659f0c592ec391b30f2a76069e",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "06/05/19 5:00 AM",
          "commitNameOld": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,27 @@\n-  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId) {\n+  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n+      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds) {\n     RMApp app \u003d rmContext.getRMApps().get(applicationId);\n     if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n         \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n       Queue\u003cAppAllocation\u003e curAllocations \u003d\n           completedAppAllocations.get(applicationId);\n       List\u003cAppAllocation\u003e allocations \u003d null;\n       if (curAllocations !\u003d null) {\n-        allocations \u003d new ArrayList(curAllocations);\n+        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n+            .isNotEmpty(allocationRequestIds)) {\n+          allocations \u003d curAllocations.stream().map(e -\u003e e\n+              .filterAllocationAttempts(requestPriorities,\n+                  allocationRequestIds))\n+              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n+              .collect(Collectors.toList());\n+        } else {\n+          allocations \u003d new ArrayList(curAllocations);\n+        }\n       }\n       return new AppActivitiesInfo(allocations, applicationId);\n     } else {\n       return new AppActivitiesInfo(\n           \"fail to get application activities after finished\",\n           applicationId.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds) {\n    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      Queue\u003cAppAllocation\u003e curAllocations \u003d\n          completedAppAllocations.get(applicationId);\n      List\u003cAppAllocation\u003e allocations \u003d null;\n      if (curAllocations !\u003d null) {\n        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n            .isNotEmpty(allocationRequestIds)) {\n          allocations \u003d curAllocations.stream().map(e -\u003e e\n              .filterAllocationAttempts(requestPriorities,\n                  allocationRequestIds))\n              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n              .collect(Collectors.toList());\n        } else {\n          allocations \u003d new ArrayList(curAllocations);\n        }\n      }\n      return new AppActivitiesInfo(allocations, applicationId);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId]",
            "newValue": "[applicationId-ApplicationId, requestPriorities-Set\u003cString\u003e, allocationRequestIds-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9489. Support filtering by request-priorities and allocation-request-ids for query results of app activities. Contributed by Tao Yang.\n",
          "commitDate": "09/05/19 6:54 AM",
          "commitName": "90add05caa6c48659f0c592ec391b30f2a76069e",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "06/05/19 5:00 AM",
          "commitNameOld": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,27 @@\n-  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId) {\n+  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n+      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds) {\n     RMApp app \u003d rmContext.getRMApps().get(applicationId);\n     if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n         \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n       Queue\u003cAppAllocation\u003e curAllocations \u003d\n           completedAppAllocations.get(applicationId);\n       List\u003cAppAllocation\u003e allocations \u003d null;\n       if (curAllocations !\u003d null) {\n-        allocations \u003d new ArrayList(curAllocations);\n+        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n+            .isNotEmpty(allocationRequestIds)) {\n+          allocations \u003d curAllocations.stream().map(e -\u003e e\n+              .filterAllocationAttempts(requestPriorities,\n+                  allocationRequestIds))\n+              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n+              .collect(Collectors.toList());\n+        } else {\n+          allocations \u003d new ArrayList(curAllocations);\n+        }\n       }\n       return new AppActivitiesInfo(allocations, applicationId);\n     } else {\n       return new AppActivitiesInfo(\n           \"fail to get application activities after finished\",\n           applicationId.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId,\n      Set\u003cString\u003e requestPriorities, Set\u003cString\u003e allocationRequestIds) {\n    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      Queue\u003cAppAllocation\u003e curAllocations \u003d\n          completedAppAllocations.get(applicationId);\n      List\u003cAppAllocation\u003e allocations \u003d null;\n      if (curAllocations !\u003d null) {\n        if (CollectionUtils.isNotEmpty(requestPriorities) || CollectionUtils\n            .isNotEmpty(allocationRequestIds)) {\n          allocations \u003d curAllocations.stream().map(e -\u003e e\n              .filterAllocationAttempts(requestPriorities,\n                  allocationRequestIds))\n              .filter(e -\u003e !e.getAllocationAttempts().isEmpty())\n              .collect(Collectors.toList());\n        } else {\n          allocations \u003d new ArrayList(curAllocations);\n        }\n      }\n      return new AppActivitiesInfo(allocations, applicationId);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "7fa73fac2676875561269e9408215e012269a18c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9439. Support asynchronized scheduling mode and multi-node lookup mechanism for app activities. Contributed by Tao Yang.\n",
      "commitDate": "15/04/19 9:12 AM",
      "commitName": "7fa73fac2676875561269e9408215e012269a18c",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "07/04/19 10:40 PM",
      "commitNameOld": "fc05b0e70e9bb556d6bdc00fa8735e18a6f90bc9",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 7.44,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,17 @@\n   public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId) {\n-    if (rmContext.getRMApps().get(applicationId).getFinalApplicationStatus()\n+    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n+    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n         \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n-      List\u003cAppAllocation\u003e allocations \u003d completedAppAllocations.get(\n-          applicationId);\n-\n+      Queue\u003cAppAllocation\u003e curAllocations \u003d\n+          completedAppAllocations.get(applicationId);\n+      List\u003cAppAllocation\u003e allocations \u003d null;\n+      if (curAllocations !\u003d null) {\n+        allocations \u003d new ArrayList(curAllocations);\n+      }\n       return new AppActivitiesInfo(allocations, applicationId);\n     } else {\n       return new AppActivitiesInfo(\n           \"fail to get application activities after finished\",\n           applicationId.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId) {\n    RMApp app \u003d rmContext.getRMApps().get(applicationId);\n    if (app !\u003d null \u0026\u0026 app.getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      Queue\u003cAppAllocation\u003e curAllocations \u003d\n          completedAppAllocations.get(applicationId);\n      List\u003cAppAllocation\u003e allocations \u003d null;\n      if (curAllocations !\u003d null) {\n        allocations \u003d new ArrayList(curAllocations);\n      }\n      return new AppActivitiesInfo(allocations, applicationId);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
      "extendedDetails": {}
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,13 @@\n+  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId) {\n+    if (rmContext.getRMApps().get(applicationId).getFinalApplicationStatus()\n+        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n+      List\u003cAppAllocation\u003e allocations \u003d completedAppAllocations.get(\n+          applicationId);\n+\n+      return new AppActivitiesInfo(allocations, applicationId);\n+    } else {\n+      return new AppActivitiesInfo(\n+          \"fail to get application activities after finished\",\n+          applicationId.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AppActivitiesInfo getAppActivitiesInfo(ApplicationId applicationId) {\n    if (rmContext.getRMApps().get(applicationId).getFinalApplicationStatus()\n        \u003d\u003d FinalApplicationStatus.UNDEFINED) {\n      List\u003cAppAllocation\u003e allocations \u003d completedAppAllocations.get(\n          applicationId);\n\n      return new AppActivitiesInfo(allocations, applicationId);\n    } else {\n      return new AppActivitiesInfo(\n          \"fail to get application activities after finished\",\n          applicationId.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java"
    }
  }
}