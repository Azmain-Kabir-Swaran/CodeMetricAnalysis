{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainersMonitorImpl.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___myConf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
  "functionStartLine": 129,
  "functionEndLine": 246,
  "numCommitsSeen": 118,
  "timeTaken": 14789,
  "changeHistory": [
    "1ac967a6b77c262b23e10c6ca68538b7e4ed39b0",
    "221089760910743eae58eb2cbd5ac86c4ee96a17",
    "d9964799544eefcf424fcc178d987525f5356cdf",
    "3541ed80685f25486f33ef0f553854ccbdeb51d4",
    "3f93ac0733058238a2c8f23960c986c71dca0e02",
    "9449519a2503c55d9eac8fd7519df28aa0760059",
    "bc2656f09f857fdbc39da6b060cee453d2dec4dc",
    "477a30f536277bf95d7181bf1b2fdda52d83bf51",
    "22e7ae57715cedb1dcba736e357e8daaf5133e5c",
    "5712b8f9fd1859fe046b482889239bd164ed7dab",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d",
    "fdf02d1f26cea372bf69e071f57b8bfc09c092c4",
    "c59ae4eeb17e52e8fc659b9962d20628719fc621",
    "14215c8ef83d58b8443c52a3cb93e6d44fc87065",
    "def12933b38efd5e47c5144b729c1a1496f09229",
    "500a1d9c76ec612b4e737888f4be79951c11591d",
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385",
    "84198564ba6028d51c1fcf9cdcb87f6ae6e08513",
    "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
    "0928502029ef141759008997335ea2cd836a7154",
    "b15b44e722fa69191816bebf319be1396fe68f09",
    "a63d50f79a8cc348e1f5dd84545aeb7766147a4d",
    "a1aa1b93497034411d76906405bb6a70a441a0b7",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "237154982bd5853c6a374cb265520e0602adc52f",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "1ac967a6b77c262b23e10c6ca68538b7e4ed39b0": "Ybodychange",
    "221089760910743eae58eb2cbd5ac86c4ee96a17": "Ybodychange",
    "d9964799544eefcf424fcc178d987525f5356cdf": "Ybodychange",
    "3541ed80685f25486f33ef0f553854ccbdeb51d4": "Ybodychange",
    "3f93ac0733058238a2c8f23960c986c71dca0e02": "Ybodychange",
    "9449519a2503c55d9eac8fd7519df28aa0760059": "Ymultichange(Yparameterchange,Ybodychange)",
    "bc2656f09f857fdbc39da6b060cee453d2dec4dc": "Ybodychange",
    "477a30f536277bf95d7181bf1b2fdda52d83bf51": "Ybodychange",
    "22e7ae57715cedb1dcba736e357e8daaf5133e5c": "Ybodychange",
    "5712b8f9fd1859fe046b482889239bd164ed7dab": "Ybodychange",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": "Ybodychange",
    "fdf02d1f26cea372bf69e071f57b8bfc09c092c4": "Ybodychange",
    "c59ae4eeb17e52e8fc659b9962d20628719fc621": "Ybodychange",
    "14215c8ef83d58b8443c52a3cb93e6d44fc87065": "Ybodychange",
    "def12933b38efd5e47c5144b729c1a1496f09229": "Ybodychange",
    "500a1d9c76ec612b4e737888f4be79951c11591d": "Ybodychange",
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385": "Ybodychange",
    "84198564ba6028d51c1fcf9cdcb87f6ae6e08513": "Ybodychange",
    "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "b15b44e722fa69191816bebf319be1396fe68f09": "Ybodychange",
    "a63d50f79a8cc348e1f5dd84545aeb7766147a4d": "Ybodychange",
    "a1aa1b93497034411d76906405bb6a70a441a0b7": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "237154982bd5853c6a374cb265520e0602adc52f": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1ac967a6b77c262b23e10c6ca68538b7e4ed39b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6055. ContainersMonitorImpl need be adjusted when NM resource changed. Contributed by Inigo Goiri.\n",
      "commitDate": "26/06/19 2:01 PM",
      "commitName": "1ac967a6b77c262b23e10c6ca68538b7e4ed39b0",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "17/06/19 9:23 PM",
      "commitNameOld": "67414a1a80039e70e0afc1de171831a6e981f37a",
      "commitAuthorOld": "Zhankun Tang",
      "daysBetweenCommits": 8.69,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,120 +1,118 @@\n   protected void serviceInit(Configuration myConf) throws Exception {\n     this.conf \u003d myConf;\n     this.monitoringInterval \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n     LOG.info(\"Using ResourceCalculatorPlugin: {}\",\n         this.resourceCalculatorPlugin);\n     processTreeClass \u003d this.conf.getClass(\n             YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     LOG.info(\"Using ResourceCalculatorProcessTree: {}\", this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n-            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n+            this.resourceCalculatorPlugin, this.conf);\n \n-    long configuredVCoresForContainers \u003d\n-        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n-            this.conf);\n-\n-    // Setting these irrespective of whether checks are enabled. Required in\n-    // the UI.\n-    // ///////// Physical memory configuration //////\n-    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n-    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n+    int configuredVCoresForContainers \u003d\n+        NodeManagerHardwareUtils.getVCores(\n+            this.resourceCalculatorPlugin, this.conf);\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n-    this.maxVmemAllottedForContainers \u003d\n-        (long) (vmemRatio * configuredPMemForContainers);\n+\n+    // Setting these irrespective of whether checks are enabled.\n+    // Required in the UI.\n+    Resource resourcesForContainers \u003d Resource.newInstance(\n+        configuredPMemForContainers, configuredVCoresForContainers);\n+    setAllocatedResourcesForContainers(resourcesForContainers);\n \n     pmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     elasticMemoryEnforcement \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_ENABLED,\n         YarnConfiguration.DEFAULT_NM_ELASTIC_MEMORY_CONTROL_ENABLED);\n     strictMemoryEnforcement \u003d conf.getBoolean(\n         YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n         YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n     LOG.info(\"Physical memory check enabled: {}\", pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: {}\", vmemCheckEnabled);\n     LOG.info(\"Elastic memory control enabled: {}\", elasticMemoryEnforcement);\n     LOG.info(\"Strict memory control enabled: {}\", strictMemoryEnforcement);\n \n     if (elasticMemoryEnforcement) {\n       if (!CGroupElasticMemoryController.isAvailable()) {\n         // Test for availability outside the constructor\n         // to be able to write non-Linux unit tests for\n         // CGroupElasticMemoryController\n         throw new YarnException(\n             \"CGroup Elastic Memory controller enabled but \" +\n             \"it is not available. Exiting.\");\n       } else {\n         this.oomListenerThread \u003d new CGroupElasticMemoryController(\n             conf,\n             context,\n             ResourceHandlerModule.getCGroupsHandler(),\n             pmemCheckEnabled,\n             vmemCheckEnabled,\n             pmemCheckEnabled ?\n                 maxPmemAllottedForContainers : maxVmemAllottedForContainers\n         );\n       }\n     }\n \n     containersMonitorEnabled \u003d\n         isContainerMonitorEnabled() \u0026\u0026 monitoringInterval \u003e 0;\n     LOG.info(\"ContainersMonitor enabled: {}\", containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to {}\", UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\n             \"NodeManager configured with {} physical memory allocated to \" +\n             \"containers, which is more than 80% of the total physical memory \" +\n             \"available ({}). Thrashing might happen.\",\n             TraditionalBinaryPrefix.long2String(\n                 maxPmemAllottedForContainers, \"B\", 1),\n             TraditionalBinaryPrefix.long2String(\n                 totalPhysicalMemoryOnNM, \"B\", 1));\n       }\n     }\n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration myConf) throws Exception {\n    this.conf \u003d myConf;\n    this.monitoringInterval \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n    LOG.info(\"Using ResourceCalculatorPlugin: {}\",\n        this.resourceCalculatorPlugin);\n    processTreeClass \u003d this.conf.getClass(\n            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    LOG.info(\"Using ResourceCalculatorProcessTree: {}\", this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, this.conf);\n\n    int configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(\n            this.resourceCalculatorPlugin, this.conf);\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n\n    // Setting these irrespective of whether checks are enabled.\n    // Required in the UI.\n    Resource resourcesForContainers \u003d Resource.newInstance(\n        configuredPMemForContainers, configuredVCoresForContainers);\n    setAllocatedResourcesForContainers(resourcesForContainers);\n\n    pmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    elasticMemoryEnforcement \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_ENABLED,\n        YarnConfiguration.DEFAULT_NM_ELASTIC_MEMORY_CONTROL_ENABLED);\n    strictMemoryEnforcement \u003d conf.getBoolean(\n        YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n        YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n    LOG.info(\"Physical memory check enabled: {}\", pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: {}\", vmemCheckEnabled);\n    LOG.info(\"Elastic memory control enabled: {}\", elasticMemoryEnforcement);\n    LOG.info(\"Strict memory control enabled: {}\", strictMemoryEnforcement);\n\n    if (elasticMemoryEnforcement) {\n      if (!CGroupElasticMemoryController.isAvailable()) {\n        // Test for availability outside the constructor\n        // to be able to write non-Linux unit tests for\n        // CGroupElasticMemoryController\n        throw new YarnException(\n            \"CGroup Elastic Memory controller enabled but \" +\n            \"it is not available. Exiting.\");\n      } else {\n        this.oomListenerThread \u003d new CGroupElasticMemoryController(\n            conf,\n            context,\n            ResourceHandlerModule.getCGroupsHandler(),\n            pmemCheckEnabled,\n            vmemCheckEnabled,\n            pmemCheckEnabled ?\n                maxPmemAllottedForContainers : maxVmemAllottedForContainers\n        );\n      }\n    }\n\n    containersMonitorEnabled \u003d\n        isContainerMonitorEnabled() \u0026\u0026 monitoringInterval \u003e 0;\n    LOG.info(\"ContainersMonitor enabled: {}\", containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to {}\", UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\n            \"NodeManager configured with {} physical memory allocated to \" +\n            \"containers, which is more than 80% of the total physical memory \" +\n            \"available ({}). Thrashing might happen.\",\n            TraditionalBinaryPrefix.long2String(\n                maxPmemAllottedForContainers, \"B\", 1),\n            TraditionalBinaryPrefix.long2String(\n                totalPhysicalMemoryOnNM, \"B\", 1));\n      }\n    }\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "221089760910743eae58eb2cbd5ac86c4ee96a17": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9592. Use Logger format in ContainersMonitorImpl. Contributed by Inigo Goiri.\n",
      "commitDate": "31/05/19 5:35 PM",
      "commitName": "221089760910743eae58eb2cbd5ac86c4ee96a17",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 77.05,
      "commitsBetweenForRepo": 469,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,120 +1,120 @@\n   protected void serviceInit(Configuration myConf) throws Exception {\n     this.conf \u003d myConf;\n     this.monitoringInterval \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n-    LOG.info(\" Using ResourceCalculatorPlugin : \"\n-        + this.resourceCalculatorPlugin);\n+    LOG.info(\"Using ResourceCalculatorPlugin: {}\",\n+        this.resourceCalculatorPlugin);\n     processTreeClass \u003d this.conf.getClass(\n             YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n-    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n-        + this.processTreeClass);\n+    LOG.info(\"Using ResourceCalculatorProcessTree: {}\", this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n             this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n             this.conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     elasticMemoryEnforcement \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_ENABLED,\n         YarnConfiguration.DEFAULT_NM_ELASTIC_MEMORY_CONTROL_ENABLED);\n     strictMemoryEnforcement \u003d conf.getBoolean(\n         YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n         YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n-    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n-    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n-    LOG.info(\"Elastic memory control enabled: \" + elasticMemoryEnforcement);\n-    LOG.info(\"Strict memory control enabled: \" + strictMemoryEnforcement);\n+    LOG.info(\"Physical memory check enabled: {}\", pmemCheckEnabled);\n+    LOG.info(\"Virtual memory check enabled: {}\", vmemCheckEnabled);\n+    LOG.info(\"Elastic memory control enabled: {}\", elasticMemoryEnforcement);\n+    LOG.info(\"Strict memory control enabled: {}\", strictMemoryEnforcement);\n \n     if (elasticMemoryEnforcement) {\n       if (!CGroupElasticMemoryController.isAvailable()) {\n         // Test for availability outside the constructor\n         // to be able to write non-Linux unit tests for\n         // CGroupElasticMemoryController\n         throw new YarnException(\n             \"CGroup Elastic Memory controller enabled but \" +\n             \"it is not available. Exiting.\");\n       } else {\n         this.oomListenerThread \u003d new CGroupElasticMemoryController(\n             conf,\n             context,\n             ResourceHandlerModule.getCGroupsHandler(),\n             pmemCheckEnabled,\n             vmemCheckEnabled,\n             pmemCheckEnabled ?\n                 maxPmemAllottedForContainers : maxVmemAllottedForContainers\n         );\n       }\n     }\n \n     containersMonitorEnabled \u003d\n         isContainerMonitorEnabled() \u0026\u0026 monitoringInterval \u003e 0;\n-    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n+    LOG.info(\"ContainersMonitor enabled: {}\", containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n-              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n+              + \"Setting it to {}\", UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n-        LOG.warn(\"NodeManager configured with \"\n-            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n-                \"\", 1)\n-            + \" physical memory allocated to containers, which is more than \"\n-            + \"80% of the total physical memory available (\"\n-            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n-                1) + \"). Thrashing might happen.\");\n+        LOG.warn(\n+            \"NodeManager configured with {} physical memory allocated to \" +\n+            \"containers, which is more than 80% of the total physical memory \" +\n+            \"available ({}). Thrashing might happen.\",\n+            TraditionalBinaryPrefix.long2String(\n+                maxPmemAllottedForContainers, \"B\", 1),\n+            TraditionalBinaryPrefix.long2String(\n+                totalPhysicalMemoryOnNM, \"B\", 1));\n       }\n     }\n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration myConf) throws Exception {\n    this.conf \u003d myConf;\n    this.monitoringInterval \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n    LOG.info(\"Using ResourceCalculatorPlugin: {}\",\n        this.resourceCalculatorPlugin);\n    processTreeClass \u003d this.conf.getClass(\n            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    LOG.info(\"Using ResourceCalculatorProcessTree: {}\", this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n            this.conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    elasticMemoryEnforcement \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_ENABLED,\n        YarnConfiguration.DEFAULT_NM_ELASTIC_MEMORY_CONTROL_ENABLED);\n    strictMemoryEnforcement \u003d conf.getBoolean(\n        YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n        YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n    LOG.info(\"Physical memory check enabled: {}\", pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: {}\", vmemCheckEnabled);\n    LOG.info(\"Elastic memory control enabled: {}\", elasticMemoryEnforcement);\n    LOG.info(\"Strict memory control enabled: {}\", strictMemoryEnforcement);\n\n    if (elasticMemoryEnforcement) {\n      if (!CGroupElasticMemoryController.isAvailable()) {\n        // Test for availability outside the constructor\n        // to be able to write non-Linux unit tests for\n        // CGroupElasticMemoryController\n        throw new YarnException(\n            \"CGroup Elastic Memory controller enabled but \" +\n            \"it is not available. Exiting.\");\n      } else {\n        this.oomListenerThread \u003d new CGroupElasticMemoryController(\n            conf,\n            context,\n            ResourceHandlerModule.getCGroupsHandler(),\n            pmemCheckEnabled,\n            vmemCheckEnabled,\n            pmemCheckEnabled ?\n                maxPmemAllottedForContainers : maxVmemAllottedForContainers\n        );\n      }\n    }\n\n    containersMonitorEnabled \u003d\n        isContainerMonitorEnabled() \u0026\u0026 monitoringInterval \u003e 0;\n    LOG.info(\"ContainersMonitor enabled: {}\", containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to {}\", UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\n            \"NodeManager configured with {} physical memory allocated to \" +\n            \"containers, which is more than 80% of the total physical memory \" +\n            \"available ({}). Thrashing might happen.\",\n            TraditionalBinaryPrefix.long2String(\n                maxPmemAllottedForContainers, \"B\", 1),\n            TraditionalBinaryPrefix.long2String(\n                totalPhysicalMemoryOnNM, \"B\", 1));\n      }\n    }\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "d9964799544eefcf424fcc178d987525f5356cdf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4599. Set OOM control for memory cgroups. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "23/05/18 4:35 PM",
      "commitName": "d9964799544eefcf424fcc178d987525f5356cdf",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "28/03/18 9:05 AM",
      "commitNameOld": "cdee0a4f840868d8b8acac15e62da2ab337618c7",
      "commitAuthorOld": "Miklos Szegedi",
      "daysBetweenCommits": 56.31,
      "commitsBetweenForRepo": 913,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,120 @@\n   protected void serviceInit(Configuration myConf) throws Exception {\n     this.conf \u003d myConf;\n     this.monitoringInterval \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d this.conf.getClass(\n             YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n             this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n             this.conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n+    elasticMemoryEnforcement \u003d this.conf.getBoolean(\n+        YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_ENABLED,\n+        YarnConfiguration.DEFAULT_NM_ELASTIC_MEMORY_CONTROL_ENABLED);\n+    strictMemoryEnforcement \u003d conf.getBoolean(\n+        YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n+        YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n+    LOG.info(\"Elastic memory control enabled: \" + elasticMemoryEnforcement);\n+    LOG.info(\"Strict memory control enabled: \" + strictMemoryEnforcement);\n+\n+    if (elasticMemoryEnforcement) {\n+      if (!CGroupElasticMemoryController.isAvailable()) {\n+        // Test for availability outside the constructor\n+        // to be able to write non-Linux unit tests for\n+        // CGroupElasticMemoryController\n+        throw new YarnException(\n+            \"CGroup Elastic Memory controller enabled but \" +\n+            \"it is not available. Exiting.\");\n+      } else {\n+        this.oomListenerThread \u003d new CGroupElasticMemoryController(\n+            conf,\n+            context,\n+            ResourceHandlerModule.getCGroupsHandler(),\n+            pmemCheckEnabled,\n+            vmemCheckEnabled,\n+            pmemCheckEnabled ?\n+                maxPmemAllottedForContainers : maxVmemAllottedForContainers\n+        );\n+      }\n+    }\n \n     containersMonitorEnabled \u003d\n         isContainerMonitorEnabled() \u0026\u0026 monitoringInterval \u003e 0;\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration myConf) throws Exception {\n    this.conf \u003d myConf;\n    this.monitoringInterval \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d this.conf.getClass(\n            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n            this.conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    elasticMemoryEnforcement \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_ENABLED,\n        YarnConfiguration.DEFAULT_NM_ELASTIC_MEMORY_CONTROL_ENABLED);\n    strictMemoryEnforcement \u003d conf.getBoolean(\n        YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n        YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n    LOG.info(\"Elastic memory control enabled: \" + elasticMemoryEnforcement);\n    LOG.info(\"Strict memory control enabled: \" + strictMemoryEnforcement);\n\n    if (elasticMemoryEnforcement) {\n      if (!CGroupElasticMemoryController.isAvailable()) {\n        // Test for availability outside the constructor\n        // to be able to write non-Linux unit tests for\n        // CGroupElasticMemoryController\n        throw new YarnException(\n            \"CGroup Elastic Memory controller enabled but \" +\n            \"it is not available. Exiting.\");\n      } else {\n        this.oomListenerThread \u003d new CGroupElasticMemoryController(\n            conf,\n            context,\n            ResourceHandlerModule.getCGroupsHandler(),\n            pmemCheckEnabled,\n            vmemCheckEnabled,\n            pmemCheckEnabled ?\n                maxPmemAllottedForContainers : maxVmemAllottedForContainers\n        );\n      }\n    }\n\n    containersMonitorEnabled \u003d\n        isContainerMonitorEnabled() \u0026\u0026 monitoringInterval \u003e 0;\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "3541ed80685f25486f33ef0f553854ccbdeb51d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4330. MiniYARNCluster is showing multiple  Failed to instantiate default resource calculator warning messages. Contributed by Varun Saxena\n",
      "commitDate": "23/11/16 12:42 AM",
      "commitName": "3541ed80685f25486f33ef0f553854ccbdeb51d4",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "15/11/16 7:56 AM",
      "commitNameOld": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 7.7,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,91 @@\n   protected void serviceInit(Configuration myConf) throws Exception {\n     this.conf \u003d myConf;\n     this.monitoringInterval \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d this.conf.getClass(\n             YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n             this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n             this.conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n-    containersMonitorEnabled \u003d isContainerMonitorEnabled();\n+    containersMonitorEnabled \u003d\n+        isContainerMonitorEnabled() \u0026\u0026 monitoringInterval \u003e 0;\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration myConf) throws Exception {\n    this.conf \u003d myConf;\n    this.monitoringInterval \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d this.conf.getClass(\n            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n            this.conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d\n        isContainerMonitorEnabled() \u0026\u0026 monitoringInterval \u003e 0;\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "3f93ac0733058238a2c8f23960c986c71dca0e02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5356. NodeManager should communicate physical resource capability to ResourceManager. Contributed by Inigo Goiri\n",
      "commitDate": "08/11/16 2:01 PM",
      "commitName": "3f93ac0733058238a2c8f23960c986c71dca0e02",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "04/11/16 7:31 AM",
      "commitNameOld": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 4.31,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,90 @@\n   protected void serviceInit(Configuration myConf) throws Exception {\n     this.conf \u003d myConf;\n     this.monitoringInterval \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n-    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n-        this.conf.getClass(YarnConfiguration\n-                        .NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n-            this.conf.getClass(\n-                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n-                ResourceCalculatorPlugin.class),\n-            ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n-        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, this.conf);\n+        ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d this.conf.getClass(\n             YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n             this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n             this.conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d this.conf.getBoolean(\n         YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isContainerMonitorEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration myConf) throws Exception {\n    this.conf \u003d myConf;\n    this.monitoringInterval \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d this.conf.getClass(\n            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n            this.conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isContainerMonitorEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "9449519a2503c55d9eac8fd7519df28aa0760059": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5776. Checkstyle: MonitoringThread.Run method length is too long (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "27/10/16 2:36 PM",
      "commitName": "9449519a2503c55d9eac8fd7519df28aa0760059",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5776. Checkstyle: MonitoringThread.Run method length is too long (miklos.szegedi@cloudera.com via rkanter)\n",
          "commitDate": "27/10/16 2:36 PM",
          "commitName": "9449519a2503c55d9eac8fd7519df28aa0760059",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "28/09/16 2:48 AM",
          "commitNameOld": "bc2656f09f857fdbc39da6b060cee453d2dec4dc",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 29.49,
          "commitsBetweenForRepo": 249,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,92 +1,97 @@\n-  protected void serviceInit(Configuration conf) throws Exception {\n+  protected void serviceInit(Configuration myConf) throws Exception {\n+    this.conf \u003d myConf;\n     this.monitoringInterval \u003d\n-        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n-            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n+        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n+            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n-        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n-            conf.getClass(\n+        this.conf.getClass(YarnConfiguration\n+                        .NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n+            this.conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n-        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n+        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, this.conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n-    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n+    processTreeClass \u003d this.conf.getClass(\n+            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n-    this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n-        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n+        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n-        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n+        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n-    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n+    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n-            this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n+            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n-        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n+        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n+            this.conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n-    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n+    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n-    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n+    pmemCheckEnabled \u003d this.conf.getBoolean(\n+        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n-    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n+    vmemCheckEnabled \u003d this.conf.getBoolean(\n+        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isContainerMonitorEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n-        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n+        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n-    super.serviceInit(conf);\n+    super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration myConf) throws Exception {\n    this.conf \u003d myConf;\n    this.monitoringInterval \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        this.conf.getClass(YarnConfiguration\n                        .NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            this.conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, this.conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d this.conf.getClass(\n            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n            this.conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isContainerMonitorEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(this.conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[myConf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5776. Checkstyle: MonitoringThread.Run method length is too long (miklos.szegedi@cloudera.com via rkanter)\n",
          "commitDate": "27/10/16 2:36 PM",
          "commitName": "9449519a2503c55d9eac8fd7519df28aa0760059",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "28/09/16 2:48 AM",
          "commitNameOld": "bc2656f09f857fdbc39da6b060cee453d2dec4dc",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 29.49,
          "commitsBetweenForRepo": 249,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,92 +1,97 @@\n-  protected void serviceInit(Configuration conf) throws Exception {\n+  protected void serviceInit(Configuration myConf) throws Exception {\n+    this.conf \u003d myConf;\n     this.monitoringInterval \u003d\n-        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n-            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n+        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n+            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n-        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n-            conf.getClass(\n+        this.conf.getClass(YarnConfiguration\n+                        .NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n+            this.conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n-        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n+        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, this.conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n-    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n+    processTreeClass \u003d this.conf.getClass(\n+            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n-    this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n-        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n+        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n-        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n+        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n-    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n+    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n-            this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n+            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n-        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n+        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n+            this.conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n-    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n+    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n-    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n+    pmemCheckEnabled \u003d this.conf.getBoolean(\n+        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n-    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n+    vmemCheckEnabled \u003d this.conf.getBoolean(\n+        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isContainerMonitorEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n-        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n+        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n-    super.serviceInit(conf);\n+    super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration myConf) throws Exception {\n    this.conf \u003d myConf;\n    this.monitoringInterval \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        this.conf.getClass(YarnConfiguration\n                        .NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            this.conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, this.conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d this.conf.getClass(\n            YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d this.conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, this.conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,\n            this.conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d this.conf.getBoolean(\n        YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isContainerMonitorEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(this.conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "bc2656f09f857fdbc39da6b060cee453d2dec4dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5662. Provide an option to enable ContainerMonitor. Contributed by Jian He.\n",
      "commitDate": "28/09/16 2:48 AM",
      "commitName": "bc2656f09f857fdbc39da6b060cee453d2dec4dc",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "16/09/16 10:05 PM",
      "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 11.2,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,92 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n             conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n             this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n-    containersMonitorEnabled \u003d isEnabled();\n+    containersMonitorEnabled \u003d isContainerMonitorEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isContainerMonitorEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "477a30f536277bf95d7181bf1b2fdda52d83bf51": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3045. Implement NM writing container lifecycle events to Timeline Service v2. Contributed by Naganarasimha G R.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "477a30f536277bf95d7181bf1b2fdda52d83bf51",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "22e7ae57715cedb1dcba736e357e8daaf5133e5c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,108 +1,92 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n             conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n             this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n-    \n-    publishContainerMetricsToTimelineService \u003d\n-        YarnConfiguration.systemMetricsPublisherEnabled(conf);\n-\n-    if (publishContainerMetricsToTimelineService) {\n-      LOG.info(\"NodeManager has been configured to publish container \" +\n-          \"metrics to Timeline Service V2.\");\n-      threadPool \u003d\n-          Executors.newCachedThreadPool(\n-              new ThreadFactoryBuilder().setNameFormat(\"TimelineService #%d\")\n-              .build());\n-    } else {\n-      LOG.warn(\"NodeManager has not been configured to publish container \" +\n-          \"metrics to Timeline Service V2.\");\n-    }\n-    \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "22e7ae57715cedb1dcba736e357e8daaf5133e5c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3792. Test case failures in TestDistributedShell and some issue fixes related to ATSV2 (Naganarasimha G R via sjlee)\n\n(cherry picked from commit 84f37f1c7eefec6d139cbf091c50d6c06f734323)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "22e7ae57715cedb1dcba736e357e8daaf5133e5c",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "fc8485d8934edf02bdef746d022d1125680e6efe",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,108 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n             conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n             this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     \n     publishContainerMetricsToTimelineService \u003d\n         YarnConfiguration.systemMetricsPublisherEnabled(conf);\n \n     if (publishContainerMetricsToTimelineService) {\n       LOG.info(\"NodeManager has been configured to publish container \" +\n           \"metrics to Timeline Service V2.\");\n+      threadPool \u003d\n+          Executors.newCachedThreadPool(\n+              new ThreadFactoryBuilder().setNameFormat(\"TimelineService #%d\")\n+              .build());\n     } else {\n       LOG.warn(\"NodeManager has not been configured to publish container \" +\n           \"metrics to Timeline Service V2.\");\n     }\n     \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    \n    publishContainerMetricsToTimelineService \u003d\n        YarnConfiguration.systemMetricsPublisherEnabled(conf);\n\n    if (publishContainerMetricsToTimelineService) {\n      LOG.info(\"NodeManager has been configured to publish container \" +\n          \"metrics to Timeline Service V2.\");\n      threadPool \u003d\n          Executors.newCachedThreadPool(\n              new ThreadFactoryBuilder().setNameFormat(\"TimelineService #%d\")\n              .build());\n    } else {\n      LOG.warn(\"NodeManager has not been configured to publish container \" +\n          \"metrics to Timeline Service V2.\");\n    }\n    \n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "5712b8f9fd1859fe046b482889239bd164ed7dab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3334. NM uses timeline client to publish container metrics to new timeline service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5712b8f9fd1859fe046b482889239bd164ed7dab",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "08/06/16 5:11 PM",
      "commitNameOld": "1500a0a3009e453c9f05a93df7a78b4e185eef30",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 31.65,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,104 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n             conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(\n             this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n+    \n+    publishContainerMetricsToTimelineService \u003d\n+        YarnConfiguration.systemMetricsPublisherEnabled(conf);\n+\n+    if (publishContainerMetricsToTimelineService) {\n+      LOG.info(\"NodeManager has been configured to publish container \" +\n+          \"metrics to Timeline Service V2.\");\n+    } else {\n+      LOG.warn(\"NodeManager has not been configured to publish container \" +\n+          \"metrics to Timeline Service V2.\");\n+    }\n+    \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    \n    publishContainerMetricsToTimelineService \u003d\n        YarnConfiguration.systemMetricsPublisherEnabled(conf);\n\n    if (publishContainerMetricsToTimelineService) {\n      LOG.info(\"NodeManager has been configured to publish container \" +\n          \"metrics to Timeline Service V2.\");\n    } else {\n      LOG.warn(\"NodeManager has not been configured to publish container \" +\n          \"metrics to Timeline Service V2.\");\n    }\n    \n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
      "commitDate": "20/04/16 9:55 AM",
      "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "16/12/15 1:18 PM",
      "commitNameOld": "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 125.82,
      "commitsBetweenForRepo": 781,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,92 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n             conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n     this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n         YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n         YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n-        NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n+        NodeManagerHardwareUtils.getContainerMemoryMB(\n+            this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n-        NodeManagerHardwareUtils.getVCores(conf);\n+        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(\n            this.resourceCalculatorPlugin, conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "fdf02d1f26cea372bf69e071f57b8bfc09c092c4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3619. ContainerMetrics unregisters during getMetrics and leads to ConcurrentModificationException. Contributed by Zhihai Xu\n",
      "commitDate": "02/10/15 1:20 PM",
      "commitName": "fdf02d1f26cea372bf69e071f57b8bfc09c092c4",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "c59ae4eeb17e52e8fc659b9962d20628719fc621",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,91 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n             conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n+    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n+        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n+        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n    this.containerMetricsUnregisterDelayMs \u003d conf.getLong(\n        YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,\n        YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "c59ae4eeb17e52e8fc659b9962d20628719fc621": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1643. Make ContainersMonitor support changing monitoring size of an allocated container. Contributed by Meng Ding and Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c59ae4eeb17e52e8fc659b9962d20628719fc621",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/08/15 11:36 AM",
      "commitNameOld": "14215c8ef83d58b8443c52a3cb93e6d44fc87065",
      "commitAuthorOld": "Zhihai Xu",
      "daysBetweenCommits": 36.08,
      "commitsBetweenForRepo": 216,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,88 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n             conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n-    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n+    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     containersMonitorEnabled \u003d isEnabled();\n     LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "14215c8ef83d58b8443c52a3cb93e6d44fc87065": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4057. If ContainersMonitor is not enabled, only print related log info one time. Contributed by Jun Gong.\n",
      "commitDate": "18/08/15 11:36 AM",
      "commitName": "14215c8ef83d58b8443c52a3cb93e6d44fc87065",
      "commitAuthor": "Zhihai Xu",
      "commitDateOld": "16/08/15 6:24 AM",
      "commitNameOld": "def12933b38efd5e47c5144b729c1a1496f09229",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 2.22,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,88 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                 YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n             conf.getClass(\n                 YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                 ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n+    containersMonitorEnabled \u003d isEnabled();\n+    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n+\n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    containersMonitorEnabled \u003d isEnabled();\n    LOG.info(\"ContainersMonitor enabled: \" + containersMonitorEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "def12933b38efd5e47c5144b729c1a1496f09229": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3534. Collect memory/cpu usage on the node. (Inigo Goiri via kasha)\n",
      "commitDate": "16/08/15 6:24 AM",
      "commitName": "def12933b38efd5e47c5144b729c1a1496f09229",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "09/07/15 9:35 AM",
      "commitNameOld": "527c40e4d664c721b8f32d7cd8df21b2666fea8a",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 37.87,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,85 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n-            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n+            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n+                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n-        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n+        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n+            conf.getClass(\n+                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n+                ResourceCalculatorPlugin.class),\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n \n     long configuredPMemForContainers \u003d\n         NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n \n     long configuredVCoresForContainers \u003d\n         NodeManagerHardwareUtils.getVCores(conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,\n                YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,\n            conf.getClass(\n                YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,\n                ResourceCalculatorPlugin.class),\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "500a1d9c76ec612b4e737888f4be79951c11591d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-160. Enhanced NodeManager to automatically obtain cpu/memory values from underlying OS when configured to do so. Contributed by Varun Vasudev.\n",
      "commitDate": "26/05/15 11:38 AM",
      "commitName": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/05/15 4:24 AM",
      "commitNameOld": "8badd82ce256e4dc8c234961120d62a88358ab39",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 14.3,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,81 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n \n-    long configuredPMemForContainers \u003d conf.getLong(\n-        YarnConfiguration.NM_PMEM_MB,\n-        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n+    long configuredPMemForContainers \u003d\n+        NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n \n-    long configuredVCoresForContainers \u003d conf.getLong(\n-        YarnConfiguration.NM_VCORES,\n-        YarnConfiguration.DEFAULT_NM_VCORES);\n-\n+    long configuredVCoresForContainers \u003d\n+        NodeManagerHardwareUtils.getVCores(conf);\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     nodeCpuPercentageForYARN \u003d\n         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n\n    long configuredPMemForContainers \u003d\n        NodeManagerHardwareUtils.getContainerMemoryMB(conf) * 1024 * 1024L;\n\n    long configuredVCoresForContainers \u003d\n        NodeManagerHardwareUtils.getVCores(conf);\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3122. Metrics for container\u0027s actual CPU usage. (Anubhav Dhoot via kasha)\n",
      "commitDate": "04/03/15 5:33 PM",
      "commitName": "53947f37c7a84a84ef4ab1a3cab63ff27c078385",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/02/15 10:39 AM",
      "commitNameOld": "f7a77819a1e4ff394e110941c1f8dd80f47dd38f",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 29.29,
      "commitsBetweenForRepo": 317,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,84 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     this.containerMetricsEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n     this.containerMetricsPeriodMs \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n \n     long configuredPMemForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_PMEM_MB,\n         YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n \n     long configuredVCoresForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_VCORES,\n         YarnConfiguration.DEFAULT_NM_VCORES);\n \n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n+    nodeCpuPercentageForYARN \u003d\n+        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n+\n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n\n    long configuredPMemForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_PMEM_MB,\n        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n\n    long configuredVCoresForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_VCORES,\n        YarnConfiguration.DEFAULT_NM_VCORES);\n\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    nodeCpuPercentageForYARN \u003d\n        NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "84198564ba6028d51c1fcf9cdcb87f6ae6e08513": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2984. Metrics for container\u0027s actual memory usage. (kasha)\n",
      "commitDate": "16/01/15 4:14 PM",
      "commitName": "84198564ba6028d51c1fcf9cdcb87f6ae6e08513",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "24/06/14 12:34 PM",
      "commitNameOld": "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 206.19,
      "commitsBetweenForRepo": 1736,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,81 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n+    this.containerMetricsEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n+            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n+    this.containerMetricsPeriodMs \u003d\n+        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n+            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n+\n     long configuredPMemForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_PMEM_MB,\n         YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n \n     long configuredVCoresForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_VCORES,\n         YarnConfiguration.DEFAULT_NM_VCORES);\n \n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n     this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    this.containerMetricsEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\n    this.containerMetricsPeriodMs \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\n\n    long configuredPMemForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_PMEM_MB,\n        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n\n    long configuredVCoresForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_VCORES,\n        YarnConfiguration.DEFAULT_NM_VCORES);\n\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2072. RM/NM UIs and webservices are missing vcore information. (Nathan Roberts via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605162 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 12:34 PM",
      "commitName": "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "10/06/14 1:08 PM",
      "commitNameOld": "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 13.98,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,74 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     long configuredPMemForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_PMEM_MB,\n         YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n \n+    long configuredVCoresForContainers \u003d conf.getLong(\n+        YarnConfiguration.NM_VCORES,\n+        YarnConfiguration.DEFAULT_NM_VCORES);\n+\n+\n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n+    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    long configuredPMemForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_PMEM_MB,\n        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n\n    long configuredVCoresForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_VCORES,\n        YarnConfiguration.DEFAULT_NM_VCORES);\n\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n    this.maxVCoresAllottedForContainers \u003d configuredVCoresForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/03/13 2:28 PM",
          "commitNameOld": "b15b44e722fa69191816bebf319be1396fe68f09",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 82.77,
          "commitsBetweenForRepo": 514,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,68 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     long configuredPMemForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_PMEM_MB,\n         YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    long configuredPMemForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_PMEM_MB,\n        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/03/13 2:28 PM",
          "commitNameOld": "b15b44e722fa69191816bebf319be1396fe68f09",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 82.77,
          "commitsBetweenForRepo": 514,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,68 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     long configuredPMemForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_PMEM_MB,\n         YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    long configuredPMemForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_PMEM_MB,\n        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/03/13 2:28 PM",
          "commitNameOld": "b15b44e722fa69191816bebf319be1396fe68f09",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 82.77,
          "commitsBetweenForRepo": 514,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,68 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     long configuredPMemForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_PMEM_MB,\n         YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    long configuredPMemForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_PMEM_MB,\n        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/03/13 2:28 PM",
          "commitNameOld": "b15b44e722fa69191816bebf319be1396fe68f09",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 82.77,
          "commitsBetweenForRepo": 514,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,68 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     long configuredPMemForContainers \u003d conf.getLong(\n         YarnConfiguration.NM_PMEM_MB,\n         YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n \n     // Setting these irrespective of whether checks are enabled. Required in\n     // the UI.\n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n         (long) (vmemRatio * configuredPMemForContainers);\n \n     pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n     LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n \n     if (pmemCheckEnabled) {\n       // Logging if actual pmem cannot be determined.\n       long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n       if (this.resourceCalculatorPlugin !\u003d null) {\n         totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n             .getPhysicalMemorySize();\n         if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n           LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n               + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n           totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n         }\n       }\n \n       if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n           this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n         LOG.warn(\"NodeManager configured with \"\n             + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                 \"\", 1)\n             + \" physical memory allocated to containers, which is more than \"\n             + \"80% of the total physical memory available (\"\n             + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                 1) + \"). Thrashing might happen.\");\n       }\n     }\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    long configuredPMemForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_PMEM_MB,\n        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "b15b44e722fa69191816bebf319be1396fe68f09": {
      "type": "Ybodychange",
      "commitMessage": "YARN-470. Support a way to disable resource monitoring on the NodeManager. Contributed by Siddharth Seth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460001 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/13 2:28 PM",
      "commitName": "b15b44e722fa69191816bebf319be1396fe68f09",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "07/02/13 3:53 PM",
      "commitNameOld": "a63d50f79a8cc348e1f5dd84545aeb7766147a4d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 42.9,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,68 @@\n   public synchronized void init(Configuration conf) {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n-    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n-    if (this.resourceCalculatorPlugin !\u003d null) {\n-      totalPhysicalMemoryOnNM \u003d\n-          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n-      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n-        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n-            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n-        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n-      }\n-    }\n+    long configuredPMemForContainers \u003d conf.getLong(\n+        YarnConfiguration.NM_PMEM_MB,\n+        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n \n+    // Setting these irrespective of whether checks are enabled. Required in\n+    // the UI.\n     // ///////// Physical memory configuration //////\n-    this.maxPmemAllottedForContainers \u003d\n-        conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n-    this.maxPmemAllottedForContainers \u003d\n-        this.maxPmemAllottedForContainers * 1024 * 1024L; //Normalize to bytes\n-\n-    if (totalPhysicalMemoryOnNM !\u003d DISABLED_MEMORY_LIMIT \u0026\u0026\n-        this.maxPmemAllottedForContainers \u003e\n-        totalPhysicalMemoryOnNM * 0.80f) {\n-      LOG.warn(\"NodeManager configured with \" +\n-          TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers, \"\", 1) +\n-          \" physical memory allocated to containers, which is more than \" +\n-          \"80% of the total physical memory available (\" +\n-          TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\", 1) +\n-          \"). Thrashing might happen.\");\n-    }\n+    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n \n     // ///////// Virtual memory configuration //////\n-    float vmemRatio \u003d conf.getFloat(\n-        YarnConfiguration.NM_VMEM_PMEM_RATIO,\n+    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n-        YarnConfiguration.NM_VMEM_PMEM_RATIO +\n-        \" should be at least 1.0\");\n+        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n-      (long)(vmemRatio * maxPmemAllottedForContainers);\n+        (long) (vmemRatio * configuredPMemForContainers);\n \n+    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n+        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n+    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n+        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n+    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n+    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n+\n+    if (pmemCheckEnabled) {\n+      // Logging if actual pmem cannot be determined.\n+      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n+      if (this.resourceCalculatorPlugin !\u003d null) {\n+        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n+            .getPhysicalMemorySize();\n+        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n+          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n+              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n+          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n+        }\n+      }\n+\n+      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n+          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n+        LOG.warn(\"NodeManager configured with \"\n+            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n+                \"\", 1)\n+            + \" physical memory allocated to containers, which is more than \"\n+            + \"80% of the total physical memory available (\"\n+            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n+                1) + \"). Thrashing might happen.\");\n+      }\n+    }\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    long configuredPMemForContainers \u003d conf.getLong(\n        YarnConfiguration.NM_PMEM_MB,\n        YarnConfiguration.DEFAULT_NM_PMEM_MB) * 1024 * 1024l;\n\n    // Setting these irrespective of whether checks are enabled. Required in\n    // the UI.\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d configuredPMemForContainers;\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n        (long) (vmemRatio * configuredPMemForContainers);\n\n    pmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    vmemCheckEnabled \u003d conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n        YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    LOG.info(\"Physical memory check enabled: \" + pmemCheckEnabled);\n    LOG.info(\"Virtual memory check enabled: \" + vmemCheckEnabled);\n\n    if (pmemCheckEnabled) {\n      // Logging if actual pmem cannot be determined.\n      long totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n      if (this.resourceCalculatorPlugin !\u003d null) {\n        totalPhysicalMemoryOnNM \u003d this.resourceCalculatorPlugin\n            .getPhysicalMemorySize();\n        if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n          LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n              + \"Setting it to \" + UNKNOWN_MEMORY_LIMIT);\n          totalPhysicalMemoryOnNM \u003d UNKNOWN_MEMORY_LIMIT;\n        }\n      }\n\n      if (totalPhysicalMemoryOnNM !\u003d UNKNOWN_MEMORY_LIMIT \u0026\u0026\n          this.maxPmemAllottedForContainers \u003e totalPhysicalMemoryOnNM * 0.80f) {\n        LOG.warn(\"NodeManager configured with \"\n            + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,\n                \"\", 1)\n            + \" physical memory allocated to containers, which is more than \"\n            + \"80% of the total physical memory available (\"\n            + TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\",\n                1) + \"). Thrashing might happen.\");\n      }\n    }\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "a63d50f79a8cc348e1f5dd84545aeb7766147a4d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-377. Use the new StringUtils methods added by HADOOP-9252 and fix TestContainersMonitor.  Contributed by Chris Nauroth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1443796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/13 3:53 PM",
      "commitName": "a63d50f79a8cc348e1f5dd84545aeb7766147a4d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "19/12/12 4:20 PM",
      "commitNameOld": "1a49c854386d3ba4aef6f29f46e2bd5e71e86dc1",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 49.98,
      "commitsBetweenForRepo": 237,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   public synchronized void init(Configuration conf) {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n     processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n             ResourceCalculatorProcessTree.class);\n     this.conf \u003d conf;\n     LOG.info(\" Using ResourceCalculatorProcessTree : \"\n         + this.processTreeClass);\n \n     long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n     if (this.resourceCalculatorPlugin !\u003d null) {\n       totalPhysicalMemoryOnNM \u003d\n           this.resourceCalculatorPlugin.getPhysicalMemorySize();\n       if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n         LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n             + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n         totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n       }\n     }\n \n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d\n         conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     this.maxPmemAllottedForContainers \u003d\n         this.maxPmemAllottedForContainers * 1024 * 1024L; //Normalize to bytes\n \n     if (totalPhysicalMemoryOnNM !\u003d DISABLED_MEMORY_LIMIT \u0026\u0026\n         this.maxPmemAllottedForContainers \u003e\n         totalPhysicalMemoryOnNM * 0.80f) {\n       LOG.warn(\"NodeManager configured with \" +\n-          StringUtils.humanReadableInt(maxPmemAllottedForContainers) +\n+          TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers, \"\", 1) +\n           \" physical memory allocated to containers, which is more than \" +\n           \"80% of the total physical memory available (\" +\n-          StringUtils.humanReadableInt(totalPhysicalMemoryOnNM) +\n+          TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\", 1) +\n           \"). Thrashing might happen.\");\n     }\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(\n         YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO +\n         \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n       (long)(vmemRatio * maxPmemAllottedForContainers);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n    if (this.resourceCalculatorPlugin !\u003d null) {\n      totalPhysicalMemoryOnNM \u003d\n          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n      }\n    }\n\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d\n        conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.maxPmemAllottedForContainers \u003d\n        this.maxPmemAllottedForContainers * 1024 * 1024L; //Normalize to bytes\n\n    if (totalPhysicalMemoryOnNM !\u003d DISABLED_MEMORY_LIMIT \u0026\u0026\n        this.maxPmemAllottedForContainers \u003e\n        totalPhysicalMemoryOnNM * 0.80f) {\n      LOG.warn(\"NodeManager configured with \" +\n          TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers, \"\", 1) +\n          \" physical memory allocated to containers, which is more than \" +\n          \"80% of the total physical memory available (\" +\n          TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"\", 1) +\n          \"). Thrashing might happen.\");\n    }\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(\n        YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO +\n        \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n      (long)(vmemRatio * maxPmemAllottedForContainers);\n\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "a1aa1b93497034411d76906405bb6a70a441a0b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-57. Allow process-tree based resource calculation et al. to be pluggable to support it on multiple platforms. Contributed by Radim Kolar.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1382072 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/09/12 8:48 AM",
      "commitName": "a1aa1b93497034411d76906405bb6a70a441a0b7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 30.43,
      "commitsBetweenForRepo": 200,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,58 @@\n   public synchronized void init(Configuration conf) {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n+    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n+            ResourceCalculatorProcessTree.class);\n+    this.conf \u003d conf;\n+    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n+        + this.processTreeClass);\n \n     long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n     if (this.resourceCalculatorPlugin !\u003d null) {\n       totalPhysicalMemoryOnNM \u003d\n           this.resourceCalculatorPlugin.getPhysicalMemorySize();\n       if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n         LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n             + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n         totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n       }\n     }\n \n     // ///////// Physical memory configuration //////\n     this.maxPmemAllottedForContainers \u003d\n         conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     this.maxPmemAllottedForContainers \u003d\n         this.maxPmemAllottedForContainers * 1024 * 1024L; //Normalize to bytes\n \n     if (totalPhysicalMemoryOnNM !\u003d DISABLED_MEMORY_LIMIT \u0026\u0026\n         this.maxPmemAllottedForContainers \u003e\n         totalPhysicalMemoryOnNM * 0.80f) {\n       LOG.warn(\"NodeManager configured with \" +\n           StringUtils.humanReadableInt(maxPmemAllottedForContainers) +\n           \" physical memory allocated to containers, which is more than \" +\n           \"80% of the total physical memory available (\" +\n           StringUtils.humanReadableInt(totalPhysicalMemoryOnNM) +\n           \"). Thrashing might happen.\");\n     }\n \n     // ///////// Virtual memory configuration //////\n     float vmemRatio \u003d conf.getFloat(\n         YarnConfiguration.NM_VMEM_PMEM_RATIO,\n         YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n         YarnConfiguration.NM_VMEM_PMEM_RATIO +\n         \" should be at least 1.0\");\n     this.maxVmemAllottedForContainers \u003d\n       (long)(vmemRatio * maxPmemAllottedForContainers);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n    processTreeClass \u003d conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null,\n            ResourceCalculatorProcessTree.class);\n    this.conf \u003d conf;\n    LOG.info(\" Using ResourceCalculatorProcessTree : \"\n        + this.processTreeClass);\n\n    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n    if (this.resourceCalculatorPlugin !\u003d null) {\n      totalPhysicalMemoryOnNM \u003d\n          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n      }\n    }\n\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d\n        conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.maxPmemAllottedForContainers \u003d\n        this.maxPmemAllottedForContainers * 1024 * 1024L; //Normalize to bytes\n\n    if (totalPhysicalMemoryOnNM !\u003d DISABLED_MEMORY_LIMIT \u0026\u0026\n        this.maxPmemAllottedForContainers \u003e\n        totalPhysicalMemoryOnNM * 0.80f) {\n      LOG.warn(\"NodeManager configured with \" +\n          StringUtils.humanReadableInt(maxPmemAllottedForContainers) +\n          \" physical memory allocated to containers, which is more than \" +\n          \"80% of the total physical memory available (\" +\n          StringUtils.humanReadableInt(totalPhysicalMemoryOnNM) +\n          \"). Thrashing might happen.\");\n    }\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(\n        YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO +\n        \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n      (long)(vmemRatio * maxPmemAllottedForContainers);\n\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n\n    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n    if (this.resourceCalculatorPlugin !\u003d null) {\n      totalPhysicalMemoryOnNM \u003d\n          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n      }\n    }\n\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d\n        conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.maxPmemAllottedForContainers \u003d\n        this.maxPmemAllottedForContainers * 1024 * 1024L; //Normalize to bytes\n\n    if (totalPhysicalMemoryOnNM !\u003d DISABLED_MEMORY_LIMIT \u0026\u0026\n        this.maxPmemAllottedForContainers \u003e\n        totalPhysicalMemoryOnNM * 0.80f) {\n      LOG.warn(\"NodeManager configured with \" +\n          StringUtils.humanReadableInt(maxPmemAllottedForContainers) +\n          \" physical memory allocated to containers, which is more than \" +\n          \"80% of the total physical memory available (\" +\n          StringUtils.humanReadableInt(totalPhysicalMemoryOnNM) +\n          \"). Thrashing might happen.\");\n    }\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(\n        YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO +\n        \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n      (long)(vmemRatio * maxPmemAllottedForContainers);\n\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
      }
    },
    "237154982bd5853c6a374cb265520e0602adc52f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3205. Fix memory specifications to be physical rather than virtual, allowing for a ratio between the two to be configurable. Contributed by Todd Lipcon. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189542 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/10/11 4:58 PM",
      "commitName": "237154982bd5853c6a374cb265520e0602adc52f",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/10/11 12:27 PM",
      "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 10.19,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public synchronized void init(Configuration conf) {\n     this.monitoringInterval \u003d\n         conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n         conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n \n     long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n     if (this.resourceCalculatorPlugin !\u003d null) {\n       totalPhysicalMemoryOnNM \u003d\n           this.resourceCalculatorPlugin.getPhysicalMemorySize();\n       if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n         LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n             + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n         totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n       }\n     }\n \n-    // ///////// Virtual memory configuration //////\n-    this.maxVmemAllottedForContainers \u003d\n-        conf.getLong(YarnConfiguration.NM_VMEM_GB, YarnConfiguration.DEFAULT_NM_VMEM_GB);\n-    this.maxVmemAllottedForContainers \u003d\n-        this.maxVmemAllottedForContainers * 1024 * 1024 * 1024L; //Normalize\n-\n-    if (this.maxVmemAllottedForContainers \u003e totalPhysicalMemoryOnNM) {\n-      LOG.info(\"totalMemoryAllottedForContainers \u003e totalPhysicalMemoryOnNM.\"\n-          + \" Thrashing might happen.\");\n-    }\n-\n     // ///////// Physical memory configuration //////\n-    long reservedPmemOnNM \u003d\n-        conf.getLong(YarnConfiguration.NM_RESERVED_MEMORY_MB, DISABLED_MEMORY_LIMIT);\n-    reservedPmemOnNM \u003d\n-        reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n-            ? DISABLED_MEMORY_LIMIT\n-            : reservedPmemOnNM * 1024 * 1024; // normalize to bytes\n+    this.maxPmemAllottedForContainers \u003d\n+        conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n+    this.maxPmemAllottedForContainers \u003d\n+        this.maxPmemAllottedForContainers * 1024 * 1024L; //Normalize to bytes\n \n-    if (reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n-        || totalPhysicalMemoryOnNM \u003d\u003d DISABLED_MEMORY_LIMIT) {\n-      this.maxPmemAllottedForContainers \u003d DISABLED_MEMORY_LIMIT;\n-    } else {\n-      this.maxPmemAllottedForContainers \u003d\n-          totalPhysicalMemoryOnNM - reservedPmemOnNM;\n+    if (totalPhysicalMemoryOnNM !\u003d DISABLED_MEMORY_LIMIT \u0026\u0026\n+        this.maxPmemAllottedForContainers \u003e\n+        totalPhysicalMemoryOnNM * 0.80f) {\n+      LOG.warn(\"NodeManager configured with \" +\n+          StringUtils.humanReadableInt(maxPmemAllottedForContainers) +\n+          \" physical memory allocated to containers, which is more than \" +\n+          \"80% of the total physical memory available (\" +\n+          StringUtils.humanReadableInt(totalPhysicalMemoryOnNM) +\n+          \"). Thrashing might happen.\");\n     }\n \n+    // ///////// Virtual memory configuration //////\n+    float vmemRatio \u003d conf.getFloat(\n+        YarnConfiguration.NM_VMEM_PMEM_RATIO,\n+        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n+    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n+        YarnConfiguration.NM_VMEM_PMEM_RATIO +\n+        \" should be at least 1.0\");\n+    this.maxVmemAllottedForContainers \u003d\n+      (long)(vmemRatio * maxPmemAllottedForContainers);\n+\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n\n    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n    if (this.resourceCalculatorPlugin !\u003d null) {\n      totalPhysicalMemoryOnNM \u003d\n          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n      }\n    }\n\n    // ///////// Physical memory configuration //////\n    this.maxPmemAllottedForContainers \u003d\n        conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.maxPmemAllottedForContainers \u003d\n        this.maxPmemAllottedForContainers * 1024 * 1024L; //Normalize to bytes\n\n    if (totalPhysicalMemoryOnNM !\u003d DISABLED_MEMORY_LIMIT \u0026\u0026\n        this.maxPmemAllottedForContainers \u003e\n        totalPhysicalMemoryOnNM * 0.80f) {\n      LOG.warn(\"NodeManager configured with \" +\n          StringUtils.humanReadableInt(maxPmemAllottedForContainers) +\n          \" physical memory allocated to containers, which is more than \" +\n          \"80% of the total physical memory available (\" +\n          StringUtils.humanReadableInt(totalPhysicalMemoryOnNM) +\n          \"). Thrashing might happen.\");\n    }\n\n    // ///////// Virtual memory configuration //////\n    float vmemRatio \u003d conf.getFloat(\n        YarnConfiguration.NM_VMEM_PMEM_RATIO,\n        YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    Preconditions.checkArgument(vmemRatio \u003e 0.99f,\n        YarnConfiguration.NM_VMEM_PMEM_RATIO +\n        \" should be at least 1.0\");\n    this.maxVmemAllottedForContainers \u003d\n      (long)(vmemRatio * maxPmemAllottedForContainers);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "25/08/11 10:16 AM",
      "commitNameOld": "7c85f33ce1b209e1e5bb17b9dd2ad270ca451d60",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 14.35,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public synchronized void init(Configuration conf) {\n     this.monitoringInterval \u003d\n-        conf.getLong(MONITORING_INTERVAL_CONFIG_KEY,\n-            MONITORING_INTERVAL_DEFAULT);\n+        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n+            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n \n     Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n-        conf.getClass(RESOURCE_CALCULATOR_PLUGIN_CONFIG_KEY, null,\n+        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n             ResourceCalculatorPlugin.class);\n     this.resourceCalculatorPlugin \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n     LOG.info(\" Using ResourceCalculatorPlugin : \"\n         + this.resourceCalculatorPlugin);\n \n     long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n     if (this.resourceCalculatorPlugin !\u003d null) {\n       totalPhysicalMemoryOnNM \u003d\n           this.resourceCalculatorPlugin.getPhysicalMemorySize();\n       if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n         LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n             + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n         totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n       }\n     }\n \n     // ///////// Virtual memory configuration //////\n     this.maxVmemAllottedForContainers \u003d\n-        conf.getLong(NMConfig.NM_VMEM_GB, NMConfig.DEFAULT_NM_VMEM_GB);\n+        conf.getLong(YarnConfiguration.NM_VMEM_GB, YarnConfiguration.DEFAULT_NM_VMEM_GB);\n     this.maxVmemAllottedForContainers \u003d\n         this.maxVmemAllottedForContainers * 1024 * 1024 * 1024L; //Normalize\n \n     if (this.maxVmemAllottedForContainers \u003e totalPhysicalMemoryOnNM) {\n       LOG.info(\"totalMemoryAllottedForContainers \u003e totalPhysicalMemoryOnNM.\"\n           + \" Thrashing might happen.\");\n     }\n \n     // ///////// Physical memory configuration //////\n     long reservedPmemOnNM \u003d\n-        conf.getLong(NM_RESERVED_PHYSICALMEMORY_MB, DISABLED_MEMORY_LIMIT);\n+        conf.getLong(YarnConfiguration.NM_RESERVED_MEMORY_MB, DISABLED_MEMORY_LIMIT);\n     reservedPmemOnNM \u003d\n         reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n             ? DISABLED_MEMORY_LIMIT\n             : reservedPmemOnNM * 1024 * 1024; // normalize to bytes\n \n     if (reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n         || totalPhysicalMemoryOnNM \u003d\u003d DISABLED_MEMORY_LIMIT) {\n       this.maxPmemAllottedForContainers \u003d DISABLED_MEMORY_LIMIT;\n     } else {\n       this.maxPmemAllottedForContainers \u003d\n           totalPhysicalMemoryOnNM - reservedPmemOnNM;\n     }\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.monitoringInterval \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_MON_INTERVAL_MS);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n\n    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n    if (this.resourceCalculatorPlugin !\u003d null) {\n      totalPhysicalMemoryOnNM \u003d\n          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n      }\n    }\n\n    // ///////// Virtual memory configuration //////\n    this.maxVmemAllottedForContainers \u003d\n        conf.getLong(YarnConfiguration.NM_VMEM_GB, YarnConfiguration.DEFAULT_NM_VMEM_GB);\n    this.maxVmemAllottedForContainers \u003d\n        this.maxVmemAllottedForContainers * 1024 * 1024 * 1024L; //Normalize\n\n    if (this.maxVmemAllottedForContainers \u003e totalPhysicalMemoryOnNM) {\n      LOG.info(\"totalMemoryAllottedForContainers \u003e totalPhysicalMemoryOnNM.\"\n          + \" Thrashing might happen.\");\n    }\n\n    // ///////// Physical memory configuration //////\n    long reservedPmemOnNM \u003d\n        conf.getLong(YarnConfiguration.NM_RESERVED_MEMORY_MB, DISABLED_MEMORY_LIMIT);\n    reservedPmemOnNM \u003d\n        reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n            ? DISABLED_MEMORY_LIMIT\n            : reservedPmemOnNM * 1024 * 1024; // normalize to bytes\n\n    if (reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n        || totalPhysicalMemoryOnNM \u003d\u003d DISABLED_MEMORY_LIMIT) {\n      this.maxPmemAllottedForContainers \u003d DISABLED_MEMORY_LIMIT;\n    } else {\n      this.maxPmemAllottedForContainers \u003d\n          totalPhysicalMemoryOnNM - reservedPmemOnNM;\n    }\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.monitoringInterval \u003d\n        conf.getLong(MONITORING_INTERVAL_CONFIG_KEY,\n            MONITORING_INTERVAL_DEFAULT);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(RESOURCE_CALCULATOR_PLUGIN_CONFIG_KEY, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n\n    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n    if (this.resourceCalculatorPlugin !\u003d null) {\n      totalPhysicalMemoryOnNM \u003d\n          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n      }\n    }\n\n    // ///////// Virtual memory configuration //////\n    this.maxVmemAllottedForContainers \u003d\n        conf.getLong(NMConfig.NM_VMEM_GB, NMConfig.DEFAULT_NM_VMEM_GB);\n    this.maxVmemAllottedForContainers \u003d\n        this.maxVmemAllottedForContainers * 1024 * 1024 * 1024L; //Normalize\n\n    if (this.maxVmemAllottedForContainers \u003e totalPhysicalMemoryOnNM) {\n      LOG.info(\"totalMemoryAllottedForContainers \u003e totalPhysicalMemoryOnNM.\"\n          + \" Thrashing might happen.\");\n    }\n\n    // ///////// Physical memory configuration //////\n    long reservedPmemOnNM \u003d\n        conf.getLong(NM_RESERVED_PHYSICALMEMORY_MB, DISABLED_MEMORY_LIMIT);\n    reservedPmemOnNM \u003d\n        reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n            ? DISABLED_MEMORY_LIMIT\n            : reservedPmemOnNM * 1024 * 1024; // normalize to bytes\n\n    if (reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n        || totalPhysicalMemoryOnNM \u003d\u003d DISABLED_MEMORY_LIMIT) {\n      this.maxPmemAllottedForContainers \u003d DISABLED_MEMORY_LIMIT;\n    } else {\n      this.maxPmemAllottedForContainers \u003d\n          totalPhysicalMemoryOnNM - reservedPmemOnNM;\n    }\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,53 @@\n+  public synchronized void init(Configuration conf) {\n+    this.monitoringInterval \u003d\n+        conf.getLong(MONITORING_INTERVAL_CONFIG_KEY,\n+            MONITORING_INTERVAL_DEFAULT);\n+\n+    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n+        conf.getClass(RESOURCE_CALCULATOR_PLUGIN_CONFIG_KEY, null,\n+            ResourceCalculatorPlugin.class);\n+    this.resourceCalculatorPlugin \u003d\n+        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n+    LOG.info(\" Using ResourceCalculatorPlugin : \"\n+        + this.resourceCalculatorPlugin);\n+\n+    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n+    if (this.resourceCalculatorPlugin !\u003d null) {\n+      totalPhysicalMemoryOnNM \u003d\n+          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n+      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n+        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n+            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n+        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n+      }\n+    }\n+\n+    // ///////// Virtual memory configuration //////\n+    this.maxVmemAllottedForContainers \u003d\n+        conf.getLong(NMConfig.NM_VMEM_GB, NMConfig.DEFAULT_NM_VMEM_GB);\n+    this.maxVmemAllottedForContainers \u003d\n+        this.maxVmemAllottedForContainers * 1024 * 1024 * 1024L; //Normalize\n+\n+    if (this.maxVmemAllottedForContainers \u003e totalPhysicalMemoryOnNM) {\n+      LOG.info(\"totalMemoryAllottedForContainers \u003e totalPhysicalMemoryOnNM.\"\n+          + \" Thrashing might happen.\");\n+    }\n+\n+    // ///////// Physical memory configuration //////\n+    long reservedPmemOnNM \u003d\n+        conf.getLong(NM_RESERVED_PHYSICALMEMORY_MB, DISABLED_MEMORY_LIMIT);\n+    reservedPmemOnNM \u003d\n+        reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n+            ? DISABLED_MEMORY_LIMIT\n+            : reservedPmemOnNM * 1024 * 1024; // normalize to bytes\n+\n+    if (reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n+        || totalPhysicalMemoryOnNM \u003d\u003d DISABLED_MEMORY_LIMIT) {\n+      this.maxPmemAllottedForContainers \u003d DISABLED_MEMORY_LIMIT;\n+    } else {\n+      this.maxPmemAllottedForContainers \u003d\n+          totalPhysicalMemoryOnNM - reservedPmemOnNM;\n+    }\n+\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.monitoringInterval \u003d\n        conf.getLong(MONITORING_INTERVAL_CONFIG_KEY,\n            MONITORING_INTERVAL_DEFAULT);\n\n    Class\u003c? extends ResourceCalculatorPlugin\u003e clazz \u003d\n        conf.getClass(RESOURCE_CALCULATOR_PLUGIN_CONFIG_KEY, null,\n            ResourceCalculatorPlugin.class);\n    this.resourceCalculatorPlugin \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\n    LOG.info(\" Using ResourceCalculatorPlugin : \"\n        + this.resourceCalculatorPlugin);\n\n    long totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n    if (this.resourceCalculatorPlugin !\u003d null) {\n      totalPhysicalMemoryOnNM \u003d\n          this.resourceCalculatorPlugin.getPhysicalMemorySize();\n      if (totalPhysicalMemoryOnNM \u003c\u003d 0) {\n        LOG.warn(\"NodeManager\u0027s totalPmem could not be calculated. \"\n            + \"Setting it to \" + DISABLED_MEMORY_LIMIT);\n        totalPhysicalMemoryOnNM \u003d DISABLED_MEMORY_LIMIT;\n      }\n    }\n\n    // ///////// Virtual memory configuration //////\n    this.maxVmemAllottedForContainers \u003d\n        conf.getLong(NMConfig.NM_VMEM_GB, NMConfig.DEFAULT_NM_VMEM_GB);\n    this.maxVmemAllottedForContainers \u003d\n        this.maxVmemAllottedForContainers * 1024 * 1024 * 1024L; //Normalize\n\n    if (this.maxVmemAllottedForContainers \u003e totalPhysicalMemoryOnNM) {\n      LOG.info(\"totalMemoryAllottedForContainers \u003e totalPhysicalMemoryOnNM.\"\n          + \" Thrashing might happen.\");\n    }\n\n    // ///////// Physical memory configuration //////\n    long reservedPmemOnNM \u003d\n        conf.getLong(NM_RESERVED_PHYSICALMEMORY_MB, DISABLED_MEMORY_LIMIT);\n    reservedPmemOnNM \u003d\n        reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n            ? DISABLED_MEMORY_LIMIT\n            : reservedPmemOnNM * 1024 * 1024; // normalize to bytes\n\n    if (reservedPmemOnNM \u003d\u003d DISABLED_MEMORY_LIMIT\n        || totalPhysicalMemoryOnNM \u003d\u003d DISABLED_MEMORY_LIMIT) {\n      this.maxPmemAllottedForContainers \u003d DISABLED_MEMORY_LIMIT;\n    } else {\n      this.maxPmemAllottedForContainers \u003d\n          totalPhysicalMemoryOnNM - reservedPmemOnNM;\n    }\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
    }
  }
}