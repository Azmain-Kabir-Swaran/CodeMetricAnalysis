{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RequestHedgingRMFailoverProxyProvider.java",
  "functionName": "init",
  "functionId": "init___configuration-Configuration__rmProxy-RMProxy__T____protocol-Class__T__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
  "functionStartLine": 67,
  "functionEndLine": 90,
  "numCommitsSeen": 7,
  "timeTaken": 760,
  "changeHistory": [
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28"
  ],
  "changeHistoryShort": {
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28": "Yintroduced"
  },
  "changeHistoryDetails": {
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
      "commitDate": "22/01/16 6:20 PM",
      "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,24 @@\n+  public void init(Configuration configuration, RMProxy\u003cT\u003e rmProxy,\n+      Class\u003cT\u003e protocol) {\n+    super.init(configuration, rmProxy, protocol);\n+    Map\u003cString, ProxyInfo\u003cT\u003e\u003e retriableProxies \u003d new HashMap\u003c\u003e();\n+\n+    String originalId \u003d HAUtil.getRMHAId(conf);\n+    for (String rmId : rmServiceIds) {\n+      conf.set(YarnConfiguration.RM_HA_ID, rmId);\n+      nonRetriableProxy.put(rmId, super.getProxyInternal());\n+\n+      T proxy \u003d createRetriableProxy();\n+      ProxyInfo\u003cT\u003e pInfo \u003d new ProxyInfo\u003cT\u003e(proxy, rmId);\n+      retriableProxies.put(rmId, pInfo);\n+    }\n+    conf.set(YarnConfiguration.RM_HA_ID, originalId);\n+\n+    T proxyInstance \u003d (T) Proxy.newProxyInstance(\n+        RMRequestHedgingInvocationHandler.class.getClassLoader(),\n+        new Class\u003c?\u003e[] {protocol},\n+        new RMRequestHedgingInvocationHandler(retriableProxies));\n+    String combinedInfo \u003d Arrays.toString(rmServiceIds);\n+    wrappedProxy \u003d new ProxyInfo\u003cT\u003e(proxyInstance, combinedInfo);\n+    LOG.info(\"Created wrapped proxy for \" + combinedInfo);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration configuration, RMProxy\u003cT\u003e rmProxy,\n      Class\u003cT\u003e protocol) {\n    super.init(configuration, rmProxy, protocol);\n    Map\u003cString, ProxyInfo\u003cT\u003e\u003e retriableProxies \u003d new HashMap\u003c\u003e();\n\n    String originalId \u003d HAUtil.getRMHAId(conf);\n    for (String rmId : rmServiceIds) {\n      conf.set(YarnConfiguration.RM_HA_ID, rmId);\n      nonRetriableProxy.put(rmId, super.getProxyInternal());\n\n      T proxy \u003d createRetriableProxy();\n      ProxyInfo\u003cT\u003e pInfo \u003d new ProxyInfo\u003cT\u003e(proxy, rmId);\n      retriableProxies.put(rmId, pInfo);\n    }\n    conf.set(YarnConfiguration.RM_HA_ID, originalId);\n\n    T proxyInstance \u003d (T) Proxy.newProxyInstance(\n        RMRequestHedgingInvocationHandler.class.getClassLoader(),\n        new Class\u003c?\u003e[] {protocol},\n        new RMRequestHedgingInvocationHandler(retriableProxies));\n    String combinedInfo \u003d Arrays.toString(rmServiceIds);\n    wrappedProxy \u003d new ProxyInfo\u003cT\u003e(proxyInstance, combinedInfo);\n    LOG.info(\"Created wrapped proxy for \" + combinedInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java"
    }
  }
}