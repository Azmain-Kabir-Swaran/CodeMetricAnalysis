{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Apps.java",
  "functionName": "setEnvFromInputString",
  "functionId": "setEnvFromInputString___env-Map__String,String____envString-String__classPathSeparator-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
  "functionStartLine": 108,
  "functionEndLine": 118,
  "numCommitsSeen": 36,
  "timeTaken": 3237,
  "changeHistory": [
    "4571351cccf6d4977469d3d623cf045b06a5f5f0",
    "6f2a41e37d0b36cdafcfff75125165f212c612a6",
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
    "413bddf5969a0b9b4309679d96b61a75e1abf595",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940"
  ],
  "changeHistoryShort": {
    "4571351cccf6d4977469d3d623cf045b06a5f5f0": "Ybodychange",
    "6f2a41e37d0b36cdafcfff75125165f212c612a6": "Ybodychange",
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb": "Ymultichange(Yparameterchange,Ybodychange)",
    "413bddf5969a0b9b4309679d96b61a75e1abf595": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b": "Ymovefromfile",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4571351cccf6d4977469d3d623cf045b06a5f5f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7069. Add ability to specify user environment variables individually. Contributed by Jim Brennan\n",
      "commitDate": "12/04/18 9:12 AM",
      "commitName": "4571351cccf6d4977469d3d623cf045b06a5f5f0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/03/18 7:20 AM",
      "commitNameOld": "d69b31f7f70f296ddd180e004fa0f827c2f737f2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 36.04,
      "commitsBetweenForRepo": 374,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,11 @@\n   public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n       String envString,  String classPathSeparator) {\n     if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n       Matcher varValMatcher \u003d VARVAL_SPLITTER.matcher(envString);\n       while (varValMatcher.find()) {\n         String envVar \u003d varValMatcher.group(1);\n-        Matcher m \u003d VAR_SUBBER.matcher(varValMatcher.group(2));\n-        StringBuffer sb \u003d new StringBuffer();\n-        while (m.find()) {\n-          String var \u003d m.group(1);\n-          // replace $env with the child\u0027s env constructed by tt\u0027s\n-          String replace \u003d env.get(var);\n-          // if this key is not configured by the tt for the child .. get it\n-          // from the tt\u0027s env\n-          if (replace \u003d\u003d null)\n-            replace \u003d System.getenv(var);\n-          // the env key is note present anywhere .. simply set it\n-          if (replace \u003d\u003d null)\n-            replace \u003d \"\";\n-          m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n-        }\n-        m.appendTail(sb);\n-        addToEnvironment(env, envVar, sb.toString(), classPathSeparator);\n+        String varString \u003d varValMatcher.group(2);\n+        setEnvFromString(env, envVar, varString, classPathSeparator);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n      String envString,  String classPathSeparator) {\n    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n      Matcher varValMatcher \u003d VARVAL_SPLITTER.matcher(envString);\n      while (varValMatcher.find()) {\n        String envVar \u003d varValMatcher.group(1);\n        String varString \u003d varValMatcher.group(2);\n        setEnvFromString(env, envVar, varString, classPathSeparator);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
      "extendedDetails": {}
    },
    "6f2a41e37d0b36cdafcfff75125165f212c612a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3768. ArrayIndexOutOfBoundsException with empty environment variables. (Zhihai Xu via gera)\n",
      "commitDate": "30/06/15 2:59 PM",
      "commitName": "6f2a41e37d0b36cdafcfff75125165f212c612a6",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "17/04/14 8:23 AM",
      "commitNameOld": "ad9edb02b96805e76d2d470aebc1f81626b02491",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 439.28,
      "commitsBetweenForRepo": 3615,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n       String envString,  String classPathSeparator) {\n     if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n-      String childEnvs[] \u003d envString.split(\",\");\n-      Pattern p \u003d Pattern.compile(Shell.getEnvironmentVariableRegex());\n-      for (String cEnv : childEnvs) {\n-        String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n-        Matcher m \u003d p.matcher(parts[1]);\n+      Matcher varValMatcher \u003d VARVAL_SPLITTER.matcher(envString);\n+      while (varValMatcher.find()) {\n+        String envVar \u003d varValMatcher.group(1);\n+        Matcher m \u003d VAR_SUBBER.matcher(varValMatcher.group(2));\n         StringBuffer sb \u003d new StringBuffer();\n         while (m.find()) {\n           String var \u003d m.group(1);\n           // replace $env with the child\u0027s env constructed by tt\u0027s\n           String replace \u003d env.get(var);\n           // if this key is not configured by the tt for the child .. get it\n           // from the tt\u0027s env\n           if (replace \u003d\u003d null)\n             replace \u003d System.getenv(var);\n           // the env key is note present anywhere .. simply set it\n           if (replace \u003d\u003d null)\n             replace \u003d \"\";\n           m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n         }\n         m.appendTail(sb);\n-        addToEnvironment(env, parts[0], sb.toString(), classPathSeparator);\n+        addToEnvironment(env, envVar, sb.toString(), classPathSeparator);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n      String envString,  String classPathSeparator) {\n    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n      Matcher varValMatcher \u003d VARVAL_SPLITTER.matcher(envString);\n      while (varValMatcher.find()) {\n        String envVar \u003d varValMatcher.group(1);\n        Matcher m \u003d VAR_SUBBER.matcher(varValMatcher.group(2));\n        StringBuffer sb \u003d new StringBuffer();\n        while (m.find()) {\n          String var \u003d m.group(1);\n          // replace $env with the child\u0027s env constructed by tt\u0027s\n          String replace \u003d env.get(var);\n          // if this key is not configured by the tt for the child .. get it\n          // from the tt\u0027s env\n          if (replace \u003d\u003d null)\n            replace \u003d System.getenv(var);\n          // the env key is note present anywhere .. simply set it\n          if (replace \u003d\u003d null)\n            replace \u003d \"\";\n          m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n        }\n        m.appendTail(sb);\n        addToEnvironment(env, envVar, sb.toString(), classPathSeparator);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
      "extendedDetails": {}
    },
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1824. Improved NodeManager and clients to be able to handle cross platform application submissions. Contributed by Jian He.\nMAPREDUCE-4052. Improved MapReduce clients to use NodeManagers\u0027 ability to handle cross platform application submissions. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578135 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/03/14 11:32 AM",
      "commitName": "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1824. Improved NodeManager and clients to be able to handle cross platform application submissions. Contributed by Jian He.\nMAPREDUCE-4052. Improved MapReduce clients to use NodeManagers\u0027 ability to handle cross platform application submissions. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578135 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/03/14 11:32 AM",
          "commitName": "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "10/07/13 3:59 PM",
          "commitNameOld": "413bddf5969a0b9b4309679d96b61a75e1abf595",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 248.81,
          "commitsBetweenForRepo": 1702,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n   public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n-      String envString) {\n+      String envString,  String classPathSeparator) {\n     if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n       String childEnvs[] \u003d envString.split(\",\");\n       Pattern p \u003d Pattern.compile(Shell.getEnvironmentVariableRegex());\n       for (String cEnv : childEnvs) {\n         String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n         Matcher m \u003d p.matcher(parts[1]);\n         StringBuffer sb \u003d new StringBuffer();\n         while (m.find()) {\n           String var \u003d m.group(1);\n           // replace $env with the child\u0027s env constructed by tt\u0027s\n           String replace \u003d env.get(var);\n           // if this key is not configured by the tt for the child .. get it\n           // from the tt\u0027s env\n           if (replace \u003d\u003d null)\n             replace \u003d System.getenv(var);\n           // the env key is note present anywhere .. simply set it\n           if (replace \u003d\u003d null)\n             replace \u003d \"\";\n           m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n         }\n         m.appendTail(sb);\n-        addToEnvironment(env, parts[0], sb.toString());\n+        addToEnvironment(env, parts[0], sb.toString(), classPathSeparator);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n      String envString,  String classPathSeparator) {\n    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n      String childEnvs[] \u003d envString.split(\",\");\n      Pattern p \u003d Pattern.compile(Shell.getEnvironmentVariableRegex());\n      for (String cEnv : childEnvs) {\n        String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n        Matcher m \u003d p.matcher(parts[1]);\n        StringBuffer sb \u003d new StringBuffer();\n        while (m.find()) {\n          String var \u003d m.group(1);\n          // replace $env with the child\u0027s env constructed by tt\u0027s\n          String replace \u003d env.get(var);\n          // if this key is not configured by the tt for the child .. get it\n          // from the tt\u0027s env\n          if (replace \u003d\u003d null)\n            replace \u003d System.getenv(var);\n          // the env key is note present anywhere .. simply set it\n          if (replace \u003d\u003d null)\n            replace \u003d \"\";\n          m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n        }\n        m.appendTail(sb);\n        addToEnvironment(env, parts[0], sb.toString(), classPathSeparator);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
          "extendedDetails": {
            "oldValue": "[env-Map\u003cString,String\u003e, envString-String]",
            "newValue": "[env-Map\u003cString,String\u003e, envString-String, classPathSeparator-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1824. Improved NodeManager and clients to be able to handle cross platform application submissions. Contributed by Jian He.\nMAPREDUCE-4052. Improved MapReduce clients to use NodeManagers\u0027 ability to handle cross platform application submissions. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578135 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/03/14 11:32 AM",
          "commitName": "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "10/07/13 3:59 PM",
          "commitNameOld": "413bddf5969a0b9b4309679d96b61a75e1abf595",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 248.81,
          "commitsBetweenForRepo": 1702,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n   public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n-      String envString) {\n+      String envString,  String classPathSeparator) {\n     if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n       String childEnvs[] \u003d envString.split(\",\");\n       Pattern p \u003d Pattern.compile(Shell.getEnvironmentVariableRegex());\n       for (String cEnv : childEnvs) {\n         String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n         Matcher m \u003d p.matcher(parts[1]);\n         StringBuffer sb \u003d new StringBuffer();\n         while (m.find()) {\n           String var \u003d m.group(1);\n           // replace $env with the child\u0027s env constructed by tt\u0027s\n           String replace \u003d env.get(var);\n           // if this key is not configured by the tt for the child .. get it\n           // from the tt\u0027s env\n           if (replace \u003d\u003d null)\n             replace \u003d System.getenv(var);\n           // the env key is note present anywhere .. simply set it\n           if (replace \u003d\u003d null)\n             replace \u003d \"\";\n           m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n         }\n         m.appendTail(sb);\n-        addToEnvironment(env, parts[0], sb.toString());\n+        addToEnvironment(env, parts[0], sb.toString(), classPathSeparator);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n      String envString,  String classPathSeparator) {\n    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n      String childEnvs[] \u003d envString.split(\",\");\n      Pattern p \u003d Pattern.compile(Shell.getEnvironmentVariableRegex());\n      for (String cEnv : childEnvs) {\n        String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n        Matcher m \u003d p.matcher(parts[1]);\n        StringBuffer sb \u003d new StringBuffer();\n        while (m.find()) {\n          String var \u003d m.group(1);\n          // replace $env with the child\u0027s env constructed by tt\u0027s\n          String replace \u003d env.get(var);\n          // if this key is not configured by the tt for the child .. get it\n          // from the tt\u0027s env\n          if (replace \u003d\u003d null)\n            replace \u003d System.getenv(var);\n          // the env key is note present anywhere .. simply set it\n          if (replace \u003d\u003d null)\n            replace \u003d \"\";\n          m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n        }\n        m.appendTail(sb);\n        addToEnvironment(env, parts[0], sb.toString(), classPathSeparator);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
          "extendedDetails": {}
        }
      ]
    },
    "413bddf5969a0b9b4309679d96b61a75e1abf595": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4374. Fix child task environment variable config and add support for Windows. Contributed by Chuan Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502046 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 3:59 PM",
      "commitName": "413bddf5969a0b9b4309679d96b61a75e1abf595",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "16/06/13 8:32 PM",
      "commitNameOld": "f5f8f3bca4eeaedeff8181812452ec363c4db744",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 23.81,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,27 @@\n   public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n       String envString) {\n     if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n       String childEnvs[] \u003d envString.split(\",\");\n+      Pattern p \u003d Pattern.compile(Shell.getEnvironmentVariableRegex());\n       for (String cEnv : childEnvs) {\n         String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n-        String value \u003d env.get(parts[0]);\n-\n-        if (value !\u003d null) {\n-          // Replace $env with the child\u0027s env constructed by NM\u0027s\n-          // For example: LD_LIBRARY_PATH\u003d$LD_LIBRARY_PATH:/tmp\n-          value \u003d parts[1].replace(\"$\" + parts[0], value);\n-        } else {\n-          // example PATH\u003d$PATH:/tmp\n-          value \u003d System.getenv(parts[0]);\n-          if (value !\u003d null) {\n-            // the env key is present in the tt\u0027s env\n-            value \u003d parts[1].replace(\"$\" + parts[0], value);\n-          } else {\n-            // check for simple variable substitution\n-            // for e.g. ROOT\u003d$HOME\n-            String envValue \u003d System.getenv(parts[1].substring(1));\n-            if (envValue !\u003d null) {\n-              value \u003d envValue;\n-            } else {\n-              // the env key is note present anywhere .. simply set it\n-              // example X\u003d$X:/tmp or X\u003d/tmp\n-              value \u003d parts[1].replace(\"$\" + parts[0], \"\");\n-            }\n-          }\n+        Matcher m \u003d p.matcher(parts[1]);\n+        StringBuffer sb \u003d new StringBuffer();\n+        while (m.find()) {\n+          String var \u003d m.group(1);\n+          // replace $env with the child\u0027s env constructed by tt\u0027s\n+          String replace \u003d env.get(var);\n+          // if this key is not configured by the tt for the child .. get it\n+          // from the tt\u0027s env\n+          if (replace \u003d\u003d null)\n+            replace \u003d System.getenv(var);\n+          // the env key is note present anywhere .. simply set it\n+          if (replace \u003d\u003d null)\n+            replace \u003d \"\";\n+          m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n         }\n-        addToEnvironment(env, parts[0], value);\n+        m.appendTail(sb);\n+        addToEnvironment(env, parts[0], sb.toString());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n      String envString) {\n    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n      String childEnvs[] \u003d envString.split(\",\");\n      Pattern p \u003d Pattern.compile(Shell.getEnvironmentVariableRegex());\n      for (String cEnv : childEnvs) {\n        String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n        Matcher m \u003d p.matcher(parts[1]);\n        StringBuffer sb \u003d new StringBuffer();\n        while (m.find()) {\n          String var \u003d m.group(1);\n          // replace $env with the child\u0027s env constructed by tt\u0027s\n          String replace \u003d env.get(var);\n          // if this key is not configured by the tt for the child .. get it\n          // from the tt\u0027s env\n          if (replace \u003d\u003d null)\n            replace \u003d System.getenv(var);\n          // the env key is note present anywhere .. simply set it\n          if (replace \u003d\u003d null)\n            replace \u003d \"\";\n          m.appendReplacement(sb, Matcher.quoteReplacement(replace));\n        }\n        m.appendTail(sb);\n        addToEnvironment(env, parts[0], sb.toString());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n      String envString) {\n    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n      String childEnvs[] \u003d envString.split(\",\");\n      for (String cEnv : childEnvs) {\n        String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n        String value \u003d env.get(parts[0]);\n\n        if (value !\u003d null) {\n          // Replace $env with the child\u0027s env constructed by NM\u0027s\n          // For example: LD_LIBRARY_PATH\u003d$LD_LIBRARY_PATH:/tmp\n          value \u003d parts[1].replace(\"$\" + parts[0], value);\n        } else {\n          // example PATH\u003d$PATH:/tmp\n          value \u003d System.getenv(parts[0]);\n          if (value !\u003d null) {\n            // the env key is present in the tt\u0027s env\n            value \u003d parts[1].replace(\"$\" + parts[0], value);\n          } else {\n            // check for simple variable substitution\n            // for e.g. ROOT\u003d$HOME\n            String envValue \u003d System.getenv(parts[1].substring(1));\n            if (envValue !\u003d null) {\n              value \u003d envValue;\n            } else {\n              // the env key is note present anywhere .. simply set it\n              // example X\u003d$X:/tmp or X\u003d/tmp\n              value \u003d parts[1].replace(\"$\" + parts[0], \"\");\n            }\n          }\n        }\n        addToEnvironment(env, parts[0], value);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java"
      }
    },
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-3068. Added a whitelist of environment variables for containers from the NodeManager and set MALLOC_ARENA_MAX for all daemons and containers. Contributed by Chris Riccomini. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185447 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/10/11 6:22 PM",
      "commitName": "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "17/10/11 3:41 PM",
      "commitNameOld": "955d8eca210a0e93832c9d19cbee2ba9a54f7885",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n       String envString) {\n     if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n       String childEnvs[] \u003d envString.split(\",\");\n       for (String cEnv : childEnvs) {\n         String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n         String value \u003d env.get(parts[0]);\n-  \n+\n         if (value !\u003d null) {\n           // Replace $env with the child\u0027s env constructed by NM\u0027s\n           // For example: LD_LIBRARY_PATH\u003d$LD_LIBRARY_PATH:/tmp\n           value \u003d parts[1].replace(\"$\" + parts[0], value);\n         } else {\n           // example PATH\u003d$PATH:/tmp\n           value \u003d System.getenv(parts[0]);\n           if (value !\u003d null) {\n             // the env key is present in the tt\u0027s env\n             value \u003d parts[1].replace(\"$\" + parts[0], value);\n           } else {\n             // check for simple variable substitution\n             // for e.g. ROOT\u003d$HOME\n-            String envValue \u003d System.getenv(parts[1].substring(1)); \n+            String envValue \u003d System.getenv(parts[1].substring(1));\n             if (envValue !\u003d null) {\n               value \u003d envValue;\n             } else {\n               // the env key is note present anywhere .. simply set it\n               // example X\u003d$X:/tmp or X\u003d/tmp\n               value \u003d parts[1].replace(\"$\" + parts[0], \"\");\n             }\n           }\n         }\n         addToEnvironment(env, parts[0], value);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n      String envString) {\n    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n      String childEnvs[] \u003d envString.split(\",\");\n      for (String cEnv : childEnvs) {\n        String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n        String value \u003d env.get(parts[0]);\n\n        if (value !\u003d null) {\n          // Replace $env with the child\u0027s env constructed by NM\u0027s\n          // For example: LD_LIBRARY_PATH\u003d$LD_LIBRARY_PATH:/tmp\n          value \u003d parts[1].replace(\"$\" + parts[0], value);\n        } else {\n          // example PATH\u003d$PATH:/tmp\n          value \u003d System.getenv(parts[0]);\n          if (value !\u003d null) {\n            // the env key is present in the tt\u0027s env\n            value \u003d parts[1].replace(\"$\" + parts[0], value);\n          } else {\n            // check for simple variable substitution\n            // for e.g. ROOT\u003d$HOME\n            String envValue \u003d System.getenv(parts[1].substring(1));\n            if (envValue !\u003d null) {\n              value \u003d envValue;\n            } else {\n              // the env key is note present anywhere .. simply set it\n              // example X\u003d$X:/tmp or X\u003d/tmp\n              value \u003d parts[1].replace(\"$\" + parts[0], \"\");\n            }\n          }\n        }\n        addToEnvironment(env, parts[0], value);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java",
        "oldMethodName": "setEnvFromInputString",
        "newMethodName": "setEnvFromInputString"
      }
    },
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 11:28 AM",
      "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,35 @@\n+  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n+      String envString) {\n+    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n+      String childEnvs[] \u003d envString.split(\",\");\n+      for (String cEnv : childEnvs) {\n+        String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n+        String value \u003d env.get(parts[0]);\n+  \n+        if (value !\u003d null) {\n+          // Replace $env with the child\u0027s env constructed by NM\u0027s\n+          // For example: LD_LIBRARY_PATH\u003d$LD_LIBRARY_PATH:/tmp\n+          value \u003d parts[1].replace(\"$\" + parts[0], value);\n+        } else {\n+          // example PATH\u003d$PATH:/tmp\n+          value \u003d System.getenv(parts[0]);\n+          if (value !\u003d null) {\n+            // the env key is present in the tt\u0027s env\n+            value \u003d parts[1].replace(\"$\" + parts[0], value);\n+          } else {\n+            // check for simple variable substitution\n+            // for e.g. ROOT\u003d$HOME\n+            String envValue \u003d System.getenv(parts[1].substring(1)); \n+            if (envValue !\u003d null) {\n+              value \u003d envValue;\n+            } else {\n+              // the env key is note present anywhere .. simply set it\n+              // example X\u003d$X:/tmp or X\u003d/tmp\n+              value \u003d parts[1].replace(\"$\" + parts[0], \"\");\n+            }\n+          }\n+        }\n+        addToEnvironment(env, parts[0], value);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setEnvFromInputString(Map\u003cString, String\u003e env,\n      String envString) {\n    if (envString !\u003d null \u0026\u0026 envString.length() \u003e 0) {\n      String childEnvs[] \u003d envString.split(\",\");\n      for (String cEnv : childEnvs) {\n        String[] parts \u003d cEnv.split(\"\u003d\"); // split on \u0027\u003d\u0027\n        String value \u003d env.get(parts[0]);\n  \n        if (value !\u003d null) {\n          // Replace $env with the child\u0027s env constructed by NM\u0027s\n          // For example: LD_LIBRARY_PATH\u003d$LD_LIBRARY_PATH:/tmp\n          value \u003d parts[1].replace(\"$\" + parts[0], value);\n        } else {\n          // example PATH\u003d$PATH:/tmp\n          value \u003d System.getenv(parts[0]);\n          if (value !\u003d null) {\n            // the env key is present in the tt\u0027s env\n            value \u003d parts[1].replace(\"$\" + parts[0], value);\n          } else {\n            // check for simple variable substitution\n            // for e.g. ROOT\u003d$HOME\n            String envValue \u003d System.getenv(parts[1].substring(1)); \n            if (envValue !\u003d null) {\n              value \u003d envValue;\n            } else {\n              // the env key is note present anywhere .. simply set it\n              // example X\u003d$X:/tmp or X\u003d/tmp\n              value \u003d parts[1].replace(\"$\" + parts[0], \"\");\n            }\n          }\n        }\n        addToEnvironment(env, parts[0], value);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java"
    }
  }
}