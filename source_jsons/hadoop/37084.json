{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryPlan.java",
  "functionName": "getCumulativeLoadOverTime",
  "functionId": "getCumulativeLoadOverTime___start-long__end-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
  "functionStartLine": 901,
  "functionEndLine": 916,
  "numCommitsSeen": 19,
  "timeTaken": 3914,
  "changeHistory": [
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
    "e3345e985bff93c6c74a76747e45376c6027f42c",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
    "a3a615eeab8c14ccdc548311097e62a916963dc5"
  ],
  "changeHistoryShort": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": "Ymultichange(Yexceptionschange,Ybodychange)",
    "e3345e985bff93c6c74a76747e45376c6027f42c": "Ymultichange(Yexceptionschange,Ybodychange)",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": "Ymultichange(Yexceptionschange,Ybodychange)",
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "06/09/17 4:46 PM",
      "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
          "commitDate": "06/09/17 4:46 PM",
          "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "06/09/17 4:39 PM",
          "commitNameOld": "e3345e985bff93c6c74a76747e45376c6027f42c",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,16 @@\n-  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n-      long start, long end) {\n+  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n+      long end) throws PlanningException {\n     readLock.lock();\n     try {\n-      return rleSparseVector.getRangeOverlapping(start, end);\n+\n+      RLESparseResourceAllocation ret \u003d\n+          rleSparseVector.getRangeOverlapping(start, end);\n+      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n+          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n+          end);\n+\n+      return ret;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n      long end) throws PlanningException {\n    readLock.lock();\n    try {\n\n      RLESparseResourceAllocation ret \u003d\n          rleSparseVector.getRangeOverlapping(start, end);\n      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n          end);\n\n      return ret;\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[PlanningException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
          "commitDate": "06/09/17 4:46 PM",
          "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "06/09/17 4:39 PM",
          "commitNameOld": "e3345e985bff93c6c74a76747e45376c6027f42c",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,16 @@\n-  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n-      long start, long end) {\n+  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n+      long end) throws PlanningException {\n     readLock.lock();\n     try {\n-      return rleSparseVector.getRangeOverlapping(start, end);\n+\n+      RLESparseResourceAllocation ret \u003d\n+          rleSparseVector.getRangeOverlapping(start, end);\n+      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n+          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n+          end);\n+\n+      return ret;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n      long end) throws PlanningException {\n    readLock.lock();\n    try {\n\n      RLESparseResourceAllocation ret \u003d\n          rleSparseVector.getRangeOverlapping(start, end);\n      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n          end);\n\n      return ret;\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {}
        }
      ]
    },
    "e3345e985bff93c6c74a76747e45376c6027f42c": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Revert \"Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\"\n\nThis reverts commit 7996eca7dcfaa1bdf970e32022274f2699bef8a1.\n",
      "commitDate": "06/09/17 4:39 PM",
      "commitName": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Revert \"Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\"\n\nThis reverts commit 7996eca7dcfaa1bdf970e32022274f2699bef8a1.\n",
          "commitDate": "06/09/17 4:39 PM",
          "commitName": "e3345e985bff93c6c74a76747e45376c6027f42c",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/09/17 3:16 PM",
          "commitNameOld": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 5.06,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,9 @@\n-  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n-      long end) throws PlanningException {\n+  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n+      long start, long end) {\n     readLock.lock();\n     try {\n-\n-      RLESparseResourceAllocation ret \u003d\n-          rleSparseVector.getRangeOverlapping(start, end);\n-      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n-          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n-          end);\n-\n-      return ret;\n+      return rleSparseVector.getRangeOverlapping(start, end);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n      long start, long end) {\n    readLock.lock();\n    try {\n      return rleSparseVector.getRangeOverlapping(start, end);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {
            "oldValue": "[PlanningException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\"\n\nThis reverts commit 7996eca7dcfaa1bdf970e32022274f2699bef8a1.\n",
          "commitDate": "06/09/17 4:39 PM",
          "commitName": "e3345e985bff93c6c74a76747e45376c6027f42c",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/09/17 3:16 PM",
          "commitNameOld": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 5.06,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,9 @@\n-  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n-      long end) throws PlanningException {\n+  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n+      long start, long end) {\n     readLock.lock();\n     try {\n-\n-      RLESparseResourceAllocation ret \u003d\n-          rleSparseVector.getRangeOverlapping(start, end);\n-      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n-          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n-          end);\n-\n-      return ret;\n+      return rleSparseVector.getRangeOverlapping(start, end);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n      long start, long end) {\n    readLock.lock();\n    try {\n      return rleSparseVector.getRangeOverlapping(start, end);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {}
        }
      ]
    },
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "01/09/17 3:16 PM",
      "commitName": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
          "commitDate": "01/09/17 3:16 PM",
          "commitName": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/05/17 4:01 PM",
          "commitNameOld": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 122.97,
          "commitsBetweenForRepo": 775,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,16 @@\n-  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n-      long start, long end) {\n+  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n+      long end) throws PlanningException {\n     readLock.lock();\n     try {\n-      return rleSparseVector.getRangeOverlapping(start, end);\n+\n+      RLESparseResourceAllocation ret \u003d\n+          rleSparseVector.getRangeOverlapping(start, end);\n+      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n+          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n+          end);\n+\n+      return ret;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n      long end) throws PlanningException {\n    readLock.lock();\n    try {\n\n      RLESparseResourceAllocation ret \u003d\n          rleSparseVector.getRangeOverlapping(start, end);\n      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n          end);\n\n      return ret;\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[PlanningException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
          "commitDate": "01/09/17 3:16 PM",
          "commitName": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/05/17 4:01 PM",
          "commitNameOld": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 122.97,
          "commitsBetweenForRepo": 775,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,16 @@\n-  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n-      long start, long end) {\n+  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n+      long end) throws PlanningException {\n     readLock.lock();\n     try {\n-      return rleSparseVector.getRangeOverlapping(start, end);\n+\n+      RLESparseResourceAllocation ret \u003d\n+          rleSparseVector.getRangeOverlapping(start, end);\n+      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n+          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n+          end);\n+\n+      return ret;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RLESparseResourceAllocation getCumulativeLoadOverTime(long start,\n      long end) throws PlanningException {\n    readLock.lock();\n    try {\n\n      RLESparseResourceAllocation ret \u003d\n          rleSparseVector.getRangeOverlapping(start, end);\n      ret \u003d RLESparseResourceAllocation.merge(resCalc, totalCapacity, ret,\n          periodicRle.getRangeOverlapping(start, end), RLEOperator.add, start,\n          end);\n\n      return ret;\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
          "extendedDetails": {}
        }
      ]
    },
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,9 @@\n+  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n+      long start, long end) {\n+    readLock.lock();\n+    try {\n+      return rleSparseVector.getRangeOverlapping(start, end);\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation getCumulativeLoadOverTime(\n      long start, long end) {\n    readLock.lock();\n    try {\n      return rleSparseVector.getRangeOverlapping(start, end);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java"
    }
  }
}