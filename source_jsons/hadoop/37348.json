{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractReservationSystem.java",
  "functionName": "getReplanner",
  "functionId": "getReplanner___planQueueName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
  "functionStartLine": 432,
  "functionEndLine": 453,
  "numCommitsSeen": 17,
  "timeTaken": 2092,
  "changeHistory": [
    "2fce6d61412843f0447f60cfe02326f769edae25",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e"
  ],
  "changeHistoryShort": {
    "2fce6d61412843f0447f60cfe02326f769edae25": "Ymultichange(Ymovefromfile,Ybodychange)",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fce6d61412843f0447f60cfe02326f769edae25": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-2690. [YARN-2574] Make ReservationSystem and its dependent classes independent of Scheduler type. (Anubhav Dhoot via kasha)\n",
      "commitDate": "17/11/14 4:45 PM",
      "commitName": "2fce6d61412843f0447f60cfe02326f769edae25",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-2690. [YARN-2574] Make ReservationSystem and its dependent classes independent of Scheduler type. (Anubhav Dhoot via kasha)\n",
          "commitDate": "17/11/14 4:45 PM",
          "commitName": "2fce6d61412843f0447f60cfe02326f769edae25",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "17/11/14 2:59 PM",
          "commitNameOld": "09b3dee122ad20fae22ae8de74886dbf11c39343",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,22 @@\n   protected Planner getReplanner(String planQueueName) {\n-    CapacitySchedulerConfiguration capSchedulerConfig \u003d\n-        capScheduler.getConfiguration();\n-    String plannerClassName \u003d capSchedulerConfig.getReplanner(planQueueName);\n+    ReservationSchedulerConfiguration reservationConfig \u003d\n+        getReservationSchedulerConfiguration();\n+    String plannerClassName \u003d reservationConfig.getReplanner(planQueueName);\n     LOG.info(\"Using Replanner: \" + plannerClassName + \" for queue: \"\n         + planQueueName);\n     try {\n-      Class\u003c?\u003e plannerClazz \u003d\n-          capSchedulerConfig.getClassByName(plannerClassName);\n+      Class\u003c?\u003e plannerClazz \u003d conf.getClassByName(plannerClassName);\n       if (Planner.class.isAssignableFrom(plannerClazz)) {\n         Planner planner \u003d\n             (Planner) ReflectionUtils.newInstance(plannerClazz, conf);\n-        planner.init(planQueueName, capSchedulerConfig);\n+        planner.init(planQueueName, reservationConfig);\n         return planner;\n       } else {\n         throw new YarnRuntimeException(\"Class: \" + plannerClazz\n             + \" not instance of \" + Planner.class.getCanonicalName());\n       }\n     } catch (ClassNotFoundException e) {\n       throw new YarnRuntimeException(\"Could not instantiate Planner: \"\n           + plannerClassName + \" for queue: \" + planQueueName, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Planner getReplanner(String planQueueName) {\n    ReservationSchedulerConfiguration reservationConfig \u003d\n        getReservationSchedulerConfiguration();\n    String plannerClassName \u003d reservationConfig.getReplanner(planQueueName);\n    LOG.info(\"Using Replanner: \" + plannerClassName + \" for queue: \"\n        + planQueueName);\n    try {\n      Class\u003c?\u003e plannerClazz \u003d conf.getClassByName(plannerClassName);\n      if (Planner.class.isAssignableFrom(plannerClazz)) {\n        Planner planner \u003d\n            (Planner) ReflectionUtils.newInstance(plannerClazz, conf);\n        planner.init(planQueueName, reservationConfig);\n        return planner;\n      } else {\n        throw new YarnRuntimeException(\"Class: \" + plannerClazz\n            + \" not instance of \" + Planner.class.getCanonicalName());\n      }\n    } catch (ClassNotFoundException e) {\n      throw new YarnRuntimeException(\"Could not instantiate Planner: \"\n          + plannerClassName + \" for queue: \" + planQueueName, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacityReservationSystem.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
            "oldMethodName": "getReplanner",
            "newMethodName": "getReplanner"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2690. [YARN-2574] Make ReservationSystem and its dependent classes independent of Scheduler type. (Anubhav Dhoot via kasha)\n",
          "commitDate": "17/11/14 4:45 PM",
          "commitName": "2fce6d61412843f0447f60cfe02326f769edae25",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "17/11/14 2:59 PM",
          "commitNameOld": "09b3dee122ad20fae22ae8de74886dbf11c39343",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,22 @@\n   protected Planner getReplanner(String planQueueName) {\n-    CapacitySchedulerConfiguration capSchedulerConfig \u003d\n-        capScheduler.getConfiguration();\n-    String plannerClassName \u003d capSchedulerConfig.getReplanner(planQueueName);\n+    ReservationSchedulerConfiguration reservationConfig \u003d\n+        getReservationSchedulerConfiguration();\n+    String plannerClassName \u003d reservationConfig.getReplanner(planQueueName);\n     LOG.info(\"Using Replanner: \" + plannerClassName + \" for queue: \"\n         + planQueueName);\n     try {\n-      Class\u003c?\u003e plannerClazz \u003d\n-          capSchedulerConfig.getClassByName(plannerClassName);\n+      Class\u003c?\u003e plannerClazz \u003d conf.getClassByName(plannerClassName);\n       if (Planner.class.isAssignableFrom(plannerClazz)) {\n         Planner planner \u003d\n             (Planner) ReflectionUtils.newInstance(plannerClazz, conf);\n-        planner.init(planQueueName, capSchedulerConfig);\n+        planner.init(planQueueName, reservationConfig);\n         return planner;\n       } else {\n         throw new YarnRuntimeException(\"Class: \" + plannerClazz\n             + \" not instance of \" + Planner.class.getCanonicalName());\n       }\n     } catch (ClassNotFoundException e) {\n       throw new YarnRuntimeException(\"Could not instantiate Planner: \"\n           + plannerClassName + \" for queue: \" + planQueueName, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Planner getReplanner(String planQueueName) {\n    ReservationSchedulerConfiguration reservationConfig \u003d\n        getReservationSchedulerConfiguration();\n    String plannerClassName \u003d reservationConfig.getReplanner(planQueueName);\n    LOG.info(\"Using Replanner: \" + plannerClassName + \" for queue: \"\n        + planQueueName);\n    try {\n      Class\u003c?\u003e plannerClazz \u003d conf.getClassByName(plannerClassName);\n      if (Planner.class.isAssignableFrom(plannerClazz)) {\n        Planner planner \u003d\n            (Planner) ReflectionUtils.newInstance(plannerClazz, conf);\n        planner.init(planQueueName, reservationConfig);\n        return planner;\n      } else {\n        throw new YarnRuntimeException(\"Class: \" + plannerClazz\n            + \" not instance of \" + Planner.class.getCanonicalName());\n      }\n    } catch (ClassNotFoundException e) {\n      throw new YarnRuntimeException(\"Could not instantiate Planner: \"\n          + plannerClassName + \" for queue: \" + planQueueName, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2080. Integrating reservation system with ResourceManager and client-RM protocol. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 8baeaead8532898163f1006276b731a237b1a559)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,23 @@\n+  protected Planner getReplanner(String planQueueName) {\n+    CapacitySchedulerConfiguration capSchedulerConfig \u003d\n+        capScheduler.getConfiguration();\n+    String plannerClassName \u003d capSchedulerConfig.getReplanner(planQueueName);\n+    LOG.info(\"Using Replanner: \" + plannerClassName + \" for queue: \"\n+        + planQueueName);\n+    try {\n+      Class\u003c?\u003e plannerClazz \u003d\n+          capSchedulerConfig.getClassByName(plannerClassName);\n+      if (Planner.class.isAssignableFrom(plannerClazz)) {\n+        Planner planner \u003d\n+            (Planner) ReflectionUtils.newInstance(plannerClazz, conf);\n+        planner.init(planQueueName, capSchedulerConfig);\n+        return planner;\n+      } else {\n+        throw new YarnRuntimeException(\"Class: \" + plannerClazz\n+            + \" not instance of \" + Planner.class.getCanonicalName());\n+      }\n+    } catch (ClassNotFoundException e) {\n+      throw new YarnRuntimeException(\"Could not instantiate Planner: \"\n+          + plannerClassName + \" for queue: \" + planQueueName, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Planner getReplanner(String planQueueName) {\n    CapacitySchedulerConfiguration capSchedulerConfig \u003d\n        capScheduler.getConfiguration();\n    String plannerClassName \u003d capSchedulerConfig.getReplanner(planQueueName);\n    LOG.info(\"Using Replanner: \" + plannerClassName + \" for queue: \"\n        + planQueueName);\n    try {\n      Class\u003c?\u003e plannerClazz \u003d\n          capSchedulerConfig.getClassByName(plannerClassName);\n      if (Planner.class.isAssignableFrom(plannerClazz)) {\n        Planner planner \u003d\n            (Planner) ReflectionUtils.newInstance(plannerClazz, conf);\n        planner.init(planQueueName, capSchedulerConfig);\n        return planner;\n      } else {\n        throw new YarnRuntimeException(\"Class: \" + plannerClazz\n            + \" not instance of \" + Planner.class.getCanonicalName());\n      }\n    } catch (ClassNotFoundException e) {\n      throw new YarnRuntimeException(\"Could not instantiate Planner: \"\n          + plannerClassName + \" for queue: \" + planQueueName, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacityReservationSystem.java"
    }
  }
}