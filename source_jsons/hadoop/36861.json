{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "updateApplicationTimeouts",
  "functionId": "updateApplicationTimeouts___app-RMApp(modifiers-final)__callerUGI-UserGroupInformation__appTimeout-AppTimeoutInfo(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2496,
  "functionEndLine": 2541,
  "numCommitsSeen": 106,
  "timeTaken": 2859,
  "changeHistory": [
    "74d0066d3392169bec872f438a0818e2f5323010",
    "1f12867a69544a1642aa986d4f9a8249be495434"
  ],
  "changeHistoryShort": {
    "74d0066d3392169bec872f438a0818e2f5323010": "Ybodychange",
    "1f12867a69544a1642aa986d4f9a8249be495434": "Yintroduced"
  },
  "changeHistoryDetails": {
    "74d0066d3392169bec872f438a0818e2f5323010": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5970. Validate application update timeout request parameters. Contributed by Rohith Sharma K S.\n",
      "commitDate": "08/12/16 2:23 AM",
      "commitName": "74d0066d3392169bec872f438a0818e2f5323010",
      "commitAuthor": "Sunil G",
      "commitDateOld": "23/11/16 4:25 PM",
      "commitNameOld": "1f12867a69544a1642aa986d4f9a8249be495434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.42,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private Response updateApplicationTimeouts(final RMApp app,\n       UserGroupInformation callerUGI, final AppTimeoutInfo appTimeout)\n       throws IOException, InterruptedException {\n-\n-    if (appTimeout.getTimeoutType() \u003d\u003d null) {\n-      return Response.status(Status.BAD_REQUEST).entity(\"Timeout type is null.\")\n-          .build();\n+    if (appTimeout.getTimeoutType() \u003d\u003d null\n+        || appTimeout.getExpireTime() \u003d\u003d null) {\n+      return Response.status(Status.BAD_REQUEST)\n+          .entity(\"Timeout type or ExpiryTime is null.\").build();\n     }\n \n     String userName \u003d callerUGI.getUserName();\n     try {\n       callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         @Override\n         public Void run() throws IOException, YarnException {\n           UpdateApplicationTimeoutsRequest request \u003d\n               UpdateApplicationTimeoutsRequest\n                   .newInstance(app.getApplicationId(), Collections.singletonMap(\n                       appTimeout.getTimeoutType(), appTimeout.getExpireTime()));\n           rm.getClientRMService().updateApplicationTimeouts(request);\n           return null;\n         }\n       });\n     } catch (UndeclaredThrowableException ue) {\n       // if the root cause is a permissions issue\n       // bubble that up to the user\n       if (ue.getCause() instanceof YarnException) {\n         YarnException ye \u003d (YarnException) ue.getCause();\n         if (ye.getCause() instanceof AccessControlException) {\n           String appId \u003d app.getApplicationId().toString();\n           String msg \u003d \"Unauthorized attempt to change timeout of app \" + appId\n               + \" by remote user \" + userName;\n           return Response.status(Status.FORBIDDEN).entity(msg).build();\n         } else if (ye.getCause() instanceof ParseException) {\n           return Response.status(Status.BAD_REQUEST)\n               .entity(ye.getMessage()).build();\n         } else {\n           throw ue;\n         }\n       } else {\n         throw ue;\n       }\n     }\n     AppTimeoutInfo timeout \u003d constructAppTimeoutDao(appTimeout.getTimeoutType(),\n         app.getApplicationTimeouts().get(appTimeout.getTimeoutType()));\n     return Response.status(Status.OK).entity(timeout).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response updateApplicationTimeouts(final RMApp app,\n      UserGroupInformation callerUGI, final AppTimeoutInfo appTimeout)\n      throws IOException, InterruptedException {\n    if (appTimeout.getTimeoutType() \u003d\u003d null\n        || appTimeout.getExpireTime() \u003d\u003d null) {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Timeout type or ExpiryTime is null.\").build();\n    }\n\n    String userName \u003d callerUGI.getUserName();\n    try {\n      callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws IOException, YarnException {\n          UpdateApplicationTimeoutsRequest request \u003d\n              UpdateApplicationTimeoutsRequest\n                  .newInstance(app.getApplicationId(), Collections.singletonMap(\n                      appTimeout.getTimeoutType(), appTimeout.getExpireTime()));\n          rm.getClientRMService().updateApplicationTimeouts(request);\n          return null;\n        }\n      });\n    } catch (UndeclaredThrowableException ue) {\n      // if the root cause is a permissions issue\n      // bubble that up to the user\n      if (ue.getCause() instanceof YarnException) {\n        YarnException ye \u003d (YarnException) ue.getCause();\n        if (ye.getCause() instanceof AccessControlException) {\n          String appId \u003d app.getApplicationId().toString();\n          String msg \u003d \"Unauthorized attempt to change timeout of app \" + appId\n              + \" by remote user \" + userName;\n          return Response.status(Status.FORBIDDEN).entity(msg).build();\n        } else if (ye.getCause() instanceof ParseException) {\n          return Response.status(Status.BAD_REQUEST)\n              .entity(ye.getMessage()).build();\n        } else {\n          throw ue;\n        }\n      } else {\n        throw ue;\n      }\n    }\n    AppTimeoutInfo timeout \u003d constructAppTimeoutDao(appTimeout.getTimeoutType(),\n        app.getApplicationTimeouts().get(appTimeout.getTimeoutType()));\n    return Response.status(Status.OK).entity(timeout).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "1f12867a69544a1642aa986d4f9a8249be495434": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5649. Add REST endpoints for updating application timeouts. Contributed by Rohith Sharma K S\n",
      "commitDate": "23/11/16 4:25 PM",
      "commitName": "1f12867a69544a1642aa986d4f9a8249be495434",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,46 @@\n+  private Response updateApplicationTimeouts(final RMApp app,\n+      UserGroupInformation callerUGI, final AppTimeoutInfo appTimeout)\n+      throws IOException, InterruptedException {\n+\n+    if (appTimeout.getTimeoutType() \u003d\u003d null) {\n+      return Response.status(Status.BAD_REQUEST).entity(\"Timeout type is null.\")\n+          .build();\n+    }\n+\n+    String userName \u003d callerUGI.getUserName();\n+    try {\n+      callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+        @Override\n+        public Void run() throws IOException, YarnException {\n+          UpdateApplicationTimeoutsRequest request \u003d\n+              UpdateApplicationTimeoutsRequest\n+                  .newInstance(app.getApplicationId(), Collections.singletonMap(\n+                      appTimeout.getTimeoutType(), appTimeout.getExpireTime()));\n+          rm.getClientRMService().updateApplicationTimeouts(request);\n+          return null;\n+        }\n+      });\n+    } catch (UndeclaredThrowableException ue) {\n+      // if the root cause is a permissions issue\n+      // bubble that up to the user\n+      if (ue.getCause() instanceof YarnException) {\n+        YarnException ye \u003d (YarnException) ue.getCause();\n+        if (ye.getCause() instanceof AccessControlException) {\n+          String appId \u003d app.getApplicationId().toString();\n+          String msg \u003d \"Unauthorized attempt to change timeout of app \" + appId\n+              + \" by remote user \" + userName;\n+          return Response.status(Status.FORBIDDEN).entity(msg).build();\n+        } else if (ye.getCause() instanceof ParseException) {\n+          return Response.status(Status.BAD_REQUEST)\n+              .entity(ye.getMessage()).build();\n+        } else {\n+          throw ue;\n+        }\n+      } else {\n+        throw ue;\n+      }\n+    }\n+    AppTimeoutInfo timeout \u003d constructAppTimeoutDao(appTimeout.getTimeoutType(),\n+        app.getApplicationTimeouts().get(appTimeout.getTimeoutType()));\n+    return Response.status(Status.OK).entity(timeout).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Response updateApplicationTimeouts(final RMApp app,\n      UserGroupInformation callerUGI, final AppTimeoutInfo appTimeout)\n      throws IOException, InterruptedException {\n\n    if (appTimeout.getTimeoutType() \u003d\u003d null) {\n      return Response.status(Status.BAD_REQUEST).entity(\"Timeout type is null.\")\n          .build();\n    }\n\n    String userName \u003d callerUGI.getUserName();\n    try {\n      callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws IOException, YarnException {\n          UpdateApplicationTimeoutsRequest request \u003d\n              UpdateApplicationTimeoutsRequest\n                  .newInstance(app.getApplicationId(), Collections.singletonMap(\n                      appTimeout.getTimeoutType(), appTimeout.getExpireTime()));\n          rm.getClientRMService().updateApplicationTimeouts(request);\n          return null;\n        }\n      });\n    } catch (UndeclaredThrowableException ue) {\n      // if the root cause is a permissions issue\n      // bubble that up to the user\n      if (ue.getCause() instanceof YarnException) {\n        YarnException ye \u003d (YarnException) ue.getCause();\n        if (ye.getCause() instanceof AccessControlException) {\n          String appId \u003d app.getApplicationId().toString();\n          String msg \u003d \"Unauthorized attempt to change timeout of app \" + appId\n              + \" by remote user \" + userName;\n          return Response.status(Status.FORBIDDEN).entity(msg).build();\n        } else if (ye.getCause() instanceof ParseException) {\n          return Response.status(Status.BAD_REQUEST)\n              .entity(ye.getMessage()).build();\n        } else {\n          throw ue;\n        }\n      } else {\n        throw ue;\n      }\n    }\n    AppTimeoutInfo timeout \u003d constructAppTimeoutDao(appTimeout.getTimeoutType(),\n        app.getApplicationTimeouts().get(appTimeout.getTimeoutType()));\n    return Response.status(Status.OK).entity(timeout).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}