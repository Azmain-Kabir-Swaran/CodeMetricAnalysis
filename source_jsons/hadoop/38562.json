{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoScheduler.java",
  "functionName": "nodeUpdate",
  "functionId": "nodeUpdate___nm-RMNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
  "functionStartLine": 958,
  "functionEndLine": 981,
  "numCommitsSeen": 226,
  "timeTaken": 14051,
  "changeHistory": [
    "0cd145a44390bc1a01113dce4be4e629637c3e8a",
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b",
    "9ed17f181d96b8719a0ef54a129081948781d57e",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff",
    "adf260a728df427eb729abe8fb9ad7248991ea54",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
    "52948bb20bd1446164df1d3920c46c96dad750ae",
    "485c96e3cb9b0b05d6e490b4773506da83ebc61d",
    "5c14bc426b4be381383018ebc2236be83eef15cd",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78",
    "424fd9494f144c035fdef8c533be51e2027ad8d9",
    "6990355e577ad19371cb656c250fb665ed14062f",
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "68615600985dfadf067a4967a5e08c1421e7a1c8",
    "f24dcb3449c77da665058427bc7fa480cad507fc",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "0cd145a44390bc1a01113dce4be4e629637c3e8a": "Ybodychange",
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": "Ybodychange",
    "9ed17f181d96b8719a0ef54a129081948781d57e": "Ybodychange",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": "Ybodychange",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": "Ybodychange",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": "Ybodychange",
    "adf260a728df427eb729abe8fb9ad7248991ea54": "Ybodychange",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": "Ybodychange",
    "52948bb20bd1446164df1d3920c46c96dad750ae": "Ybodychange",
    "485c96e3cb9b0b05d6e490b4773506da83ebc61d": "Ybodychange",
    "5c14bc426b4be381383018ebc2236be83eef15cd": "Ybodychange",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": "Ybodychange",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Ybodychange",
    "6990355e577ad19371cb656c250fb665ed14062f": "Ybodychange",
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69": "Ymultichange(Yparameterchange,Ybodychange)",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "68615600985dfadf067a4967a5e08c1421e7a1c8": "Ybodychange",
    "f24dcb3449c77da665058427bc7fa480cad507fc": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0cd145a44390bc1a01113dce4be4e629637c3e8a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4677. RMNodeResourceUpdateEvent update from scheduler can lead to race condition (wilfreds and gphillips via rkanter)\n",
      "commitDate": "04/06/18 3:32 PM",
      "commitName": "0cd145a44390bc1a01113dce4be4e629637c3e8a",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 124.54,
      "commitsBetweenForRepo": 1514,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   protected synchronized void nodeUpdate(RMNode nm) {\n     super.nodeUpdate(nm);\n \n     FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(nm.getNodeID());\n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n-    if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n-        node.getUnallocatedResource(), minimumAllocation)) {\n+    // A decommissioned node might be removed before we get here\n+    if (node !\u003d null \u0026\u0026\n+        Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n+            node.getUnallocatedResource(), minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + nm.getNodeID() +\n           \" available resource \u003d \" + node.getUnallocatedResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + nm.getNodeID() + \" resource \u003d \"\n           + node.getUnallocatedResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void nodeUpdate(RMNode nm) {\n    super.nodeUpdate(nm);\n\n    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(nm.getNodeID());\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    // A decommissioned node might be removed before we get here\n    if (node !\u003d null \u0026\u0026\n        Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n            node.getUnallocatedResource(), minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + nm.getNodeID() +\n          \" available resource \u003d \" + node.getUnallocatedResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + nm.getNodeID() + \" resource \u003d \"\n          + node.getUnallocatedResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5047. Refactor nodeUpdate across schedulers. (Ray Chiang via kasha)\n",
      "commitDate": "20/10/16 9:17 PM",
      "commitName": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5047. Refactor nodeUpdate across schedulers. (Ray Chiang via kasha)\n",
          "commitDate": "20/10/16 9:17 PM",
          "commitName": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 51.23,
          "commitsBetweenForRepo": 332,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,22 @@\n-  private synchronized void nodeUpdate(RMNode rmNode) {\n-    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n-    \n-    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n-    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n-    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n-    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n-      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n-      completedContainers.addAll(containerInfo.getCompletedContainers());\n-    }\n-    // Processing the newly launched containers\n-    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n-      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n-    }\n+  protected synchronized void nodeUpdate(RMNode nm) {\n+    super.nodeUpdate(nm);\n \n-    // Process completed containers\n-    for (ContainerStatus completedContainer : completedContainers) {\n-      ContainerId containerId \u003d completedContainer.getContainerId();\n-      LOG.debug(\"Container FINISHED: \" + containerId);\n-      super.completedContainer(getRMContainer(containerId),\n-          completedContainer, RMContainerEventType.FINISHED);\n-    }\n-\n-    // Updating node resource utilization\n-    node.setAggregatedContainersUtilization(\n-        rmNode.getAggregatedContainersUtilization());\n-    node.setNodeUtilization(rmNode.getNodeUtilization());\n-\n-    // If the node is decommissioning, send an update to have the total\n-    // resource equal to the used resource, so no available resource to\n-    // schedule.\n-    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n-      this.rmContext\n-          .getDispatcher()\n-          .getEventHandler()\n-          .handle(\n-              new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n-                  .newInstance(getSchedulerNode(rmNode.getNodeID())\n-                      .getAllocatedResource(), 0)));\n-    }\n-\n+    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(nm.getNodeID());\n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n-            node.getUnallocatedResource(), minimumAllocation)) {\n-      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n+        node.getUnallocatedResource(), minimumAllocation)) {\n+      LOG.debug(\"Node heartbeat \" + nm.getNodeID() +\n           \" available resource \u003d \" + node.getUnallocatedResource());\n \n       assignContainers(node);\n \n-      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n+      LOG.debug(\"Node after allocation \" + nm.getNodeID() + \" resource \u003d \"\n           + node.getUnallocatedResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void nodeUpdate(RMNode nm) {\n    super.nodeUpdate(nm);\n\n    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(nm.getNodeID());\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n        node.getUnallocatedResource(), minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + nm.getNodeID() +\n          \" available resource \u003d \" + node.getUnallocatedResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + nm.getNodeID() + \" resource \u003d \"\n          + node.getUnallocatedResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[rmNode-RMNode]",
            "newValue": "[nm-RMNode]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5047. Refactor nodeUpdate across schedulers. (Ray Chiang via kasha)\n",
          "commitDate": "20/10/16 9:17 PM",
          "commitName": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 51.23,
          "commitsBetweenForRepo": 332,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,22 @@\n-  private synchronized void nodeUpdate(RMNode rmNode) {\n-    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n-    \n-    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n-    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n-    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n-    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n-      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n-      completedContainers.addAll(containerInfo.getCompletedContainers());\n-    }\n-    // Processing the newly launched containers\n-    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n-      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n-    }\n+  protected synchronized void nodeUpdate(RMNode nm) {\n+    super.nodeUpdate(nm);\n \n-    // Process completed containers\n-    for (ContainerStatus completedContainer : completedContainers) {\n-      ContainerId containerId \u003d completedContainer.getContainerId();\n-      LOG.debug(\"Container FINISHED: \" + containerId);\n-      super.completedContainer(getRMContainer(containerId),\n-          completedContainer, RMContainerEventType.FINISHED);\n-    }\n-\n-    // Updating node resource utilization\n-    node.setAggregatedContainersUtilization(\n-        rmNode.getAggregatedContainersUtilization());\n-    node.setNodeUtilization(rmNode.getNodeUtilization());\n-\n-    // If the node is decommissioning, send an update to have the total\n-    // resource equal to the used resource, so no available resource to\n-    // schedule.\n-    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n-      this.rmContext\n-          .getDispatcher()\n-          .getEventHandler()\n-          .handle(\n-              new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n-                  .newInstance(getSchedulerNode(rmNode.getNodeID())\n-                      .getAllocatedResource(), 0)));\n-    }\n-\n+    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(nm.getNodeID());\n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n-            node.getUnallocatedResource(), minimumAllocation)) {\n-      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n+        node.getUnallocatedResource(), minimumAllocation)) {\n+      LOG.debug(\"Node heartbeat \" + nm.getNodeID() +\n           \" available resource \u003d \" + node.getUnallocatedResource());\n \n       assignContainers(node);\n \n-      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n+      LOG.debug(\"Node after allocation \" + nm.getNodeID() + \" resource \u003d \"\n           + node.getUnallocatedResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void nodeUpdate(RMNode nm) {\n    super.nodeUpdate(nm);\n\n    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(nm.getNodeID());\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n        node.getUnallocatedResource(), minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + nm.getNodeID() +\n          \" available resource \u003d \" + node.getUnallocatedResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + nm.getNodeID() + \" resource \u003d \"\n          + node.getUnallocatedResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[protected, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5047. Refactor nodeUpdate across schedulers. (Ray Chiang via kasha)\n",
          "commitDate": "20/10/16 9:17 PM",
          "commitName": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 51.23,
          "commitsBetweenForRepo": 332,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,22 @@\n-  private synchronized void nodeUpdate(RMNode rmNode) {\n-    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n-    \n-    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n-    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n-    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n-    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n-      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n-      completedContainers.addAll(containerInfo.getCompletedContainers());\n-    }\n-    // Processing the newly launched containers\n-    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n-      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n-    }\n+  protected synchronized void nodeUpdate(RMNode nm) {\n+    super.nodeUpdate(nm);\n \n-    // Process completed containers\n-    for (ContainerStatus completedContainer : completedContainers) {\n-      ContainerId containerId \u003d completedContainer.getContainerId();\n-      LOG.debug(\"Container FINISHED: \" + containerId);\n-      super.completedContainer(getRMContainer(containerId),\n-          completedContainer, RMContainerEventType.FINISHED);\n-    }\n-\n-    // Updating node resource utilization\n-    node.setAggregatedContainersUtilization(\n-        rmNode.getAggregatedContainersUtilization());\n-    node.setNodeUtilization(rmNode.getNodeUtilization());\n-\n-    // If the node is decommissioning, send an update to have the total\n-    // resource equal to the used resource, so no available resource to\n-    // schedule.\n-    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n-      this.rmContext\n-          .getDispatcher()\n-          .getEventHandler()\n-          .handle(\n-              new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n-                  .newInstance(getSchedulerNode(rmNode.getNodeID())\n-                      .getAllocatedResource(), 0)));\n-    }\n-\n+    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(nm.getNodeID());\n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n-            node.getUnallocatedResource(), minimumAllocation)) {\n-      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n+        node.getUnallocatedResource(), minimumAllocation)) {\n+      LOG.debug(\"Node heartbeat \" + nm.getNodeID() +\n           \" available resource \u003d \" + node.getUnallocatedResource());\n \n       assignContainers(node);\n \n-      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n+      LOG.debug(\"Node after allocation \" + nm.getNodeID() + \" resource \u003d \"\n           + node.getUnallocatedResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void nodeUpdate(RMNode nm) {\n    super.nodeUpdate(nm);\n\n    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(nm.getNodeID());\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n        node.getUnallocatedResource(), minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + nm.getNodeID() +\n          \" available resource \u003d \" + node.getUnallocatedResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + nm.getNodeID() + \" resource \u003d \"\n          + node.getUnallocatedResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "28/02/16 9:35 AM",
      "commitNameOld": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 15.15,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       super.completedContainer(getRMContainer(containerId),\n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     // Updating node resource utilization\n     node.setAggregatedContainersUtilization(\n         rmNode.getAggregatedContainersUtilization());\n     node.setNodeUtilization(rmNode.getNodeUtilization());\n \n     // If the node is decommissioning, send an update to have the total\n     // resource equal to the used resource, so no available resource to\n     // schedule.\n     if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n       this.rmContext\n           .getDispatcher()\n           .getEventHandler()\n           .handle(\n               new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n                   .newInstance(getSchedulerNode(rmNode.getNodeID())\n                       .getAllocatedResource(), 0)));\n     }\n \n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n-    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n+    if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n             node.getUnallocatedResource(), minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getUnallocatedResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getUnallocatedResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      super.completedContainer(getRMContainer(containerId),\n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    // If the node is decommissioning, send an update to have the total\n    // resource equal to the used resource, so no available resource to\n    // schedule.\n    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n      this.rmContext\n          .getDispatcher()\n          .getEventHandler()\n          .handle(\n              new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n                  .newInstance(getSchedulerNode(rmNode.getNodeID())\n                      .getAllocatedResource(), 0)));\n    }\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, getClusterResource(),\n            node.getUnallocatedResource(), minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getUnallocatedResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getUnallocatedResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)\n",
      "commitDate": "28/02/16 9:35 AM",
      "commitName": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "23/02/16 3:30 AM",
      "commitNameOld": "9ed17f181d96b8719a0ef54a129081948781d57e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.25,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       super.completedContainer(getRMContainer(containerId),\n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     // Updating node resource utilization\n     node.setAggregatedContainersUtilization(\n         rmNode.getAggregatedContainersUtilization());\n     node.setNodeUtilization(rmNode.getNodeUtilization());\n \n     // If the node is decommissioning, send an update to have the total\n     // resource equal to the used resource, so no available resource to\n     // schedule.\n     if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n       this.rmContext\n           .getDispatcher()\n           .getEventHandler()\n           .handle(\n               new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n                   .newInstance(getSchedulerNode(rmNode.getNodeID())\n-                      .getUsedResource(), 0)));\n+                      .getAllocatedResource(), 0)));\n     }\n \n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n-            node.getAvailableResource(),minimumAllocation)) {\n+            node.getUnallocatedResource(), minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n-          \" available resource \u003d \" + node.getAvailableResource());\n+          \" available resource \u003d \" + node.getUnallocatedResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n-          + node.getAvailableResource());\n+          + node.getUnallocatedResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      super.completedContainer(getRMContainer(containerId),\n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    // If the node is decommissioning, send an update to have the total\n    // resource equal to the used resource, so no available resource to\n    // schedule.\n    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n      this.rmContext\n          .getDispatcher()\n          .getEventHandler()\n          .handle(\n              new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n                  .newInstance(getSchedulerNode(rmNode.getNodeID())\n                      .getAllocatedResource(), 0)));\n    }\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getUnallocatedResource(), minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getUnallocatedResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getUnallocatedResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "9ed17f181d96b8719a0ef54a129081948781d57e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3223. Resource update during NM graceful decommission. Contributed by Brook Zhou.\n",
      "commitDate": "23/02/16 3:30 AM",
      "commitName": "9ed17f181d96b8719a0ef54a129081948781d57e",
      "commitAuthor": "Junping Du",
      "commitDateOld": "18/01/16 5:30 PM",
      "commitNameOld": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 35.42,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,59 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       super.completedContainer(getRMContainer(containerId),\n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     // Updating node resource utilization\n     node.setAggregatedContainersUtilization(\n         rmNode.getAggregatedContainersUtilization());\n     node.setNodeUtilization(rmNode.getNodeUtilization());\n \n+    // If the node is decommissioning, send an update to have the total\n+    // resource equal to the used resource, so no available resource to\n+    // schedule.\n+    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n+      this.rmContext\n+          .getDispatcher()\n+          .getEventHandler()\n+          .handle(\n+              new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n+                  .newInstance(getSchedulerNode(rmNode.getNodeID())\n+                      .getUsedResource(), 0)));\n+    }\n+\n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      super.completedContainer(getRMContainer(containerId),\n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    // If the node is decommissioning, send an update to have the total\n    // resource equal to the used resource, so no available resource to\n    // schedule.\n    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n      this.rmContext\n          .getDispatcher()\n          .getEventHandler()\n          .handle(\n              new RMNodeResourceUpdateEvent(rmNode.getNodeID(), ResourceOption\n                  .newInstance(getSchedulerNode(rmNode.getNodeID())\n                      .getUsedResource(), 0)));\n    }\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "18/01/16 5:30 PM",
      "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 5:27 PM",
      "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n-      completedContainer(getRMContainer(containerId), \n+      super.completedContainer(getRMContainer(containerId),\n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     // Updating node resource utilization\n     node.setAggregatedContainersUtilization(\n         rmNode.getAggregatedContainersUtilization());\n     node.setNodeUtilization(rmNode.getNodeUtilization());\n \n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      super.completedContainer(getRMContainer(containerId),\n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
      "commitDate": "18/01/16 5:27 PM",
      "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 1:06 AM",
      "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n-      super.completedContainer(getRMContainer(containerId),\n+      completedContainer(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     // Updating node resource utilization\n     node.setAggregatedContainersUtilization(\n         rmNode.getAggregatedContainersUtilization());\n     node.setNodeUtilization(rmNode.getNodeUtilization());\n \n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      completedContainer(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
      "commitDate": "18/01/16 1:06 AM",
      "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 12:50 AM",
      "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n-      completedContainer(getRMContainer(containerId), \n+      super.completedContainer(getRMContainer(containerId),\n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     // Updating node resource utilization\n     node.setAggregatedContainersUtilization(\n         rmNode.getAggregatedContainersUtilization());\n     node.setNodeUtilization(rmNode.getNodeUtilization());\n \n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      super.completedContainer(getRMContainer(containerId),\n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "adf260a728df427eb729abe8fb9ad7248991ea54": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
      "commitDate": "18/01/16 12:50 AM",
      "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/01/16 7:04 PM",
      "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n-      super.completedContainer(getRMContainer(containerId),\n+      completedContainer(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     // Updating node resource utilization\n     node.setAggregatedContainersUtilization(\n         rmNode.getAggregatedContainersUtilization());\n     node.setNodeUtilization(rmNode.getNodeUtilization());\n \n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      completedContainer(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "17/01/16 7:04 PM",
      "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/12/15 10:52 AM",
      "commitNameOld": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 34.34,
      "commitsBetweenForRepo": 200,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n-      completedContainer(getRMContainer(containerId), \n+      super.completedContainer(getRMContainer(containerId),\n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     // Updating node resource utilization\n     node.setAggregatedContainersUtilization(\n         rmNode.getAggregatedContainersUtilization());\n     node.setNodeUtilization(rmNode.getNodeUtilization());\n \n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      super.completedContainer(getRMContainer(containerId),\n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "52948bb20bd1446164df1d3920c46c96dad750ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3980. Plumb resource-utilization info in node heartbeat through to the scheduler. (Inigo Goiri via kasha)\n",
      "commitDate": "24/11/15 12:17 AM",
      "commitName": "52948bb20bd1446164df1d3920c46c96dad750ae",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "23/11/15 12:30 PM",
      "commitNameOld": "d36b6e045f317c94e97cb41a163aa974d161a404",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,46 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       completedContainer(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n+    // Updating node resource utilization\n+    node.setAggregatedContainersUtilization(\n+        rmNode.getAggregatedContainersUtilization());\n+    node.setNodeUtilization(rmNode.getNodeUtilization());\n \n     if (rmContext.isWorkPreservingRecoveryEnabled()\n         \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n       return;\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      completedContainer(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    // Updating node resource utilization\n    node.setAggregatedContainersUtilization(\n        rmNode.getAggregatedContainersUtilization());\n    node.setNodeUtilization(rmNode.getNodeUtilization());\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "485c96e3cb9b0b05d6e490b4773506da83ebc61d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2001. Added a time threshold for RM to wait before starting container allocations after restart/failover. Contributed by Jian He.\n",
      "commitDate": "18/09/14 11:03 AM",
      "commitName": "485c96e3cb9b0b05d6e490b4773506da83ebc61d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/08/14 11:05 PM",
      "commitNameOld": "5c14bc426b4be381383018ebc2236be83eef15cd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 19.5,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       completedContainer(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n+\n+    if (rmContext.isWorkPreservingRecoveryEnabled()\n+        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n+      return;\n+    }\n+\n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      completedContainer(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n\n    if (rmContext.isWorkPreservingRecoveryEnabled()\n        \u0026\u0026 !rmContext.isSchedulerReadyForAllocatingContainers()) {\n      return;\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "5c14bc426b4be381383018ebc2236be83eef15cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1506. Changed RMNode/SchedulerNode to update resource with event notification. Contributed by Junping Du\n",
      "commitDate": "29/08/14 11:05 PM",
      "commitName": "5c14bc426b4be381383018ebc2236be83eef15cd",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/08/14 1:33 PM",
      "commitNameOld": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 10.4,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,36 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n-    // Update resource if any change\n-    SchedulerUtils.updateResourceIfChanged(node, rmNode, clusterResource, LOG);\n-    \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       completedContainer(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      completedContainer(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/14 1:33 PM",
      "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "18/07/14 5:12 PM",
      "commitNameOld": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 31.85,
      "commitsBetweenForRepo": 243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     // Update resource if any change\n     SchedulerUtils.updateResourceIfChanged(node, rmNode, clusterResource, LOG);\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n-      containerCompleted(getRMContainer(containerId), \n+      completedContainer(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n \n     updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Update resource if any change\n    SchedulerUtils.updateResourceIfChanged(node, rmNode, clusterResource, LOG);\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      completedContainer(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/05/14 12:33 PM",
      "commitNameOld": "a4ba451802c6c61a0c804809740d46dd76059f25",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 8.32,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     // Update resource if any change\n     SchedulerUtils.updateResourceIfChanged(node, rmNode, clusterResource, LOG);\n     \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       containerCompleted(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n-    \n-    metrics.setAvailableResourcesToQueue(\n-        Resources.subtract(clusterResource, usedResource));\n+\n+    updateAvailableResourcesMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Update resource if any change\n    SchedulerUtils.updateResourceIfChanged(node, rmNode, clusterResource, LOG);\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n\n    updateAvailableResourcesMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "6990355e577ad19371cb656c250fb665ed14062f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-311. RM/scheduler support for dynamic resource configuration. (Junping Du via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539134 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/11/13 1:23 PM",
      "commitName": "6990355e577ad19371cb656c250fb665ed14062f",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "31/10/13 7:54 PM",
      "commitNameOld": "da317f2ea5af8c12dd8ce04173239d5f9ace5d96",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.77,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n+    // Update resource if any change\n+    SchedulerUtils.updateResourceIfChanged(node, rmNode, clusterResource, LOG);\n+    \n     List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n     List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n     for(UpdatedContainerInfo containerInfo : containerInfoList) {\n       newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n       completedContainers.addAll(containerInfo.getCompletedContainers());\n     }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       containerCompleted(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n-  }  \n\\ No newline at end of file\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Update resource if any change\n    SchedulerUtils.updateResourceIfChanged(node, rmNode, clusterResource, LOG);\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-365. Change NM heartbeat handling to not generate a scheduler event on each heartbeat. (Contributed by Xuan Gong)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1450007 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 7:32 PM",
      "commitName": "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-365. Change NM heartbeat handling to not generate a scheduler event on each heartbeat. (Contributed by Xuan Gong)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1450007 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/13 7:32 PM",
          "commitName": "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "08/01/13 9:08 PM",
          "commitNameOld": "453926397182078c65a4428eb5de5a90d6af6448",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 47.93,
          "commitsBetweenForRepo": 208,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,37 @@\n-  private synchronized void nodeUpdate(RMNode rmNode, \n-      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n-      List\u003cContainerStatus\u003e completedContainers) {\n+  private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n+    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n+    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n+    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n+    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n+      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n+      completedContainers.addAll(containerInfo.getCompletedContainers());\n+    }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       containerCompleted(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n   }  \n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[rmNode-RMNode, newlyLaunchedContainers-List\u003cContainerStatus\u003e, completedContainers-List\u003cContainerStatus\u003e]",
            "newValue": "[rmNode-RMNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-365. Change NM heartbeat handling to not generate a scheduler event on each heartbeat. (Contributed by Xuan Gong)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1450007 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/13 7:32 PM",
          "commitName": "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "08/01/13 9:08 PM",
          "commitNameOld": "453926397182078c65a4428eb5de5a90d6af6448",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 47.93,
          "commitsBetweenForRepo": 208,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,37 @@\n-  private synchronized void nodeUpdate(RMNode rmNode, \n-      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n-      List\u003cContainerStatus\u003e completedContainers) {\n+  private synchronized void nodeUpdate(RMNode rmNode) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n+    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n+    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n+    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n+    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n+      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n+      completedContainers.addAll(containerInfo.getCompletedContainers());\n+    }\n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       containerCompleted(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n             node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n   }  \n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    List\u003cUpdatedContainerInfo\u003e containerInfoList \u003d rmNode.pullContainerUpdates();\n    List\u003cContainerStatus\u003e newlyLaunchedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    List\u003cContainerStatus\u003e completedContainers \u003d new ArrayList\u003cContainerStatus\u003e();\n    for(UpdatedContainerInfo containerInfo : containerInfoList) {\n      newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());\n      completedContainers.addAll(containerInfo.getCompletedContainers());\n    }\n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/11/12 5:56 PM",
      "commitNameOld": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 41.13,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private synchronized void nodeUpdate(RMNode rmNode, \n       List\u003cContainerStatus\u003e newlyLaunchedContainers,\n       List\u003cContainerStatus\u003e completedContainers) {\n     FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       containerCompleted(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n-    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n-        minimumAllocation)) {\n+    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n+            node.getAvailableResource(),minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n   }  \n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode, \n      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n      List\u003cContainerStatus\u003e completedContainers) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(resourceCalculator, clusterResource,\n            node.getAvailableResource(),minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode, \n      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n      List\u003cContainerStatus\u003e completedContainers) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n        minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/07/12 1:53 PM",
      "commitNameOld": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 3.2,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private synchronized void nodeUpdate(RMNode rmNode, \n       List\u003cContainerStatus\u003e newlyLaunchedContainers,\n       List\u003cContainerStatus\u003e completedContainers) {\n-    SchedulerNode node \u003d getNode(rmNode.getNodeID());\n+    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       containerCompleted(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n         minimumAllocation)) {\n       LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n \n       assignContainers(node);\n \n       LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n   }  \n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode, \n      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n      List\u003cContainerStatus\u003e completedContainers) {\n    FiCaSchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n        minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n\n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "68615600985dfadf067a4967a5e08c1421e7a1c8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3692. yarn-resourcemanager out and log files can get big. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1233605 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/01/12 2:23 PM",
      "commitName": "68615600985dfadf067a4967a5e08c1421e7a1c8",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "13/01/12 1:15 PM",
      "commitNameOld": "78ff0b720e0418785d53802a1b4e72085c1a3556",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private synchronized void nodeUpdate(RMNode rmNode, \n       List\u003cContainerStatus\u003e newlyLaunchedContainers,\n       List\u003cContainerStatus\u003e completedContainers) {\n     SchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n       LOG.debug(\"Container FINISHED: \" + containerId);\n       containerCompleted(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n         minimumAllocation)) {\n-      LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n+      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n       \n       assignContainers(node);\n \n-      LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n+      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n   }  \n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode, \n      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n      List\u003cContainerStatus\u003e completedContainers) {\n    SchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n        minimumAllocation)) {\n      LOG.debug(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n      \n      assignContainers(node);\n\n      LOG.debug(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "f24dcb3449c77da665058427bc7fa480cad507fc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2907. Changed log level for various messages in ResourceManager from INFO to DEBUG. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179178 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:56 AM",
      "commitName": "f24dcb3449c77da665058427bc7fa480cad507fc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/11 4:21 PM",
      "commitNameOld": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private synchronized void nodeUpdate(RMNode rmNode, \n       List\u003cContainerStatus\u003e newlyLaunchedContainers,\n       List\u003cContainerStatus\u003e completedContainers) {\n     SchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n     // Processing the newly launched containers\n     for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n       containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n     }\n \n     // Process completed containers\n     for (ContainerStatus completedContainer : completedContainers) {\n       ContainerId containerId \u003d completedContainer.getContainerId();\n-      LOG.info(\"DEBUG --- Container FINISHED: \" + containerId);\n+      LOG.debug(\"Container FINISHED: \" + containerId);\n       containerCompleted(getRMContainer(containerId), \n           completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n         minimumAllocation)) {\n       LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n       \n       assignContainers(node);\n \n       LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n   }  \n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode, \n      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n      List\u003cContainerStatus\u003e completedContainers) {\n    SchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.debug(\"Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n        minimumAllocation)) {\n      LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n      \n      assignContainers(node);\n\n      LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 7:04 PM",
          "commitNameOld": "035937bee8ef57bc24b08068e7375ac45413a349",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.64,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,32 @@\n-  private synchronized void nodeUpdate(RMNode rmNode,\n-      Map\u003cApplicationId, List\u003cContainer\u003e\u003e remoteContainers) {\n+  private synchronized void nodeUpdate(RMNode rmNode, \n+      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n+      List\u003cContainerStatus\u003e completedContainers) {\n     SchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n-    for (List\u003cContainer\u003e appContainers : remoteContainers.values()) {\n-      for (Container container : appContainers) {\n-        /* make sure the scheduler hasnt already removed the applications */\n-        if (getApplication(container.getId().getAppAttemptId()) !\u003d null) {\n-          if (container.getState() \u003d\u003d ContainerState.RUNNING) {\n-            containerLaunchedOnNode(container, node);\n-          } else { // has to COMPLETE\n-            containerCompleted(getRMContainer(container.getId()), \n-                RMContainerEventType.FINISHED);\n-          }\n-        }\n-        else {\n-          LOG.warn(\"Scheduler not tracking application \" + container.getId().getAppAttemptId());\n-        }\n-      }\n+    // Processing the newly launched containers\n+    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n+      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n+    }\n+\n+    // Process completed containers\n+    for (ContainerStatus completedContainer : completedContainers) {\n+      ContainerId containerId \u003d completedContainer.getContainerId();\n+      LOG.info(\"DEBUG --- Container FINISHED: \" + containerId);\n+      containerCompleted(getRMContainer(containerId), \n+          completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n         minimumAllocation)) {\n       LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n       \n       assignContainers(node);\n \n       LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n   }  \n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode, \n      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n      List\u003cContainerStatus\u003e completedContainers) {\n    SchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.info(\"DEBUG --- Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n        minimumAllocation)) {\n      LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n      \n      assignContainers(node);\n\n      LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[rmNode-RMNode, remoteContainers-Map\u003cApplicationId,List\u003cContainer\u003e\u003e]",
            "newValue": "[rmNode-RMNode, newlyLaunchedContainers-List\u003cContainerStatus\u003e, completedContainers-List\u003cContainerStatus\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 7:04 PM",
          "commitNameOld": "035937bee8ef57bc24b08068e7375ac45413a349",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.64,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,32 @@\n-  private synchronized void nodeUpdate(RMNode rmNode,\n-      Map\u003cApplicationId, List\u003cContainer\u003e\u003e remoteContainers) {\n+  private synchronized void nodeUpdate(RMNode rmNode, \n+      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n+      List\u003cContainerStatus\u003e completedContainers) {\n     SchedulerNode node \u003d getNode(rmNode.getNodeID());\n     \n-    for (List\u003cContainer\u003e appContainers : remoteContainers.values()) {\n-      for (Container container : appContainers) {\n-        /* make sure the scheduler hasnt already removed the applications */\n-        if (getApplication(container.getId().getAppAttemptId()) !\u003d null) {\n-          if (container.getState() \u003d\u003d ContainerState.RUNNING) {\n-            containerLaunchedOnNode(container, node);\n-          } else { // has to COMPLETE\n-            containerCompleted(getRMContainer(container.getId()), \n-                RMContainerEventType.FINISHED);\n-          }\n-        }\n-        else {\n-          LOG.warn(\"Scheduler not tracking application \" + container.getId().getAppAttemptId());\n-        }\n-      }\n+    // Processing the newly launched containers\n+    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n+      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n+    }\n+\n+    // Process completed containers\n+    for (ContainerStatus completedContainer : completedContainers) {\n+      ContainerId containerId \u003d completedContainer.getContainerId();\n+      LOG.info(\"DEBUG --- Container FINISHED: \" + containerId);\n+      containerCompleted(getRMContainer(containerId), \n+          completedContainer, RMContainerEventType.FINISHED);\n     }\n \n     if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n         minimumAllocation)) {\n       LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n           \" available resource \u003d \" + node.getAvailableResource());\n       \n       assignContainers(node);\n \n       LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n           + node.getAvailableResource());\n     }\n     \n     metrics.setAvailableResourcesToQueue(\n         Resources.subtract(clusterResource, usedResource));\n   }  \n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode, \n      List\u003cContainerStatus\u003e newlyLaunchedContainers,\n      List\u003cContainerStatus\u003e completedContainers) {\n    SchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    // Processing the newly launched containers\n    for (ContainerStatus launchedContainer : newlyLaunchedContainers) {\n      containerLaunchedOnNode(launchedContainer.getContainerId(), node);\n    }\n\n    // Process completed containers\n    for (ContainerStatus completedContainer : completedContainers) {\n      ContainerId containerId \u003d completedContainer.getContainerId();\n      LOG.info(\"DEBUG --- Container FINISHED: \" + containerId);\n      containerCompleted(getRMContainer(containerId), \n          completedContainer, RMContainerEventType.FINISHED);\n    }\n\n    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n        minimumAllocation)) {\n      LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n      \n      assignContainers(node);\n\n      LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode,\n      Map\u003cApplicationId, List\u003cContainer\u003e\u003e remoteContainers) {\n    SchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    for (List\u003cContainer\u003e appContainers : remoteContainers.values()) {\n      for (Container container : appContainers) {\n        /* make sure the scheduler hasnt already removed the applications */\n        if (getApplication(container.getId().getAppAttemptId()) !\u003d null) {\n          if (container.getState() \u003d\u003d ContainerState.RUNNING) {\n            containerLaunchedOnNode(container, node);\n          } else { // has to COMPLETE\n            containerCompleted(getRMContainer(container.getId()), \n                RMContainerEventType.FINISHED);\n          }\n        }\n        else {\n          LOG.warn(\"Scheduler not tracking application \" + container.getId().getAppAttemptId());\n        }\n      }\n    }\n\n    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n        minimumAllocation)) {\n      LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n      \n      assignContainers(node);\n\n      LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,35 @@\n+  private synchronized void nodeUpdate(RMNode rmNode,\n+      Map\u003cApplicationId, List\u003cContainer\u003e\u003e remoteContainers) {\n+    SchedulerNode node \u003d getNode(rmNode.getNodeID());\n+    \n+    for (List\u003cContainer\u003e appContainers : remoteContainers.values()) {\n+      for (Container container : appContainers) {\n+        /* make sure the scheduler hasnt already removed the applications */\n+        if (getApplication(container.getId().getAppAttemptId()) !\u003d null) {\n+          if (container.getState() \u003d\u003d ContainerState.RUNNING) {\n+            containerLaunchedOnNode(container, node);\n+          } else { // has to COMPLETE\n+            containerCompleted(getRMContainer(container.getId()), \n+                RMContainerEventType.FINISHED);\n+          }\n+        }\n+        else {\n+          LOG.warn(\"Scheduler not tracking application \" + container.getId().getAppAttemptId());\n+        }\n+      }\n+    }\n+\n+    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n+        minimumAllocation)) {\n+      LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n+          \" available resource \u003d \" + node.getAvailableResource());\n+      \n+      assignContainers(node);\n+\n+      LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n+          + node.getAvailableResource());\n+    }\n+    \n+    metrics.setAvailableResourcesToQueue(\n+        Resources.subtract(clusterResource, usedResource));\n+  }  \n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void nodeUpdate(RMNode rmNode,\n      Map\u003cApplicationId, List\u003cContainer\u003e\u003e remoteContainers) {\n    SchedulerNode node \u003d getNode(rmNode.getNodeID());\n    \n    for (List\u003cContainer\u003e appContainers : remoteContainers.values()) {\n      for (Container container : appContainers) {\n        /* make sure the scheduler hasnt already removed the applications */\n        if (getApplication(container.getId().getAppAttemptId()) !\u003d null) {\n          if (container.getState() \u003d\u003d ContainerState.RUNNING) {\n            containerLaunchedOnNode(container, node);\n          } else { // has to COMPLETE\n            containerCompleted(getRMContainer(container.getId()), \n                RMContainerEventType.FINISHED);\n          }\n        }\n        else {\n          LOG.warn(\"Scheduler not tracking application \" + container.getId().getAppAttemptId());\n        }\n      }\n    }\n\n    if (Resources.greaterThanOrEqual(node.getAvailableResource(),\n        minimumAllocation)) {\n      LOG.info(\"Node heartbeat \" + rmNode.getNodeID() + \n          \" available resource \u003d \" + node.getAvailableResource());\n      \n      assignContainers(node);\n\n      LOG.info(\"Node after allocation \" + rmNode.getNodeID() + \" resource \u003d \"\n          + node.getAvailableResource());\n    }\n    \n    metrics.setAvailableResourcesToQueue(\n        Resources.subtract(clusterResource, usedResource));\n  }  ",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
    }
  }
}