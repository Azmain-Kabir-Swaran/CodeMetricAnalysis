{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLaunchService.java",
  "functionName": "call",
  "functionId": "call",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/ContainerLaunchService.java",
  "functionStartLine": 110,
  "functionEndLine": 143,
  "numCommitsSeen": 8,
  "timeTaken": 1683,
  "changeHistory": [
    "a33ef4fd311784dc15401eb54c82e78528c4f961"
  ],
  "changeHistoryShort": {
    "a33ef4fd311784dc15401eb54c82e78528c4f961": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a33ef4fd311784dc15401eb54c82e78528c4f961": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
      "commitDate": "24/01/19 3:43 PM",
      "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,34 @@\n+    public ProviderService.ResolvedLaunchParams call() {\n+      ProviderService provider \u003d ProviderFactory.getProviderService(\n+          componentLaunchContext.getArtifact());\n+      AbstractLauncher launcher \u003d new AbstractLauncher(context);\n+      ProviderService.ResolvedLaunchParams resolvedParams \u003d null;\n+      try {\n+        resolvedParams \u003d provider.buildContainerLaunchContext(launcher, service,\n+            instance, fs, getConfig(), container, componentLaunchContext);\n+        if (!reInit) {\n+          LOG.info(\"launching container {}\", container.getId());\n+          instance.getComponent().getScheduler().getNmClient()\n+              .startContainerAsync(container,\n+                  launcher.completeContainerLaunch());\n+        } else {\n+          LOG.info(\"reInitializing container {} with version {}\",\n+              container.getId(), componentLaunchContext.getServiceVersion());\n+          instance.getComponent().getScheduler().getNmClient()\n+              .reInitializeContainerAsync(container.getId(),\n+                  launcher.completeContainerLaunch(), true);\n+        }\n+      } catch (Exception e) {\n+        LOG.error(\"{}: Failed to launch container.\",\n+            instance.getCompInstanceId(), e);\n+        ComponentEvent event \u003d new ComponentEvent(instance.getCompName(),\n+            ComponentEventType.CONTAINER_COMPLETED)\n+            .setInstance(instance).setContainerId(container.getId());\n+        context.scheduler.getDispatcher().getEventHandler().handle(event);\n+      }\n+      if (resolvedParams !\u003d null) {\n+        return resolvedParams;\n+      } else {\n+        return FAILED_LAUNCH_PARAMS;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public ProviderService.ResolvedLaunchParams call() {\n      ProviderService provider \u003d ProviderFactory.getProviderService(\n          componentLaunchContext.getArtifact());\n      AbstractLauncher launcher \u003d new AbstractLauncher(context);\n      ProviderService.ResolvedLaunchParams resolvedParams \u003d null;\n      try {\n        resolvedParams \u003d provider.buildContainerLaunchContext(launcher, service,\n            instance, fs, getConfig(), container, componentLaunchContext);\n        if (!reInit) {\n          LOG.info(\"launching container {}\", container.getId());\n          instance.getComponent().getScheduler().getNmClient()\n              .startContainerAsync(container,\n                  launcher.completeContainerLaunch());\n        } else {\n          LOG.info(\"reInitializing container {} with version {}\",\n              container.getId(), componentLaunchContext.getServiceVersion());\n          instance.getComponent().getScheduler().getNmClient()\n              .reInitializeContainerAsync(container.getId(),\n                  launcher.completeContainerLaunch(), true);\n        }\n      } catch (Exception e) {\n        LOG.error(\"{}: Failed to launch container.\",\n            instance.getCompInstanceId(), e);\n        ComponentEvent event \u003d new ComponentEvent(instance.getCompName(),\n            ComponentEventType.CONTAINER_COMPLETED)\n            .setInstance(instance).setContainerId(container.getId());\n        context.scheduler.getDispatcher().getEventHandler().handle(event);\n      }\n      if (resolvedParams !\u003d null) {\n        return resolvedParams;\n      } else {\n        return FAILED_LAUNCH_PARAMS;\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/ContainerLaunchService.java"
    }
  }
}