{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Configuration.java",
  "functionName": "handleDeprecation",
  "functionId": "handleDeprecation___deprecations-DeprecationContext__name-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
  "functionStartLine": 719,
  "functionEndLine": 757,
  "numCommitsSeen": 209,
  "timeTaken": 5742,
  "changeHistory": [
    "f261c319375c5a8c298338752ee77214c22f4e29",
    "db2adf356a937e4c539b2cf5dccfaf90271cf43e",
    "d37dc5d1b8e022a7085118a2e7066623483c293f",
    "fc1e525da0527c4eb2a2cd3c95d094b12d316a7d",
    "7abf7e81512918d780e05070c29ee2ba8736f41e",
    "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9",
    "a8ebdaeb088d53800e0397bd8a8460ca14516aa4",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "f8841bea4df809a3771dbe5f38bbe3b9255accb7",
    "e24071be0aec7e63a0b73bf01f4bbd9930ece066"
  ],
  "changeHistoryShort": {
    "f261c319375c5a8c298338752ee77214c22f4e29": "Ybodychange",
    "db2adf356a937e4c539b2cf5dccfaf90271cf43e": "Ybodychange",
    "d37dc5d1b8e022a7085118a2e7066623483c293f": "Ybodychange",
    "fc1e525da0527c4eb2a2cd3c95d094b12d316a7d": "Ybodychange",
    "7abf7e81512918d780e05070c29ee2ba8736f41e": "Ymultichange(Yparameterchange,Ybodychange)",
    "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9": "Ymultichange(Yreturntypechange,Ybodychange)",
    "a8ebdaeb088d53800e0397bd8a8460ca14516aa4": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "f8841bea4df809a3771dbe5f38bbe3b9255accb7": "Ybodychange",
    "e24071be0aec7e63a0b73bf01f4bbd9930ece066": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f261c319375c5a8c298338752ee77214c22f4e29": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15708. Reading values from Configuration before adding deprecations make it impossible to read value with deprecated key (zsiegl via rkanter)\n",
      "commitDate": "10/10/18 6:51 PM",
      "commitName": "f261c319375c5a8c298338752ee77214c22f4e29",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "02/07/18 9:31 AM",
      "commitNameOld": "f51da9c4d1423c2ac92eb4f40e973264e7e968cc",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 100.39,
      "commitsBetweenForRepo": 841,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,39 @@\n   private String[] handleDeprecation(DeprecationContext deprecations,\n                                      String name) {\n     if (null !\u003d name) {\n       name \u003d name.trim();\n     }\n     // Initialize the return value with requested name\n     String[] names \u003d new String[]{name};\n     // Deprecated keys are logged once and an updated names are returned\n     DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n     if (keyInfo !\u003d null) {\n       if (!keyInfo.getAndSetAccessed()) {\n         logDeprecation(keyInfo.getWarningMessage(name));\n       }\n       // Override return value for deprecated keys\n       names \u003d keyInfo.newKeys;\n     }\n+\n+    // Update properties with deprecated key if already loaded and new\n+    // deprecation has been added\n+    updatePropertiesWithDeprecatedKeys(deprecations, names);\n+\n     // If there are no overlay values we can return early\n     Properties overlayProperties \u003d getOverlay();\n     if (overlayProperties.isEmpty()) {\n       return names;\n     }\n     // Update properties and overlays with reverse lookup values\n     for (String n : names) {\n       String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n       if (deprecatedKey !\u003d null \u0026\u0026 !overlayProperties.containsKey(n)) {\n         String deprecatedValue \u003d overlayProperties.getProperty(deprecatedKey);\n         if (deprecatedValue !\u003d null) {\n           getProps().setProperty(n, deprecatedValue);\n           overlayProperties.setProperty(n, deprecatedValue);\n         }\n       }\n     }\n     return names;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String[] handleDeprecation(DeprecationContext deprecations,\n                                     String name) {\n    if (null !\u003d name) {\n      name \u003d name.trim();\n    }\n    // Initialize the return value with requested name\n    String[] names \u003d new String[]{name};\n    // Deprecated keys are logged once and an updated names are returned\n    DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n    if (keyInfo !\u003d null) {\n      if (!keyInfo.getAndSetAccessed()) {\n        logDeprecation(keyInfo.getWarningMessage(name));\n      }\n      // Override return value for deprecated keys\n      names \u003d keyInfo.newKeys;\n    }\n\n    // Update properties with deprecated key if already loaded and new\n    // deprecation has been added\n    updatePropertiesWithDeprecatedKeys(deprecations, names);\n\n    // If there are no overlay values we can return early\n    Properties overlayProperties \u003d getOverlay();\n    if (overlayProperties.isEmpty()) {\n      return names;\n    }\n    // Update properties and overlays with reverse lookup values\n    for (String n : names) {\n      String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n      if (deprecatedKey !\u003d null \u0026\u0026 !overlayProperties.containsKey(n)) {\n        String deprecatedValue \u003d overlayProperties.getProperty(deprecatedKey);\n        if (deprecatedValue !\u003d null) {\n          getProps().setProperty(n, deprecatedValue);\n          overlayProperties.setProperty(n, deprecatedValue);\n        }\n      }\n    }\n    return names;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "db2adf356a937e4c539b2cf5dccfaf90271cf43e": {
      "type": "Ybodychange",
      "commitMessage": "Configuration#get return value optimization (jeagles)\n",
      "commitDate": "27/03/17 10:48 AM",
      "commitName": "db2adf356a937e4c539b2cf5dccfaf90271cf43e",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "27/03/17 9:01 AM",
      "commitNameOld": "858d597be00ce006c1d1d4cd476729e4f1de8d25",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   private String[] handleDeprecation(DeprecationContext deprecations,\n-      String name) {\n+                                     String name) {\n     if (null !\u003d name) {\n       name \u003d name.trim();\n     }\n-    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n-\tif (isDeprecated(name)) {\n-      DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n-      if (keyInfo !\u003d null) {\n-        if (!keyInfo.getAndSetAccessed()) {\n-          logDeprecation(keyInfo.getWarningMessage(name));\n-        }\n-\n-        for (String newKey : keyInfo.newKeys) {\n-          if (newKey !\u003d null) {\n-            names.add(newKey);\n-          }\n+    // Initialize the return value with requested name\n+    String[] names \u003d new String[]{name};\n+    // Deprecated keys are logged once and an updated names are returned\n+    DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n+    if (keyInfo !\u003d null) {\n+      if (!keyInfo.getAndSetAccessed()) {\n+        logDeprecation(keyInfo.getWarningMessage(name));\n+      }\n+      // Override return value for deprecated keys\n+      names \u003d keyInfo.newKeys;\n+    }\n+    // If there are no overlay values we can return early\n+    Properties overlayProperties \u003d getOverlay();\n+    if (overlayProperties.isEmpty()) {\n+      return names;\n+    }\n+    // Update properties and overlays with reverse lookup values\n+    for (String n : names) {\n+      String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n+      if (deprecatedKey !\u003d null \u0026\u0026 !overlayProperties.containsKey(n)) {\n+        String deprecatedValue \u003d overlayProperties.getProperty(deprecatedKey);\n+        if (deprecatedValue !\u003d null) {\n+          getProps().setProperty(n, deprecatedValue);\n+          overlayProperties.setProperty(n, deprecatedValue);\n         }\n       }\n     }\n-    if(names.size() \u003d\u003d 0) {\n-    \tnames.add(name);\n-    }\n-    for(String n : names) {\n-\t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n-\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n-\t      getOverlay().containsKey(deprecatedKey)) {\n-\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n-\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n-\t  }\n-    }\n-    return names.toArray(new String[names.size()]);\n+    return names;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String[] handleDeprecation(DeprecationContext deprecations,\n                                     String name) {\n    if (null !\u003d name) {\n      name \u003d name.trim();\n    }\n    // Initialize the return value with requested name\n    String[] names \u003d new String[]{name};\n    // Deprecated keys are logged once and an updated names are returned\n    DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n    if (keyInfo !\u003d null) {\n      if (!keyInfo.getAndSetAccessed()) {\n        logDeprecation(keyInfo.getWarningMessage(name));\n      }\n      // Override return value for deprecated keys\n      names \u003d keyInfo.newKeys;\n    }\n    // If there are no overlay values we can return early\n    Properties overlayProperties \u003d getOverlay();\n    if (overlayProperties.isEmpty()) {\n      return names;\n    }\n    // Update properties and overlays with reverse lookup values\n    for (String n : names) {\n      String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n      if (deprecatedKey !\u003d null \u0026\u0026 !overlayProperties.containsKey(n)) {\n        String deprecatedValue \u003d overlayProperties.getProperty(deprecatedKey);\n        if (deprecatedValue !\u003d null) {\n          getProps().setProperty(n, deprecatedValue);\n          overlayProperties.setProperty(n, deprecatedValue);\n        }\n      }\n    }\n    return names;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "d37dc5d1b8e022a7085118a2e7066623483c293f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9847. HDFS configuration should accept time units. Contributed by Yiqun Lin\n",
      "commitDate": "06/09/16 10:38 AM",
      "commitName": "d37dc5d1b8e022a7085118a2e7066623483c293f",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "11/08/16 11:57 AM",
      "commitNameOld": "d892ae9576d07d01927443b6dc6c934a6c2f317f",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 25.94,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,33 @@\n   private String[] handleDeprecation(DeprecationContext deprecations,\n       String name) {\n     if (null !\u003d name) {\n       name \u003d name.trim();\n     }\n     ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n \tif (isDeprecated(name)) {\n       DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n-      warnOnceIfDeprecated(deprecations, name);\n-      for (String newKey : keyInfo.newKeys) {\n-        if(newKey !\u003d null) {\n-          names.add(newKey);\n+      if (keyInfo !\u003d null) {\n+        if (!keyInfo.getAndSetAccessed()) {\n+          logDeprecation(keyInfo.getWarningMessage(name));\n+        }\n+\n+        for (String newKey : keyInfo.newKeys) {\n+          if (newKey !\u003d null) {\n+            names.add(newKey);\n+          }\n         }\n       }\n     }\n     if(names.size() \u003d\u003d 0) {\n     \tnames.add(name);\n     }\n     for(String n : names) {\n \t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n \t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n \t      getOverlay().containsKey(deprecatedKey)) {\n \t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n \t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n \t  }\n     }\n     return names.toArray(new String[names.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String[] handleDeprecation(DeprecationContext deprecations,\n      String name) {\n    if (null !\u003d name) {\n      name \u003d name.trim();\n    }\n    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n\tif (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n      if (keyInfo !\u003d null) {\n        if (!keyInfo.getAndSetAccessed()) {\n          logDeprecation(keyInfo.getWarningMessage(name));\n        }\n\n        for (String newKey : keyInfo.newKeys) {\n          if (newKey !\u003d null) {\n            names.add(newKey);\n          }\n        }\n      }\n    }\n    if(names.size() \u003d\u003d 0) {\n    \tnames.add(name);\n    }\n    for(String n : names) {\n\t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n\t      getOverlay().containsKey(deprecatedKey)) {\n\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t  }\n    }\n    return names.toArray(new String[names.size()]);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "fc1e525da0527c4eb2a2cd3c95d094b12d316a7d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10625. Trim configuration names when putting/getting them to properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598072 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 10:10 AM",
      "commitName": "fc1e525da0527c4eb2a2cd3c95d094b12d316a7d",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "02/05/14 12:08 PM",
      "commitNameOld": "73db6bdb9b1b9ccc85dbc5de9e7c4eeb5ac169b3",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 25.92,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   private String[] handleDeprecation(DeprecationContext deprecations,\n       String name) {\n+    if (null !\u003d name) {\n+      name \u003d name.trim();\n+    }\n     ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n \tif (isDeprecated(name)) {\n       DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n       warnOnceIfDeprecated(deprecations, name);\n       for (String newKey : keyInfo.newKeys) {\n         if(newKey !\u003d null) {\n           names.add(newKey);\n         }\n       }\n     }\n     if(names.size() \u003d\u003d 0) {\n     \tnames.add(name);\n     }\n     for(String n : names) {\n \t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n \t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n \t      getOverlay().containsKey(deprecatedKey)) {\n \t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n \t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n \t  }\n     }\n     return names.toArray(new String[names.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String[] handleDeprecation(DeprecationContext deprecations,\n      String name) {\n    if (null !\u003d name) {\n      name \u003d name.trim();\n    }\n    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n\tif (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n      warnOnceIfDeprecated(deprecations, name);\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          names.add(newKey);\n        }\n      }\n    }\n    if(names.size() \u003d\u003d 0) {\n    \tnames.add(name);\n    }\n    for(String n : names) {\n\t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n\t      getOverlay().containsKey(deprecatedKey)) {\n\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t  }\n    }\n    return names.toArray(new String[names.size()]);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "7abf7e81512918d780e05070c29ee2ba8736f41e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-9478. Fix race conditions during the initialization of Configuration related to deprecatedKeyMap (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1538248 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/11/13 11:42 AM",
      "commitName": "7abf7e81512918d780e05070c29ee2ba8736f41e",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9478. Fix race conditions during the initialization of Configuration related to deprecatedKeyMap (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1538248 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/11/13 11:42 AM",
          "commitName": "7abf7e81512918d780e05070c29ee2ba8736f41e",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "20/08/13 2:53 PM",
          "commitNameOld": "2cd6064195da817d2c34b64f19d4c6d630efbc4a",
          "commitAuthorOld": "Jonathan Turner Eagles",
          "daysBetweenCommits": 73.87,
          "commitsBetweenForRepo": 472,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  private String[] handleDeprecation(String name) {\n+  private String[] handleDeprecation(DeprecationContext deprecations,\n+      String name) {\n     ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n \tif (isDeprecated(name)) {\n-      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n-      warnOnceIfDeprecated(name);\n+      DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n+      warnOnceIfDeprecated(deprecations, name);\n       for (String newKey : keyInfo.newKeys) {\n         if(newKey !\u003d null) {\n           names.add(newKey);\n         }\n       }\n     }\n     if(names.size() \u003d\u003d 0) {\n     \tnames.add(name);\n     }\n     for(String n : names) {\n-\t  String deprecatedKey \u003d reverseDeprecatedKeyMap.get(n);\n+\t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n \t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n \t      getOverlay().containsKey(deprecatedKey)) {\n \t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n \t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n \t  }\n     }\n     return names.toArray(new String[names.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String[] handleDeprecation(DeprecationContext deprecations,\n      String name) {\n    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n\tif (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n      warnOnceIfDeprecated(deprecations, name);\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          names.add(newKey);\n        }\n      }\n    }\n    if(names.size() \u003d\u003d 0) {\n    \tnames.add(name);\n    }\n    for(String n : names) {\n\t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n\t      getOverlay().containsKey(deprecatedKey)) {\n\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t  }\n    }\n    return names.toArray(new String[names.size()]);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {
            "oldValue": "[name-String]",
            "newValue": "[deprecations-DeprecationContext, name-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9478. Fix race conditions during the initialization of Configuration related to deprecatedKeyMap (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1538248 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/11/13 11:42 AM",
          "commitName": "7abf7e81512918d780e05070c29ee2ba8736f41e",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "20/08/13 2:53 PM",
          "commitNameOld": "2cd6064195da817d2c34b64f19d4c6d630efbc4a",
          "commitAuthorOld": "Jonathan Turner Eagles",
          "daysBetweenCommits": 73.87,
          "commitsBetweenForRepo": 472,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  private String[] handleDeprecation(String name) {\n+  private String[] handleDeprecation(DeprecationContext deprecations,\n+      String name) {\n     ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n \tif (isDeprecated(name)) {\n-      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n-      warnOnceIfDeprecated(name);\n+      DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n+      warnOnceIfDeprecated(deprecations, name);\n       for (String newKey : keyInfo.newKeys) {\n         if(newKey !\u003d null) {\n           names.add(newKey);\n         }\n       }\n     }\n     if(names.size() \u003d\u003d 0) {\n     \tnames.add(name);\n     }\n     for(String n : names) {\n-\t  String deprecatedKey \u003d reverseDeprecatedKeyMap.get(n);\n+\t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n \t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n \t      getOverlay().containsKey(deprecatedKey)) {\n \t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n \t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n \t  }\n     }\n     return names.toArray(new String[names.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String[] handleDeprecation(DeprecationContext deprecations,\n      String name) {\n    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n\tif (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecations.getDeprecatedKeyMap().get(name);\n      warnOnceIfDeprecated(deprecations, name);\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          names.add(newKey);\n        }\n      }\n    }\n    if(names.size() \u003d\u003d 0) {\n    \tnames.add(name);\n    }\n    for(String n : names) {\n\t  String deprecatedKey \u003d deprecations.getReverseDeprecatedKeyMap().get(n);\n\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n\t      getOverlay().containsKey(deprecatedKey)) {\n\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t  }\n    }\n    return names.toArray(new String[names.size()]);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {}
        }
      ]
    },
    "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-8172. Configuration no longer sets all keys in a deprecated key list. (Anupam Seth via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/05/12 2:00 PM",
      "commitName": "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9",
      "commitAuthor": "Robert Joseph Evans",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-8172. Configuration no longer sets all keys in a deprecated key list. (Anupam Seth via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332821 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/05/12 2:00 PM",
          "commitName": "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "30/04/12 2:55 PM",
          "commitNameOld": "1e88c1f088a593b40838535bcbdc8654633893fd",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 0.96,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,24 @@\n-  private String handleDeprecation(String name) {\n-    if (isDeprecated(name)) {\n+  private String[] handleDeprecation(String name) {\n+    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n+\tif (isDeprecated(name)) {\n       DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n       warnOnceIfDeprecated(name);\n       for (String newKey : keyInfo.newKeys) {\n         if(newKey !\u003d null) {\n-          name \u003d newKey;\n-          break;\n+          names.add(newKey);\n         }\n       }\n     }\n-    String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n-    if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n-        getOverlay().containsKey(deprecatedKey)) {\n-      getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n-      getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n+    if(names.size() \u003d\u003d 0) {\n+    \tnames.add(name);\n     }\n-    return name;\n+    for(String n : names) {\n+\t  String deprecatedKey \u003d reverseDeprecatedKeyMap.get(n);\n+\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n+\t      getOverlay().containsKey(deprecatedKey)) {\n+\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n+\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n+\t  }\n+    }\n+    return names.toArray(new String[names.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String[] handleDeprecation(String name) {\n    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n\tif (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      warnOnceIfDeprecated(name);\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          names.add(newKey);\n        }\n      }\n    }\n    if(names.size() \u003d\u003d 0) {\n    \tnames.add(name);\n    }\n    for(String n : names) {\n\t  String deprecatedKey \u003d reverseDeprecatedKeyMap.get(n);\n\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n\t      getOverlay().containsKey(deprecatedKey)) {\n\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t  }\n    }\n    return names.toArray(new String[names.size()]);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {
            "oldValue": "String",
            "newValue": "String[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8172. Configuration no longer sets all keys in a deprecated key list. (Anupam Seth via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332821 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/05/12 2:00 PM",
          "commitName": "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "30/04/12 2:55 PM",
          "commitNameOld": "1e88c1f088a593b40838535bcbdc8654633893fd",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 0.96,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,24 @@\n-  private String handleDeprecation(String name) {\n-    if (isDeprecated(name)) {\n+  private String[] handleDeprecation(String name) {\n+    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n+\tif (isDeprecated(name)) {\n       DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n       warnOnceIfDeprecated(name);\n       for (String newKey : keyInfo.newKeys) {\n         if(newKey !\u003d null) {\n-          name \u003d newKey;\n-          break;\n+          names.add(newKey);\n         }\n       }\n     }\n-    String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n-    if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n-        getOverlay().containsKey(deprecatedKey)) {\n-      getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n-      getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n+    if(names.size() \u003d\u003d 0) {\n+    \tnames.add(name);\n     }\n-    return name;\n+    for(String n : names) {\n+\t  String deprecatedKey \u003d reverseDeprecatedKeyMap.get(n);\n+\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n+\t      getOverlay().containsKey(deprecatedKey)) {\n+\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n+\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n+\t  }\n+    }\n+    return names.toArray(new String[names.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String[] handleDeprecation(String name) {\n    ArrayList\u003cString \u003e names \u003d new ArrayList\u003cString\u003e();\n\tif (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      warnOnceIfDeprecated(name);\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          names.add(newKey);\n        }\n      }\n    }\n    if(names.size() \u003d\u003d 0) {\n    \tnames.add(name);\n    }\n    for(String n : names) {\n\t  String deprecatedKey \u003d reverseDeprecatedKeyMap.get(n);\n\t  if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(n) \u0026\u0026\n\t      getOverlay().containsKey(deprecatedKey)) {\n\t    getProps().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t    getOverlay().setProperty(n, getOverlay().getProperty(deprecatedKey));\n\t  }\n    }\n    return names.toArray(new String[names.size()]);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {}
        }
      ]
    },
    "a8ebdaeb088d53800e0397bd8a8460ca14516aa4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8197. Configuration logs WARNs on every use of a deprecated key (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303884 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/12 9:46 AM",
      "commitName": "a8ebdaeb088d53800e0397bd8a8460ca14516aa4",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "21/03/12 5:49 PM",
      "commitNameOld": "76817c28a264968c294391827e6ae06ceb41014e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,19 @@\n   private String handleDeprecation(String name) {\n     if (isDeprecated(name)) {\n       DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n-      if (!keyInfo.accessed) {\n-        LOG.warn(keyInfo.getWarningMessage(name));\n-      }\n+      warnOnceIfDeprecated(name);\n       for (String newKey : keyInfo.newKeys) {\n         if(newKey !\u003d null) {\n           name \u003d newKey;\n           break;\n         }\n       }\n     }\n     String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n     if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n         getOverlay().containsKey(deprecatedKey)) {\n       getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n       getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n-      \n-      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(deprecatedKey);\n-      if (!keyInfo.accessed) {\n-        LOG.warn(keyInfo.getWarningMessage(deprecatedKey));\n-      }\n     }\n     return name;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String handleDeprecation(String name) {\n    if (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      warnOnceIfDeprecated(name);\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          name \u003d newKey;\n          break;\n        }\n      }\n    }\n    String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n    if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n        getOverlay().containsKey(deprecatedKey)) {\n      getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n    }\n    return name;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String handleDeprecation(String name) {\n    if (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(name));\n      }\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          name \u003d newKey;\n          break;\n        }\n      }\n    }\n    String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n    if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n        getOverlay().containsKey(deprecatedKey)) {\n      getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      \n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(deprecatedKey);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(deprecatedKey));\n      }\n    }\n    return name;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String handleDeprecation(String name) {\n    if (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(name));\n      }\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          name \u003d newKey;\n          break;\n        }\n      }\n    }\n    String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n    if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n        getOverlay().containsKey(deprecatedKey)) {\n      getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      \n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(deprecatedKey);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(deprecatedKey));\n      }\n    }\n    return name;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String handleDeprecation(String name) {\n    if (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(name));\n      }\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          name \u003d newKey;\n          break;\n        }\n      }\n    }\n    String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n    if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n        getOverlay().containsKey(deprecatedKey)) {\n      getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      \n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(deprecatedKey);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(deprecatedKey));\n      }\n    }\n    return name;\n  }",
      "path": "common/src/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "common/src/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "f8841bea4df809a3771dbe5f38bbe3b9255accb7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7287. Configuration deprecation mechanism doesn\u0027t work properly for GenericOptionsParser and Tools. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1126719 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/11 1:30 PM",
      "commitName": "f8841bea4df809a3771dbe5f38bbe3b9255accb7",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "18/05/11 11:30 AM",
      "commitNameOld": "d1eaaf30e215d46facd0ca61b47d59665780aba3",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.08,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,26 @@\n   private String handleDeprecation(String name) {\n     if (isDeprecated(name)) {\n       DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n       if (!keyInfo.accessed) {\n         LOG.warn(keyInfo.getWarningMessage(name));\n       }\n       for (String newKey : keyInfo.newKeys) {\n         if(newKey !\u003d null) {\n           name \u003d newKey;\n           break;\n         }\n       }\n     }\n+    String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n+    if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n+        getOverlay().containsKey(deprecatedKey)) {\n+      getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n+      getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n+      \n+      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(deprecatedKey);\n+      if (!keyInfo.accessed) {\n+        LOG.warn(keyInfo.getWarningMessage(deprecatedKey));\n+      }\n+    }\n     return name;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String handleDeprecation(String name) {\n    if (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(name));\n      }\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          name \u003d newKey;\n          break;\n        }\n      }\n    }\n    String deprecatedKey \u003d reverseDeprecatedKeyMap.get(name);\n    if (deprecatedKey !\u003d null \u0026\u0026 !getOverlay().containsKey(name) \u0026\u0026\n        getOverlay().containsKey(deprecatedKey)) {\n      getProps().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      getOverlay().setProperty(name, getOverlay().getProperty(deprecatedKey));\n      \n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(deprecatedKey);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(deprecatedKey));\n      }\n    }\n    return name;\n  }",
      "path": "src/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "e24071be0aec7e63a0b73bf01f4bbd9930ece066": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6105. Adds support for automatically handling deprecation of configuration keys. Contributed by V.V.Chaitanya Krishna.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@812078 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/09/09 4:04 AM",
      "commitName": "e24071be0aec7e63a0b73bf01f4bbd9930ece066",
      "commitAuthor": "Hemanth Yamijala",
      "diff": "@@ -0,0 +1,15 @@\n+  private String handleDeprecation(String name) {\n+    if (isDeprecated(name)) {\n+      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n+      if (!keyInfo.accessed) {\n+        LOG.warn(keyInfo.getWarningMessage(name));\n+      }\n+      for (String newKey : keyInfo.newKeys) {\n+        if(newKey !\u003d null) {\n+          name \u003d newKey;\n+          break;\n+        }\n+      }\n+    }\n+    return name;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String handleDeprecation(String name) {\n    if (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      if (!keyInfo.accessed) {\n        LOG.warn(keyInfo.getWarningMessage(name));\n      }\n      for (String newKey : keyInfo.newKeys) {\n        if(newKey !\u003d null) {\n          name \u003d newKey;\n          break;\n        }\n      }\n    }\n    return name;\n  }",
      "path": "src/java/org/apache/hadoop/conf/Configuration.java"
    }
  }
}