{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryFileManager.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
  "functionStartLine": 587,
  "functionEndLine": 620,
  "numCommitsSeen": 56,
  "timeTaken": 3668,
  "changeHistory": [
    "0881ed3fc313abda2896d3f26769690f5ba37346",
    "5ffb54694b52657f3b7de4560474ab740734e1b2",
    "2440671a117f165dcda5056404bc898df3c50803",
    "d40859fab1ad977636457a6cc96b6a4f9b903afc",
    "3a6f8b878501cc6961a8388813f33bbeb5ebae34",
    "8fa3ebd13451a243510eed5c2f3dd43cdf605a77",
    "0928502029ef141759008997335ea2cd836a7154",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "77805c7ae41d4f5e9d350fde83294d1d4d7ea7c4",
    "5dcb594cb8c3887bf0bb2214dd2d6db993004296",
    "7d04a96027ad75877b41b7cd8f67455dd13159d7",
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f"
  ],
  "changeHistoryShort": {
    "0881ed3fc313abda2896d3f26769690f5ba37346": "Ybodychange",
    "5ffb54694b52657f3b7de4560474ab740734e1b2": "Ybodychange",
    "2440671a117f165dcda5056404bc898df3c50803": "Ybodychange",
    "d40859fab1ad977636457a6cc96b6a4f9b903afc": "Ybodychange",
    "3a6f8b878501cc6961a8388813f33bbeb5ebae34": "Ybodychange",
    "8fa3ebd13451a243510eed5c2f3dd43cdf605a77": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "77805c7ae41d4f5e9d350fde83294d1d4d7ea7c4": "Ybodychange",
    "5dcb594cb8c3887bf0bb2214dd2d6db993004296": "Ybodychange",
    "7d04a96027ad75877b41b7cd8f67455dd13159d7": "Ybodychange",
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0881ed3fc313abda2896d3f26769690f5ba37346": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6652. Add configuration property to prevent JHS from loading jobs with a task count greater than X (haibochen via rkanter)\n",
      "commitDate": "15/07/16 1:30 PM",
      "commitName": "0881ed3fc313abda2896d3f26769690f5ba37346",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "17/05/16 2:41 PM",
      "commitNameOld": "f6ef876fe158a5334cad7075f1966573a1c4dec9",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 58.95,
      "commitsBetweenForRepo": 528,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     long maxFSWaitTime \u003d conf.getLong(\n         JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n     createHistoryDirs(SystemClock.getInstance(), 10 * 1000, maxFSWaitTime);\n \n+    maxTasksForLoadedJob \u003d conf.getInt(\n+        JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX,\n+        JHAdminConfig.DEFAULT_MR_HS_LOADED_JOBS_TASKS_MAX);\n+\n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d createJobListCache();\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     moveToDoneExecutor \u003d createMoveToDoneThreadPool(numMoveThreads);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    long maxFSWaitTime \u003d conf.getLong(\n        JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n    createHistoryDirs(SystemClock.getInstance(), 10 * 1000, maxFSWaitTime);\n\n    maxTasksForLoadedJob \u003d conf.getInt(\n        JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX,\n        JHAdminConfig.DEFAULT_MR_HS_LOADED_JOBS_TASKS_MAX);\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d createJobListCache();\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    moveToDoneExecutor \u003d createMoveToDoneThreadPool(numMoveThreads);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "5ffb54694b52657f3b7de4560474ab740734e1b2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6684. High contention on scanning of user directory under immediate_done in Job History Server. Contributed by Haibo Chen\n",
      "commitDate": "10/05/16 9:03 AM",
      "commitName": "5ffb54694b52657f3b7de4560474ab740734e1b2",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "20/04/16 7:02 PM",
      "commitNameOld": "1e48eefe5800975ea0c4295c9911ae3f572ed37d",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 19.58,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,30 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     long maxFSWaitTime \u003d conf.getLong(\n         JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n     createHistoryDirs(SystemClock.getInstance(), 10 * 1000, maxFSWaitTime);\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d createJobListCache();\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n-    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n-        \"MoveIntermediateToDone Thread #%d\").build();\n-    moveToDoneExecutor \u003d new HadoopThreadPoolExecutor(numMoveThreads,\n-        numMoveThreads, 1, TimeUnit.HOURS,\n-        new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n-\n+    moveToDoneExecutor \u003d createMoveToDoneThreadPool(numMoveThreads);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    long maxFSWaitTime \u003d conf.getLong(\n        JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n    createHistoryDirs(SystemClock.getInstance(), 10 * 1000, maxFSWaitTime);\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d createJobListCache();\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    moveToDoneExecutor \u003d createMoveToDoneThreadPool(numMoveThreads);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "2440671a117f165dcda5056404bc898df3c50803": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6634. Log uncaught exceptions/errors in various thread pools in mapreduce. Contributed by Sidharta Seethana.\n",
      "commitDate": "18/02/16 12:48 AM",
      "commitName": "2440671a117f165dcda5056404bc898df3c50803",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "18/01/16 1:58 AM",
      "commitNameOld": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     long maxFSWaitTime \u003d conf.getLong(\n         JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n     createHistoryDirs(SystemClock.getInstance(), 10 * 1000, maxFSWaitTime);\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d createJobListCache();\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n-    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n-        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n+    moveToDoneExecutor \u003d new HadoopThreadPoolExecutor(numMoveThreads,\n+        numMoveThreads, 1, TimeUnit.HOURS,\n+        new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    long maxFSWaitTime \u003d conf.getLong(\n        JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n    createHistoryDirs(SystemClock.getInstance(), 10 * 1000, maxFSWaitTime);\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d createJobListCache();\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new HadoopThreadPoolExecutor(numMoveThreads,\n        numMoveThreads, 1, TimeUnit.HOURS,\n        new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "d40859fab1ad977636457a6cc96b6a4f9b903afc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4526. Make SystemClock singleton so AppSchedulingInfo could use it. (kasha)\n",
      "commitDate": "18/01/16 1:58 AM",
      "commitName": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "15/12/15 12:58 AM",
      "commitNameOld": "5b7078d06921893200163a3d29c8901c3c0107cb",
      "commitAuthorOld": "Zhihai Xu",
      "daysBetweenCommits": 34.04,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     long maxFSWaitTime \u003d conf.getLong(\n         JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n-    createHistoryDirs(new SystemClock(), 10 * 1000, maxFSWaitTime);\n+    createHistoryDirs(SystemClock.getInstance(), 10 * 1000, maxFSWaitTime);\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d createJobListCache();\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    long maxFSWaitTime \u003d conf.getLong(\n        JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n    createHistoryDirs(SystemClock.getInstance(), 10 * 1000, maxFSWaitTime);\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d createJobListCache();\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "3a6f8b878501cc6961a8388813f33bbeb5ebae34": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5724. JobHistoryServer does not start if HDFS is not running. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1558852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/14 9:10 AM",
      "commitName": "3a6f8b878501cc6961a8388813f33bbeb5ebae34",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "28/10/13 4:48 PM",
      "commitNameOld": "84cec3c805867cf0c880c9ecb9fc220733032bc9",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 79.72,
      "commitsBetweenForRepo": 430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,34 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n-    String doneDirPrefix \u003d null;\n-    doneDirPrefix \u003d JobHistoryUtils\n-        .getConfiguredHistoryServerDoneDirPrefix(conf);\n-    try {\n-      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n-          new Path(doneDirPrefix));\n-      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n-      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n-      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n-          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n-    } catch (IOException e) {\n-      throw new YarnRuntimeException(\"Error creating done directory: [\"\n-          + doneDirPrefixPath + \"]\", e);\n-    }\n-\n-    String intermediateDoneDirPrefix \u003d null;\n-    intermediateDoneDirPrefix \u003d JobHistoryUtils\n-        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n-    try {\n-      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n-          new Path(intermediateDoneDirPrefix));\n-      intermediateDoneDirFc \u003d FileContext.getFileContext(\n-          intermediateDoneDirPath.toUri(), conf);\n-      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n-          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n-    } catch (IOException e) {\n-      LOG.info(\"error creating done directory on dfs \" + e);\n-      throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n-          + intermediateDoneDirPath + \"]\", e);\n-    }\n+    long maxFSWaitTime \u003d conf.getLong(\n+        JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n+    createHistoryDirs(new SystemClock(), 10 * 1000, maxFSWaitTime);\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d createJobListCache();\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    long maxFSWaitTime \u003d conf.getLong(\n        JHAdminConfig.MR_HISTORY_MAX_START_WAIT_TIME,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_START_WAIT_TIME);\n    createHistoryDirs(new SystemClock(), 10 * 1000, maxFSWaitTime);\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d createJobListCache();\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "8fa3ebd13451a243510eed5c2f3dd43cdf605a77": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5386. Ability to refresh history server job retention and job cleaner settings. Contributed by Ashwin Shankar\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507135 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/13 2:27 PM",
      "commitName": "8fa3ebd13451a243510eed5c2f3dd43cdf605a77",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 38.62,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,60 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n       throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n-    jobListCache \u003d new JobListCache(conf.getInt(\n-        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n-        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n-        maxHistoryAge);\n+    jobListCache \u003d createJobListCache();\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d createJobListCache();\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  public void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n       throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d new JobListCache(conf.getInt(\n         JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n         maxHistoryAge);\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d new JobListCache(conf.getInt(\n        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n        maxHistoryAge);\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  public void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n       throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d new JobListCache(conf.getInt(\n         JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n         maxHistoryAge);\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d new JobListCache(conf.getInt(\n        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n        maxHistoryAge);\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  public void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n       throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d new JobListCache(conf.getInt(\n         JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n         maxHistoryAge);\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d new JobListCache(conf.getInt(\n        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n        maxHistoryAge);\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  public void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n       throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d new JobListCache(conf.getInt(\n         JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n         maxHistoryAge);\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d new JobListCache(conf.getInt(\n        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n        maxHistoryAge);\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 7:46 AM",
      "commitNameOld": "ac44e0a0d0cebc07904518f32e0d8e34a4391adf",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   public void init(Configuration conf) {\n     this.conf \u003d conf;\n \n     int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n-      throw new YarnException(\"Error creating done directory: [\"\n+      throw new YarnRuntimeException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n-      throw new YarnException(\"Error creating intermediate done directory: [\"\n+      throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d new JobListCache(conf.getInt(\n         JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n         maxHistoryAge);\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnRuntimeException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d new JobListCache(conf.getInt(\n        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n        maxHistoryAge);\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "77805c7ae41d4f5e9d350fde83294d1d4d7ea7c4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4629. Remove JobHistory.DEBUG_MODE (Karthik Kambatla via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1382088 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/09/12 9:45 AM",
      "commitName": "77805c7ae41d4f5e9d350fde83294d1d4d7ea7c4",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "06/09/12 7:20 AM",
      "commitNameOld": "5dcb594cb8c3887bf0bb2214dd2d6db993004296",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,63 @@\n   public void init(Configuration conf) {\n     this.conf \u003d conf;\n \n-    debugMode \u003d conf.getBoolean(JHAdminConfig.MR_HISTORY_DEBUG_MODE, false);\n-    int serialNumberLowDigits \u003d debugMode ? 1 : 3;\n+    int serialNumberLowDigits \u003d 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n       throw new YarnException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n       throw new YarnException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d new JobListCache(conf.getInt(\n         JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n         maxHistoryAge);\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.conf \u003d conf;\n\n    int serialNumberLowDigits \u003d 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d new JobListCache(conf.getInt(\n        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n        maxHistoryAge);\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "5dcb594cb8c3887bf0bb2214dd2d6db993004296": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4633. history server doesn\u0027t set permissions on all subdirs (tgraves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381614 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 7:20 AM",
      "commitName": "5dcb594cb8c3887bf0bb2214dd2d6db993004296",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "31/07/12 6:39 AM",
      "commitNameOld": "a3e695ab2c512254e028c2001a72788f10e682fa",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 37.03,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   public void init(Configuration conf) {\n     this.conf \u003d conf;\n \n     debugMode \u003d conf.getBoolean(JHAdminConfig.MR_HISTORY_DEBUG_MODE, false);\n     int serialNumberLowDigits \u003d debugMode ? 1 : 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n+      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n       throw new YarnException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n       throw new YarnException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n     maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n     \n     jobListCache \u003d new JobListCache(conf.getInt(\n         JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n         maxHistoryAge);\n \n     serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n         JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n \n     int numMoveThreads \u003d conf.getInt(\n         JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n         JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n     ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n         \"MoveIntermediateToDone Thread #%d\").build();\n     moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n         1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.conf \u003d conf;\n\n    debugMode \u003d conf.getBoolean(JHAdminConfig.MR_HISTORY_DEBUG_MODE, false);\n    int serialNumberLowDigits \u003d debugMode ? 1 : 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d new JobListCache(conf.getInt(\n        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n        maxHistoryAge);\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "7d04a96027ad75877b41b7cd8f67455dd13159d7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 6:59 PM",
      "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "10/04/12 11:11 AM",
      "commitNameOld": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 7.32,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,63 @@\n   public void init(Configuration conf) {\n     this.conf \u003d conf;\n \n     debugMode \u003d conf.getBoolean(JHAdminConfig.MR_HISTORY_DEBUG_MODE, false);\n     int serialNumberLowDigits \u003d debugMode ? 1 : 3;\n     serialNumberFormat \u003d (\"%0\"\n         + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n         + \"d\");\n \n     String doneDirPrefix \u003d null;\n     doneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (IOException e) {\n       throw new YarnException(\"Error creating done directory: [\"\n           + doneDirPrefixPath + \"]\", e);\n     }\n \n     String intermediateDoneDirPrefix \u003d null;\n     intermediateDoneDirPrefix \u003d JobHistoryUtils\n         .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n     try {\n       intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(intermediateDoneDirPrefix));\n       intermediateDoneDirFc \u003d FileContext.getFileContext(\n           intermediateDoneDirPath.toUri(), conf);\n       mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n     } catch (IOException e) {\n       LOG.info(\"error creating done directory on dfs \" + e);\n       throw new YarnException(\"Error creating intermediate done directory: [\"\n           + intermediateDoneDirPath + \"]\", e);\n     }\n \n     this.aclsMgr \u003d new JobACLsManager(conf);\n \n-    jobListCacheSize \u003d conf.getInt(JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n-        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE);\n+    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n+    \n+    jobListCache \u003d new JobListCache(conf.getInt(\n+        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n+        maxHistoryAge);\n \n-    dateStringCacheSize \u003d conf.getInt(\n+    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n         JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n-        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE);\n+        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n+\n+    int numMoveThreads \u003d conf.getInt(\n+        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n+    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n+        \"MoveIntermediateToDone Thread #%d\").build();\n+    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n+        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.conf \u003d conf;\n\n    debugMode \u003d conf.getBoolean(JHAdminConfig.MR_HISTORY_DEBUG_MODE, false);\n    int serialNumberLowDigits \u003d debugMode ? 1 : 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    maxHistoryAge \u003d conf.getLong(JHAdminConfig.MR_HISTORY_MAX_AGE_MS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MAX_AGE);\n    \n    jobListCache \u003d new JobListCache(conf.getInt(\n        JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE),\n        maxHistoryAge);\n\n    serialNumberIndex \u003d new SerialNumberIndex(conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE));\n\n    int numMoveThreads \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_MOVE_THREAD_COUNT,\n        JHAdminConfig.DEFAULT_MR_HISTORY_MOVE_THREAD_COUNT);\n    ThreadFactory tf \u003d new ThreadFactoryBuilder().setNameFormat(\n        \"MoveIntermediateToDone Thread #%d\").build();\n    moveToDoneExecutor \u003d new ThreadPoolExecutor(numMoveThreads, numMoveThreads,\n        1, TimeUnit.HOURS, new LinkedBlockingQueue\u003cRunnable\u003e(), tf);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4059. The history server should have a separate pluggable storage/query interface. (Robert Evans via tgraves).\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/12 11:11 AM",
      "commitName": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
      "commitAuthor": "Thomas Graves",
      "diff": "@@ -0,0 +1,50 @@\n+  public void init(Configuration conf) {\n+    this.conf \u003d conf;\n+\n+    debugMode \u003d conf.getBoolean(JHAdminConfig.MR_HISTORY_DEBUG_MODE, false);\n+    int serialNumberLowDigits \u003d debugMode ? 1 : 3;\n+    serialNumberFormat \u003d (\"%0\"\n+        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n+        + \"d\");\n+\n+    String doneDirPrefix \u003d null;\n+    doneDirPrefix \u003d JobHistoryUtils\n+        .getConfiguredHistoryServerDoneDirPrefix(conf);\n+    try {\n+      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n+          new Path(doneDirPrefix));\n+      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n+      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n+          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n+    } catch (IOException e) {\n+      throw new YarnException(\"Error creating done directory: [\"\n+          + doneDirPrefixPath + \"]\", e);\n+    }\n+\n+    String intermediateDoneDirPrefix \u003d null;\n+    intermediateDoneDirPrefix \u003d JobHistoryUtils\n+        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n+    try {\n+      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n+          new Path(intermediateDoneDirPrefix));\n+      intermediateDoneDirFc \u003d FileContext.getFileContext(\n+          intermediateDoneDirPath.toUri(), conf);\n+      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n+          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n+    } catch (IOException e) {\n+      LOG.info(\"error creating done directory on dfs \" + e);\n+      throw new YarnException(\"Error creating intermediate done directory: [\"\n+          + intermediateDoneDirPath + \"]\", e);\n+    }\n+\n+    this.aclsMgr \u003d new JobACLsManager(conf);\n+\n+    jobListCacheSize \u003d conf.getInt(JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE);\n+\n+    dateStringCacheSize \u003d conf.getInt(\n+        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE);\n+\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.conf \u003d conf;\n\n    debugMode \u003d conf.getBoolean(JHAdminConfig.MR_HISTORY_DEBUG_MODE, false);\n    int serialNumberLowDigits \u003d debugMode ? 1 : 3;\n    serialNumberFormat \u003d (\"%0\"\n        + (JobHistoryUtils.SERIAL_NUMBER_DIRECTORY_DIGITS + serialNumberLowDigits)\n        + \"d\");\n\n    String doneDirPrefix \u003d null;\n    doneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (IOException e) {\n      throw new YarnException(\"Error creating done directory: [\"\n          + doneDirPrefixPath + \"]\", e);\n    }\n\n    String intermediateDoneDirPrefix \u003d null;\n    intermediateDoneDirPrefix \u003d JobHistoryUtils\n        .getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n    try {\n      intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(intermediateDoneDirPrefix));\n      intermediateDoneDirFc \u003d FileContext.getFileContext(\n          intermediateDoneDirPath.toUri(), conf);\n      mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n    } catch (IOException e) {\n      LOG.info(\"error creating done directory on dfs \" + e);\n      throw new YarnException(\"Error creating intermediate done directory: [\"\n          + intermediateDoneDirPath + \"]\", e);\n    }\n\n    this.aclsMgr \u003d new JobACLsManager(conf);\n\n    jobListCacheSize \u003d conf.getInt(JHAdminConfig.MR_HISTORY_JOBLIST_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_JOBLIST_CACHE_SIZE);\n\n    dateStringCacheSize \u003d conf.getInt(\n        JHAdminConfig.MR_HISTORY_DATESTRING_CACHE_SIZE,\n        JHAdminConfig.DEFAULT_MR_HISTORY_DATESTRING_CACHE_SIZE);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java"
    }
  }
}