{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Quota.java",
  "functionName": "aggregateQuota",
  "functionId": "aggregateQuota___path-String__results-Map__RemoteLocation,QuotaUsage__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
  "functionStartLine": 256,
  "functionEndLine": 317,
  "numCommitsSeen": 30,
  "timeTaken": 6328,
  "changeHistory": [
    "8730a7bf6025a3b2b7d6e6686533283b854af192",
    "12617fad2eb32108412dac9ecee286de6641d060",
    "761594549ec0c6bab50a28a7eb6c741aec7239d7",
    "221f24cbdc7e6477ec11bb9d98c9298d6fccf3ad",
    "17a87977f29ced49724f561a68565217c8cb4e94",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
    "d98a2e6e2383f8b66def346409b0517aa32d298d"
  ],
  "changeHistoryShort": {
    "8730a7bf6025a3b2b7d6e6686533283b854af192": "Ybodychange",
    "12617fad2eb32108412dac9ecee286de6641d060": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "761594549ec0c6bab50a28a7eb6c741aec7239d7": "Ymodifierchange",
    "221f24cbdc7e6477ec11bb9d98c9298d6fccf3ad": "Ybodychange",
    "17a87977f29ced49724f561a68565217c8cb4e94": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba": "Ymultichange(Yparameterchange,Ybodychange)",
    "d98a2e6e2383f8b66def346409b0517aa32d298d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8730a7bf6025a3b2b7d6e6686533283b854af192": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15003. RBF: Make Router support storage type quota. Contributed by Jinglun.\n",
      "commitDate": "26/12/19 7:52 PM",
      "commitName": "8730a7bf6025a3b2b7d6e6686533283b854af192",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "29/11/19 10:25 AM",
      "commitNameOld": "6b2d6d4aafb110bef1b77d4ccbba4350e624b57d",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 27.39,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,62 @@\n   QuotaUsage aggregateQuota(String path,\n       Map\u003cRemoteLocation, QuotaUsage\u003e results) throws IOException {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n+    long[] typeCount \u003d new long[StorageType.values().length];\n     long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n     long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n+    long[] typeQuota \u003d new long[StorageType.values().length];\n+    eachByStorageType(t -\u003e typeQuota[t.ordinal()] \u003d HdfsConstants.QUOTA_RESET);\n     boolean hasQuotaUnset \u003d false;\n     boolean isMountEntry \u003d isMountEntry(path);\n \n     for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n       QuotaUsage usage \u003d entry.getValue();\n       if (isMountEntry) {\n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n+        eachByStorageType(\n+            t -\u003e typeCount[t.ordinal()] +\u003d usage.getTypeConsumed(t));\n       } else if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n-        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n+        if (!RouterQuotaManager.isQuotaSet(usage)) {\n           hasQuotaUnset \u003d true;\n         }\n         nsQuota \u003d usage.getQuota();\n         ssQuota \u003d usage.getSpaceQuota();\n+        eachByStorageType(t -\u003e typeQuota[t.ordinal()] \u003d usage.getTypeQuota(t));\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n-        LOG.debug(\n-            \"Get quota usage for path: nsId: {}, dest: {},\"\n-                + \" nsCount: {}, ssCount: {}.\",\n+        eachByStorageType(\n+            t -\u003e typeCount[t.ordinal()] +\u003d usage.getTypeConsumed(t));\n+        LOG.debug(\"Get quota usage for path: nsId: {}, dest: {},\"\n+                + \" nsCount: {}, ssCount: {}, typeCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n-            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n+            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed(),\n+            usage.toString(false, true, Arrays.asList(StorageType.values())));\n       }\n     }\n \n     if (isMountEntry) {\n       QuotaUsage quota \u003d getGlobalQuota(path);\n       nsQuota \u003d quota.getQuota();\n       ssQuota \u003d quota.getSpaceQuota();\n+      eachByStorageType(t -\u003e typeQuota[t.ordinal()] \u003d quota.getTypeQuota(t));\n     }\n-    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n-        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n+    QuotaUsage.Builder builder \u003d\n+        new QuotaUsage.Builder().fileAndDirectoryCount(nsCount)\n+            .spaceConsumed(ssCount).typeConsumed(typeCount);\n     if (hasQuotaUnset) {\n       builder.quota(HdfsConstants.QUOTA_RESET)\n           .spaceQuota(HdfsConstants.QUOTA_RESET);\n+      eachByStorageType(t -\u003e builder.typeQuota(t, HdfsConstants.QUOTA_RESET));\n     } else {\n       builder.quota(nsQuota).spaceQuota(ssQuota);\n+      eachByStorageType(t -\u003e builder.typeQuota(t, typeQuota[t.ordinal()]));\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  QuotaUsage aggregateQuota(String path,\n      Map\u003cRemoteLocation, QuotaUsage\u003e results) throws IOException {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    long[] typeCount \u003d new long[StorageType.values().length];\n    long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n    long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n    long[] typeQuota \u003d new long[StorageType.values().length];\n    eachByStorageType(t -\u003e typeQuota[t.ordinal()] \u003d HdfsConstants.QUOTA_RESET);\n    boolean hasQuotaUnset \u003d false;\n    boolean isMountEntry \u003d isMountEntry(path);\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (isMountEntry) {\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        eachByStorageType(\n            t -\u003e typeCount[t.ordinal()] +\u003d usage.getTypeConsumed(t));\n      } else if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (!RouterQuotaManager.isQuotaSet(usage)) {\n          hasQuotaUnset \u003d true;\n        }\n        nsQuota \u003d usage.getQuota();\n        ssQuota \u003d usage.getSpaceQuota();\n        eachByStorageType(t -\u003e typeQuota[t.ordinal()] \u003d usage.getTypeQuota(t));\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        eachByStorageType(\n            t -\u003e typeCount[t.ordinal()] +\u003d usage.getTypeConsumed(t));\n        LOG.debug(\"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}, typeCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed(),\n            usage.toString(false, true, Arrays.asList(StorageType.values())));\n      }\n    }\n\n    if (isMountEntry) {\n      QuotaUsage quota \u003d getGlobalQuota(path);\n      nsQuota \u003d quota.getQuota();\n      ssQuota \u003d quota.getSpaceQuota();\n      eachByStorageType(t -\u003e typeQuota[t.ordinal()] \u003d quota.getTypeQuota(t));\n    }\n    QuotaUsage.Builder builder \u003d\n        new QuotaUsage.Builder().fileAndDirectoryCount(nsCount)\n            .spaceConsumed(ssCount).typeConsumed(typeCount);\n    if (hasQuotaUnset) {\n      builder.quota(HdfsConstants.QUOTA_RESET)\n          .spaceQuota(HdfsConstants.QUOTA_RESET);\n      eachByStorageType(t -\u003e builder.typeQuota(t, HdfsConstants.QUOTA_RESET));\n    } else {\n      builder.quota(nsQuota).spaceQuota(ssQuota);\n      eachByStorageType(t -\u003e builder.typeQuota(t, typeQuota[t.ordinal()]));\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
      "extendedDetails": {}
    },
    "12617fad2eb32108412dac9ecee286de6641d060": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-14955. RBF: getQuotaUsage() on mount point should return global quota. Contributed by Jinglun.\n",
      "commitDate": "18/11/19 2:34 AM",
      "commitName": "12617fad2eb32108412dac9ecee286de6641d060",
      "commitAuthor": "Ayush Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14955. RBF: getQuotaUsage() on mount point should return global quota. Contributed by Jinglun.\n",
          "commitDate": "18/11/19 2:34 AM",
          "commitName": "12617fad2eb32108412dac9ecee286de6641d060",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "07/11/19 7:18 PM",
          "commitNameOld": "42fc8884ab9763e8778670f301896bf473ecf1d2",
          "commitAuthorOld": "Ayush Saxena",
          "daysBetweenCommits": 10.3,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,50 @@\n-  QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n+  QuotaUsage aggregateQuota(String path,\n+      Map\u003cRemoteLocation, QuotaUsage\u003e results) throws IOException {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n     long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n     long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n     boolean hasQuotaUnset \u003d false;\n+    boolean isMountEntry \u003d isMountEntry(path);\n \n     for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n       QuotaUsage usage \u003d entry.getValue();\n-      if (usage !\u003d null) {\n+      if (isMountEntry) {\n+        nsCount +\u003d usage.getFileAndDirectoryCount();\n+        ssCount +\u003d usage.getSpaceConsumed();\n+      } else if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n         if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n           hasQuotaUnset \u003d true;\n         }\n         nsQuota \u003d usage.getQuota();\n         ssQuota \u003d usage.getSpaceQuota();\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n         LOG.debug(\n             \"Get quota usage for path: nsId: {}, dest: {},\"\n                 + \" nsCount: {}, ssCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n             usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n       }\n     }\n \n+    if (isMountEntry) {\n+      QuotaUsage quota \u003d getGlobalQuota(path);\n+      nsQuota \u003d quota.getQuota();\n+      ssQuota \u003d quota.getSpaceQuota();\n+    }\n     QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n         .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n     if (hasQuotaUnset) {\n       builder.quota(HdfsConstants.QUOTA_RESET)\n           .spaceQuota(HdfsConstants.QUOTA_RESET);\n     } else {\n       builder.quota(nsQuota).spaceQuota(ssQuota);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  QuotaUsage aggregateQuota(String path,\n      Map\u003cRemoteLocation, QuotaUsage\u003e results) throws IOException {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n    long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n    boolean hasQuotaUnset \u003d false;\n    boolean isMountEntry \u003d isMountEntry(path);\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (isMountEntry) {\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n      } else if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnset \u003d true;\n        }\n        nsQuota \u003d usage.getQuota();\n        ssQuota \u003d usage.getSpaceQuota();\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    if (isMountEntry) {\n      QuotaUsage quota \u003d getGlobalQuota(path);\n      nsQuota \u003d quota.getQuota();\n      ssQuota \u003d quota.getSpaceQuota();\n    }\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnset) {\n      builder.quota(HdfsConstants.QUOTA_RESET)\n          .spaceQuota(HdfsConstants.QUOTA_RESET);\n    } else {\n      builder.quota(nsQuota).spaceQuota(ssQuota);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
          "extendedDetails": {
            "oldValue": "[results-Map\u003cRemoteLocation,QuotaUsage\u003e]",
            "newValue": "[path-String, results-Map\u003cRemoteLocation,QuotaUsage\u003e]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-14955. RBF: getQuotaUsage() on mount point should return global quota. Contributed by Jinglun.\n",
          "commitDate": "18/11/19 2:34 AM",
          "commitName": "12617fad2eb32108412dac9ecee286de6641d060",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "07/11/19 7:18 PM",
          "commitNameOld": "42fc8884ab9763e8778670f301896bf473ecf1d2",
          "commitAuthorOld": "Ayush Saxena",
          "daysBetweenCommits": 10.3,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,50 @@\n-  QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n+  QuotaUsage aggregateQuota(String path,\n+      Map\u003cRemoteLocation, QuotaUsage\u003e results) throws IOException {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n     long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n     long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n     boolean hasQuotaUnset \u003d false;\n+    boolean isMountEntry \u003d isMountEntry(path);\n \n     for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n       QuotaUsage usage \u003d entry.getValue();\n-      if (usage !\u003d null) {\n+      if (isMountEntry) {\n+        nsCount +\u003d usage.getFileAndDirectoryCount();\n+        ssCount +\u003d usage.getSpaceConsumed();\n+      } else if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n         if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n           hasQuotaUnset \u003d true;\n         }\n         nsQuota \u003d usage.getQuota();\n         ssQuota \u003d usage.getSpaceQuota();\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n         LOG.debug(\n             \"Get quota usage for path: nsId: {}, dest: {},\"\n                 + \" nsCount: {}, ssCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n             usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n       }\n     }\n \n+    if (isMountEntry) {\n+      QuotaUsage quota \u003d getGlobalQuota(path);\n+      nsQuota \u003d quota.getQuota();\n+      ssQuota \u003d quota.getSpaceQuota();\n+    }\n     QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n         .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n     if (hasQuotaUnset) {\n       builder.quota(HdfsConstants.QUOTA_RESET)\n           .spaceQuota(HdfsConstants.QUOTA_RESET);\n     } else {\n       builder.quota(nsQuota).spaceQuota(ssQuota);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  QuotaUsage aggregateQuota(String path,\n      Map\u003cRemoteLocation, QuotaUsage\u003e results) throws IOException {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n    long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n    boolean hasQuotaUnset \u003d false;\n    boolean isMountEntry \u003d isMountEntry(path);\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (isMountEntry) {\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n      } else if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnset \u003d true;\n        }\n        nsQuota \u003d usage.getQuota();\n        ssQuota \u003d usage.getSpaceQuota();\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    if (isMountEntry) {\n      QuotaUsage quota \u003d getGlobalQuota(path);\n      nsQuota \u003d quota.getQuota();\n      ssQuota \u003d quota.getSpaceQuota();\n    }\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnset) {\n      builder.quota(HdfsConstants.QUOTA_RESET)\n          .spaceQuota(HdfsConstants.QUOTA_RESET);\n    } else {\n      builder.quota(nsQuota).spaceQuota(ssQuota);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14955. RBF: getQuotaUsage() on mount point should return global quota. Contributed by Jinglun.\n",
          "commitDate": "18/11/19 2:34 AM",
          "commitName": "12617fad2eb32108412dac9ecee286de6641d060",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "07/11/19 7:18 PM",
          "commitNameOld": "42fc8884ab9763e8778670f301896bf473ecf1d2",
          "commitAuthorOld": "Ayush Saxena",
          "daysBetweenCommits": 10.3,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,50 @@\n-  QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n+  QuotaUsage aggregateQuota(String path,\n+      Map\u003cRemoteLocation, QuotaUsage\u003e results) throws IOException {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n     long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n     long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n     boolean hasQuotaUnset \u003d false;\n+    boolean isMountEntry \u003d isMountEntry(path);\n \n     for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n       QuotaUsage usage \u003d entry.getValue();\n-      if (usage !\u003d null) {\n+      if (isMountEntry) {\n+        nsCount +\u003d usage.getFileAndDirectoryCount();\n+        ssCount +\u003d usage.getSpaceConsumed();\n+      } else if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n         if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n           hasQuotaUnset \u003d true;\n         }\n         nsQuota \u003d usage.getQuota();\n         ssQuota \u003d usage.getSpaceQuota();\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n         LOG.debug(\n             \"Get quota usage for path: nsId: {}, dest: {},\"\n                 + \" nsCount: {}, ssCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n             usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n       }\n     }\n \n+    if (isMountEntry) {\n+      QuotaUsage quota \u003d getGlobalQuota(path);\n+      nsQuota \u003d quota.getQuota();\n+      ssQuota \u003d quota.getSpaceQuota();\n+    }\n     QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n         .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n     if (hasQuotaUnset) {\n       builder.quota(HdfsConstants.QUOTA_RESET)\n           .spaceQuota(HdfsConstants.QUOTA_RESET);\n     } else {\n       builder.quota(nsQuota).spaceQuota(ssQuota);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  QuotaUsage aggregateQuota(String path,\n      Map\u003cRemoteLocation, QuotaUsage\u003e results) throws IOException {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n    long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n    boolean hasQuotaUnset \u003d false;\n    boolean isMountEntry \u003d isMountEntry(path);\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (isMountEntry) {\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n      } else if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnset \u003d true;\n        }\n        nsQuota \u003d usage.getQuota();\n        ssQuota \u003d usage.getSpaceQuota();\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    if (isMountEntry) {\n      QuotaUsage quota \u003d getGlobalQuota(path);\n      nsQuota \u003d quota.getQuota();\n      ssQuota \u003d quota.getSpaceQuota();\n    }\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnset) {\n      builder.quota(HdfsConstants.QUOTA_RESET)\n          .spaceQuota(HdfsConstants.QUOTA_RESET);\n    } else {\n      builder.quota(nsQuota).spaceQuota(ssQuota);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
          "extendedDetails": {}
        }
      ]
    },
    "761594549ec0c6bab50a28a7eb6c741aec7239d7": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-14814. RBF: RouterQuotaUpdateService supports inherited rule. Contributed by Jinglun.\n",
      "commitDate": "08/10/19 1:31 AM",
      "commitName": "761594549ec0c6bab50a28a7eb6c741aec7239d7",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "21/08/19 9:39 AM",
      "commitNameOld": "93595febaa6673eea369911c3f7fcd75d4915dbc",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 47.66,
      "commitsBetweenForRepo": 419,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n+  QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n     long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n     long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n     boolean hasQuotaUnset \u003d false;\n \n     for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n       QuotaUsage usage \u003d entry.getValue();\n       if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n         if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n           hasQuotaUnset \u003d true;\n         }\n         nsQuota \u003d usage.getQuota();\n         ssQuota \u003d usage.getSpaceQuota();\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n         LOG.debug(\n             \"Get quota usage for path: nsId: {}, dest: {},\"\n                 + \" nsCount: {}, ssCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n             usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n       }\n     }\n \n     QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n         .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n     if (hasQuotaUnset) {\n       builder.quota(HdfsConstants.QUOTA_RESET)\n           .spaceQuota(HdfsConstants.QUOTA_RESET);\n     } else {\n       builder.quota(nsQuota).spaceQuota(ssQuota);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n    long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n    boolean hasQuotaUnset \u003d false;\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnset \u003d true;\n        }\n        nsQuota \u003d usage.getQuota();\n        ssQuota \u003d usage.getSpaceQuota();\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnset) {\n      builder.quota(HdfsConstants.QUOTA_RESET)\n          .spaceQuota(HdfsConstants.QUOTA_RESET);\n    } else {\n      builder.quota(nsQuota).spaceQuota(ssQuota);\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "221f24cbdc7e6477ec11bb9d98c9298d6fccf3ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14206. RBF: Cleanup quota modules. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "221f24cbdc7e6477ec11bb9d98c9298d6fccf3ad",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "09/10/18 1:11 AM",
      "commitNameOld": "d4626b4d1825b60ef02c0da9c45cd483d1d98f49",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 258.35,
      "commitsBetweenForRepo": 1903,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n     long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n     long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n-    boolean hasQuotaUnSet \u003d false;\n+    boolean hasQuotaUnset \u003d false;\n \n     for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n       QuotaUsage usage \u003d entry.getValue();\n       if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n         if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n-          hasQuotaUnSet \u003d true;\n+          hasQuotaUnset \u003d true;\n         }\n         nsQuota \u003d usage.getQuota();\n         ssQuota \u003d usage.getSpaceQuota();\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n         LOG.debug(\n             \"Get quota usage for path: nsId: {}, dest: {},\"\n                 + \" nsCount: {}, ssCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n             usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n       }\n     }\n \n     QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n         .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n-    if (hasQuotaUnSet) {\n+    if (hasQuotaUnset) {\n       builder.quota(HdfsConstants.QUOTA_RESET)\n           .spaceQuota(HdfsConstants.QUOTA_RESET);\n     } else {\n       builder.quota(nsQuota).spaceQuota(ssQuota);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n    long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n    boolean hasQuotaUnset \u003d false;\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnset \u003d true;\n        }\n        nsQuota \u003d usage.getQuota();\n        ssQuota \u003d usage.getSpaceQuota();\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnset) {\n      builder.quota(HdfsConstants.QUOTA_RESET)\n          .spaceQuota(HdfsConstants.QUOTA_RESET);\n    } else {\n      builder.quota(nsQuota).spaceQuota(ssQuota);\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
      "extendedDetails": {}
    },
    "17a87977f29ced49724f561a68565217c8cb4e94": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13583. RBF: Router admin clrQuota is not synchronized with nameservice. Contributed by Dibyendu Karmakar.\n",
      "commitDate": "23/07/18 8:15 PM",
      "commitName": "17a87977f29ced49724f561a68565217c8cb4e94",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "09/07/18 12:06 AM",
      "commitNameOld": "43f7fe8aae0eca89cce4d67bfc4965fe8ce63e38",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 14.84,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,40 @@\n   private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n+    long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n+    long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n     boolean hasQuotaUnSet \u003d false;\n \n     for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n       QuotaUsage usage \u003d entry.getValue();\n       if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n         if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n           hasQuotaUnSet \u003d true;\n         }\n+        nsQuota \u003d usage.getQuota();\n+        ssQuota \u003d usage.getSpaceQuota();\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n         LOG.debug(\n             \"Get quota usage for path: nsId: {}, dest: {},\"\n                 + \" nsCount: {}, ssCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n             usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n       }\n     }\n \n     QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n         .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n     if (hasQuotaUnSet) {\n-      builder.quota(HdfsConstants.QUOTA_DONT_SET);\n+      builder.quota(HdfsConstants.QUOTA_RESET)\n+          .spaceQuota(HdfsConstants.QUOTA_RESET);\n+    } else {\n+      builder.quota(nsQuota).spaceQuota(ssQuota);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    long nsQuota \u003d HdfsConstants.QUOTA_RESET;\n    long ssQuota \u003d HdfsConstants.QUOTA_RESET;\n    boolean hasQuotaUnSet \u003d false;\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnSet \u003d true;\n        }\n        nsQuota \u003d usage.getQuota();\n        ssQuota \u003d usage.getSpaceQuota();\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnSet) {\n      builder.quota(HdfsConstants.QUOTA_RESET)\n          .spaceQuota(HdfsConstants.QUOTA_RESET);\n    } else {\n      builder.quota(nsQuota).spaceQuota(ssQuota);\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    boolean hasQuotaUnSet \u003d false;\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnSet \u003d true;\n        }\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnSet) {\n      builder.quota(HdfsConstants.QUOTA_DONT_SET);\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java"
      }
    },
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.\n",
      "commitDate": "12/01/18 4:25 PM",
      "commitName": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.\n",
          "commitDate": "12/01/18 4:25 PM",
          "commitName": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "09/01/18 9:59 PM",
          "commitNameOld": "d98a2e6e2383f8b66def346409b0517aa32d298d",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, Object\u003e results) {\n+  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n     boolean hasQuotaUnSet \u003d false;\n \n-    for (Map.Entry\u003cRemoteLocation, Object\u003e entry : results.entrySet()) {\n+    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n-      QuotaUsage usage \u003d (QuotaUsage) entry.getValue();\n+      QuotaUsage usage \u003d entry.getValue();\n       if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n         if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n           hasQuotaUnSet \u003d true;\n         }\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n         LOG.debug(\n             \"Get quota usage for path: nsId: {}, dest: {},\"\n                 + \" nsCount: {}, ssCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n             usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n       }\n     }\n \n     QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n         .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n     if (hasQuotaUnSet) {\n       builder.quota(HdfsConstants.QUOTA_DONT_SET);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    boolean hasQuotaUnSet \u003d false;\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnSet \u003d true;\n        }\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnSet) {\n      builder.quota(HdfsConstants.QUOTA_DONT_SET);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
          "extendedDetails": {
            "oldValue": "[results-Map\u003cRemoteLocation,Object\u003e]",
            "newValue": "[results-Map\u003cRemoteLocation,QuotaUsage\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.\n",
          "commitDate": "12/01/18 4:25 PM",
          "commitName": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "09/01/18 9:59 PM",
          "commitNameOld": "d98a2e6e2383f8b66def346409b0517aa32d298d",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, Object\u003e results) {\n+  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n     long nsCount \u003d 0;\n     long ssCount \u003d 0;\n     boolean hasQuotaUnSet \u003d false;\n \n-    for (Map.Entry\u003cRemoteLocation, Object\u003e entry : results.entrySet()) {\n+    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n       RemoteLocation loc \u003d entry.getKey();\n-      QuotaUsage usage \u003d (QuotaUsage) entry.getValue();\n+      QuotaUsage usage \u003d entry.getValue();\n       if (usage !\u003d null) {\n         // If quota is not set in real FileSystem, the usage\n         // value will return -1.\n         if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n           hasQuotaUnSet \u003d true;\n         }\n \n         nsCount +\u003d usage.getFileAndDirectoryCount();\n         ssCount +\u003d usage.getSpaceConsumed();\n         LOG.debug(\n             \"Get quota usage for path: nsId: {}, dest: {},\"\n                 + \" nsCount: {}, ssCount: {}.\",\n             loc.getNameserviceId(), loc.getDest(),\n             usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n       }\n     }\n \n     QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n         .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n     if (hasQuotaUnSet) {\n       builder.quota(HdfsConstants.QUOTA_DONT_SET);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, QuotaUsage\u003e results) {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    boolean hasQuotaUnSet \u003d false;\n\n    for (Map.Entry\u003cRemoteLocation, QuotaUsage\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d entry.getValue();\n      if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnSet \u003d true;\n        }\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnSet) {\n      builder.quota(HdfsConstants.QUOTA_DONT_SET);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java",
          "extendedDetails": {}
        }
      ]
    },
    "d98a2e6e2383f8b66def346409b0517aa32d298d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12934. RBF: Federation supports global quota. Contributed by Yiqun Lin.\n",
      "commitDate": "09/01/18 9:59 PM",
      "commitName": "d98a2e6e2383f8b66def346409b0517aa32d298d",
      "commitAuthor": "Yiqun Lin",
      "diff": "@@ -0,0 +1,33 @@\n+  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, Object\u003e results) {\n+    long nsCount \u003d 0;\n+    long ssCount \u003d 0;\n+    boolean hasQuotaUnSet \u003d false;\n+\n+    for (Map.Entry\u003cRemoteLocation, Object\u003e entry : results.entrySet()) {\n+      RemoteLocation loc \u003d entry.getKey();\n+      QuotaUsage usage \u003d (QuotaUsage) entry.getValue();\n+      if (usage !\u003d null) {\n+        // If quota is not set in real FileSystem, the usage\n+        // value will return -1.\n+        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n+          hasQuotaUnSet \u003d true;\n+        }\n+\n+        nsCount +\u003d usage.getFileAndDirectoryCount();\n+        ssCount +\u003d usage.getSpaceConsumed();\n+        LOG.debug(\n+            \"Get quota usage for path: nsId: {}, dest: {},\"\n+                + \" nsCount: {}, ssCount: {}.\",\n+            loc.getNameserviceId(), loc.getDest(),\n+            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n+      }\n+    }\n+\n+    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n+        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n+    if (hasQuotaUnSet) {\n+      builder.quota(HdfsConstants.QUOTA_DONT_SET);\n+    }\n+\n+    return builder.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private QuotaUsage aggregateQuota(Map\u003cRemoteLocation, Object\u003e results) {\n    long nsCount \u003d 0;\n    long ssCount \u003d 0;\n    boolean hasQuotaUnSet \u003d false;\n\n    for (Map.Entry\u003cRemoteLocation, Object\u003e entry : results.entrySet()) {\n      RemoteLocation loc \u003d entry.getKey();\n      QuotaUsage usage \u003d (QuotaUsage) entry.getValue();\n      if (usage !\u003d null) {\n        // If quota is not set in real FileSystem, the usage\n        // value will return -1.\n        if (usage.getQuota() \u003d\u003d -1 \u0026\u0026 usage.getSpaceQuota() \u003d\u003d -1) {\n          hasQuotaUnSet \u003d true;\n        }\n\n        nsCount +\u003d usage.getFileAndDirectoryCount();\n        ssCount +\u003d usage.getSpaceConsumed();\n        LOG.debug(\n            \"Get quota usage for path: nsId: {}, dest: {},\"\n                + \" nsCount: {}, ssCount: {}.\",\n            loc.getNameserviceId(), loc.getDest(),\n            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());\n      }\n    }\n\n    QuotaUsage.Builder builder \u003d new QuotaUsage.Builder()\n        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);\n    if (hasQuotaUnSet) {\n      builder.quota(HdfsConstants.QUOTA_DONT_SET);\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Quota.java"
    }
  }
}