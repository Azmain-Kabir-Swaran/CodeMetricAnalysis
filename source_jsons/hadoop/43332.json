{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractProviderService.java",
  "functionName": "buildContainerLaunchContext",
  "functionId": "buildContainerLaunchContext___launcher-AbstractLauncher__service-Service__instance-ComponentInstance__fileSystem-SliderFileSystem__yarnConf-Configuration__container-Container__compLaunchContext-ContainerLaunchService.ComponentLaunchContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
  "functionStartLine": 139,
  "functionEndLine": 175,
  "numCommitsSeen": 26,
  "timeTaken": 7035,
  "changeHistory": [
    "a33ef4fd311784dc15401eb54c82e78528c4f961",
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
    "84d7bf1eeff6b9418361afa4aa713e5e6f771365",
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0",
    "6795f8072ffbe6138857e77d51af173f33e4e5c1",
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "2d0662cfd57bd438421f912dc172e79a15835442",
    "647058efc0c7a4442b3e64b4d743df1a589f26bc",
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "ce74e64363abc64561263be70a923ab3e67f043f",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "79bf5c084d4a063f1a933cae498af23edfd46792",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "a33ef4fd311784dc15401eb54c82e78528c4f961": "Ymultichange(Yreturntypechange,Ybodychange)",
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7": "Ybodychange",
    "84d7bf1eeff6b9418361afa4aa713e5e6f771365": "Ybodychange",
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0": "Ybodychange",
    "6795f8072ffbe6138857e77d51af173f33e4e5c1": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ymultichange(Yparameterchange,Ybodychange)",
    "2d0662cfd57bd438421f912dc172e79a15835442": "Ybodychange",
    "647058efc0c7a4442b3e64b4d743df1a589f26bc": "Ybodychange",
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2": "Ymultichange(Yparameterchange,Ybodychange)",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "ce74e64363abc64561263be70a923ab3e67f043f": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "79bf5c084d4a063f1a933cae498af23edfd46792": "Ymultichange(Yparameterchange,Ybodychange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a33ef4fd311784dc15401eb54c82e78528c4f961": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
      "commitDate": "24/01/19 3:43 PM",
      "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
          "commitDate": "24/01/19 3:43 PM",
          "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "14/08/18 8:36 AM",
          "commitNameOld": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 163.34,
          "commitsBetweenForRepo": 1286,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,37 @@\n-  public void buildContainerLaunchContext(AbstractLauncher launcher,\n+  public ResolvedLaunchParams buildContainerLaunchContext(\n+      AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n       throws IOException, SliderException {\n+    ResolvedLaunchParams resolved \u003d new ResolvedLaunchParams();\n     processArtifact(launcher, instance, fileSystem, service, compLaunchContext);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     Map\u003cString, String\u003e tokensForSubstitution \u003d\n         buildContainerTokens(instance, container, compLaunchContext);\n \n     // Setup launch context environment\n     buildContainerEnvironment(launcher, service, instance,\n         fileSystem, yarnConf, container, compLaunchContext,\n         tokensForSubstitution);\n \n-    // create config file on hdfs and add local resource\n+    // create config file on hdfs and addResolvedRsrcPath local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n-        compLaunchContext, tokensForSubstitution, instance, context);\n+        compLaunchContext, tokensForSubstitution, instance, context, resolved);\n \n     // handles static files (like normal file / archive file) for localization.\n     ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n-        compLaunchContext);\n+        compLaunchContext, resolved);\n \n     // replace launch command with token specific information\n     buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n         yarnConf, container, compLaunchContext, tokensForSubstitution);\n \n     // Setup container retry settings\n     buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\n+\n+    return resolved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ResolvedLaunchParams buildContainerLaunchContext(\n      AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n      throws IOException, SliderException {\n    ResolvedLaunchParams resolved \u003d new ResolvedLaunchParams();\n    processArtifact(launcher, instance, fileSystem, service, compLaunchContext);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    Map\u003cString, String\u003e tokensForSubstitution \u003d\n        buildContainerTokens(instance, container, compLaunchContext);\n\n    // Setup launch context environment\n    buildContainerEnvironment(launcher, service, instance,\n        fileSystem, yarnConf, container, compLaunchContext,\n        tokensForSubstitution);\n\n    // create config file on hdfs and addResolvedRsrcPath local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        compLaunchContext, tokensForSubstitution, instance, context, resolved);\n\n    // handles static files (like normal file / archive file) for localization.\n    ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n        compLaunchContext, resolved);\n\n    // replace launch command with token specific information\n    buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n        yarnConf, container, compLaunchContext, tokensForSubstitution);\n\n    // Setup container retry settings\n    buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\n\n    return resolved;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "ResolvedLaunchParams"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
          "commitDate": "24/01/19 3:43 PM",
          "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "14/08/18 8:36 AM",
          "commitNameOld": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 163.34,
          "commitsBetweenForRepo": 1286,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,37 @@\n-  public void buildContainerLaunchContext(AbstractLauncher launcher,\n+  public ResolvedLaunchParams buildContainerLaunchContext(\n+      AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n       throws IOException, SliderException {\n+    ResolvedLaunchParams resolved \u003d new ResolvedLaunchParams();\n     processArtifact(launcher, instance, fileSystem, service, compLaunchContext);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     Map\u003cString, String\u003e tokensForSubstitution \u003d\n         buildContainerTokens(instance, container, compLaunchContext);\n \n     // Setup launch context environment\n     buildContainerEnvironment(launcher, service, instance,\n         fileSystem, yarnConf, container, compLaunchContext,\n         tokensForSubstitution);\n \n-    // create config file on hdfs and add local resource\n+    // create config file on hdfs and addResolvedRsrcPath local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n-        compLaunchContext, tokensForSubstitution, instance, context);\n+        compLaunchContext, tokensForSubstitution, instance, context, resolved);\n \n     // handles static files (like normal file / archive file) for localization.\n     ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n-        compLaunchContext);\n+        compLaunchContext, resolved);\n \n     // replace launch command with token specific information\n     buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n         yarnConf, container, compLaunchContext, tokensForSubstitution);\n \n     // Setup container retry settings\n     buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\n+\n+    return resolved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ResolvedLaunchParams buildContainerLaunchContext(\n      AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n      throws IOException, SliderException {\n    ResolvedLaunchParams resolved \u003d new ResolvedLaunchParams();\n    processArtifact(launcher, instance, fileSystem, service, compLaunchContext);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    Map\u003cString, String\u003e tokensForSubstitution \u003d\n        buildContainerTokens(instance, container, compLaunchContext);\n\n    // Setup launch context environment\n    buildContainerEnvironment(launcher, service, instance,\n        fileSystem, yarnConf, container, compLaunchContext,\n        tokensForSubstitution);\n\n    // create config file on hdfs and addResolvedRsrcPath local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        compLaunchContext, tokensForSubstitution, instance, context, resolved);\n\n    // handles static files (like normal file / archive file) for localization.\n    ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n        compLaunchContext, resolved);\n\n    // replace launch command with token specific information\n    buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n        yarnConf, container, compLaunchContext, tokensForSubstitution);\n\n    // Setup container retry settings\n    buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\n\n    return resolved;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {}
        }
      ]
    },
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8160.  Support upgrade of service that use docker containers.\n            Contributed by Chandni Singh\n",
      "commitDate": "14/08/18 8:36 AM",
      "commitName": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "23/07/18 9:57 AM",
      "commitNameOld": "84d7bf1eeff6b9418361afa4aa713e5e6f771365",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 21.94,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n       throws IOException, SliderException {\n-    processArtifact(launcher, instance, fileSystem, service);\n+    processArtifact(launcher, instance, fileSystem, service, compLaunchContext);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     Map\u003cString, String\u003e tokensForSubstitution \u003d\n         buildContainerTokens(instance, container, compLaunchContext);\n \n     // Setup launch context environment\n     buildContainerEnvironment(launcher, service, instance,\n         fileSystem, yarnConf, container, compLaunchContext,\n         tokensForSubstitution);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         compLaunchContext, tokensForSubstitution, instance, context);\n \n     // handles static files (like normal file / archive file) for localization.\n     ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n         compLaunchContext);\n \n     // replace launch command with token specific information\n     buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n         yarnConf, container, compLaunchContext, tokensForSubstitution);\n \n     // Setup container retry settings\n     buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n      throws IOException, SliderException {\n    processArtifact(launcher, instance, fileSystem, service, compLaunchContext);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    Map\u003cString, String\u003e tokensForSubstitution \u003d\n        buildContainerTokens(instance, container, compLaunchContext);\n\n    // Setup launch context environment\n    buildContainerEnvironment(launcher, service, instance,\n        fileSystem, yarnConf, container, compLaunchContext,\n        tokensForSubstitution);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        compLaunchContext, tokensForSubstitution, instance, context);\n\n    // handles static files (like normal file / archive file) for localization.\n    ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n        compLaunchContext);\n\n    // replace launch command with token specific information\n    buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n        yarnConf, container, compLaunchContext, tokensForSubstitution);\n\n    // Setup container retry settings\n    buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
      "extendedDetails": {}
    },
    "84d7bf1eeff6b9418361afa4aa713e5e6f771365": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8360. Improve YARN service restart policy and node manager auto restart policy.\n           Contributed by Suma Shivaprasad\n",
      "commitDate": "23/07/18 9:57 AM",
      "commitName": "84d7bf1eeff6b9418361afa4aa713e5e6f771365",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 41.06,
      "commitsBetweenForRepo": 238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n       throws IOException, SliderException {\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     Map\u003cString, String\u003e tokensForSubstitution \u003d\n         buildContainerTokens(instance, container, compLaunchContext);\n \n     // Setup launch context environment\n     buildContainerEnvironment(launcher, service, instance,\n         fileSystem, yarnConf, container, compLaunchContext,\n         tokensForSubstitution);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         compLaunchContext, tokensForSubstitution, instance, context);\n \n     // handles static files (like normal file / archive file) for localization.\n     ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n         compLaunchContext);\n \n     // replace launch command with token specific information\n     buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n         yarnConf, container, compLaunchContext, tokensForSubstitution);\n \n     // Setup container retry settings\n-    buildContainerRetry(launcher, yarnConf, compLaunchContext);\n+    buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n      throws IOException, SliderException {\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    Map\u003cString, String\u003e tokensForSubstitution \u003d\n        buildContainerTokens(instance, container, compLaunchContext);\n\n    // Setup launch context environment\n    buildContainerEnvironment(launcher, service, instance,\n        fileSystem, yarnConf, container, compLaunchContext,\n        tokensForSubstitution);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        compLaunchContext, tokensForSubstitution, instance, context);\n\n    // handles static files (like normal file / archive file) for localization.\n    ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n        compLaunchContext);\n\n    // replace launch command with token specific information\n    buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n        yarnConf, container, compLaunchContext, tokensForSubstitution);\n\n    // Setup container retry settings\n    buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
      "extendedDetails": {}
    },
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7654. Support ENTRY_POINT for docker container. Contributed by Eric Yang\n",
      "commitDate": "11/05/18 4:56 PM",
      "commitName": "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "04/05/18 9:27 AM",
      "commitNameOld": "6795f8072ffbe6138857e77d51af173f33e4e5c1",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 7.31,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,33 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n       throws IOException, SliderException {\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n-    // Get pre-defined tokens\n-    Map\u003cString, String\u003e globalTokens \u003d\n-        instance.getComponent().getScheduler().globalTokens;\n-    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n-        .initCompTokensForSubstitute(instance, container,\n-            compLaunchContext);\n-    tokensForSubstitution.putAll(globalTokens);\n-    // Set the environment variables in launcher\n-    launcher.putEnv(ServiceUtils.buildEnvMap(\n-        compLaunchContext.getConfiguration(), tokensForSubstitution));\n-    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n-    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n-    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n-      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n-    }\n-    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n-    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n-    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n+    Map\u003cString, String\u003e tokensForSubstitution \u003d\n+        buildContainerTokens(instance, container, compLaunchContext);\n \n-    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n-      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n-    }\n-    //TODO add component host tokens?\n-//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n+    // Setup launch context environment\n+    buildContainerEnvironment(launcher, service, instance,\n+        fileSystem, yarnConf, container, compLaunchContext,\n+        tokensForSubstitution);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         compLaunchContext, tokensForSubstitution, instance, context);\n \n     // handles static files (like normal file / archive file) for localization.\n     ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n         compLaunchContext);\n \n-    // substitute launch command\n-    String launchCommand \u003d compLaunchContext.getLaunchCommand();\n-    // docker container may have empty commands\n-    if (!StringUtils.isEmpty(launchCommand)) {\n-      launchCommand \u003d ProviderUtils\n-          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n-      CommandLineBuilder operation \u003d new CommandLineBuilder();\n-      operation.add(launchCommand);\n-      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n-      launcher.addCommand(operation.build());\n-    }\n+    // replace launch command with token specific information\n+    buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n+        yarnConf, container, compLaunchContext, tokensForSubstitution);\n \n-    // By default retry forever every 30 seconds\n-    launcher.setRetryContext(\n-        YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n-            compLaunchContext.getConfiguration(), yarnConf),\n-        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n-            DEFAULT_CONTAINER_RETRY_INTERVAL,\n-            compLaunchContext.getConfiguration(), yarnConf),\n-        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n-            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n-            compLaunchContext.getConfiguration(), yarnConf));\n+    // Setup container retry settings\n+    buildContainerRetry(launcher, yarnConf, compLaunchContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n      throws IOException, SliderException {\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    Map\u003cString, String\u003e tokensForSubstitution \u003d\n        buildContainerTokens(instance, container, compLaunchContext);\n\n    // Setup launch context environment\n    buildContainerEnvironment(launcher, service, instance,\n        fileSystem, yarnConf, container, compLaunchContext,\n        tokensForSubstitution);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        compLaunchContext, tokensForSubstitution, instance, context);\n\n    // handles static files (like normal file / archive file) for localization.\n    ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n        compLaunchContext);\n\n    // replace launch command with token specific information\n    buildContainerLaunchCommand(launcher, service, instance, fileSystem,\n        yarnConf, container, compLaunchContext, tokensForSubstitution);\n\n    // Setup container retry settings\n    buildContainerRetry(launcher, yarnConf, compLaunchContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
      "extendedDetails": {}
    },
    "6795f8072ffbe6138857e77d51af173f33e4e5c1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8079. Support static and archive unmodified local resources in service AM. Contributed by Suma Shivaprasad\n",
      "commitDate": "04/05/18 9:27 AM",
      "commitName": "6795f8072ffbe6138857e77d51af173f33e4e5c1",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 7.81,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,66 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n       throws IOException, SliderException {\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance, container,\n             compLaunchContext);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(ServiceUtils.buildEnvMap(\n         compLaunchContext.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         compLaunchContext, tokensForSubstitution, instance, context);\n \n+    // handles static files (like normal file / archive file) for localization.\n+    ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n+        compLaunchContext);\n+\n     // substitute launch command\n     String launchCommand \u003d compLaunchContext.getLaunchCommand();\n     // docker container may have empty commands\n     if (!StringUtils.isEmpty(launchCommand)) {\n       launchCommand \u003d ProviderUtils\n           .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n       CommandLineBuilder operation \u003d new CommandLineBuilder();\n       operation.add(launchCommand);\n       operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n       launcher.addCommand(operation.build());\n     }\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(\n         YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n             compLaunchContext.getConfiguration(), yarnConf),\n         YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n             DEFAULT_CONTAINER_RETRY_INTERVAL,\n             compLaunchContext.getConfiguration(), yarnConf),\n         YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n             DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n             compLaunchContext.getConfiguration(), yarnConf));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n      throws IOException, SliderException {\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance, container,\n            compLaunchContext);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(ServiceUtils.buildEnvMap(\n        compLaunchContext.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        compLaunchContext, tokensForSubstitution, instance, context);\n\n    // handles static files (like normal file / archive file) for localization.\n    ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem,\n        compLaunchContext);\n\n    // substitute launch command\n    String launchCommand \u003d compLaunchContext.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(\n        YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n            compLaunchContext.getConfiguration(), yarnConf),\n        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n            DEFAULT_CONTAINER_RETRY_INTERVAL,\n            compLaunchContext.getConfiguration(), yarnConf),\n        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            compLaunchContext.getConfiguration(), yarnConf));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/04/18 11:24 AM",
          "commitNameOld": "2d0662cfd57bd438421f912dc172e79a15835442",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 10.1,
          "commitsBetweenForRepo": 579,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,62 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n-      SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n+      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n+      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n       throws IOException, SliderException {\n-    Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n-        .initCompTokensForSubstitute(instance, container);\n+        .initCompTokensForSubstitute(instance, container,\n+            compLaunchContext);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n-    launcher.putEnv(ServiceUtils\n-        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n+    launcher.putEnv(ServiceUtils.buildEnvMap(\n+        compLaunchContext.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n-        component, tokensForSubstitution, instance, context);\n+        compLaunchContext, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n-    String launchCommand \u003d component.getLaunchCommand();\n+    String launchCommand \u003d compLaunchContext.getLaunchCommand();\n     // docker container may have empty commands\n     if (!StringUtils.isEmpty(launchCommand)) {\n       launchCommand \u003d ProviderUtils\n           .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n       CommandLineBuilder operation \u003d new CommandLineBuilder();\n       operation.add(launchCommand);\n       operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n       launcher.addCommand(operation.build());\n     }\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(\n         YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n-            component.getConfiguration(), yarnConf),\n+            compLaunchContext.getConfiguration(), yarnConf),\n         YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n-            DEFAULT_CONTAINER_RETRY_INTERVAL, component.getConfiguration(),\n-            yarnConf),\n+            DEFAULT_CONTAINER_RETRY_INTERVAL,\n+            compLaunchContext.getConfiguration(), yarnConf),\n         YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n             DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n-            component.getConfiguration(), yarnConf));\n+            compLaunchContext.getConfiguration(), yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n      throws IOException, SliderException {\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance, container,\n            compLaunchContext);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(ServiceUtils.buildEnvMap(\n        compLaunchContext.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        compLaunchContext, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d compLaunchContext.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(\n        YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n            compLaunchContext.getConfiguration(), yarnConf),\n        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n            DEFAULT_CONTAINER_RETRY_INTERVAL,\n            compLaunchContext.getConfiguration(), yarnConf),\n        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            compLaunchContext.getConfiguration(), yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, service-Service, instance-ComponentInstance, fileSystem-SliderFileSystem, yarnConf-Configuration, container-Container]",
            "newValue": "[launcher-AbstractLauncher, service-Service, instance-ComponentInstance, fileSystem-SliderFileSystem, yarnConf-Configuration, container-Container, compLaunchContext-ContainerLaunchService.ComponentLaunchContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/04/18 11:24 AM",
          "commitNameOld": "2d0662cfd57bd438421f912dc172e79a15835442",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 10.1,
          "commitsBetweenForRepo": 579,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,62 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n-      SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n+      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n+      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n       throws IOException, SliderException {\n-    Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n-        .initCompTokensForSubstitute(instance, container);\n+        .initCompTokensForSubstitute(instance, container,\n+            compLaunchContext);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n-    launcher.putEnv(ServiceUtils\n-        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n+    launcher.putEnv(ServiceUtils.buildEnvMap(\n+        compLaunchContext.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n-        component, tokensForSubstitution, instance, context);\n+        compLaunchContext, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n-    String launchCommand \u003d component.getLaunchCommand();\n+    String launchCommand \u003d compLaunchContext.getLaunchCommand();\n     // docker container may have empty commands\n     if (!StringUtils.isEmpty(launchCommand)) {\n       launchCommand \u003d ProviderUtils\n           .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n       CommandLineBuilder operation \u003d new CommandLineBuilder();\n       operation.add(launchCommand);\n       operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n       launcher.addCommand(operation.build());\n     }\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(\n         YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n-            component.getConfiguration(), yarnConf),\n+            compLaunchContext.getConfiguration(), yarnConf),\n         YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n-            DEFAULT_CONTAINER_RETRY_INTERVAL, component.getConfiguration(),\n-            yarnConf),\n+            DEFAULT_CONTAINER_RETRY_INTERVAL,\n+            compLaunchContext.getConfiguration(), yarnConf),\n         YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n             DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n-            component.getConfiguration(), yarnConf));\n+            compLaunchContext.getConfiguration(), yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n      throws IOException, SliderException {\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance, container,\n            compLaunchContext);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(ServiceUtils.buildEnvMap(\n        compLaunchContext.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        compLaunchContext, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d compLaunchContext.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(\n        YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n            compLaunchContext.getConfiguration(), yarnConf),\n        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n            DEFAULT_CONTAINER_RETRY_INTERVAL,\n            compLaunchContext.getConfiguration(), yarnConf),\n        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            compLaunchContext.getConfiguration(), yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {}
        }
      ]
    },
    "2d0662cfd57bd438421f912dc172e79a15835442": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8060.  Added default readiness check for service components.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "16/04/18 11:24 AM",
      "commitName": "2d0662cfd57bd438421f912dc172e79a15835442",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "23/03/18 12:54 PM",
      "commitNameOld": "647058efc0c7a4442b3e64b4d743df1a589f26bc",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 23.94,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,61 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance, container);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(ServiceUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d component.getLaunchCommand();\n     // docker container may have empty commands\n     if (!StringUtils.isEmpty(launchCommand)) {\n       launchCommand \u003d ProviderUtils\n           .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n       CommandLineBuilder operation \u003d new CommandLineBuilder();\n       operation.add(launchCommand);\n       operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n       launcher.addCommand(operation.build());\n     }\n \n     // By default retry forever every 30 seconds\n-    launcher.setRetryContext(YarnServiceConf\n-        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n-            yarnConf), YarnServiceConf\n-        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n+    launcher.setRetryContext(\n+        YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n+            component.getConfiguration(), yarnConf),\n+        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n+            DEFAULT_CONTAINER_RETRY_INTERVAL, component.getConfiguration(),\n             yarnConf),\n-        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL, -1,\n-            service.getConfiguration(), yarnConf));\n+        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n+            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n+            component.getConfiguration(), yarnConf));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance, container);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(ServiceUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d component.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(\n        YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n            component.getConfiguration(), yarnConf),\n        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n            DEFAULT_CONTAINER_RETRY_INTERVAL, component.getConfiguration(),\n            yarnConf),\n        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            component.getConfiguration(), yarnConf));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
      "extendedDetails": {}
    },
    "647058efc0c7a4442b3e64b4d743df1a589f26bc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8032.  Added ability to configure failure validity interval for YARN service.\n            Contributed by Chandni Singh\n",
      "commitDate": "23/03/18 12:54 PM",
      "commitName": "647058efc0c7a4442b3e64b4d743df1a589f26bc",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 7:58 AM",
      "commitNameOld": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 127.16,
      "commitsBetweenForRepo": 898,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance, container);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(ServiceUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d component.getLaunchCommand();\n     // docker container may have empty commands\n     if (!StringUtils.isEmpty(launchCommand)) {\n       launchCommand \u003d ProviderUtils\n           .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n       CommandLineBuilder operation \u003d new CommandLineBuilder();\n       operation.add(launchCommand);\n       operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n       launcher.addCommand(operation.build());\n     }\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(YarnServiceConf\n         .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n             yarnConf), YarnServiceConf\n         .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n-            yarnConf));\n+            yarnConf),\n+        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL, -1,\n+            service.getConfiguration(), yarnConf));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance, container);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(ServiceUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d component.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n            yarnConf),\n        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL, -1,\n            service.getConfiguration(), yarnConf));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
      "extendedDetails": {}
    },
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7486. Race condition in service AM that can cause NPE. Contributed by Jian He\n",
      "commitDate": "16/11/17 7:58 AM",
      "commitName": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7486. Race condition in service AM that can cause NPE. Contributed by Jian He\n",
          "commitDate": "16/11/17 7:58 AM",
          "commitName": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 9.77,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n-      SliderFileSystem fileSystem, Configuration yarnConf)\n+      SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n-        .initCompTokensForSubstitute(instance);\n+        .initCompTokensForSubstitute(instance, container);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(ServiceUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d component.getLaunchCommand();\n     // docker container may have empty commands\n     if (!StringUtils.isEmpty(launchCommand)) {\n       launchCommand \u003d ProviderUtils\n           .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n       CommandLineBuilder operation \u003d new CommandLineBuilder();\n       operation.add(launchCommand);\n       operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n       launcher.addCommand(operation.build());\n     }\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(YarnServiceConf\n         .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n             yarnConf), YarnServiceConf\n         .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n             yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance, container);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(ServiceUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d component.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n            yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, service-Service, instance-ComponentInstance, fileSystem-SliderFileSystem, yarnConf-Configuration]",
            "newValue": "[launcher-AbstractLauncher, service-Service, instance-ComponentInstance, fileSystem-SliderFileSystem, yarnConf-Configuration, container-Container]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7486. Race condition in service AM that can cause NPE. Contributed by Jian He\n",
          "commitDate": "16/11/17 7:58 AM",
          "commitName": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 9.77,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n-      SliderFileSystem fileSystem, Configuration yarnConf)\n+      SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n-        .initCompTokensForSubstitute(instance);\n+        .initCompTokensForSubstitute(instance, container);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(ServiceUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d component.getLaunchCommand();\n     // docker container may have empty commands\n     if (!StringUtils.isEmpty(launchCommand)) {\n       launchCommand \u003d ProviderUtils\n           .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n       CommandLineBuilder operation \u003d new CommandLineBuilder();\n       operation.add(launchCommand);\n       operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n       launcher.addCommand(operation.build());\n     }\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(YarnServiceConf\n         .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n             yarnConf), YarnServiceConf\n         .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n             yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance, container);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(ServiceUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d component.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n            yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {}
        }
      ]
    },
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n-    launcher.putEnv(SliderUtils\n+    launcher.putEnv(ServiceUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d component.getLaunchCommand();\n     // docker container may have empty commands\n     if (!StringUtils.isEmpty(launchCommand)) {\n       launchCommand \u003d ProviderUtils\n           .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n       CommandLineBuilder operation \u003d new CommandLineBuilder();\n       operation.add(launchCommand);\n       operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n       launcher.addCommand(operation.build());\n     }\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(YarnServiceConf\n         .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n             yarnConf), YarnServiceConf\n         .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n             yarnConf));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(ServiceUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d component.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n            yarnConf));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
      "extendedDetails": {}
    },
    "ce74e64363abc64561263be70a923ab3e67f043f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7210. Some NPE fixes in Registry DNS. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(SliderUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n-    String launchCommand \u003d ProviderUtils\n-        .substituteStrWithTokens(component.getLaunchCommand(),\n-            tokensForSubstitution);\n-    CommandLineBuilder operation \u003d new CommandLineBuilder();\n-    operation.add(launchCommand);\n-    operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n-    launcher.addCommand(operation.build());\n+    String launchCommand \u003d component.getLaunchCommand();\n+    // docker container may have empty commands\n+    if (!StringUtils.isEmpty(launchCommand)) {\n+      launchCommand \u003d ProviderUtils\n+          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n+      CommandLineBuilder operation \u003d new CommandLineBuilder();\n+      operation.add(launchCommand);\n+      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n+      launcher.addCommand(operation.build());\n+    }\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(YarnServiceConf\n         .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n             yarnConf), YarnServiceConf\n         .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n             yarnConf));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(SliderUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d component.getLaunchCommand();\n    // docker container may have empty commands\n    if (!StringUtils.isEmpty(launchCommand)) {\n      launchCommand \u003d ProviderUtils\n          .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n      CommandLineBuilder operation \u003d new CommandLineBuilder();\n      operation.add(launchCommand);\n      operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n      launcher.addCommand(operation.build());\n    }\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n            yarnConf));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,54 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n-      Application application, ComponentInstance instance,\n+      Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n-    processArtifact(launcher, instance, fileSystem, application);\n+    processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(SliderUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d ProviderUtils\n         .substituteStrWithTokens(component.getLaunchCommand(),\n             tokensForSubstitution);\n     CommandLineBuilder operation \u003d new CommandLineBuilder();\n     operation.add(launchCommand);\n     operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n     launcher.addCommand(operation.build());\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(YarnServiceConf\n-        .getInt(CONTAINER_RETRY_MAX, -1, application.getConfiguration(),\n+        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n             yarnConf), YarnServiceConf\n-        .getInt(CONTAINER_RETRY_INTERVAL, 30000, application.getConfiguration(),\n+        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n             yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(SliderUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d ProviderUtils\n        .substituteStrWithTokens(component.getLaunchCommand(),\n            tokensForSubstitution);\n    CommandLineBuilder operation \u003d new CommandLineBuilder();\n    operation.add(launchCommand);\n    operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n    launcher.addCommand(operation.build());\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n            yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,54 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n-      Application application, ComponentInstance instance,\n+      Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n-    processArtifact(launcher, instance, fileSystem, application);\n+    processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(SliderUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d ProviderUtils\n         .substituteStrWithTokens(component.getLaunchCommand(),\n             tokensForSubstitution);\n     CommandLineBuilder operation \u003d new CommandLineBuilder();\n     operation.add(launchCommand);\n     operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n     launcher.addCommand(operation.build());\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(YarnServiceConf\n-        .getInt(CONTAINER_RETRY_MAX, -1, application.getConfiguration(),\n+        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n             yarnConf), YarnServiceConf\n-        .getInt(CONTAINER_RETRY_INTERVAL, 30000, application.getConfiguration(),\n+        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n             yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(SliderUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d ProviderUtils\n        .substituteStrWithTokens(component.getLaunchCommand(),\n            tokensForSubstitution);\n    CommandLineBuilder operation \u003d new CommandLineBuilder();\n    operation.add(launchCommand);\n    operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n    launcher.addCommand(operation.build());\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n            yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,54 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n-      Application application, ComponentInstance instance,\n+      Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf)\n       throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n-    processArtifact(launcher, instance, fileSystem, application);\n+    processArtifact(launcher, instance, fileSystem, service);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(SliderUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d ProviderUtils\n         .substituteStrWithTokens(component.getLaunchCommand(),\n             tokensForSubstitution);\n     CommandLineBuilder operation \u003d new CommandLineBuilder();\n     operation.add(launchCommand);\n     operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n     launcher.addCommand(operation.build());\n \n     // By default retry forever every 30 seconds\n     launcher.setRetryContext(YarnServiceConf\n-        .getInt(CONTAINER_RETRY_MAX, -1, application.getConfiguration(),\n+        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n             yarnConf), YarnServiceConf\n-        .getInt(CONTAINER_RETRY_INTERVAL, 30000, application.getConfiguration(),\n+        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n             yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, service);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(SliderUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d ProviderUtils\n        .substituteStrWithTokens(component.getLaunchCommand(),\n            tokensForSubstitution);\n    CommandLineBuilder operation \u003d new CommandLineBuilder();\n    operation.add(launchCommand);\n    operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n    launcher.addCommand(operation.build());\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, service.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, service.getConfiguration(),\n            yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, application-Application, instance-ComponentInstance, fileSystem-SliderFileSystem, yarnConf-Configuration]",
            "newValue": "[launcher-AbstractLauncher, service-Service, instance-ComponentInstance, fileSystem-SliderFileSystem, yarnConf-Configuration]"
          }
        }
      ]
    },
    "79bf5c084d4a063f1a933cae498af23edfd46792": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7029. Add more UTs in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7029. Add more UTs in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,54 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Application application, ComponentInstance instance,\n-      SliderFileSystem fileSystem) throws IOException, SliderException {\n+      SliderFileSystem fileSystem, Configuration yarnConf)\n+      throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, application);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(SliderUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d ProviderUtils\n         .substituteStrWithTokens(component.getLaunchCommand(),\n             tokensForSubstitution);\n     CommandLineBuilder operation \u003d new CommandLineBuilder();\n     operation.add(launchCommand);\n     operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n     launcher.addCommand(operation.build());\n+\n+    // By default retry forever every 30 seconds\n+    launcher.setRetryContext(YarnServiceConf\n+        .getInt(CONTAINER_RETRY_MAX, -1, application.getConfiguration(),\n+            yarnConf), YarnServiceConf\n+        .getInt(CONTAINER_RETRY_INTERVAL, 30000, application.getConfiguration(),\n+            yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Application application, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, application);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(SliderUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d ProviderUtils\n        .substituteStrWithTokens(component.getLaunchCommand(),\n            tokensForSubstitution);\n    CommandLineBuilder operation \u003d new CommandLineBuilder();\n    operation.add(launchCommand);\n    operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n    launcher.addCommand(operation.build());\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, application.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, application.getConfiguration(),\n            yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, application-Application, instance-ComponentInstance, fileSystem-SliderFileSystem]",
            "newValue": "[launcher-AbstractLauncher, application-Application, instance-ComponentInstance, fileSystem-SliderFileSystem, yarnConf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7029. Add more UTs in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,54 @@\n   public void buildContainerLaunchContext(AbstractLauncher launcher,\n       Application application, ComponentInstance instance,\n-      SliderFileSystem fileSystem) throws IOException, SliderException {\n+      SliderFileSystem fileSystem, Configuration yarnConf)\n+      throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();;\n     processArtifact(launcher, instance, fileSystem, application);\n \n     ServiceContext context \u003d\n         instance.getComponent().getScheduler().getContext();\n     // Generate tokens (key-value pair) for config substitution.\n     // Get pre-defined tokens\n     Map\u003cString, String\u003e globalTokens \u003d\n         instance.getComponent().getScheduler().globalTokens;\n     Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n         .initCompTokensForSubstitute(instance);\n     tokensForSubstitution.putAll(globalTokens);\n     // Set the environment variables in launcher\n     launcher.putEnv(SliderUtils\n         .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n     launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n     launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n     if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n       launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n     }\n     launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n     launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n \n     for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n       tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n     }\n     //TODO add component host tokens?\n //    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n \n     // create config file on hdfs and add local resource\n     ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n         component, tokensForSubstitution, instance, context);\n \n     // substitute launch command\n     String launchCommand \u003d ProviderUtils\n         .substituteStrWithTokens(component.getLaunchCommand(),\n             tokensForSubstitution);\n     CommandLineBuilder operation \u003d new CommandLineBuilder();\n     operation.add(launchCommand);\n     operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n     launcher.addCommand(operation.build());\n+\n+    // By default retry forever every 30 seconds\n+    launcher.setRetryContext(YarnServiceConf\n+        .getInt(CONTAINER_RETRY_MAX, -1, application.getConfiguration(),\n+            yarnConf), YarnServiceConf\n+        .getInt(CONTAINER_RETRY_INTERVAL, 30000, application.getConfiguration(),\n+            yarnConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Application application, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf)\n      throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, application);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(SliderUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d ProviderUtils\n        .substituteStrWithTokens(component.getLaunchCommand(),\n            tokensForSubstitution);\n    CommandLineBuilder operation \u003d new CommandLineBuilder();\n    operation.add(launchCommand);\n    operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n    launcher.addCommand(operation.build());\n\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(YarnServiceConf\n        .getInt(CONTAINER_RETRY_MAX, -1, application.getConfiguration(),\n            yarnConf), YarnServiceConf\n        .getInt(CONTAINER_RETRY_INTERVAL, 30000, application.getConfiguration(),\n            yarnConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {}
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,46 @@\n+  public void buildContainerLaunchContext(AbstractLauncher launcher,\n+      Application application, ComponentInstance instance,\n+      SliderFileSystem fileSystem) throws IOException, SliderException {\n+    Component component \u003d instance.getComponent().getComponentSpec();;\n+    processArtifact(launcher, instance, fileSystem, application);\n+\n+    ServiceContext context \u003d\n+        instance.getComponent().getScheduler().getContext();\n+    // Generate tokens (key-value pair) for config substitution.\n+    // Get pre-defined tokens\n+    Map\u003cString, String\u003e globalTokens \u003d\n+        instance.getComponent().getScheduler().globalTokens;\n+    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n+        .initCompTokensForSubstitute(instance);\n+    tokensForSubstitution.putAll(globalTokens);\n+    // Set the environment variables in launcher\n+    launcher.putEnv(SliderUtils\n+        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n+    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n+    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n+    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n+      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n+    }\n+    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n+    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n+    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n+\n+    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n+      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n+    }\n+    //TODO add component host tokens?\n+//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n+\n+    // create config file on hdfs and add local resource\n+    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n+        component, tokensForSubstitution, instance, context);\n+\n+    // substitute launch command\n+    String launchCommand \u003d ProviderUtils\n+        .substituteStrWithTokens(component.getLaunchCommand(),\n+            tokensForSubstitution);\n+    CommandLineBuilder operation \u003d new CommandLineBuilder();\n+    operation.add(launchCommand);\n+    operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n+    launcher.addCommand(operation.build());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchContext(AbstractLauncher launcher,\n      Application application, ComponentInstance instance,\n      SliderFileSystem fileSystem) throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();;\n    processArtifact(launcher, instance, fileSystem, application);\n\n    ServiceContext context \u003d\n        instance.getComponent().getScheduler().getContext();\n    // Generate tokens (key-value pair) for config substitution.\n    // Get pre-defined tokens\n    Map\u003cString, String\u003e globalTokens \u003d\n        instance.getComponent().getScheduler().globalTokens;\n    Map\u003cString, String\u003e tokensForSubstitution \u003d ProviderUtils\n        .initCompTokensForSubstitute(instance);\n    tokensForSubstitution.putAll(globalTokens);\n    // Set the environment variables in launcher\n    launcher.putEnv(SliderUtils\n        .buildEnvMap(component.getConfiguration(), tokensForSubstitution));\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\n    if (System.getenv(HADOOP_USER_NAME) !\u003d null) {\n      launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\n    }\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\n\n    for (Entry\u003cString, String\u003e entry : launcher.getEnv().entrySet()) {\n      tokensForSubstitution.put($(entry.getKey()), entry.getValue());\n    }\n    //TODO add component host tokens?\n//    ProviderUtils.addComponentHostTokens(tokensForSubstitution, amState);\n\n    // create config file on hdfs and add local resource\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem,\n        component, tokensForSubstitution, instance, context);\n\n    // substitute launch command\n    String launchCommand \u003d ProviderUtils\n        .substituteStrWithTokens(component.getLaunchCommand(),\n            tokensForSubstitution);\n    CommandLineBuilder operation \u003d new CommandLineBuilder();\n    operation.add(launchCommand);\n    operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n    launcher.addCommand(operation.build());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java"
    }
  }
}