{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MD5FileUtils.java",
  "functionName": "readStoredMd5",
  "functionId": "readStoredMd5___md5File-File",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
  "functionStartLine": 75,
  "functionEndLine": 96,
  "numCommitsSeen": 14,
  "timeTaken": 4020,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "0ad6cdd03149eefbbbeba5df633bae65d4ee8916",
    "329c7051817c956bfc64661f4e1349b7009a2747",
    "6449f524552f8c24d20b314ad21f6c579fa08e85",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "0ad6cdd03149eefbbbeba5df633bae65d4ee8916": "Ybodychange",
    "329c7051817c956bfc64661f4e1349b7009a2747": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "6449f524552f8c24d20b314ad21f6c579fa08e85": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 237.92,
      "commitsBetweenForRepo": 1864,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private static Matcher readStoredMd5(File md5File) throws IOException {\n     BufferedReader reader \u003d\n-        new BufferedReader(new InputStreamReader(new FileInputStream(\n-            md5File), Charsets.UTF_8));\n+        new BufferedReader(new InputStreamReader(\n+            Files.newInputStream(md5File.toPath()), Charsets.UTF_8));\n     String md5Line;\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n       IOUtils.cleanupWithLogger(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n       throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n           + md5Line + \"\\\" does not match the expected pattern.\");\n     }\n     return matcher;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Matcher readStoredMd5(File md5File) throws IOException {\n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(\n            Files.newInputStream(md5File.toPath()), Charsets.UTF_8));\n    String md5Line;\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n          + md5Line + \"\\\" does not match the expected pattern.\");\n    }\n    return matcher;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
      "extendedDetails": {}
    },
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "21/02/14 12:02 PM",
      "commitNameOld": "0ad6cdd03149eefbbbeba5df633bae65d4ee8916",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1658.07,
      "commitsBetweenForRepo": 12696,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private static Matcher readStoredMd5(File md5File) throws IOException {\n     BufferedReader reader \u003d\n         new BufferedReader(new InputStreamReader(new FileInputStream(\n             md5File), Charsets.UTF_8));\n     String md5Line;\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n-      IOUtils.cleanup(LOG, reader);\n+      IOUtils.cleanupWithLogger(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n       throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n           + md5Line + \"\\\" does not match the expected pattern.\");\n     }\n     return matcher;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Matcher readStoredMd5(File md5File) throws IOException {\n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(new FileInputStream(\n            md5File), Charsets.UTF_8));\n    String md5Line;\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n          + md5Line + \"\\\" does not match the expected pattern.\");\n    }\n    return matcher;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
      "extendedDetails": {}
    },
    "0ad6cdd03149eefbbbeba5df633bae65d4ee8916": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5992. Fix NPE in MD5FileUtils and update editsStored for TestOfflineEditsViewer.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1570690 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/02/14 12:02 PM",
      "commitName": "0ad6cdd03149eefbbbeba5df633bae65d4ee8916",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "20/02/14 3:21 PM",
      "commitNameOld": "329c7051817c956bfc64661f4e1349b7009a2747",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,22 @@\n   private static Matcher readStoredMd5(File md5File) throws IOException {\n-    if (!md5File.exists()) {\n-      return null;\n-    }\n-    \n     BufferedReader reader \u003d\n         new BufferedReader(new InputStreamReader(new FileInputStream(\n             md5File), Charsets.UTF_8));\n     String md5Line;\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n       IOUtils.cleanup(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n       throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n           + md5Line + \"\\\" does not match the expected pattern.\");\n     }\n     return matcher;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Matcher readStoredMd5(File md5File) throws IOException {\n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(new FileInputStream(\n            md5File), Charsets.UTF_8));\n    String md5Line;\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n          + md5Line + \"\\\" does not match the expected pattern.\");\n    }\n    return matcher;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
      "extendedDetails": {}
    },
    "329c7051817c956bfc64661f4e1349b7009a2747": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-5987. Fix findbugs warnings in Rolling Upgrade branch. (Contributed by szetszwo)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1570389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/14 3:21 PM",
      "commitName": "329c7051817c956bfc64661f4e1349b7009a2747",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5987. Fix findbugs warnings in Rolling Upgrade branch. (Contributed by szetszwo)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1570389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/14 3:21 PM",
          "commitName": "329c7051817c956bfc64661f4e1349b7009a2747",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "19/02/14 11:41 AM",
          "commitNameOld": "377424e36a25ab34bba9aaed5feaae9d293eb57f",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.15,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,26 @@\n-  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n-    File md5File \u003d getDigestFileForFile(dataFile);\n-\n-    String md5Line;\n-    \n+  private static Matcher readStoredMd5(File md5File) throws IOException {\n     if (!md5File.exists()) {\n       return null;\n     }\n     \n     BufferedReader reader \u003d\n         new BufferedReader(new InputStreamReader(new FileInputStream(\n             md5File), Charsets.UTF_8));\n+    String md5Line;\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n       IOUtils.cleanup(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n-      throw new IOException(\"Invalid MD5 file at \" + md5File\n-          + \" (does not match expected pattern)\");\n+      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n+          + md5Line + \"\\\" does not match the expected pattern.\");\n     }\n-    String storedHash \u003d matcher.group(1);\n-    File referencedFile \u003d new File(matcher.group(2));\n-\n-    // Sanity check: Make sure that the file referenced in the .md5 file at\n-    // least has the same name as the file we expect\n-    if (!referencedFile.getName().equals(dataFile.getName())) {\n-      throw new IOException(\n-          \"MD5 file at \" + md5File + \" references file named \" +\n-          referencedFile.getName() + \" but we expected it to reference \" +\n-          dataFile);\n-    }\n-    return new MD5Hash(storedHash);\n+    return matcher;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Matcher readStoredMd5(File md5File) throws IOException {\n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(new FileInputStream(\n            md5File), Charsets.UTF_8));\n    String md5Line;\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n          + md5Line + \"\\\" does not match the expected pattern.\");\n    }\n    return matcher;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
          "extendedDetails": {
            "oldValue": "readStoredMd5ForFile",
            "newValue": "readStoredMd5"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5987. Fix findbugs warnings in Rolling Upgrade branch. (Contributed by szetszwo)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1570389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/14 3:21 PM",
          "commitName": "329c7051817c956bfc64661f4e1349b7009a2747",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "19/02/14 11:41 AM",
          "commitNameOld": "377424e36a25ab34bba9aaed5feaae9d293eb57f",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.15,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,26 @@\n-  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n-    File md5File \u003d getDigestFileForFile(dataFile);\n-\n-    String md5Line;\n-    \n+  private static Matcher readStoredMd5(File md5File) throws IOException {\n     if (!md5File.exists()) {\n       return null;\n     }\n     \n     BufferedReader reader \u003d\n         new BufferedReader(new InputStreamReader(new FileInputStream(\n             md5File), Charsets.UTF_8));\n+    String md5Line;\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n       IOUtils.cleanup(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n-      throw new IOException(\"Invalid MD5 file at \" + md5File\n-          + \" (does not match expected pattern)\");\n+      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n+          + md5Line + \"\\\" does not match the expected pattern.\");\n     }\n-    String storedHash \u003d matcher.group(1);\n-    File referencedFile \u003d new File(matcher.group(2));\n-\n-    // Sanity check: Make sure that the file referenced in the .md5 file at\n-    // least has the same name as the file we expect\n-    if (!referencedFile.getName().equals(dataFile.getName())) {\n-      throw new IOException(\n-          \"MD5 file at \" + md5File + \" references file named \" +\n-          referencedFile.getName() + \" but we expected it to reference \" +\n-          dataFile);\n-    }\n-    return new MD5Hash(storedHash);\n+    return matcher;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Matcher readStoredMd5(File md5File) throws IOException {\n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(new FileInputStream(\n            md5File), Charsets.UTF_8));\n    String md5Line;\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n          + md5Line + \"\\\" does not match the expected pattern.\");\n    }\n    return matcher;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
          "extendedDetails": {
            "oldValue": "[dataFile-File]",
            "newValue": "[md5File-File]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5987. Fix findbugs warnings in Rolling Upgrade branch. (Contributed by szetszwo)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1570389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/14 3:21 PM",
          "commitName": "329c7051817c956bfc64661f4e1349b7009a2747",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "19/02/14 11:41 AM",
          "commitNameOld": "377424e36a25ab34bba9aaed5feaae9d293eb57f",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.15,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,26 @@\n-  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n-    File md5File \u003d getDigestFileForFile(dataFile);\n-\n-    String md5Line;\n-    \n+  private static Matcher readStoredMd5(File md5File) throws IOException {\n     if (!md5File.exists()) {\n       return null;\n     }\n     \n     BufferedReader reader \u003d\n         new BufferedReader(new InputStreamReader(new FileInputStream(\n             md5File), Charsets.UTF_8));\n+    String md5Line;\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n       IOUtils.cleanup(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n-      throw new IOException(\"Invalid MD5 file at \" + md5File\n-          + \" (does not match expected pattern)\");\n+      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n+          + md5Line + \"\\\" does not match the expected pattern.\");\n     }\n-    String storedHash \u003d matcher.group(1);\n-    File referencedFile \u003d new File(matcher.group(2));\n-\n-    // Sanity check: Make sure that the file referenced in the .md5 file at\n-    // least has the same name as the file we expect\n-    if (!referencedFile.getName().equals(dataFile.getName())) {\n-      throw new IOException(\n-          \"MD5 file at \" + md5File + \" references file named \" +\n-          referencedFile.getName() + \" but we expected it to reference \" +\n-          dataFile);\n-    }\n-    return new MD5Hash(storedHash);\n+    return matcher;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Matcher readStoredMd5(File md5File) throws IOException {\n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(new FileInputStream(\n            md5File), Charsets.UTF_8));\n    String md5Line;\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n          + md5Line + \"\\\" does not match the expected pattern.\");\n    }\n    return matcher;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
          "extendedDetails": {
            "oldValue": "MD5Hash",
            "newValue": "Matcher"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5987. Fix findbugs warnings in Rolling Upgrade branch. (Contributed by szetszwo)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1570389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/14 3:21 PM",
          "commitName": "329c7051817c956bfc64661f4e1349b7009a2747",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "19/02/14 11:41 AM",
          "commitNameOld": "377424e36a25ab34bba9aaed5feaae9d293eb57f",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.15,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,26 @@\n-  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n-    File md5File \u003d getDigestFileForFile(dataFile);\n-\n-    String md5Line;\n-    \n+  private static Matcher readStoredMd5(File md5File) throws IOException {\n     if (!md5File.exists()) {\n       return null;\n     }\n     \n     BufferedReader reader \u003d\n         new BufferedReader(new InputStreamReader(new FileInputStream(\n             md5File), Charsets.UTF_8));\n+    String md5Line;\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n       IOUtils.cleanup(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n-      throw new IOException(\"Invalid MD5 file at \" + md5File\n-          + \" (does not match expected pattern)\");\n+      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n+          + md5Line + \"\\\" does not match the expected pattern.\");\n     }\n-    String storedHash \u003d matcher.group(1);\n-    File referencedFile \u003d new File(matcher.group(2));\n-\n-    // Sanity check: Make sure that the file referenced in the .md5 file at\n-    // least has the same name as the file we expect\n-    if (!referencedFile.getName().equals(dataFile.getName())) {\n-      throw new IOException(\n-          \"MD5 file at \" + md5File + \" references file named \" +\n-          referencedFile.getName() + \" but we expected it to reference \" +\n-          dataFile);\n-    }\n-    return new MD5Hash(storedHash);\n+    return matcher;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Matcher readStoredMd5(File md5File) throws IOException {\n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(new FileInputStream(\n            md5File), Charsets.UTF_8));\n    String md5Line;\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n          + md5Line + \"\\\" does not match the expected pattern.\");\n    }\n    return matcher;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5987. Fix findbugs warnings in Rolling Upgrade branch. (Contributed by szetszwo)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1570389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/14 3:21 PM",
          "commitName": "329c7051817c956bfc64661f4e1349b7009a2747",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "19/02/14 11:41 AM",
          "commitNameOld": "377424e36a25ab34bba9aaed5feaae9d293eb57f",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.15,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,26 @@\n-  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n-    File md5File \u003d getDigestFileForFile(dataFile);\n-\n-    String md5Line;\n-    \n+  private static Matcher readStoredMd5(File md5File) throws IOException {\n     if (!md5File.exists()) {\n       return null;\n     }\n     \n     BufferedReader reader \u003d\n         new BufferedReader(new InputStreamReader(new FileInputStream(\n             md5File), Charsets.UTF_8));\n+    String md5Line;\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n       IOUtils.cleanup(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n-      throw new IOException(\"Invalid MD5 file at \" + md5File\n-          + \" (does not match expected pattern)\");\n+      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n+          + md5Line + \"\\\" does not match the expected pattern.\");\n     }\n-    String storedHash \u003d matcher.group(1);\n-    File referencedFile \u003d new File(matcher.group(2));\n-\n-    // Sanity check: Make sure that the file referenced in the .md5 file at\n-    // least has the same name as the file we expect\n-    if (!referencedFile.getName().equals(dataFile.getName())) {\n-      throw new IOException(\n-          \"MD5 file at \" + md5File + \" references file named \" +\n-          referencedFile.getName() + \" but we expected it to reference \" +\n-          dataFile);\n-    }\n-    return new MD5Hash(storedHash);\n+    return matcher;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Matcher readStoredMd5(File md5File) throws IOException {\n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(new FileInputStream(\n            md5File), Charsets.UTF_8));\n    String md5Line;\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file \" + md5File + \": the content \\\"\"\n          + md5Line + \"\\\" does not match the expected pattern.\");\n    }\n    return matcher;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "6449f524552f8c24d20b314ad21f6c579fa08e85": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4032. Specify the charset explicitly rather than rely on the default. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1431179 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 6:30 PM",
      "commitName": "6449f524552f8c24d20b314ad21f6c579fa08e85",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "27/10/11 3:11 PM",
      "commitNameOld": "646e855f6ef058b636a5fc85637a3f8e17fddaba",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 440.18,
      "commitsBetweenForRepo": 2689,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n     File md5File \u003d getDigestFileForFile(dataFile);\n \n     String md5Line;\n     \n     if (!md5File.exists()) {\n       return null;\n     }\n     \n     BufferedReader reader \u003d\n-      new BufferedReader(new FileReader(md5File));\n+        new BufferedReader(new InputStreamReader(new FileInputStream(\n+            md5File), Charsets.UTF_8));\n     try {\n       md5Line \u003d reader.readLine();\n       if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n       md5Line \u003d md5Line.trim();\n     } catch (IOException ioe) {\n       throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n     } finally {\n       IOUtils.cleanup(LOG, reader);\n     }\n     \n     Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n     if (!matcher.matches()) {\n       throw new IOException(\"Invalid MD5 file at \" + md5File\n           + \" (does not match expected pattern)\");\n     }\n     String storedHash \u003d matcher.group(1);\n     File referencedFile \u003d new File(matcher.group(2));\n \n     // Sanity check: Make sure that the file referenced in the .md5 file at\n     // least has the same name as the file we expect\n     if (!referencedFile.getName().equals(dataFile.getName())) {\n       throw new IOException(\n           \"MD5 file at \" + md5File + \" references file named \" +\n           referencedFile.getName() + \" but we expected it to reference \" +\n           dataFile);\n     }\n     return new MD5Hash(storedHash);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n    File md5File \u003d getDigestFileForFile(dataFile);\n\n    String md5Line;\n    \n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(new FileInputStream(\n            md5File), Charsets.UTF_8));\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file at \" + md5File\n          + \" (does not match expected pattern)\");\n    }\n    String storedHash \u003d matcher.group(1);\n    File referencedFile \u003d new File(matcher.group(2));\n\n    // Sanity check: Make sure that the file referenced in the .md5 file at\n    // least has the same name as the file we expect\n    if (!referencedFile.getName().equals(dataFile.getName())) {\n      throw new IOException(\n          \"MD5 file at \" + md5File + \" references file named \" +\n          referencedFile.getName() + \" but we expected it to reference \" +\n          dataFile);\n    }\n    return new MD5Hash(storedHash);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n    File md5File \u003d getDigestFileForFile(dataFile);\n\n    String md5Line;\n    \n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n      new BufferedReader(new FileReader(md5File));\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file at \" + md5File\n          + \" (does not match expected pattern)\");\n    }\n    String storedHash \u003d matcher.group(1);\n    File referencedFile \u003d new File(matcher.group(2));\n\n    // Sanity check: Make sure that the file referenced in the .md5 file at\n    // least has the same name as the file we expect\n    if (!referencedFile.getName().equals(dataFile.getName())) {\n      throw new IOException(\n          \"MD5 file at \" + md5File + \" references file named \" +\n          referencedFile.getName() + \" but we expected it to reference \" +\n          dataFile);\n    }\n    return new MD5Hash(storedHash);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n    File md5File \u003d getDigestFileForFile(dataFile);\n\n    String md5Line;\n    \n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n      new BufferedReader(new FileReader(md5File));\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file at \" + md5File\n          + \" (does not match expected pattern)\");\n    }\n    String storedHash \u003d matcher.group(1);\n    File referencedFile \u003d new File(matcher.group(2));\n\n    // Sanity check: Make sure that the file referenced in the .md5 file at\n    // least has the same name as the file we expect\n    if (!referencedFile.getName().equals(dataFile.getName())) {\n      throw new IOException(\n          \"MD5 file at \" + md5File + \" references file named \" +\n          referencedFile.getName() + \" but we expected it to reference \" +\n          dataFile);\n    }\n    return new MD5Hash(storedHash);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,39 @@\n+  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n+    File md5File \u003d getDigestFileForFile(dataFile);\n+\n+    String md5Line;\n+    \n+    if (!md5File.exists()) {\n+      return null;\n+    }\n+    \n+    BufferedReader reader \u003d\n+      new BufferedReader(new FileReader(md5File));\n+    try {\n+      md5Line \u003d reader.readLine();\n+      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n+      md5Line \u003d md5Line.trim();\n+    } catch (IOException ioe) {\n+      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n+    } finally {\n+      IOUtils.cleanup(LOG, reader);\n+    }\n+    \n+    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n+    if (!matcher.matches()) {\n+      throw new IOException(\"Invalid MD5 file at \" + md5File\n+          + \" (does not match expected pattern)\");\n+    }\n+    String storedHash \u003d matcher.group(1);\n+    File referencedFile \u003d new File(matcher.group(2));\n+\n+    // Sanity check: Make sure that the file referenced in the .md5 file at\n+    // least has the same name as the file we expect\n+    if (!referencedFile.getName().equals(dataFile.getName())) {\n+      throw new IOException(\n+          \"MD5 file at \" + md5File + \" references file named \" +\n+          referencedFile.getName() + \" but we expected it to reference \" +\n+          dataFile);\n+    }\n+    return new MD5Hash(storedHash);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static MD5Hash readStoredMd5ForFile(File dataFile) throws IOException {\n    File md5File \u003d getDigestFileForFile(dataFile);\n\n    String md5Line;\n    \n    if (!md5File.exists()) {\n      return null;\n    }\n    \n    BufferedReader reader \u003d\n      new BufferedReader(new FileReader(md5File));\n    try {\n      md5Line \u003d reader.readLine();\n      if (md5Line \u003d\u003d null) { md5Line \u003d \"\"; }\n      md5Line \u003d md5Line.trim();\n    } catch (IOException ioe) {\n      throw new IOException(\"Error reading md5 file at \" + md5File, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n    \n    Matcher matcher \u003d LINE_REGEX.matcher(md5Line);\n    if (!matcher.matches()) {\n      throw new IOException(\"Invalid MD5 file at \" + md5File\n          + \" (does not match expected pattern)\");\n    }\n    String storedHash \u003d matcher.group(1);\n    File referencedFile \u003d new File(matcher.group(2));\n\n    // Sanity check: Make sure that the file referenced in the .md5 file at\n    // least has the same name as the file we expect\n    if (!referencedFile.getName().equals(dataFile.getName())) {\n      throw new IOException(\n          \"MD5 file at \" + md5File + \" references file named \" +\n          referencedFile.getName() + \" but we expected it to reference \" +\n          dataFile);\n    }\n    return new MD5Hash(storedHash);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/util/MD5FileUtils.java"
    }
  }
}