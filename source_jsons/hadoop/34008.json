{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GpuResourceAllocator.java",
  "functionName": "getReleasingGpus",
  "functionId": "getReleasingGpus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
  "functionStartLine": 279,
  "functionEndLine": 291,
  "numCommitsSeen": 9,
  "timeTaken": 2187,
  "changeHistory": [
    "71c49fa60faad2504b0411979a6e46e595b97a85",
    "ada8f63d0b3739d245300461387b0516dc92ccf9"
  ],
  "changeHistoryShort": {
    "71c49fa60faad2504b0411979a6e46e595b97a85": "Ybodychange",
    "ada8f63d0b3739d245300461387b0516dc92ccf9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "71c49fa60faad2504b0411979a6e46e595b97a85": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9099. GpuResourceAllocator#getReleasingGpus calculates number of GPUs in a wrong way. Contributed by Szilard Nemeth.\n",
      "commitDate": "30/01/19 7:55 PM",
      "commitName": "71c49fa60faad2504b0411979a6e46e595b97a85",
      "commitAuthor": "Sunil G",
      "commitDateOld": "10/12/18 11:12 AM",
      "commitNameOld": "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 51.36,
      "commitsBetweenForRepo": 345,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,13 @@\n   private synchronized long getReleasingGpus() {\n     long releasingGpus \u003d 0;\n-    Iterator\u003cMap.Entry\u003cGpuDevice, ContainerId\u003e\u003e iter \u003d usedDevices.entrySet()\n-        .iterator();\n-    while (iter.hasNext()) {\n-      ContainerId containerId \u003d iter.next().getValue();\n+    for (ContainerId containerId : ImmutableSet.copyOf(usedDevices.values())) {\n       Container container;\n       if ((container \u003d nmContext.getContainers().get(containerId)) !\u003d null) {\n         if (container.isContainerInFinalStates()) {\n           releasingGpus \u003d releasingGpus + container.getResource()\n               .getResourceInformation(ResourceInformation.GPU_URI).getValue();\n         }\n       }\n     }\n     return releasingGpus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized long getReleasingGpus() {\n    long releasingGpus \u003d 0;\n    for (ContainerId containerId : ImmutableSet.copyOf(usedDevices.values())) {\n      Container container;\n      if ((container \u003d nmContext.getContainers().get(containerId)) !\u003d null) {\n        if (container.isContainerInFinalStates()) {\n          releasingGpus \u003d releasingGpus + container.getResource()\n              .getResourceInformation(ResourceInformation.GPU_URI).getValue();\n        }\n      }\n    }\n    return releasingGpus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
      "extendedDetails": {}
    },
    "ada8f63d0b3739d245300461387b0516dc92ccf9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8423. GPU does not get released even though the application gets killed. (Sunil G via wangda)\n\nChange-Id: I570db7d60f8c6c21762dd618a9207d1107c486a0\n",
      "commitDate": "26/06/18 7:25 PM",
      "commitName": "ada8f63d0b3739d245300461387b0516dc92ccf9",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,16 @@\n+  private synchronized long getReleasingGpus() {\n+    long releasingGpus \u003d 0;\n+    Iterator\u003cMap.Entry\u003cGpuDevice, ContainerId\u003e\u003e iter \u003d usedDevices.entrySet()\n+        .iterator();\n+    while (iter.hasNext()) {\n+      ContainerId containerId \u003d iter.next().getValue();\n+      Container container;\n+      if ((container \u003d nmContext.getContainers().get(containerId)) !\u003d null) {\n+        if (container.isContainerInFinalStates()) {\n+          releasingGpus \u003d releasingGpus + container.getResource()\n+              .getResourceInformation(ResourceInformation.GPU_URI).getValue();\n+        }\n+      }\n+    }\n+    return releasingGpus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized long getReleasingGpus() {\n    long releasingGpus \u003d 0;\n    Iterator\u003cMap.Entry\u003cGpuDevice, ContainerId\u003e\u003e iter \u003d usedDevices.entrySet()\n        .iterator();\n    while (iter.hasNext()) {\n      ContainerId containerId \u003d iter.next().getValue();\n      Container container;\n      if ((container \u003d nmContext.getContainers().get(containerId)) !\u003d null) {\n        if (container.isContainerInFinalStates()) {\n          releasingGpus \u003d releasingGpus + container.getResource()\n              .getResourceInformation(ResourceInformation.GPU_URI).getValue();\n        }\n      }\n    }\n    return releasingGpus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java"
    }
  }
}