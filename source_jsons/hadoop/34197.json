{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuxServices.java",
  "functionName": "initAuxService",
  "functionId": "initAuxService___service-AuxServiceRecord__conf-Configuration__fromConfiguration-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
  "functionStartLine": 441,
  "functionEndLine": 485,
  "numCommitsSeen": 28,
  "timeTaken": 2129,
  "changeHistory": [
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61"
  ],
  "changeHistoryShort": {
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9075.  Add ability to register/remove auxiliary service without restart node manager.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "18/12/18 2:05 PM",
      "commitName": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,45 @@\n+  private AuxiliaryService initAuxService(AuxServiceRecord service,\n+      Configuration conf, boolean fromConfiguration) throws IOException {\n+    final String sName \u003d service.getName();\n+    AuxiliaryService s;\n+    try {\n+      Preconditions\n+          .checkArgument(\n+              validateAuxServiceName(sName),\n+              \"The auxiliary service name: \" + sName + \" is invalid. \" +\n+                  \"The valid service name should only contain a-zA-Z0-9_ \" +\n+                  \"and cannot start with numbers.\");\n+      s \u003d createAuxService(service, conf, fromConfiguration);\n+      if (s \u003d\u003d null) {\n+        throw new YarnRuntimeException(\"No auxiliary service class loaded for\" +\n+            \" \" + sName);\n+      }\n+      // TODO better use s.getName()?\n+      if (!sName.equals(s.getName())) {\n+        LOG.warn(\"The Auxiliary Service named \u0027\" + sName + \"\u0027 in the \"\n+            + \"configuration is for \" + s.getClass() + \" which has \"\n+            + \"a name of \u0027\" + s.getName() + \"\u0027. Because these are \"\n+            + \"not the same tools trying to send ServiceData and read \"\n+            + \"Service Meta Data may have issues unless the refer to \"\n+            + \"the name in the config.\");\n+      }\n+      s.setAuxiliaryLocalPathHandler(auxiliaryLocalPathHandler);\n+      setStateStoreDir(sName, s);\n+      Configuration customConf \u003d new Configuration(conf);\n+      if (service.getConfiguration() !\u003d null) {\n+        for (Entry\u003cString, String\u003e entry : service.getConfiguration()\n+            .getProperties().entrySet()) {\n+          customConf.set(entry.getKey(), entry.getValue());\n+        }\n+      }\n+      s.init(customConf);\n+\n+      LOG.info(\"Initialized auxiliary service \" + sName);\n+    } catch (RuntimeException e) {\n+      LOG.error(\"Failed to initialize \" + sName, e);\n+      throw e;\n+    } catch (ClassNotFoundException e) {\n+      throw new YarnRuntimeException(e);\n+    }\n+    return s;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AuxiliaryService initAuxService(AuxServiceRecord service,\n      Configuration conf, boolean fromConfiguration) throws IOException {\n    final String sName \u003d service.getName();\n    AuxiliaryService s;\n    try {\n      Preconditions\n          .checkArgument(\n              validateAuxServiceName(sName),\n              \"The auxiliary service name: \" + sName + \" is invalid. \" +\n                  \"The valid service name should only contain a-zA-Z0-9_ \" +\n                  \"and cannot start with numbers.\");\n      s \u003d createAuxService(service, conf, fromConfiguration);\n      if (s \u003d\u003d null) {\n        throw new YarnRuntimeException(\"No auxiliary service class loaded for\" +\n            \" \" + sName);\n      }\n      // TODO better use s.getName()?\n      if (!sName.equals(s.getName())) {\n        LOG.warn(\"The Auxiliary Service named \u0027\" + sName + \"\u0027 in the \"\n            + \"configuration is for \" + s.getClass() + \" which has \"\n            + \"a name of \u0027\" + s.getName() + \"\u0027. Because these are \"\n            + \"not the same tools trying to send ServiceData and read \"\n            + \"Service Meta Data may have issues unless the refer to \"\n            + \"the name in the config.\");\n      }\n      s.setAuxiliaryLocalPathHandler(auxiliaryLocalPathHandler);\n      setStateStoreDir(sName, s);\n      Configuration customConf \u003d new Configuration(conf);\n      if (service.getConfiguration() !\u003d null) {\n        for (Entry\u003cString, String\u003e entry : service.getConfiguration()\n            .getProperties().entrySet()) {\n          customConf.set(entry.getKey(), entry.getValue());\n        }\n      }\n      s.init(customConf);\n\n      LOG.info(\"Initialized auxiliary service \" + sName);\n    } catch (RuntimeException e) {\n      LOG.error(\"Failed to initialize \" + sName, e);\n      throw e;\n    } catch (ClassNotFoundException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return s;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java"
    }
  }
}