{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DocumentStoreTimelineWriterImpl.java",
  "functionName": "write",
  "functionId": "write___context-TimelineCollectorContext__data-TimelineEntities__callerUgi-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/DocumentStoreTimelineWriterImpl.java",
  "functionStartLine": 98,
  "functionEndLine": 146,
  "numCommitsSeen": 1,
  "timeTaken": 462,
  "changeHistory": [
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40"
  ],
  "changeHistoryShort": {
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9016 DocumentStore as a backend for ATSv2. Contributed by Sushil Ks.\n",
      "commitDate": "13/03/19 4:45 PM",
      "commitName": "f235a942d5b7cab86f0cb4f5ba285f07cd939a40",
      "commitAuthor": "Vrushali C",
      "diff": "@@ -0,0 +1,49 @@\n+  public TimelineWriteResponse write(TimelineCollectorContext\n+      context, TimelineEntities data, UserGroupInformation callerUgi) {\n+    LOG.debug(\"Writing Timeline Entity for appID : {}\", context.getAppId());\n+    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n+    String subApplicationUser \u003d callerUgi.getShortUserName();\n+\n+    //Avoiding NPE for document id\n+    if (DocumentStoreUtils.isNullOrEmpty(context.getFlowName(),\n+        context.getAppId(), context.getClusterId(), context.getUserId())) {\n+      LOG.warn(\"Found NULL for one of: flowName\u003d{} appId\u003d{} \" +\n+          \"userId\u003d{} clusterId\u003d{} . Not proceeding on writing to store : \" +\n+          storeType);\n+      return putStatus;\n+    }\n+\n+    for (TimelineEntity timelineEntity : data.getEntities()) {\n+      // a set can have at most 1 null\n+      if(timelineEntity \u003d\u003d null) {\n+        continue;\n+      }\n+\n+      TimelineEntityDocument entityDocument;\n+      //If the entity is application, it will be stored in Application\n+      // Collection\n+      if (ApplicationEntity.isApplicationEntity(timelineEntity)) {\n+        entityDocument \u003d createTimelineEntityDoc(context, subApplicationUser,\n+            timelineEntity, true);\n+        // if it\u0027s an application entity, store metrics for aggregation\n+        FlowRunDocument flowRunDoc \u003d createFlowRunDoc(context,\n+            timelineEntity.getMetrics());\n+        // fetch flow activity if App is created or finished\n+        FlowActivityDocument flowActivityDoc \u003d getFlowActivityDoc(context,\n+            timelineEntity, flowRunDoc, entityDocument);\n+        writeApplicationDoc(entityDocument);\n+        writeFlowRunDoc(flowRunDoc);\n+        if(flowActivityDoc !\u003d null) {\n+          storeFlowActivityDoc(flowActivityDoc);\n+        }\n+      } else {\n+        entityDocument \u003d createTimelineEntityDoc(context, subApplicationUser,\n+            timelineEntity, false);\n+        appendSubAppUserIfExists(context, subApplicationUser);\n+        // The entity will be stored in Entity Collection\n+        entityDocument.setCreatedTime(fetchEntityCreationTime(timelineEntity));\n+        writeEntityDoc(entityDocument);\n+      }\n+    }\n+    return putStatus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(TimelineCollectorContext\n      context, TimelineEntities data, UserGroupInformation callerUgi) {\n    LOG.debug(\"Writing Timeline Entity for appID : {}\", context.getAppId());\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n    String subApplicationUser \u003d callerUgi.getShortUserName();\n\n    //Avoiding NPE for document id\n    if (DocumentStoreUtils.isNullOrEmpty(context.getFlowName(),\n        context.getAppId(), context.getClusterId(), context.getUserId())) {\n      LOG.warn(\"Found NULL for one of: flowName\u003d{} appId\u003d{} \" +\n          \"userId\u003d{} clusterId\u003d{} . Not proceeding on writing to store : \" +\n          storeType);\n      return putStatus;\n    }\n\n    for (TimelineEntity timelineEntity : data.getEntities()) {\n      // a set can have at most 1 null\n      if(timelineEntity \u003d\u003d null) {\n        continue;\n      }\n\n      TimelineEntityDocument entityDocument;\n      //If the entity is application, it will be stored in Application\n      // Collection\n      if (ApplicationEntity.isApplicationEntity(timelineEntity)) {\n        entityDocument \u003d createTimelineEntityDoc(context, subApplicationUser,\n            timelineEntity, true);\n        // if it\u0027s an application entity, store metrics for aggregation\n        FlowRunDocument flowRunDoc \u003d createFlowRunDoc(context,\n            timelineEntity.getMetrics());\n        // fetch flow activity if App is created or finished\n        FlowActivityDocument flowActivityDoc \u003d getFlowActivityDoc(context,\n            timelineEntity, flowRunDoc, entityDocument);\n        writeApplicationDoc(entityDocument);\n        writeFlowRunDoc(flowRunDoc);\n        if(flowActivityDoc !\u003d null) {\n          storeFlowActivityDoc(flowActivityDoc);\n        }\n      } else {\n        entityDocument \u003d createTimelineEntityDoc(context, subApplicationUser,\n            timelineEntity, false);\n        appendSubAppUserIfExists(context, subApplicationUser);\n        // The entity will be stored in Entity Collection\n        entityDocument.setCreatedTime(fetchEntityCreationTime(timelineEntity));\n        writeEntityDoc(entityDocument);\n      }\n    }\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/DocumentStoreTimelineWriterImpl.java"
    }
  }
}