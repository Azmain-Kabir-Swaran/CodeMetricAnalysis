{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeletionService.java",
  "functionName": "recover",
  "functionId": "recover___state-NMStateStoreService.RecoveredDeletionServiceState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
  "functionStartLine": 95,
  "functionEndLine": 131,
  "numCommitsSeen": 22,
  "timeTaken": 3888,
  "changeHistory": [
    "65e7469712be6cf393e29ef73cc94727eec81227",
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
    "072360d1286cf1de3f83664755144b4d468dae6e"
  ],
  "changeHistoryShort": {
    "65e7469712be6cf393e29ef73cc94727eec81227": "Ybodychange",
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": "Ymultichange(Yparameterchange,Ybodychange)",
    "072360d1286cf1de3f83664755144b4d468dae6e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65e7469712be6cf393e29ef73cc94727eec81227": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
      "commitDate": "20/08/18 8:14 AM",
      "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 363.29,
      "commitsBetweenForRepo": 3298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,37 @@\n   private void recover(NMStateStoreService.RecoveredDeletionServiceState state)\n       throws IOException {\n-    List\u003cDeletionServiceDeleteTaskProto\u003e taskProtos \u003d state.getTasks();\n     Map\u003cInteger, DeletionTaskRecoveryInfo\u003e idToInfoMap \u003d\n-        new HashMap\u003c\u003e(taskProtos.size());\n-    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003c\u003e();\n-    for (DeletionServiceDeleteTaskProto proto : taskProtos) {\n-      DeletionTaskRecoveryInfo info \u003d\n-          NMProtoUtils.convertProtoToDeletionTaskRecoveryInfo(proto, this);\n-      idToInfoMap.put(info.getTask().getTaskId(), info);\n-      nextTaskId.set(Math.max(nextTaskId.get(), info.getTask().getTaskId()));\n-      successorTasks.addAll(info.getSuccessorTaskIds());\n+        new HashMap\u003cInteger, DeletionTaskRecoveryInfo\u003e();\n+    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003cInteger\u003e();\n+\n+    try (RecoveryIterator\u003cDeletionServiceDeleteTaskProto\u003e it \u003d\n+             state.getIterator()) {\n+      while (it.hasNext()) {\n+        DeletionServiceDeleteTaskProto proto \u003d it.next();\n+        DeletionTaskRecoveryInfo info \u003d\n+            NMProtoUtils.convertProtoToDeletionTaskRecoveryInfo(proto, this);\n+        idToInfoMap.put(info.getTask().getTaskId(), info);\n+        nextTaskId.set(Math.max(nextTaskId.get(), info.getTask().getTaskId()));\n+        successorTasks.addAll(info.getSuccessorTaskIds());\n+      }\n     }\n \n     // restore the task dependencies and schedule the deletion tasks that\n     // have no predecessors\n     final long now \u003d System.currentTimeMillis();\n     for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\n       for (Integer successorId : info.getSuccessorTaskIds()){\n         DeletionTaskRecoveryInfo successor \u003d idToInfoMap.get(successorId);\n         if (successor !\u003d null) {\n           info.getTask().addDeletionTaskDependency(successor.getTask());\n         } else {\n           LOG.error(\"Unable to locate dependency task for deletion task \"\n               + info.getTask().getTaskId());\n         }\n       }\n       if (!successorTasks.contains(info.getTask().getTaskId())) {\n         long msecTilDeletion \u003d info.getDeletionTimestamp() - now;\n         sched.schedule(info.getTask(), msecTilDeletion, TimeUnit.MILLISECONDS);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover(NMStateStoreService.RecoveredDeletionServiceState state)\n      throws IOException {\n    Map\u003cInteger, DeletionTaskRecoveryInfo\u003e idToInfoMap \u003d\n        new HashMap\u003cInteger, DeletionTaskRecoveryInfo\u003e();\n    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003cInteger\u003e();\n\n    try (RecoveryIterator\u003cDeletionServiceDeleteTaskProto\u003e it \u003d\n             state.getIterator()) {\n      while (it.hasNext()) {\n        DeletionServiceDeleteTaskProto proto \u003d it.next();\n        DeletionTaskRecoveryInfo info \u003d\n            NMProtoUtils.convertProtoToDeletionTaskRecoveryInfo(proto, this);\n        idToInfoMap.put(info.getTask().getTaskId(), info);\n        nextTaskId.set(Math.max(nextTaskId.get(), info.getTask().getTaskId()));\n        successorTasks.addAll(info.getSuccessorTaskIds());\n      }\n    }\n\n    // restore the task dependencies and schedule the deletion tasks that\n    // have no predecessors\n    final long now \u003d System.currentTimeMillis();\n    for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\n      for (Integer successorId : info.getSuccessorTaskIds()){\n        DeletionTaskRecoveryInfo successor \u003d idToInfoMap.get(successorId);\n        if (successor !\u003d null) {\n          info.getTask().addDeletionTaskDependency(successor.getTask());\n        } else {\n          LOG.error(\"Unable to locate dependency task for deletion task \"\n              + info.getTask().getTaskId());\n        }\n      }\n      if (!successorTasks.contains(info.getTask().getTaskId())) {\n        long msecTilDeletion \u003d info.getDeletionTimestamp() - now;\n        sched.schedule(info.getTask(), msecTilDeletion, TimeUnit.MILLISECONDS);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
      "extendedDetails": {}
    },
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
      "commitDate": "31/05/17 3:45 AM",
      "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
          "commitDate": "31/05/17 3:45 AM",
          "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "01/11/16 2:21 AM",
          "commitNameOld": "310aa4686eb697f0700a71d33106514c404dab1b",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 211.06,
          "commitsBetweenForRepo": 1194,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  private void recover(RecoveredDeletionServiceState state)\n+  private void recover(NMStateStoreService.RecoveredDeletionServiceState state)\n       throws IOException {\n     List\u003cDeletionServiceDeleteTaskProto\u003e taskProtos \u003d state.getTasks();\n     Map\u003cInteger, DeletionTaskRecoveryInfo\u003e idToInfoMap \u003d\n-        new HashMap\u003cInteger, DeletionTaskRecoveryInfo\u003e(taskProtos.size());\n-    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003cInteger\u003e();\n+        new HashMap\u003c\u003e(taskProtos.size());\n+    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003c\u003e();\n     for (DeletionServiceDeleteTaskProto proto : taskProtos) {\n-      DeletionTaskRecoveryInfo info \u003d parseTaskProto(proto);\n-      idToInfoMap.put(info.task.taskId, info);\n-      nextTaskId.set(Math.max(nextTaskId.get(), info.task.taskId));\n-      successorTasks.addAll(info.successorTaskIds);\n+      DeletionTaskRecoveryInfo info \u003d\n+          NMProtoUtils.convertProtoToDeletionTaskRecoveryInfo(proto, this);\n+      idToInfoMap.put(info.getTask().getTaskId(), info);\n+      nextTaskId.set(Math.max(nextTaskId.get(), info.getTask().getTaskId()));\n+      successorTasks.addAll(info.getSuccessorTaskIds());\n     }\n \n     // restore the task dependencies and schedule the deletion tasks that\n     // have no predecessors\n     final long now \u003d System.currentTimeMillis();\n     for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\n-      for (Integer successorId : info.successorTaskIds){\n+      for (Integer successorId : info.getSuccessorTaskIds()){\n         DeletionTaskRecoveryInfo successor \u003d idToInfoMap.get(successorId);\n         if (successor !\u003d null) {\n-          info.task.addFileDeletionTaskDependency(successor.task);\n+          info.getTask().addDeletionTaskDependency(successor.getTask());\n         } else {\n           LOG.error(\"Unable to locate dependency task for deletion task \"\n-              + info.task.taskId + \" at \" + info.task.getSubDir());\n+              + info.getTask().getTaskId());\n         }\n       }\n-      if (!successorTasks.contains(info.task.taskId)) {\n-        long msecTilDeletion \u003d info.deletionTimestamp - now;\n-        sched.schedule(info.task, msecTilDeletion, TimeUnit.MILLISECONDS);\n+      if (!successorTasks.contains(info.getTask().getTaskId())) {\n+        long msecTilDeletion \u003d info.getDeletionTimestamp() - now;\n+        sched.schedule(info.getTask(), msecTilDeletion, TimeUnit.MILLISECONDS);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recover(NMStateStoreService.RecoveredDeletionServiceState state)\n      throws IOException {\n    List\u003cDeletionServiceDeleteTaskProto\u003e taskProtos \u003d state.getTasks();\n    Map\u003cInteger, DeletionTaskRecoveryInfo\u003e idToInfoMap \u003d\n        new HashMap\u003c\u003e(taskProtos.size());\n    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003c\u003e();\n    for (DeletionServiceDeleteTaskProto proto : taskProtos) {\n      DeletionTaskRecoveryInfo info \u003d\n          NMProtoUtils.convertProtoToDeletionTaskRecoveryInfo(proto, this);\n      idToInfoMap.put(info.getTask().getTaskId(), info);\n      nextTaskId.set(Math.max(nextTaskId.get(), info.getTask().getTaskId()));\n      successorTasks.addAll(info.getSuccessorTaskIds());\n    }\n\n    // restore the task dependencies and schedule the deletion tasks that\n    // have no predecessors\n    final long now \u003d System.currentTimeMillis();\n    for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\n      for (Integer successorId : info.getSuccessorTaskIds()){\n        DeletionTaskRecoveryInfo successor \u003d idToInfoMap.get(successorId);\n        if (successor !\u003d null) {\n          info.getTask().addDeletionTaskDependency(successor.getTask());\n        } else {\n          LOG.error(\"Unable to locate dependency task for deletion task \"\n              + info.getTask().getTaskId());\n        }\n      }\n      if (!successorTasks.contains(info.getTask().getTaskId())) {\n        long msecTilDeletion \u003d info.getDeletionTimestamp() - now;\n        sched.schedule(info.getTask(), msecTilDeletion, TimeUnit.MILLISECONDS);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
          "extendedDetails": {
            "oldValue": "[state-RecoveredDeletionServiceState]",
            "newValue": "[state-NMStateStoreService.RecoveredDeletionServiceState]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
          "commitDate": "31/05/17 3:45 AM",
          "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "01/11/16 2:21 AM",
          "commitNameOld": "310aa4686eb697f0700a71d33106514c404dab1b",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 211.06,
          "commitsBetweenForRepo": 1194,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  private void recover(RecoveredDeletionServiceState state)\n+  private void recover(NMStateStoreService.RecoveredDeletionServiceState state)\n       throws IOException {\n     List\u003cDeletionServiceDeleteTaskProto\u003e taskProtos \u003d state.getTasks();\n     Map\u003cInteger, DeletionTaskRecoveryInfo\u003e idToInfoMap \u003d\n-        new HashMap\u003cInteger, DeletionTaskRecoveryInfo\u003e(taskProtos.size());\n-    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003cInteger\u003e();\n+        new HashMap\u003c\u003e(taskProtos.size());\n+    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003c\u003e();\n     for (DeletionServiceDeleteTaskProto proto : taskProtos) {\n-      DeletionTaskRecoveryInfo info \u003d parseTaskProto(proto);\n-      idToInfoMap.put(info.task.taskId, info);\n-      nextTaskId.set(Math.max(nextTaskId.get(), info.task.taskId));\n-      successorTasks.addAll(info.successorTaskIds);\n+      DeletionTaskRecoveryInfo info \u003d\n+          NMProtoUtils.convertProtoToDeletionTaskRecoveryInfo(proto, this);\n+      idToInfoMap.put(info.getTask().getTaskId(), info);\n+      nextTaskId.set(Math.max(nextTaskId.get(), info.getTask().getTaskId()));\n+      successorTasks.addAll(info.getSuccessorTaskIds());\n     }\n \n     // restore the task dependencies and schedule the deletion tasks that\n     // have no predecessors\n     final long now \u003d System.currentTimeMillis();\n     for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\n-      for (Integer successorId : info.successorTaskIds){\n+      for (Integer successorId : info.getSuccessorTaskIds()){\n         DeletionTaskRecoveryInfo successor \u003d idToInfoMap.get(successorId);\n         if (successor !\u003d null) {\n-          info.task.addFileDeletionTaskDependency(successor.task);\n+          info.getTask().addDeletionTaskDependency(successor.getTask());\n         } else {\n           LOG.error(\"Unable to locate dependency task for deletion task \"\n-              + info.task.taskId + \" at \" + info.task.getSubDir());\n+              + info.getTask().getTaskId());\n         }\n       }\n-      if (!successorTasks.contains(info.task.taskId)) {\n-        long msecTilDeletion \u003d info.deletionTimestamp - now;\n-        sched.schedule(info.task, msecTilDeletion, TimeUnit.MILLISECONDS);\n+      if (!successorTasks.contains(info.getTask().getTaskId())) {\n+        long msecTilDeletion \u003d info.getDeletionTimestamp() - now;\n+        sched.schedule(info.getTask(), msecTilDeletion, TimeUnit.MILLISECONDS);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recover(NMStateStoreService.RecoveredDeletionServiceState state)\n      throws IOException {\n    List\u003cDeletionServiceDeleteTaskProto\u003e taskProtos \u003d state.getTasks();\n    Map\u003cInteger, DeletionTaskRecoveryInfo\u003e idToInfoMap \u003d\n        new HashMap\u003c\u003e(taskProtos.size());\n    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003c\u003e();\n    for (DeletionServiceDeleteTaskProto proto : taskProtos) {\n      DeletionTaskRecoveryInfo info \u003d\n          NMProtoUtils.convertProtoToDeletionTaskRecoveryInfo(proto, this);\n      idToInfoMap.put(info.getTask().getTaskId(), info);\n      nextTaskId.set(Math.max(nextTaskId.get(), info.getTask().getTaskId()));\n      successorTasks.addAll(info.getSuccessorTaskIds());\n    }\n\n    // restore the task dependencies and schedule the deletion tasks that\n    // have no predecessors\n    final long now \u003d System.currentTimeMillis();\n    for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\n      for (Integer successorId : info.getSuccessorTaskIds()){\n        DeletionTaskRecoveryInfo successor \u003d idToInfoMap.get(successorId);\n        if (successor !\u003d null) {\n          info.getTask().addDeletionTaskDependency(successor.getTask());\n        } else {\n          LOG.error(\"Unable to locate dependency task for deletion task \"\n              + info.getTask().getTaskId());\n        }\n      }\n      if (!successorTasks.contains(info.getTask().getTaskId())) {\n        long msecTilDeletion \u003d info.getDeletionTimestamp() - now;\n        sched.schedule(info.getTask(), msecTilDeletion, TimeUnit.MILLISECONDS);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
          "extendedDetails": {}
        }
      ]
    },
    "072360d1286cf1de3f83664755144b4d468dae6e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1339. Recover DeletionService state upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/14 6:02 PM",
      "commitName": "072360d1286cf1de3f83664755144b4d468dae6e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,32 @@\n+  private void recover(RecoveredDeletionServiceState state)\n+      throws IOException {\n+    List\u003cDeletionServiceDeleteTaskProto\u003e taskProtos \u003d state.getTasks();\n+    Map\u003cInteger, DeletionTaskRecoveryInfo\u003e idToInfoMap \u003d\n+        new HashMap\u003cInteger, DeletionTaskRecoveryInfo\u003e(taskProtos.size());\n+    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003cInteger\u003e();\n+    for (DeletionServiceDeleteTaskProto proto : taskProtos) {\n+      DeletionTaskRecoveryInfo info \u003d parseTaskProto(proto);\n+      idToInfoMap.put(info.task.taskId, info);\n+      nextTaskId.set(Math.max(nextTaskId.get(), info.task.taskId));\n+      successorTasks.addAll(info.successorTaskIds);\n+    }\n+\n+    // restore the task dependencies and schedule the deletion tasks that\n+    // have no predecessors\n+    final long now \u003d System.currentTimeMillis();\n+    for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\n+      for (Integer successorId : info.successorTaskIds){\n+        DeletionTaskRecoveryInfo successor \u003d idToInfoMap.get(successorId);\n+        if (successor !\u003d null) {\n+          info.task.addFileDeletionTaskDependency(successor.task);\n+        } else {\n+          LOG.error(\"Unable to locate dependency task for deletion task \"\n+              + info.task.taskId + \" at \" + info.task.getSubDir());\n+        }\n+      }\n+      if (!successorTasks.contains(info.task.taskId)) {\n+        long msecTilDeletion \u003d info.deletionTimestamp - now;\n+        sched.schedule(info.task, msecTilDeletion, TimeUnit.MILLISECONDS);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover(RecoveredDeletionServiceState state)\n      throws IOException {\n    List\u003cDeletionServiceDeleteTaskProto\u003e taskProtos \u003d state.getTasks();\n    Map\u003cInteger, DeletionTaskRecoveryInfo\u003e idToInfoMap \u003d\n        new HashMap\u003cInteger, DeletionTaskRecoveryInfo\u003e(taskProtos.size());\n    Set\u003cInteger\u003e successorTasks \u003d new HashSet\u003cInteger\u003e();\n    for (DeletionServiceDeleteTaskProto proto : taskProtos) {\n      DeletionTaskRecoveryInfo info \u003d parseTaskProto(proto);\n      idToInfoMap.put(info.task.taskId, info);\n      nextTaskId.set(Math.max(nextTaskId.get(), info.task.taskId));\n      successorTasks.addAll(info.successorTaskIds);\n    }\n\n    // restore the task dependencies and schedule the deletion tasks that\n    // have no predecessors\n    final long now \u003d System.currentTimeMillis();\n    for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\n      for (Integer successorId : info.successorTaskIds){\n        DeletionTaskRecoveryInfo successor \u003d idToInfoMap.get(successorId);\n        if (successor !\u003d null) {\n          info.task.addFileDeletionTaskDependency(successor.task);\n        } else {\n          LOG.error(\"Unable to locate dependency task for deletion task \"\n              + info.task.taskId + \" at \" + info.task.getSubDir());\n        }\n      }\n      if (!successorTasks.contains(info.task.taskId)) {\n        long msecTilDeletion \u003d info.deletionTimestamp - now;\n        sched.schedule(info.task, msecTilDeletion, TimeUnit.MILLISECONDS);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java"
    }
  }
}