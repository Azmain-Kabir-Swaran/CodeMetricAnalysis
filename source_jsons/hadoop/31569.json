{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowRunEntityReader.java",
  "functionName": "constructFilterListBasedOnFields",
  "functionId": "constructFilterListBasedOnFields___cfsInFields-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
  "functionStartLine": 157,
  "functionEndLine": 198,
  "numCommitsSeen": 21,
  "timeTaken": 4948,
  "changeHistory": [
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
    "1f710484e5b8ab4d5c67379c012004e8a4242d15"
  ],
  "changeHistoryShort": {
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d": "Ymultichange(Yparameterchange,Ybodychange)",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ybodychange",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Ymultichange(Yexceptionschange,Ybodychange)",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": "Ybodychange",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ybodychange",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": "Yfilerename",
    "1f710484e5b8ab4d5c67379c012004e8a4242d15": "Yintroduced"
  },
  "changeHistoryDetails": {
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7581. HBase filters are not constructed correctly in ATSv2. Contributed by Habio Chen.\n",
      "commitDate": "20/03/18 7:41 PM",
      "commitName": "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7581. HBase filters are not constructed correctly in ATSv2. Contributed by Habio Chen.\n",
          "commitDate": "20/03/18 7:41 PM",
          "commitName": "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 7:00 AM",
          "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthorOld": "Rohith Sharma K S",
          "daysBetweenCommits": 31.49,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,42 @@\n-  protected FilterList constructFilterListBasedOnFields() throws IOException {\n+  protected FilterList constructFilterListBasedOnFields(\n+      Set\u003cString\u003e cfsInFields) throws IOException {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n         new FamilyFilter(CompareOp.EQUAL, new BinaryComparator(\n             FlowRunColumnFamily.INFO.getBytes()));\n     TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n     // If multiple entities have to be retrieved, check if metrics have to be\n     // retrieved and if not, add a filter so that metrics can be excluded.\n     // Metrics are always returned if we are reading a single entity.\n     if (!isSingleEntityRead()\n         \u0026\u0026 !hasField(dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n       FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n       infoColFamilyList.addFilter(infoColumnFamily);\n+      cfsInFields.add(Bytes.toString(FlowRunColumnFamily.INFO.getBytes()));\n       infoColFamilyList.addFilter(new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(FlowRunColumnPrefix.METRIC\n               .getColumnPrefixBytes(\"\"))));\n       list.addFilter(infoColFamilyList);\n     } else {\n       // Check if metricsToRetrieve are specified and if they are, create a\n       // filter list for info column family by adding flow run tables columns\n       // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n       // will have METRICS added to it if metricsToRetrieve are specified\n       // (in augmentParams()).\n       TimelineFilterList metricsToRetrieve \u003d\n           dataToRetrieve.getMetricsToRetrieve();\n       if (metricsToRetrieve !\u003d null\n           \u0026\u0026 !metricsToRetrieve.getFilterList().isEmpty()) {\n         FilterList infoColFamilyList \u003d new FilterList();\n         infoColFamilyList.addFilter(infoColumnFamily);\n+        cfsInFields.add(Bytes.toString(FlowRunColumnFamily.INFO.getBytes()));\n         FilterList columnsList \u003d updateFixedColumns();\n         columnsList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n             FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n         infoColFamilyList.addFilter(columnsList);\n         list.addFilter(infoColFamilyList);\n       }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFields(\n      Set\u003cString\u003e cfsInFields) throws IOException {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL, new BinaryComparator(\n            FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // If multiple entities have to be retrieved, check if metrics have to be\n    // retrieved and if not, add a filter so that metrics can be excluded.\n    // Metrics are always returned if we are reading a single entity.\n    if (!isSingleEntityRead()\n        \u0026\u0026 !hasField(dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      cfsInFields.add(Bytes.toString(FlowRunColumnFamily.INFO.getBytes()));\n      infoColFamilyList.addFilter(new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(FlowRunColumnPrefix.METRIC\n              .getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    } else {\n      // Check if metricsToRetrieve are specified and if they are, create a\n      // filter list for info column family by adding flow run tables columns\n      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n      // will have METRICS added to it if metricsToRetrieve are specified\n      // (in augmentParams()).\n      TimelineFilterList metricsToRetrieve \u003d\n          dataToRetrieve.getMetricsToRetrieve();\n      if (metricsToRetrieve !\u003d null\n          \u0026\u0026 !metricsToRetrieve.getFilterList().isEmpty()) {\n        FilterList infoColFamilyList \u003d new FilterList();\n        infoColFamilyList.addFilter(infoColumnFamily);\n        cfsInFields.add(Bytes.toString(FlowRunColumnFamily.INFO.getBytes()));\n        FilterList columnsList \u003d updateFixedColumns();\n        columnsList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n        infoColFamilyList.addFilter(columnsList);\n        list.addFilter(infoColFamilyList);\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[cfsInFields-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7581. HBase filters are not constructed correctly in ATSv2. Contributed by Habio Chen.\n",
          "commitDate": "20/03/18 7:41 PM",
          "commitName": "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 7:00 AM",
          "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthorOld": "Rohith Sharma K S",
          "daysBetweenCommits": 31.49,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,42 @@\n-  protected FilterList constructFilterListBasedOnFields() throws IOException {\n+  protected FilterList constructFilterListBasedOnFields(\n+      Set\u003cString\u003e cfsInFields) throws IOException {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n         new FamilyFilter(CompareOp.EQUAL, new BinaryComparator(\n             FlowRunColumnFamily.INFO.getBytes()));\n     TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n     // If multiple entities have to be retrieved, check if metrics have to be\n     // retrieved and if not, add a filter so that metrics can be excluded.\n     // Metrics are always returned if we are reading a single entity.\n     if (!isSingleEntityRead()\n         \u0026\u0026 !hasField(dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n       FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n       infoColFamilyList.addFilter(infoColumnFamily);\n+      cfsInFields.add(Bytes.toString(FlowRunColumnFamily.INFO.getBytes()));\n       infoColFamilyList.addFilter(new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(FlowRunColumnPrefix.METRIC\n               .getColumnPrefixBytes(\"\"))));\n       list.addFilter(infoColFamilyList);\n     } else {\n       // Check if metricsToRetrieve are specified and if they are, create a\n       // filter list for info column family by adding flow run tables columns\n       // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n       // will have METRICS added to it if metricsToRetrieve are specified\n       // (in augmentParams()).\n       TimelineFilterList metricsToRetrieve \u003d\n           dataToRetrieve.getMetricsToRetrieve();\n       if (metricsToRetrieve !\u003d null\n           \u0026\u0026 !metricsToRetrieve.getFilterList().isEmpty()) {\n         FilterList infoColFamilyList \u003d new FilterList();\n         infoColFamilyList.addFilter(infoColumnFamily);\n+        cfsInFields.add(Bytes.toString(FlowRunColumnFamily.INFO.getBytes()));\n         FilterList columnsList \u003d updateFixedColumns();\n         columnsList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n             FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n         infoColFamilyList.addFilter(columnsList);\n         list.addFilter(infoColFamilyList);\n       }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFields(\n      Set\u003cString\u003e cfsInFields) throws IOException {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL, new BinaryComparator(\n            FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // If multiple entities have to be retrieved, check if metrics have to be\n    // retrieved and if not, add a filter so that metrics can be excluded.\n    // Metrics are always returned if we are reading a single entity.\n    if (!isSingleEntityRead()\n        \u0026\u0026 !hasField(dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      cfsInFields.add(Bytes.toString(FlowRunColumnFamily.INFO.getBytes()));\n      infoColFamilyList.addFilter(new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(FlowRunColumnPrefix.METRIC\n              .getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    } else {\n      // Check if metricsToRetrieve are specified and if they are, create a\n      // filter list for info column family by adding flow run tables columns\n      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n      // will have METRICS added to it if metricsToRetrieve are specified\n      // (in augmentParams()).\n      TimelineFilterList metricsToRetrieve \u003d\n          dataToRetrieve.getMetricsToRetrieve();\n      if (metricsToRetrieve !\u003d null\n          \u0026\u0026 !metricsToRetrieve.getFilterList().isEmpty()) {\n        FilterList infoColFamilyList \u003d new FilterList();\n        infoColFamilyList.addFilter(infoColumnFamily);\n        cfsInFields.add(Bytes.toString(FlowRunColumnFamily.INFO.getBytes()));\n        FilterList columnsList \u003d updateFixedColumns();\n        columnsList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n        infoColFamilyList.addFilter(columnsList);\n        list.addFilter(infoColFamilyList);\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() throws IOException {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL, new BinaryComparator(\n            FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // If multiple entities have to be retrieved, check if metrics have to be\n    // retrieved and if not, add a filter so that metrics can be excluded.\n    // Metrics are always returned if we are reading a single entity.\n    if (!isSingleEntityRead()\n        \u0026\u0026 !hasField(dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(FlowRunColumnPrefix.METRIC\n              .getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    } else {\n      // Check if metricsToRetrieve are specified and if they are, create a\n      // filter list for info column family by adding flow run tables columns\n      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n      // will have METRICS added to it if metricsToRetrieve are specified\n      // (in augmentParams()).\n      TimelineFilterList metricsToRetrieve \u003d\n          dataToRetrieve.getMetricsToRetrieve();\n      if (metricsToRetrieve !\u003d null\n          \u0026\u0026 !metricsToRetrieve.getFilterList().isEmpty()) {\n        FilterList infoColFamilyList \u003d new FilterList();\n        infoColFamilyList.addFilter(infoColumnFamily);\n        FilterList columnsList \u003d updateFixedColumns();\n        columnsList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n        infoColFamilyList.addFilter(columnsList);\n        list.addFilter(infoColFamilyList);\n      }\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() throws IOException {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL, new BinaryComparator(\n            FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // If multiple entities have to be retrieved, check if metrics have to be\n    // retrieved and if not, add a filter so that metrics can be excluded.\n    // Metrics are always returned if we are reading a single entity.\n    if (!isSingleEntityRead()\n        \u0026\u0026 !hasField(dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(FlowRunColumnPrefix.METRIC\n              .getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    } else {\n      // Check if metricsToRetrieve are specified and if they are, create a\n      // filter list for info column family by adding flow run tables columns\n      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n      // will have METRICS added to it if metricsToRetrieve are specified\n      // (in augmentParams()).\n      TimelineFilterList metricsToRetrieve \u003d\n          dataToRetrieve.getMetricsToRetrieve();\n      if (metricsToRetrieve !\u003d null\n          \u0026\u0026 !metricsToRetrieve.getFilterList().isEmpty()) {\n        FilterList infoColFamilyList \u003d new FilterList();\n        infoColFamilyList.addFilter(infoColumnFamily);\n        FilterList columnsList \u003d updateFixedColumns();\n        columnsList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n        infoColFamilyList.addFilter(columnsList);\n        list.addFilter(infoColFamilyList);\n      }\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,39 @@\n   protected FilterList constructFilterListBasedOnFields() throws IOException {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n-        new FamilyFilter(CompareOp.EQUAL,\n-           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n+        new FamilyFilter(CompareOp.EQUAL, new BinaryComparator(\n+            FlowRunColumnFamily.INFO.getBytes()));\n     TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n     // If multiple entities have to be retrieved, check if metrics have to be\n     // retrieved and if not, add a filter so that metrics can be excluded.\n     // Metrics are always returned if we are reading a single entity.\n-    if (!isSingleEntityRead() \u0026\u0026 !TimelineStorageUtils.hasField(\n-        dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n+    if (!isSingleEntityRead()\n+        \u0026\u0026 !hasField(dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n       FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n       infoColFamilyList.addFilter(infoColumnFamily);\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n+      infoColFamilyList.addFilter(new QualifierFilter(CompareOp.NOT_EQUAL,\n+          new BinaryPrefixComparator(FlowRunColumnPrefix.METRIC\n+              .getColumnPrefixBytes(\"\"))));\n       list.addFilter(infoColFamilyList);\n     } else {\n       // Check if metricsToRetrieve are specified and if they are, create a\n       // filter list for info column family by adding flow run tables columns\n       // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n       // will have METRICS added to it if metricsToRetrieve are specified\n       // (in augmentParams()).\n       TimelineFilterList metricsToRetrieve \u003d\n           dataToRetrieve.getMetricsToRetrieve();\n-      if (metricsToRetrieve !\u003d null \u0026\u0026\n-          !metricsToRetrieve.getFilterList().isEmpty()) {\n+      if (metricsToRetrieve !\u003d null\n+          \u0026\u0026 !metricsToRetrieve.getFilterList().isEmpty()) {\n         FilterList infoColFamilyList \u003d new FilterList();\n         infoColFamilyList.addFilter(infoColumnFamily);\n         FilterList columnsList \u003d updateFixedColumns();\n-        columnsList.addFilter(\n-            TimelineFilterUtils.createHBaseFilterList(\n-                FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n+        columnsList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n+            FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n         infoColFamilyList.addFilter(columnsList);\n         list.addFilter(infoColFamilyList);\n       }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() throws IOException {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL, new BinaryComparator(\n            FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // If multiple entities have to be retrieved, check if metrics have to be\n    // retrieved and if not, add a filter so that metrics can be excluded.\n    // Metrics are always returned if we are reading a single entity.\n    if (!isSingleEntityRead()\n        \u0026\u0026 !hasField(dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(FlowRunColumnPrefix.METRIC\n              .getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    } else {\n      // Check if metricsToRetrieve are specified and if they are, create a\n      // filter list for info column family by adding flow run tables columns\n      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n      // will have METRICS added to it if metricsToRetrieve are specified\n      // (in augmentParams()).\n      TimelineFilterList metricsToRetrieve \u003d\n          dataToRetrieve.getMetricsToRetrieve();\n      if (metricsToRetrieve !\u003d null\n          \u0026\u0026 !metricsToRetrieve.getFilterList().isEmpty()) {\n        FilterList infoColFamilyList \u003d new FilterList();\n        infoColFamilyList.addFilter(infoColumnFamily);\n        FilterList columnsList \u003d updateFixedColumns();\n        columnsList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n        infoColFamilyList.addFilter(columnsList);\n        list.addFilter(infoColFamilyList);\n      }\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,41 @@\n-  protected FilterList constructFilterListBasedOnFields() {\n+  protected FilterList constructFilterListBasedOnFields() throws IOException {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n-\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n         new FamilyFilter(CompareOp.EQUAL,\n            new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n     TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n-    // Metrics not required.\n-    if (!isSingleEntityRead() \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL)) {\n+    // If multiple entities have to be retrieved, check if metrics have to be\n+    // retrieved and if not, add a filter so that metrics can be excluded.\n+    // Metrics are always returned if we are reading a single entity.\n+    if (!isSingleEntityRead() \u0026\u0026 !TimelineStorageUtils.hasField(\n+        dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n       FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n       infoColFamilyList.addFilter(infoColumnFamily);\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n-          FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n+              FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n       list.addFilter(infoColFamilyList);\n-    }\n-    if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n-        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n-      FilterList infoColFamilyList \u003d new FilterList();\n-      infoColFamilyList.addFilter(infoColumnFamily);\n-      infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-          FlowRunColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n-      list.addFilter(infoColFamilyList);\n+    } else {\n+      // Check if metricsToRetrieve are specified and if they are, create a\n+      // filter list for info column family by adding flow run tables columns\n+      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n+      // will have METRICS added to it if metricsToRetrieve are specified\n+      // (in augmentParams()).\n+      TimelineFilterList metricsToRetrieve \u003d\n+          dataToRetrieve.getMetricsToRetrieve();\n+      if (metricsToRetrieve !\u003d null \u0026\u0026\n+          !metricsToRetrieve.getFilterList().isEmpty()) {\n+        FilterList infoColFamilyList \u003d new FilterList();\n+        infoColFamilyList.addFilter(infoColumnFamily);\n+        FilterList columnsList \u003d updateFixedColumns();\n+        columnsList.addFilter(\n+            TimelineFilterUtils.createHBaseFilterList(\n+                FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n+        infoColFamilyList.addFilter(columnsList);\n+        list.addFilter(infoColFamilyList);\n+      }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFields() throws IOException {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // If multiple entities have to be retrieved, check if metrics have to be\n    // retrieved and if not, add a filter so that metrics can be excluded.\n    // Metrics are always returned if we are reading a single entity.\n    if (!isSingleEntityRead() \u0026\u0026 !TimelineStorageUtils.hasField(\n        dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    } else {\n      // Check if metricsToRetrieve are specified and if they are, create a\n      // filter list for info column family by adding flow run tables columns\n      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n      // will have METRICS added to it if metricsToRetrieve are specified\n      // (in augmentParams()).\n      TimelineFilterList metricsToRetrieve \u003d\n          dataToRetrieve.getMetricsToRetrieve();\n      if (metricsToRetrieve !\u003d null \u0026\u0026\n          !metricsToRetrieve.getFilterList().isEmpty()) {\n        FilterList infoColFamilyList \u003d new FilterList();\n        infoColFamilyList.addFilter(infoColumnFamily);\n        FilterList columnsList \u003d updateFixedColumns();\n        columnsList.addFilter(\n            TimelineFilterUtils.createHBaseFilterList(\n                FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n        infoColFamilyList.addFilter(columnsList);\n        list.addFilter(infoColFamilyList);\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,41 @@\n-  protected FilterList constructFilterListBasedOnFields() {\n+  protected FilterList constructFilterListBasedOnFields() throws IOException {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n-\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n         new FamilyFilter(CompareOp.EQUAL,\n            new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n     TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n-    // Metrics not required.\n-    if (!isSingleEntityRead() \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL)) {\n+    // If multiple entities have to be retrieved, check if metrics have to be\n+    // retrieved and if not, add a filter so that metrics can be excluded.\n+    // Metrics are always returned if we are reading a single entity.\n+    if (!isSingleEntityRead() \u0026\u0026 !TimelineStorageUtils.hasField(\n+        dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n       FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n       infoColFamilyList.addFilter(infoColumnFamily);\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n-          FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n+              FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n       list.addFilter(infoColFamilyList);\n-    }\n-    if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n-        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n-      FilterList infoColFamilyList \u003d new FilterList();\n-      infoColFamilyList.addFilter(infoColumnFamily);\n-      infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-          FlowRunColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n-      list.addFilter(infoColFamilyList);\n+    } else {\n+      // Check if metricsToRetrieve are specified and if they are, create a\n+      // filter list for info column family by adding flow run tables columns\n+      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n+      // will have METRICS added to it if metricsToRetrieve are specified\n+      // (in augmentParams()).\n+      TimelineFilterList metricsToRetrieve \u003d\n+          dataToRetrieve.getMetricsToRetrieve();\n+      if (metricsToRetrieve !\u003d null \u0026\u0026\n+          !metricsToRetrieve.getFilterList().isEmpty()) {\n+        FilterList infoColFamilyList \u003d new FilterList();\n+        infoColFamilyList.addFilter(infoColumnFamily);\n+        FilterList columnsList \u003d updateFixedColumns();\n+        columnsList.addFilter(\n+            TimelineFilterUtils.createHBaseFilterList(\n+                FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n+        infoColFamilyList.addFilter(columnsList);\n+        list.addFilter(infoColFamilyList);\n+      }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFields() throws IOException {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // If multiple entities have to be retrieved, check if metrics have to be\n    // retrieved and if not, add a filter so that metrics can be excluded.\n    // Metrics are always returned if we are reading a single entity.\n    if (!isSingleEntityRead() \u0026\u0026 !TimelineStorageUtils.hasField(\n        dataToRetrieve.getFieldsToRetrieve(), Field.METRICS)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    } else {\n      // Check if metricsToRetrieve are specified and if they are, create a\n      // filter list for info column family by adding flow run tables columns\n      // and a list for metrics to retrieve. Pls note that fieldsToRetrieve\n      // will have METRICS added to it if metricsToRetrieve are specified\n      // (in augmentParams()).\n      TimelineFilterList metricsToRetrieve \u003d\n          dataToRetrieve.getMetricsToRetrieve();\n      if (metricsToRetrieve !\u003d null \u0026\u0026\n          !metricsToRetrieve.getFilterList().isEmpty()) {\n        FilterList infoColFamilyList \u003d new FilterList();\n        infoColFamilyList.addFilter(infoColumnFamily);\n        FilterList columnsList \u003d updateFixedColumns();\n        columnsList.addFilter(\n            TimelineFilterUtils.createHBaseFilterList(\n                FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n        infoColFamilyList.addFilter(columnsList);\n        list.addFilter(infoColFamilyList);\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4409. Fix javadoc and checkstyle issues in timelineservice code (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   protected FilterList constructFilterListBasedOnFields() {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n \n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n         new FamilyFilter(CompareOp.EQUAL,\n            new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n     TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n     // Metrics not required.\n-    if (!singleEntityRead \u0026\u0026\n+    if (!isSingleEntityRead() \u0026\u0026\n         !dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) \u0026\u0026\n         !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL)) {\n       FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n       infoColFamilyList.addFilter(infoColumnFamily);\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n           FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n       list.addFilter(infoColFamilyList);\n     }\n     if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n         !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n       FilterList infoColFamilyList \u003d new FilterList();\n       infoColFamilyList.addFilter(infoColumnFamily);\n       infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n           FlowRunColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n       list.addFilter(infoColFamilyList);\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // Metrics not required.\n    if (!isSingleEntityRead() \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n          FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    }\n    if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n      FilterList infoColFamilyList \u003d new FilterList();\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          FlowRunColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n      list.addFilter(infoColFamilyList);\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   protected FilterList constructFilterListBasedOnFields() {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n \n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n         new FamilyFilter(CompareOp.EQUAL,\n            new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n+    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n     // Metrics not required.\n-    if (!singleEntityRead \u0026\u0026 !fieldsToRetrieve.contains(Field.METRICS) \u0026\u0026\n-        !fieldsToRetrieve.contains(Field.ALL)) {\n+    if (!singleEntityRead \u0026\u0026\n+        !dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) \u0026\u0026\n+        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL)) {\n       FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n       infoColFamilyList.addFilter(infoColumnFamily);\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n           FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n       list.addFilter(infoColFamilyList);\n     }\n-    if (metricsToRetrieve !\u003d null \u0026\u0026\n-        !metricsToRetrieve.getFilterList().isEmpty()) {\n+    if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n+        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n       FilterList infoColFamilyList \u003d new FilterList();\n       infoColFamilyList.addFilter(infoColumnFamily);\n       infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-          FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n+          FlowRunColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n       list.addFilter(infoColFamilyList);\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // Metrics not required.\n    if (!singleEntityRead \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n          FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    }\n    if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n      FilterList infoColFamilyList \u003d new FilterList();\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          FlowRunColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n      list.addFilter(infoColFamilyList);\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": {
      "type": "Yfilerename",
      "commitMessage": "YARN-4200. Refactor reader classes in storage to nest under hbase\nspecific package name. Contributed by Li Lu.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "cc16683cefe2611cf4de7819496aa54854f5394c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n    // Metrics not required.\n    if (!singleEntityRead \u0026\u0026 !fieldsToRetrieve.contains(Field.METRICS) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n          FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    }\n    if (metricsToRetrieve !\u003d null \u0026\u0026\n        !metricsToRetrieve.getFilterList().isEmpty()) {\n      FilterList infoColFamilyList \u003d new FilterList();\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n      list.addFilter(infoColFamilyList);\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FlowRunEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java"
      }
    },
    "1f710484e5b8ab4d5c67379c012004e8a4242d15": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3862. Support for fetching specific configs and metrics based on prefixes (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,28 @@\n+  protected FilterList constructFilterListBasedOnFields() {\n+    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n+\n+    // By default fetch everything in INFO column family.\n+    FamilyFilter infoColumnFamily \u003d\n+        new FamilyFilter(CompareOp.EQUAL,\n+           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n+    // Metrics not required.\n+    if (!singleEntityRead \u0026\u0026 !fieldsToRetrieve.contains(Field.METRICS) \u0026\u0026\n+        !fieldsToRetrieve.contains(Field.ALL)) {\n+      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n+      infoColFamilyList.addFilter(infoColumnFamily);\n+      infoColFamilyList.addFilter(\n+          new QualifierFilter(CompareOp.NOT_EQUAL,\n+          new BinaryPrefixComparator(\n+          FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n+      list.addFilter(infoColFamilyList);\n+    }\n+    if (metricsToRetrieve !\u003d null \u0026\u0026\n+        !metricsToRetrieve.getFilterList().isEmpty()) {\n+      FilterList infoColFamilyList \u003d new FilterList();\n+      infoColFamilyList.addFilter(infoColumnFamily);\n+      infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n+          FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n+      list.addFilter(infoColFamilyList);\n+    }\n+    return list;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));\n    // Metrics not required.\n    if (!singleEntityRead \u0026\u0026 !fieldsToRetrieve.contains(Field.METRICS) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL)) {\n      FilterList infoColFamilyList \u003d new FilterList(Operator.MUST_PASS_ONE);\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n          FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(\"\"))));\n      list.addFilter(infoColFamilyList);\n    }\n    if (metricsToRetrieve !\u003d null \u0026\u0026\n        !metricsToRetrieve.getFilterList().isEmpty()) {\n      FilterList infoColFamilyList \u003d new FilterList();\n      infoColFamilyList.addFilter(infoColumnFamily);\n      infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          FlowRunColumnPrefix.METRIC, metricsToRetrieve));\n      list.addFilter(infoColFamilyList);\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FlowRunEntityReader.java"
    }
  }
}