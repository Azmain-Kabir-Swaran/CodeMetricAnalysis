{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeTimelineCollectorManager.java",
  "functionName": "doPostPut",
  "functionId": "doPostPut___appId-ApplicationId__collector-TimelineCollector",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
  "functionStartLine": 236,
  "functionEndLine": 255,
  "numCommitsSeen": 21,
  "timeTaken": 2116,
  "changeHistory": [
    "7fd6ae24798cd3fdd77dbb00089a922407026e02",
    "354be99dbf3b6effb45032b574210fd7161d83d4",
    "7594d1de7bbc34cd2e64202095a5e1757154d7d0",
    "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8"
  ],
  "changeHistoryShort": {
    "7fd6ae24798cd3fdd77dbb00089a922407026e02": "Ybodychange",
    "354be99dbf3b6effb45032b574210fd7161d83d4": "Ybodychange",
    "7594d1de7bbc34cd2e64202095a5e1757154d7d0": "Ybodychange",
    "a1b6d7456fa37b7b418dd08178ea73ed5c1de124": "Ymultichange(Yrename,Ymodifierchange)",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7fd6ae24798cd3fdd77dbb00089a922407026e02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6134. [ATSv2 Security] Regenerate delegation token for app just before token expires if app collector is active. Contributed by Varun Saxena\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "7fd6ae24798cd3fdd77dbb00089a922407026e02",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "354be99dbf3b6effb45032b574210fd7161d83d4",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,20 @@\n   protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n     try {\n       // Get context info from NM\n       updateTimelineCollectorContext(appId, collector);\n       // Generate token for app collector.\n       org.apache.hadoop.yarn.api.records.Token token \u003d null;\n       if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n           collector instanceof AppLevelTimelineCollector) {\n         AppLevelTimelineCollector appCollector \u003d\n-            (AppLevelTimelineCollector)collector;\n-        Token\u003cTimelineDelegationTokenIdentifier\u003e timelineToken \u003d\n-            generateTokenForAppCollector(appCollector.getAppUser());\n-        long renewalDelay \u003d (tokenRenewInterval \u003e TIME_BEFORE_RENEW_DATE) ?\n-            tokenRenewInterval - TIME_BEFORE_RENEW_DATE : tokenRenewInterval;\n-        Future\u003c?\u003e renewalFuture \u003d\n-            tokenRenewalExecutor.schedule(new CollectorTokenRenewer(appId),\n-                renewalDelay, TimeUnit.MILLISECONDS);\n-        appCollector.setDelegationTokenAndFutureForApp(timelineToken,\n-            renewalFuture);\n-        token \u003d org.apache.hadoop.yarn.api.records.Token.newInstance(\n-            timelineToken.getIdentifier(), timelineToken.getKind().toString(),\n-            timelineToken.getPassword(), timelineToken.getService().toString());\n+            (AppLevelTimelineCollector) collector;\n+        token \u003d generateTokenAndSetTimer(appId, appCollector);\n       }\n       // Report to NM if a new collector is added.\n       reportNewCollectorInfoToNM(appId, token);\n     } catch (YarnException | IOException e) {\n       // throw exception here as it cannot be used if failed communicate with NM\n       LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    try {\n      // Get context info from NM\n      updateTimelineCollectorContext(appId, collector);\n      // Generate token for app collector.\n      org.apache.hadoop.yarn.api.records.Token token \u003d null;\n      if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n          collector instanceof AppLevelTimelineCollector) {\n        AppLevelTimelineCollector appCollector \u003d\n            (AppLevelTimelineCollector) collector;\n        token \u003d generateTokenAndSetTimer(appId, appCollector);\n      }\n      // Report to NM if a new collector is added.\n      reportNewCollectorInfoToNM(appId, token);\n    } catch (YarnException | IOException e) {\n      // throw exception here as it cannot be used if failed communicate with NM\n      LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "354be99dbf3b6effb45032b574210fd7161d83d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6133. [ATSv2 Security] Renew delegation token for app automatically if an app collector is active. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "354be99dbf3b6effb45032b574210fd7161d83d4",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "7594d1de7bbc34cd2e64202095a5e1757154d7d0",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,31 @@\n   protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n     try {\n       // Get context info from NM\n       updateTimelineCollectorContext(appId, collector);\n       // Generate token for app collector.\n       org.apache.hadoop.yarn.api.records.Token token \u003d null;\n       if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n           collector instanceof AppLevelTimelineCollector) {\n         AppLevelTimelineCollector appCollector \u003d\n             (AppLevelTimelineCollector)collector;\n         Token\u003cTimelineDelegationTokenIdentifier\u003e timelineToken \u003d\n             generateTokenForAppCollector(appCollector.getAppUser());\n-        appCollector.setDelegationTokenForApp(timelineToken);\n+        long renewalDelay \u003d (tokenRenewInterval \u003e TIME_BEFORE_RENEW_DATE) ?\n+            tokenRenewInterval - TIME_BEFORE_RENEW_DATE : tokenRenewInterval;\n+        Future\u003c?\u003e renewalFuture \u003d\n+            tokenRenewalExecutor.schedule(new CollectorTokenRenewer(appId),\n+                renewalDelay, TimeUnit.MILLISECONDS);\n+        appCollector.setDelegationTokenAndFutureForApp(timelineToken,\n+            renewalFuture);\n         token \u003d org.apache.hadoop.yarn.api.records.Token.newInstance(\n             timelineToken.getIdentifier(), timelineToken.getKind().toString(),\n             timelineToken.getPassword(), timelineToken.getService().toString());\n       }\n       // Report to NM if a new collector is added.\n-      reportNewCollectorToNM(appId, token);\n+      reportNewCollectorInfoToNM(appId, token);\n     } catch (YarnException | IOException e) {\n       // throw exception here as it cannot be used if failed communicate with NM\n       LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    try {\n      // Get context info from NM\n      updateTimelineCollectorContext(appId, collector);\n      // Generate token for app collector.\n      org.apache.hadoop.yarn.api.records.Token token \u003d null;\n      if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n          collector instanceof AppLevelTimelineCollector) {\n        AppLevelTimelineCollector appCollector \u003d\n            (AppLevelTimelineCollector)collector;\n        Token\u003cTimelineDelegationTokenIdentifier\u003e timelineToken \u003d\n            generateTokenForAppCollector(appCollector.getAppUser());\n        long renewalDelay \u003d (tokenRenewInterval \u003e TIME_BEFORE_RENEW_DATE) ?\n            tokenRenewInterval - TIME_BEFORE_RENEW_DATE : tokenRenewInterval;\n        Future\u003c?\u003e renewalFuture \u003d\n            tokenRenewalExecutor.schedule(new CollectorTokenRenewer(appId),\n                renewalDelay, TimeUnit.MILLISECONDS);\n        appCollector.setDelegationTokenAndFutureForApp(timelineToken,\n            renewalFuture);\n        token \u003d org.apache.hadoop.yarn.api.records.Token.newInstance(\n            timelineToken.getIdentifier(), timelineToken.getKind().toString(),\n            timelineToken.getPassword(), timelineToken.getService().toString());\n      }\n      // Report to NM if a new collector is added.\n      reportNewCollectorInfoToNM(appId, token);\n    } catch (YarnException | IOException e) {\n      // throw exception here as it cannot be used if failed communicate with NM\n      LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "7594d1de7bbc34cd2e64202095a5e1757154d7d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6130. [ATSv2 Security] Generate a delegation token for AM when app collector is created and pass it to AM via NM and RM. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "7594d1de7bbc34cd2e64202095a5e1757154d7d0",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "879de51206ddef132c092ee21e8b6c6e5976a56e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,25 @@\n   protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n     try {\n       // Get context info from NM\n       updateTimelineCollectorContext(appId, collector);\n+      // Generate token for app collector.\n+      org.apache.hadoop.yarn.api.records.Token token \u003d null;\n+      if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n+          collector instanceof AppLevelTimelineCollector) {\n+        AppLevelTimelineCollector appCollector \u003d\n+            (AppLevelTimelineCollector)collector;\n+        Token\u003cTimelineDelegationTokenIdentifier\u003e timelineToken \u003d\n+            generateTokenForAppCollector(appCollector.getAppUser());\n+        appCollector.setDelegationTokenForApp(timelineToken);\n+        token \u003d org.apache.hadoop.yarn.api.records.Token.newInstance(\n+            timelineToken.getIdentifier(), timelineToken.getKind().toString(),\n+            timelineToken.getPassword(), timelineToken.getService().toString());\n+      }\n       // Report to NM if a new collector is added.\n-      reportNewCollectorToNM(appId);\n+      reportNewCollectorToNM(appId, token);\n     } catch (YarnException | IOException e) {\n       // throw exception here as it cannot be used if failed communicate with NM\n       LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    try {\n      // Get context info from NM\n      updateTimelineCollectorContext(appId, collector);\n      // Generate token for app collector.\n      org.apache.hadoop.yarn.api.records.Token token \u003d null;\n      if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n          collector instanceof AppLevelTimelineCollector) {\n        AppLevelTimelineCollector appCollector \u003d\n            (AppLevelTimelineCollector)collector;\n        Token\u003cTimelineDelegationTokenIdentifier\u003e timelineToken \u003d\n            generateTokenForAppCollector(appCollector.getAppUser());\n        appCollector.setDelegationTokenForApp(timelineToken);\n        token \u003d org.apache.hadoop.yarn.api.records.Token.newInstance(\n            timelineToken.getIdentifier(), timelineToken.getKind().toString(),\n            timelineToken.getPassword(), timelineToken.getService().toString());\n      }\n      // Report to NM if a new collector is added.\n      reportNewCollectorToNM(appId, token);\n    } catch (YarnException | IOException e) {\n      // throw exception here as it cannot be used if failed communicate with NM\n      LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "a1b6d7456fa37b7b418dd08178ea73ed5c1de124": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "YARN-5018. Online aggregation logic should not run immediately after collectors got started (Li Lu via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5018. Online aggregation logic should not run immediately after collectors got started (Li Lu via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  public void postPut(ApplicationId appId, TimelineCollector collector) {\n+  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n     try {\n       // Get context info from NM\n       updateTimelineCollectorContext(appId, collector);\n       // Report to NM if a new collector is added.\n       reportNewCollectorToNM(appId);\n     } catch (YarnException | IOException e) {\n       // throw exception here as it cannot be used if failed communicate with NM\n       LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    try {\n      // Get context info from NM\n      updateTimelineCollectorContext(appId, collector);\n      // Report to NM if a new collector is added.\n      reportNewCollectorToNM(appId);\n    } catch (YarnException | IOException e) {\n      // throw exception here as it cannot be used if failed communicate with NM\n      LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n      throw new YarnRuntimeException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
          "extendedDetails": {
            "oldValue": "postPut",
            "newValue": "doPostPut"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5018. Online aggregation logic should not run immediately after collectors got started (Li Lu via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  public void postPut(ApplicationId appId, TimelineCollector collector) {\n+  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n     try {\n       // Get context info from NM\n       updateTimelineCollectorContext(appId, collector);\n       // Report to NM if a new collector is added.\n       reportNewCollectorToNM(appId);\n     } catch (YarnException | IOException e) {\n       // throw exception here as it cannot be used if failed communicate with NM\n       LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    try {\n      // Get context info from NM\n      updateTimelineCollectorContext(appId, collector);\n      // Report to NM if a new collector is added.\n      reportNewCollectorToNM(appId);\n    } catch (YarnException | IOException e) {\n      // throw exception here as it cannot be used if failed communicate with NM\n      LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n      throw new YarnRuntimeException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        }
      ]
    },
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3390. Reuse TimelineCollectorManager for RM (Zhijie Shen via sjlee)\n\n(cherry picked from commit 58221188811e0f61d842dac89e1f4ad4fd8aa182)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,12 @@\n+  public void postPut(ApplicationId appId, TimelineCollector collector) {\n+    try {\n+      // Get context info from NM\n+      updateTimelineCollectorContext(appId, collector);\n+      // Report to NM if a new collector is added.\n+      reportNewCollectorToNM(appId);\n+    } catch (YarnException | IOException e) {\n+      // throw exception here as it cannot be used if failed communicate with NM\n+      LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n+      throw new YarnRuntimeException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void postPut(ApplicationId appId, TimelineCollector collector) {\n    try {\n      // Get context info from NM\n      updateTimelineCollectorContext(appId, collector);\n      // Report to NM if a new collector is added.\n      reportNewCollectorToNM(appId);\n    } catch (YarnException | IOException e) {\n      // throw exception here as it cannot be used if failed communicate with NM\n      LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java"
    }
  }
}