{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalJavaKeyStoreProvider.java",
  "functionName": "initFileSystem",
  "functionId": "initFileSystem___uri-URI",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
  "functionStartLine": 123,
  "functionEndLine": 147,
  "numCommitsSeen": 8,
  "timeTaken": 1642,
  "changeHistory": [
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
    "2dbc40e6086026ef02747223982aa68f2d328ade",
    "860b8373c3a851386b8cd2d4265dd35e5aabc941"
  ],
  "changeHistoryShort": {
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": "Ymultichange(Yparameterchange,Ybodychange)",
    "2dbc40e6086026ef02747223982aa68f2d328ade": "Ybodychange",
    "860b8373c3a851386b8cd2d4265dd35e5aabc941": "Yintroduced"
  },
  "changeHistoryDetails": {
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12942. hadoop credential commands non-obviously use password of \"none\" (Mike Yoder via lmccay)",
      "commitDate": "11/05/16 11:30 AM",
      "commitName": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthor": "Larry McCay",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12942. hadoop credential commands non-obviously use password of \"none\" (Mike Yoder via lmccay)",
          "commitDate": "11/05/16 11:30 AM",
          "commitName": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
          "commitAuthor": "Larry McCay",
          "commitDateOld": "05/06/15 1:11 PM",
          "commitNameOld": "2dbc40e6086026ef02747223982aa68f2d328ade",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 340.93,
          "commitsBetweenForRepo": 2242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  protected void initFileSystem(URI uri, Configuration conf)\n+  protected void initFileSystem(URI uri)\n       throws IOException {\n-    super.initFileSystem(uri, conf);\n+    super.initFileSystem(uri);\n     try {\n       file \u003d new File(new URI(getPath().toString()));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"initialized local file as \u0027\" + file + \"\u0027.\");\n         if (file.exists()) {\n           LOG.debug(\"the local file exists and is size \" + file.length());\n           if (LOG.isTraceEnabled()) {\n             if (file.canRead()) {\n               LOG.trace(\"we can read the local file.\");\n             }\n             if (file.canWrite()) {\n               LOG.trace(\"we can write the local file.\");\n             }\n           }\n         } else {\n           LOG.debug(\"the local file does not exist.\");\n         }\n       }\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void initFileSystem(URI uri)\n      throws IOException {\n    super.initFileSystem(uri);\n    try {\n      file \u003d new File(new URI(getPath().toString()));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"initialized local file as \u0027\" + file + \"\u0027.\");\n        if (file.exists()) {\n          LOG.debug(\"the local file exists and is size \" + file.length());\n          if (LOG.isTraceEnabled()) {\n            if (file.canRead()) {\n              LOG.trace(\"we can read the local file.\");\n            }\n            if (file.canWrite()) {\n              LOG.trace(\"we can write the local file.\");\n            }\n          }\n        } else {\n          LOG.debug(\"the local file does not exist.\");\n        }\n      }\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
          "extendedDetails": {
            "oldValue": "[uri-URI, conf-Configuration]",
            "newValue": "[uri-URI]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12942. hadoop credential commands non-obviously use password of \"none\" (Mike Yoder via lmccay)",
          "commitDate": "11/05/16 11:30 AM",
          "commitName": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
          "commitAuthor": "Larry McCay",
          "commitDateOld": "05/06/15 1:11 PM",
          "commitNameOld": "2dbc40e6086026ef02747223982aa68f2d328ade",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 340.93,
          "commitsBetweenForRepo": 2242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  protected void initFileSystem(URI uri, Configuration conf)\n+  protected void initFileSystem(URI uri)\n       throws IOException {\n-    super.initFileSystem(uri, conf);\n+    super.initFileSystem(uri);\n     try {\n       file \u003d new File(new URI(getPath().toString()));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"initialized local file as \u0027\" + file + \"\u0027.\");\n         if (file.exists()) {\n           LOG.debug(\"the local file exists and is size \" + file.length());\n           if (LOG.isTraceEnabled()) {\n             if (file.canRead()) {\n               LOG.trace(\"we can read the local file.\");\n             }\n             if (file.canWrite()) {\n               LOG.trace(\"we can write the local file.\");\n             }\n           }\n         } else {\n           LOG.debug(\"the local file does not exist.\");\n         }\n       }\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void initFileSystem(URI uri)\n      throws IOException {\n    super.initFileSystem(uri);\n    try {\n      file \u003d new File(new URI(getPath().toString()));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"initialized local file as \u0027\" + file + \"\u0027.\");\n        if (file.exists()) {\n          LOG.debug(\"the local file exists and is size \" + file.length());\n          if (LOG.isTraceEnabled()) {\n            if (file.canRead()) {\n              LOG.trace(\"we can read the local file.\");\n            }\n            if (file.canWrite()) {\n              LOG.trace(\"we can write the local file.\");\n            }\n          }\n        } else {\n          LOG.debug(\"the local file does not exist.\");\n        }\n      }\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "2dbc40e6086026ef02747223982aa68f2d328ade": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12059. S3Credentials should support use of CredentialProvider. Contributed by Sean Busbey.\n",
      "commitDate": "05/06/15 1:11 PM",
      "commitName": "2dbc40e6086026ef02747223982aa68f2d328ade",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "28/05/15 3:01 PM",
      "commitNameOld": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 7.92,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,25 @@\n   protected void initFileSystem(URI uri, Configuration conf)\n       throws IOException {\n     super.initFileSystem(uri, conf);\n     try {\n       file \u003d new File(new URI(getPath().toString()));\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"initialized local file as \u0027\" + file + \"\u0027.\");\n+        if (file.exists()) {\n+          LOG.debug(\"the local file exists and is size \" + file.length());\n+          if (LOG.isTraceEnabled()) {\n+            if (file.canRead()) {\n+              LOG.trace(\"we can read the local file.\");\n+            }\n+            if (file.canWrite()) {\n+              LOG.trace(\"we can write the local file.\");\n+            }\n+          }\n+        } else {\n+          LOG.debug(\"the local file does not exist.\");\n+        }\n+      }\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initFileSystem(URI uri, Configuration conf)\n      throws IOException {\n    super.initFileSystem(uri, conf);\n    try {\n      file \u003d new File(new URI(getPath().toString()));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"initialized local file as \u0027\" + file + \"\u0027.\");\n        if (file.exists()) {\n          LOG.debug(\"the local file exists and is size \" + file.length());\n          if (LOG.isTraceEnabled()) {\n            if (file.canRead()) {\n              LOG.trace(\"we can read the local file.\");\n            }\n            if (file.canWrite()) {\n              LOG.trace(\"we can write the local file.\");\n            }\n          }\n        } else {\n          LOG.debug(\"the local file does not exist.\");\n        }\n      }\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "860b8373c3a851386b8cd2d4265dd35e5aabc941": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11934. Use of JavaKeyStoreProvider in LdapGroupsMapping causes infinite loop. Contributed by Larry McCay.\n",
      "commitDate": "28/05/15 3:01 PM",
      "commitName": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,9 @@\n+  protected void initFileSystem(URI uri, Configuration conf)\n+      throws IOException {\n+    super.initFileSystem(uri, conf);\n+    try {\n+      file \u003d new File(new URI(getPath().toString()));\n+    } catch (URISyntaxException e) {\n+      throw new IOException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initFileSystem(URI uri, Configuration conf)\n      throws IOException {\n    super.initFileSystem(uri, conf);\n    try {\n      file \u003d new File(new URI(getPath().toString()));\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java"
    }
  }
}