{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPServiceActor.java",
  "functionName": "sendLifeline",
  "functionId": "sendLifeline",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
  "functionStartLine": 1082,
  "functionEndLine": 1101,
  "numCommitsSeen": 125,
  "timeTaken": 2033,
  "changeHistory": [
    "2759689d7d23001f007cb0dbe2521de90734dd5c"
  ],
  "changeHistoryShort": {
    "2759689d7d23001f007cb0dbe2521de90734dd5c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2759689d7d23001f007cb0dbe2521de90734dd5c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9239. DataNode Lifeline Protocol: an alternative protocol for reporting DataNode liveness. Contributed by Chris Nauroth.\n",
      "commitDate": "04/03/16 3:29 PM",
      "commitName": "2759689d7d23001f007cb0dbe2521de90734dd5c",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,20 @@\n+    private void sendLifeline() throws IOException {\n+      StorageReport[] reports \u003d\n+          dn.getFSDataset().getStorageReports(bpos.getBlockPoolId());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Sending lifeline with \" + reports.length + \" storage \" +\n+                  \" reports from service actor: \" + BPServiceActor.this);\n+      }\n+      VolumeFailureSummary volumeFailureSummary \u003d dn.getFSDataset()\n+          .getVolumeFailureSummary();\n+      int numFailedVolumes \u003d volumeFailureSummary !\u003d null ?\n+          volumeFailureSummary.getFailedStorageLocations().length : 0;\n+      lifelineNamenode.sendLifeline(bpRegistration,\n+                                    reports,\n+                                    dn.getFSDataset().getCacheCapacity(),\n+                                    dn.getFSDataset().getCacheUsed(),\n+                                    dn.getXmitsInProgress(),\n+                                    dn.getXceiverCount(),\n+                                    numFailedVolumes,\n+                                    volumeFailureSummary);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void sendLifeline() throws IOException {\n      StorageReport[] reports \u003d\n          dn.getFSDataset().getStorageReports(bpos.getBlockPoolId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Sending lifeline with \" + reports.length + \" storage \" +\n                  \" reports from service actor: \" + BPServiceActor.this);\n      }\n      VolumeFailureSummary volumeFailureSummary \u003d dn.getFSDataset()\n          .getVolumeFailureSummary();\n      int numFailedVolumes \u003d volumeFailureSummary !\u003d null ?\n          volumeFailureSummary.getFailedStorageLocations().length : 0;\n      lifelineNamenode.sendLifeline(bpRegistration,\n                                    reports,\n                                    dn.getFSDataset().getCacheCapacity(),\n                                    dn.getFSDataset().getCacheUsed(),\n                                    dn.getXmitsInProgress(),\n                                    dn.getXceiverCount(),\n                                    numFailedVolumes,\n                                    volumeFailureSummary);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java"
    }
  }
}