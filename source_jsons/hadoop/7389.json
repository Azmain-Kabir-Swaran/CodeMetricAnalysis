{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TransferFsImage.java",
  "functionName": "downloadEditsToStorage",
  "functionId": "downloadEditsToStorage___fsName-URL__log-RemoteEditLog__dstStorage-NNStorage",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
  "functionStartLine": 148,
  "functionEndLine": 196,
  "numCommitsSeen": 69,
  "timeTaken": 4002,
  "changeHistory": [
    "66c5bcfc6df4dfe824b664be302f5ee3193b7187",
    "94a1632fcb677fda6f4d812614026417f1d0a360",
    "dbd22b23c2d68b97b4da47215897906f06f978e3",
    "0f595915a388305edbb3ce928415571811d304e8",
    "045dc880e13271737b3cf316296e92fb95806663",
    "09593530fb6ccb93fd123f9497b93f7ec733210f",
    "3704e091a8d6c4181dfb29ac9d950e997b1170c0",
    "e2091275dc26745c4e919cd767283d32608a1817",
    "fb30240b87500c1b3c9f8036bb9e6712ec8e2655",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "eb6e44b1ba58ed971360a39ea5d5ce02ae65aa0f",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "66c5bcfc6df4dfe824b664be302f5ee3193b7187": "Ybodychange",
    "94a1632fcb677fda6f4d812614026417f1d0a360": "Ybodychange",
    "dbd22b23c2d68b97b4da47215897906f06f978e3": "Ybodychange",
    "0f595915a388305edbb3ce928415571811d304e8": "Ybodychange",
    "045dc880e13271737b3cf316296e92fb95806663": "Yparameterchange",
    "09593530fb6ccb93fd123f9497b93f7ec733210f": "Ybodychange",
    "3704e091a8d6c4181dfb29ac9d950e997b1170c0": "Ybodychange",
    "e2091275dc26745c4e919cd767283d32608a1817": "Ybodychange",
    "fb30240b87500c1b3c9f8036bb9e6712ec8e2655": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "eb6e44b1ba58ed971360a39ea5d5ce02ae65aa0f": "Ybodychange",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "66c5bcfc6df4dfe824b664be302f5ee3193b7187": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6453. Use Time#monotonicNow to avoid system clock reset. Contributed by Liang Xie.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598144 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 2:24 PM",
      "commitName": "66c5bcfc6df4dfe824b664be302f5ee3193b7187",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "14/04/14 9:49 PM",
      "commitNameOld": "01af3a31772ee820e932ac70973072e9509a30fa",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 43.69,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n     String fileid \u003d ImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         finalFileName);\n     assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : finalFiles) {\n       if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n-    final long milliTime \u003d System.currentTimeMillis();\n+    final long milliTime \u003d Time.monotonicNow();\n     String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n         log.getStartTxId(), log.getEndTxId(), milliTime);\n     List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         tmpFileName);\n     getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n         finalFiles.get(0).length() + \" bytes.\");\n \n     CheckpointFaultInjector.getInstance().beforeEditsRename();\n \n     for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n       File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId(), milliTime);\n       File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n       }\n       boolean success \u003d tmpFile.renameTo(finalizedFile);\n       if (!success) {\n         LOG.warn(\"Unable to rename edits file from \" + tmpFile\n             + \" to \" + finalizedFile);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d ImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        finalFileName);\n    assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : finalFiles) {\n      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    final long milliTime \u003d Time.monotonicNow();\n    String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n        log.getStartTxId(), log.getEndTxId(), milliTime);\n    List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        tmpFileName);\n    getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n        finalFiles.get(0).length() + \" bytes.\");\n\n    CheckpointFaultInjector.getInstance().beforeEditsRename();\n\n    for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n      File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId(), milliTime);\n      File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n      }\n      boolean success \u003d tmpFile.renameTo(finalizedFile);\n      if (!success) {\n        LOG.warn(\"Unable to rename edits file from \" + tmpFile\n            + \" to \" + finalizedFile);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "94a1632fcb677fda6f4d812614026417f1d0a360": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/14 1:25 PM",
      "commitName": "94a1632fcb677fda6f4d812614026417f1d0a360",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "08/03/14 1:15 PM",
      "commitNameOld": "dbd22b23c2d68b97b4da47215897906f06f978e3",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n-    String fileid \u003d GetImageServlet.getParamStringForLog(\n+    String fileid \u003d ImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         finalFileName);\n     assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : finalFiles) {\n       if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n     final long milliTime \u003d System.currentTimeMillis();\n     String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n         log.getStartTxId(), log.getEndTxId(), milliTime);\n     List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         tmpFileName);\n     getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n         finalFiles.get(0).length() + \" bytes.\");\n \n     CheckpointFaultInjector.getInstance().beforeEditsRename();\n \n     for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n       File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId(), milliTime);\n       File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n       }\n       boolean success \u003d tmpFile.renameTo(finalizedFile);\n       if (!success) {\n         LOG.warn(\"Unable to rename edits file from \" + tmpFile\n             + \" to \" + finalizedFile);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d ImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        finalFileName);\n    assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : finalFiles) {\n      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    final long milliTime \u003d System.currentTimeMillis();\n    String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n        log.getStartTxId(), log.getEndTxId(), milliTime);\n    List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        tmpFileName);\n    getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n        finalFiles.get(0).length() + \" bytes.\");\n\n    CheckpointFaultInjector.getInstance().beforeEditsRename();\n\n    for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n      File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId(), milliTime);\n      File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n      }\n      boolean success \u003d tmpFile.renameTo(finalizedFile);\n      if (!success) {\n        LOG.warn(\"Unable to rename edits file from \" + tmpFile\n            + \" to \" + finalizedFile);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "dbd22b23c2d68b97b4da47215897906f06f978e3": {
      "type": "Ybodychange",
      "commitMessage": "Revert HDFS-3405 for recommit with correct renamed files\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575610 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/14 1:15 PM",
      "commitName": "dbd22b23c2d68b97b4da47215897906f06f978e3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/03/14 4:39 PM",
      "commitNameOld": "0f595915a388305edbb3ce928415571811d304e8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n-    String fileid \u003d ImageServlet.getParamStringForLog(\n+    String fileid \u003d GetImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         finalFileName);\n     assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : finalFiles) {\n       if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n     final long milliTime \u003d System.currentTimeMillis();\n     String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n         log.getStartTxId(), log.getEndTxId(), milliTime);\n     List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         tmpFileName);\n     getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n         finalFiles.get(0).length() + \" bytes.\");\n \n     CheckpointFaultInjector.getInstance().beforeEditsRename();\n \n     for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n       File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId(), milliTime);\n       File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n       }\n       boolean success \u003d tmpFile.renameTo(finalizedFile);\n       if (!success) {\n         LOG.warn(\"Unable to rename edits file from \" + tmpFile\n             + \" to \" + finalizedFile);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        finalFileName);\n    assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : finalFiles) {\n      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    final long milliTime \u003d System.currentTimeMillis();\n    String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n        log.getStartTxId(), log.getEndTxId(), milliTime);\n    List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        tmpFileName);\n    getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n        finalFiles.get(0).length() + \" bytes.\");\n\n    CheckpointFaultInjector.getInstance().beforeEditsRename();\n\n    for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n      File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId(), milliTime);\n      File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n      }\n      boolean success \u003d tmpFile.renameTo(finalizedFile);\n      if (!success) {\n        LOG.warn(\"Unable to rename edits file from \" + tmpFile\n            + \" to \" + finalizedFile);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "0f595915a388305edbb3ce928415571811d304e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575457 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/14 4:39 PM",
      "commitName": "0f595915a388305edbb3ce928415571811d304e8",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "27/02/14 5:21 PM",
      "commitNameOld": "e9a17c8ce0656a4e5d47401ca22a575c5f5f66db",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 7.97,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n-    String fileid \u003d GetImageServlet.getParamStringForLog(\n+    String fileid \u003d ImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         finalFileName);\n     assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : finalFiles) {\n       if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n     final long milliTime \u003d System.currentTimeMillis();\n     String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n         log.getStartTxId(), log.getEndTxId(), milliTime);\n     List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         tmpFileName);\n     getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n         finalFiles.get(0).length() + \" bytes.\");\n \n     CheckpointFaultInjector.getInstance().beforeEditsRename();\n \n     for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n       File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId(), milliTime);\n       File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n       }\n       boolean success \u003d tmpFile.renameTo(finalizedFile);\n       if (!success) {\n         LOG.warn(\"Unable to rename edits file from \" + tmpFile\n             + \" to \" + finalizedFile);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d ImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        finalFileName);\n    assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : finalFiles) {\n      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    final long milliTime \u003d System.currentTimeMillis();\n    String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n        log.getStartTxId(), log.getEndTxId(), milliTime);\n    List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        tmpFileName);\n    getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n        finalFiles.get(0).length() + \" bytes.\");\n\n    CheckpointFaultInjector.getInstance().beforeEditsRename();\n\n    for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n      File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId(), milliTime);\n      File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n      }\n      boolean success \u003d tmpFile.renameTo(finalizedFile);\n      if (!success) {\n        LOG.warn(\"Unable to rename edits file from \" + tmpFile\n            + \" to \" + finalizedFile);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "045dc880e13271737b3cf316296e92fb95806663": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5312. Generate HTTP/HTTPS URL in DFSUtil#getInfoServer() based on the configured http policy. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 10:01 AM",
      "commitName": "045dc880e13271737b3cf316296e92fb95806663",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "25/11/13 5:16 PM",
      "commitNameOld": "d8a23834614581a292aad214dddcbcc4bbe86d27",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 10.7,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n-  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n+  static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n     String fileid \u003d GetImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         finalFileName);\n     assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : finalFiles) {\n       if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n     final long milliTime \u003d System.currentTimeMillis();\n     String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n         log.getStartTxId(), log.getEndTxId(), milliTime);\n     List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n         tmpFileName);\n     getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n         finalFiles.get(0).length() + \" bytes.\");\n \n     CheckpointFaultInjector.getInstance().beforeEditsRename();\n \n     for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n       File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId(), milliTime);\n       File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n           log.getStartTxId(), log.getEndTxId());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n       }\n       boolean success \u003d tmpFile.renameTo(finalizedFile);\n       if (!success) {\n         LOG.warn(\"Unable to rename edits file from \" + tmpFile\n             + \" to \" + finalizedFile);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(URL fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        finalFileName);\n    assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : finalFiles) {\n      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    final long milliTime \u003d System.currentTimeMillis();\n    String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n        log.getStartTxId(), log.getEndTxId(), milliTime);\n    List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        tmpFileName);\n    getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n        finalFiles.get(0).length() + \" bytes.\");\n\n    CheckpointFaultInjector.getInstance().beforeEditsRename();\n\n    for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n      File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId(), milliTime);\n      File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n      }\n      boolean success \u003d tmpFile.renameTo(finalizedFile);\n      if (!success) {\n        LOG.warn(\"Unable to rename edits file from \" + tmpFile\n            + \" to \" + finalizedFile);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {
        "oldValue": "[fsName-String, log-RemoteEditLog, dstStorage-NNStorage]",
        "newValue": "[fsName-URL, log-RemoteEditLog, dstStorage-NNStorage]"
      }
    },
    "09593530fb6ccb93fd123f9497b93f7ec733210f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4300. TransferFsImage.downloadEditsToStorage should use a tmp file for destination. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481987 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/13 10:47 AM",
      "commitName": "09593530fb6ccb93fd123f9497b93f7ec733210f",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "29/04/13 5:35 PM",
      "commitNameOld": "3704e091a8d6c4181dfb29ac9d950e997b1170c0",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 13.72,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,49 @@\n   static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n     String fileid \u003d GetImageServlet.getParamStringForLog(\n         log, dstStorage);\n-    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n+    String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n-    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n-    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n+    List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n+        finalFileName);\n+    assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n     \n-    for (File f : dstFiles) {\n+    for (File f : finalFiles) {\n       if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n-      } else {\n+      } else if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n-    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n-    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n-        dstFiles.get(0).length() + \" bytes.\");\n+    final long milliTime \u003d System.currentTimeMillis();\n+    String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n+        log.getStartTxId(), log.getEndTxId(), milliTime);\n+    List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n+        tmpFileName);\n+    getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n+    LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n+        finalFiles.get(0).length() + \" bytes.\");\n+\n+    CheckpointFaultInjector.getInstance().beforeEditsRename();\n+\n+    for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n+      File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n+          log.getStartTxId(), log.getEndTxId(), milliTime);\n+      File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n+          log.getStartTxId(), log.getEndTxId());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n+      }\n+      boolean success \u003d tmpFile.renameTo(finalizedFile);\n+      if (!success) {\n+        LOG.warn(\"Unable to rename edits file from \" + tmpFile\n+            + \" to \" + finalizedFile);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String finalFileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e finalFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        finalFileName);\n    assert !finalFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : finalFiles) {\n      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    final long milliTime \u003d System.currentTimeMillis();\n    String tmpFileName \u003d NNStorage.getTemporaryEditsFileName(\n        log.getStartTxId(), log.getEndTxId(), milliTime);\n    List\u003cFile\u003e tmpFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS,\n        tmpFileName);\n    getFileClient(fsName, fileid, tmpFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + tmpFiles.get(0).getName() + \" size \" +\n        finalFiles.get(0).length() + \" bytes.\");\n\n    CheckpointFaultInjector.getInstance().beforeEditsRename();\n\n    for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) {\n      File tmpFile \u003d NNStorage.getTemporaryEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId(), milliTime);\n      File finalizedFile \u003d NNStorage.getFinalizedEditsFile(sd,\n          log.getStartTxId(), log.getEndTxId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Renaming \" + tmpFile + \" to \" + finalizedFile);\n      }\n      boolean success \u003d tmpFile.renameTo(finalizedFile);\n      if (!success) {\n        LOG.warn(\"Unable to rename edits file from \" + tmpFile\n            + \" to \" + finalizedFile);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "3704e091a8d6c4181dfb29ac9d950e997b1170c0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4610. Use common utils FileUtil#setReadable/Writable/Executable and FileUtil#canRead/Write/Execute. Contrbitued by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477427 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 5:35 PM",
      "commitName": "3704e091a8d6c4181dfb29ac9d950e997b1170c0",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "29/04/13 3:40 PM",
      "commitNameOld": "e2091275dc26745c4e919cd767283d32608a1817",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n     String fileid \u003d GetImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String fileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n     assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : dstFiles) {\n-      if (f.exists() \u0026\u0026 f.canRead()) {\n+      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n     getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n         dstFiles.get(0).length() + \" bytes.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : dstFiles) {\n      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n        dstFiles.get(0).length() + \" bytes.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "e2091275dc26745c4e919cd767283d32608a1817": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4610. Reverting the patch Jenkins build is not run.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 3:40 PM",
      "commitName": "e2091275dc26745c4e919cd767283d32608a1817",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "29/04/13 3:26 PM",
      "commitNameOld": "fb30240b87500c1b3c9f8036bb9e6712ec8e2655",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n     String fileid \u003d GetImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String fileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n     assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : dstFiles) {\n-      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n+      if (f.exists() \u0026\u0026 f.canRead()) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n     getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n         dstFiles.get(0).length() + \" bytes.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : dstFiles) {\n      if (f.exists() \u0026\u0026 f.canRead()) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n        dstFiles.get(0).length() + \" bytes.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "fb30240b87500c1b3c9f8036bb9e6712ec8e2655": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4610. Use common utils FileUtil#setReadable/Writable/Executable \u0026 FileUtil#canRead/Write/Execute. Contributed by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477385 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 3:26 PM",
      "commitName": "fb30240b87500c1b3c9f8036bb9e6712ec8e2655",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "07/03/13 7:37 PM",
      "commitNameOld": "4909821aa97f5c1343db5c2d9b200853eb05ec77",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 52.78,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n       \"bad log: \" + log;\n     String fileid \u003d GetImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String fileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n     assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : dstFiles) {\n-      if (f.exists() \u0026\u0026 f.canRead()) {\n+      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n     getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n         dstFiles.get(0).length() + \" bytes.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : dstFiles) {\n      if (f.exists() \u0026\u0026 FileUtil.canRead(f)) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n        dstFiles.get(0).length() + \" bytes.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : dstFiles) {\n      if (f.exists() \u0026\u0026 f.canRead()) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n        dstFiles.get(0).length() + \" bytes.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : dstFiles) {\n      if (f.exists() \u0026\u0026 f.canRead()) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n        dstFiles.get(0).length() + \" bytes.\");\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java"
      }
    },
    "eb6e44b1ba58ed971360a39ea5d5ce02ae65aa0f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2227. getRemoteEditLogManifest should pull its information from FileJournalManager during checkpoint process. Contributed by Ivan Kelly and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1155977 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/08/11 5:01 PM",
      "commitName": "eb6e44b1ba58ed971360a39ea5d5ce02ae65aa0f",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "29/07/11 9:28 AM",
      "commitNameOld": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 11.31,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n       NNStorage dstStorage) throws IOException {\n+    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n+      \"bad log: \" + log;\n     String fileid \u003d GetImageServlet.getParamStringForLog(\n         log, dstStorage);\n     String fileName \u003d NNStorage.getFinalizedEditsFileName(\n         log.getStartTxId(), log.getEndTxId());\n \n     List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n     assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n     \n     for (File f : dstFiles) {\n       if (f.exists() \u0026\u0026 f.canRead()) {\n         LOG.info(\"Skipping download of remote edit log \" +\n             log + \" since it already is stored locally at \" + f);\n         return;\n       } else {\n         LOG.debug(\"Dest file: \" + f);\n       }\n     }\n \n     getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n     LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n         dstFiles.get(0).length() + \" bytes.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 :\n      \"bad log: \" + log;\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : dstFiles) {\n      if (f.exists() \u0026\u0026 f.canRead()) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n        dstFiles.get(0).length() + \" bytes.\");\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java",
      "extendedDetails": {}
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,24 @@\n+  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n+      NNStorage dstStorage) throws IOException {\n+    String fileid \u003d GetImageServlet.getParamStringForLog(\n+        log, dstStorage);\n+    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n+        log.getStartTxId(), log.getEndTxId());\n+\n+    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n+    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n+    \n+    for (File f : dstFiles) {\n+      if (f.exists() \u0026\u0026 f.canRead()) {\n+        LOG.info(\"Skipping download of remote edit log \" +\n+            log + \" since it already is stored locally at \" + f);\n+        return;\n+      } else {\n+        LOG.debug(\"Dest file: \" + f);\n+      }\n+    }\n+\n+    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n+    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n+        dstFiles.get(0).length() + \" bytes.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void downloadEditsToStorage(String fsName, RemoteEditLog log,\n      NNStorage dstStorage) throws IOException {\n    String fileid \u003d GetImageServlet.getParamStringForLog(\n        log, dstStorage);\n    String fileName \u003d NNStorage.getFinalizedEditsFileName(\n        log.getStartTxId(), log.getEndTxId());\n\n    List\u003cFile\u003e dstFiles \u003d dstStorage.getFiles(NameNodeDirType.EDITS, fileName);\n    assert !dstFiles.isEmpty() : \"No checkpoint targets.\";\n    \n    for (File f : dstFiles) {\n      if (f.exists() \u0026\u0026 f.canRead()) {\n        LOG.info(\"Skipping download of remote edit log \" +\n            log + \" since it already is stored locally at \" + f);\n        return;\n      } else {\n        LOG.debug(\"Dest file: \" + f);\n      }\n    }\n\n    getFileClient(fsName, fileid, dstFiles, dstStorage, false);\n    LOG.info(\"Downloaded file \" + dstFiles.get(0).getName() + \" size \" +\n        dstFiles.get(0).length() + \" bytes.\");\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java"
    }
  }
}