{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Bzip2Decompressor.java",
  "functionName": "decompress",
  "functionId": "decompress___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.java",
  "functionStartLine": 143,
  "functionEndLine": 173,
  "numCommitsSeen": 4,
  "timeTaken": 711,
  "changeHistory": [
    "85470f0a33a3fb29ca80e9531a1a45f6b7b16721"
  ],
  "changeHistoryShort": {
    "85470f0a33a3fb29ca80e9531a1a45f6b7b16721": "Yintroduced"
  },
  "changeHistoryDetails": {
    "85470f0a33a3fb29ca80e9531a1a45f6b7b16721": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8462. Native-code implementation of bzip2 codec. Contributed by Govind Kamat\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453608 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 3:10 PM",
      "commitName": "85470f0a33a3fb29ca80e9531a1a45f6b7b16721",
      "commitAuthor": "Jason Darrell Lowe",
      "diff": "@@ -0,0 +1,31 @@\n+  public synchronized int decompress(byte[] b, int off, int len) \n+    throws IOException {\n+    if (b \u003d\u003d null) {\n+      throw new NullPointerException();\n+    }\n+    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+    \n+    // Check if there is uncompressed data.\n+    int n \u003d uncompressedDirectBuf.remaining();\n+    if (n \u003e 0) {\n+      n \u003d Math.min(n, len);\n+      ((ByteBuffer)uncompressedDirectBuf).get(b, off, n);\n+      return n;\n+    }\n+    \n+    // Re-initialize bzip2\u0027s output direct buffer.\n+    uncompressedDirectBuf.rewind();\n+    uncompressedDirectBuf.limit(directBufferSize);\n+\n+    // Decompress the data.\n+    n \u003d finished ? 0 : inflateBytesDirect();\n+    uncompressedDirectBuf.limit(n);\n+\n+    // Get at most \u0027len\u0027 bytes.\n+    n \u003d Math.min(n, len);\n+    ((ByteBuffer)uncompressedDirectBuf).get(b, off, n);\n+\n+    return n;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int decompress(byte[] b, int off, int len) \n    throws IOException {\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n      throw new ArrayIndexOutOfBoundsException();\n    }\n    \n    // Check if there is uncompressed data.\n    int n \u003d uncompressedDirectBuf.remaining();\n    if (n \u003e 0) {\n      n \u003d Math.min(n, len);\n      ((ByteBuffer)uncompressedDirectBuf).get(b, off, n);\n      return n;\n    }\n    \n    // Re-initialize bzip2\u0027s output direct buffer.\n    uncompressedDirectBuf.rewind();\n    uncompressedDirectBuf.limit(directBufferSize);\n\n    // Decompress the data.\n    n \u003d finished ? 0 : inflateBytesDirect();\n    uncompressedDirectBuf.limit(n);\n\n    // Get at most \u0027len\u0027 bytes.\n    n \u003d Math.min(n, len);\n    ((ByteBuffer)uncompressedDirectBuf).get(b, off, n);\n\n    return n;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.java"
    }
  }
}