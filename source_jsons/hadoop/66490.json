{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMSimulator.java",
  "functionName": "submitApp",
  "functionId": "submitApp___reservationId-ReservationId",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
  "functionStartLine": 314,
  "functionEndLine": 359,
  "numCommitsSeen": 27,
  "timeTaken": 3223,
  "changeHistory": [
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
    "147df300bf00b5f4ed250426b6ccdd69085466da",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b",
    "b32ffa2753e83615b980721b6067fcc35ce54372",
    "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af",
    "b0c2c856192e71145c012504511fad172436131b",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": "Ybodychange",
    "147df300bf00b5f4ed250426b6ccdd69085466da": "Ybodychange",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Ymultichange(Yparameterchange,Ybodychange)",
    "b32ffa2753e83615b980721b6067fcc35ce54372": "Ybodychange",
    "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af": "Ybodychange",
    "b0c2c856192e71145c012504511fad172436131b": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
      "commitDate": "31/07/18 9:36 AM",
      "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "28/02/18 1:58 AM",
      "commitNameOld": "7af4f34de54f6e667b47374e31fc9328eba869f0",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 153.28,
      "commitsBetweenForRepo": 1701,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   private void submitApp(ReservationId reservationId)\n           throws YarnException, InterruptedException, IOException {\n     // ask for new application\n     GetNewApplicationRequest newAppRequest \u003d\n         Records.newRecord(GetNewApplicationRequest.class);\n     GetNewApplicationResponse newAppResponse \u003d\n         rm.getClientRMService().getNewApplication(newAppRequest);\n     appId \u003d newAppResponse.getApplicationId();\n \n     // submit the application\n     final SubmitApplicationRequest subAppRequest \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     ApplicationSubmissionContext appSubContext \u003d\n         Records.newRecord(ApplicationSubmissionContext.class);\n     appSubContext.setApplicationId(appId);\n     appSubContext.setMaxAppAttempts(1);\n     appSubContext.setQueue(queue);\n     appSubContext.setPriority(Priority.newInstance(0));\n     ContainerLaunchContext conLauContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     conLauContext.setApplicationACLs(new HashMap\u003c\u003e());\n     conLauContext.setCommands(new ArrayList\u003c\u003e());\n     conLauContext.setEnvironment(new HashMap\u003c\u003e());\n     conLauContext.setLocalResources(new HashMap\u003c\u003e());\n     conLauContext.setServiceData(new HashMap\u003c\u003e());\n     appSubContext.setAMContainerSpec(conLauContext);\n     appSubContext.setResource(amContainerResource);\n+    if (nodeLabelExpression !\u003d null) {\n+      appSubContext.setNodeLabelExpression(nodeLabelExpression);\n+    }\n \n     if(reservationId !\u003d null) {\n       appSubContext.setReservationID(reservationId);\n     }\n \n     subAppRequest.setApplicationSubmissionContext(appSubContext);\n     UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws YarnException, IOException {\n         rm.getClientRMService().submitApplication(subAppRequest);\n         return null;\n       }\n     });\n     LOG.info(\"Submit a new application {}\", appId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitApp(ReservationId reservationId)\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d\n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n\n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d\n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(new HashMap\u003c\u003e());\n    conLauContext.setCommands(new ArrayList\u003c\u003e());\n    conLauContext.setEnvironment(new HashMap\u003c\u003e());\n    conLauContext.setLocalResources(new HashMap\u003c\u003e());\n    conLauContext.setServiceData(new HashMap\u003c\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setResource(amContainerResource);\n    if (nodeLabelExpression !\u003d null) {\n      appSubContext.setNodeLabelExpression(nodeLabelExpression);\n    }\n\n    if(reservationId !\u003d null) {\n      appSubContext.setReservationID(reservationId);\n    }\n\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException, IOException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(\"Submit a new application {}\", appId);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "147df300bf00b5f4ed250426b6ccdd69085466da": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "30/06/17 5:03 PM",
      "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "19/06/17 9:18 PM",
      "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 10.82,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,43 @@\n   private void submitApp(ReservationId reservationId)\n           throws YarnException, InterruptedException, IOException {\n     // ask for new application\n     GetNewApplicationRequest newAppRequest \u003d\n         Records.newRecord(GetNewApplicationRequest.class);\n     GetNewApplicationResponse newAppResponse \u003d \n         rm.getClientRMService().getNewApplication(newAppRequest);\n     appId \u003d newAppResponse.getApplicationId();\n     \n     // submit the application\n     final SubmitApplicationRequest subAppRequest \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     ApplicationSubmissionContext appSubContext \u003d \n         Records.newRecord(ApplicationSubmissionContext.class);\n     appSubContext.setApplicationId(appId);\n     appSubContext.setMaxAppAttempts(1);\n     appSubContext.setQueue(queue);\n     appSubContext.setPriority(Priority.newInstance(0));\n     ContainerLaunchContext conLauContext \u003d \n         Records.newRecord(ContainerLaunchContext.class);\n-    conLauContext.setApplicationACLs(\n-        new HashMap\u003cApplicationAccessType, String\u003e());\n-    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n-    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n-    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n-    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n+    conLauContext.setApplicationACLs(new HashMap\u003c\u003e());\n+    conLauContext.setCommands(new ArrayList\u003c\u003e());\n+    conLauContext.setEnvironment(new HashMap\u003c\u003e());\n+    conLauContext.setLocalResources(new HashMap\u003c\u003e());\n+    conLauContext.setServiceData(new HashMap\u003c\u003e());\n     appSubContext.setAMContainerSpec(conLauContext);\n-    appSubContext.setResource(Resources\n-        .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n-            MR_AM_CONTAINER_RESOURCE_VCORES));\n+    appSubContext.setResource(amContainerResource);\n \n     if(reservationId !\u003d null) {\n       appSubContext.setReservationID(reservationId);\n     }\n \n     subAppRequest.setApplicationSubmissionContext(appSubContext);\n     UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws YarnException, IOException {\n         rm.getClientRMService().submitApplication(subAppRequest);\n         return null;\n       }\n     });\n     LOG.info(\"Submit a new application {}\", appId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitApp(ReservationId reservationId)\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d \n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n    \n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d \n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d \n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(new HashMap\u003c\u003e());\n    conLauContext.setCommands(new ArrayList\u003c\u003e());\n    conLauContext.setEnvironment(new HashMap\u003c\u003e());\n    conLauContext.setLocalResources(new HashMap\u003c\u003e());\n    conLauContext.setServiceData(new HashMap\u003c\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setResource(amContainerResource);\n\n    if(reservationId !\u003d null) {\n      appSubContext.setReservationID(reservationId);\n    }\n\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException, IOException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(\"Submit a new application {}\", appId);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "04/05/17 5:21 PM",
      "commitNameOld": "3082552b3b991df846caf572b58e44308ddf8eeb",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 46.16,
      "commitsBetweenForRepo": 219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private void submitApp(ReservationId reservationId)\n           throws YarnException, InterruptedException, IOException {\n     // ask for new application\n     GetNewApplicationRequest newAppRequest \u003d\n         Records.newRecord(GetNewApplicationRequest.class);\n     GetNewApplicationResponse newAppResponse \u003d \n         rm.getClientRMService().getNewApplication(newAppRequest);\n     appId \u003d newAppResponse.getApplicationId();\n     \n     // submit the application\n     final SubmitApplicationRequest subAppRequest \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     ApplicationSubmissionContext appSubContext \u003d \n         Records.newRecord(ApplicationSubmissionContext.class);\n     appSubContext.setApplicationId(appId);\n     appSubContext.setMaxAppAttempts(1);\n     appSubContext.setQueue(queue);\n     appSubContext.setPriority(Priority.newInstance(0));\n     ContainerLaunchContext conLauContext \u003d \n         Records.newRecord(ContainerLaunchContext.class);\n     conLauContext.setApplicationACLs(\n         new HashMap\u003cApplicationAccessType, String\u003e());\n     conLauContext.setCommands(new ArrayList\u003cString\u003e());\n     conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n     conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n     conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n     appSubContext.setAMContainerSpec(conLauContext);\n     appSubContext.setResource(Resources\n         .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n             MR_AM_CONTAINER_RESOURCE_VCORES));\n \n     if(reservationId !\u003d null) {\n       appSubContext.setReservationID(reservationId);\n     }\n \n     subAppRequest.setApplicationSubmissionContext(appSubContext);\n     UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws YarnException, IOException {\n         rm.getClientRMService().submitApplication(subAppRequest);\n         return null;\n       }\n     });\n-    LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n+    LOG.info(\"Submit a new application {}\", appId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitApp(ReservationId reservationId)\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d \n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n    \n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d \n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d \n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(\n        new HashMap\u003cApplicationAccessType, String\u003e());\n    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setResource(Resources\n        .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n            MR_AM_CONTAINER_RESOURCE_VCORES));\n\n    if(reservationId !\u003d null) {\n      appSubContext.setReservationID(reservationId);\n    }\n\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException, IOException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(\"Submit a new application {}\", appId);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
          "commitDate": "20/04/17 9:54 PM",
          "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/17 4:18 PM",
          "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 22.23,
          "commitsBetweenForRepo": 128,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,46 @@\n-  private void submitApp()\n+  private void submitApp(ReservationId reservationId)\n           throws YarnException, InterruptedException, IOException {\n     // ask for new application\n     GetNewApplicationRequest newAppRequest \u003d\n         Records.newRecord(GetNewApplicationRequest.class);\n     GetNewApplicationResponse newAppResponse \u003d \n         rm.getClientRMService().getNewApplication(newAppRequest);\n     appId \u003d newAppResponse.getApplicationId();\n     \n     // submit the application\n     final SubmitApplicationRequest subAppRequest \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     ApplicationSubmissionContext appSubContext \u003d \n         Records.newRecord(ApplicationSubmissionContext.class);\n     appSubContext.setApplicationId(appId);\n     appSubContext.setMaxAppAttempts(1);\n     appSubContext.setQueue(queue);\n     appSubContext.setPriority(Priority.newInstance(0));\n     ContainerLaunchContext conLauContext \u003d \n         Records.newRecord(ContainerLaunchContext.class);\n     conLauContext.setApplicationACLs(\n         new HashMap\u003cApplicationAccessType, String\u003e());\n     conLauContext.setCommands(new ArrayList\u003cString\u003e());\n     conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n     conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n     conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n     appSubContext.setAMContainerSpec(conLauContext);\n     appSubContext.setResource(Resources\n         .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n             MR_AM_CONTAINER_RESOURCE_VCORES));\n+\n+    if(reservationId !\u003d null) {\n+      appSubContext.setReservationID(reservationId);\n+    }\n+\n     subAppRequest.setApplicationSubmissionContext(appSubContext);\n     UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws YarnException, IOException {\n         rm.getClientRMService().submitApplication(subAppRequest);\n         return null;\n       }\n     });\n     LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void submitApp(ReservationId reservationId)\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d \n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n    \n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d \n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d \n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(\n        new HashMap\u003cApplicationAccessType, String\u003e());\n    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setResource(Resources\n        .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n            MR_AM_CONTAINER_RESOURCE_VCORES));\n\n    if(reservationId !\u003d null) {\n      appSubContext.setReservationID(reservationId);\n    }\n\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException, IOException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[reservationId-ReservationId]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
          "commitDate": "20/04/17 9:54 PM",
          "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/17 4:18 PM",
          "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 22.23,
          "commitsBetweenForRepo": 128,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,46 @@\n-  private void submitApp()\n+  private void submitApp(ReservationId reservationId)\n           throws YarnException, InterruptedException, IOException {\n     // ask for new application\n     GetNewApplicationRequest newAppRequest \u003d\n         Records.newRecord(GetNewApplicationRequest.class);\n     GetNewApplicationResponse newAppResponse \u003d \n         rm.getClientRMService().getNewApplication(newAppRequest);\n     appId \u003d newAppResponse.getApplicationId();\n     \n     // submit the application\n     final SubmitApplicationRequest subAppRequest \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     ApplicationSubmissionContext appSubContext \u003d \n         Records.newRecord(ApplicationSubmissionContext.class);\n     appSubContext.setApplicationId(appId);\n     appSubContext.setMaxAppAttempts(1);\n     appSubContext.setQueue(queue);\n     appSubContext.setPriority(Priority.newInstance(0));\n     ContainerLaunchContext conLauContext \u003d \n         Records.newRecord(ContainerLaunchContext.class);\n     conLauContext.setApplicationACLs(\n         new HashMap\u003cApplicationAccessType, String\u003e());\n     conLauContext.setCommands(new ArrayList\u003cString\u003e());\n     conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n     conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n     conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n     appSubContext.setAMContainerSpec(conLauContext);\n     appSubContext.setResource(Resources\n         .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n             MR_AM_CONTAINER_RESOURCE_VCORES));\n+\n+    if(reservationId !\u003d null) {\n+      appSubContext.setReservationID(reservationId);\n+    }\n+\n     subAppRequest.setApplicationSubmissionContext(appSubContext);\n     UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws YarnException, IOException {\n         rm.getClientRMService().submitApplication(subAppRequest);\n         return null;\n       }\n     });\n     LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void submitApp(ReservationId reservationId)\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d \n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n    \n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d \n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d \n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(\n        new HashMap\u003cApplicationAccessType, String\u003e());\n    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setResource(Resources\n        .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n            MR_AM_CONTAINER_RESOURCE_VCORES));\n\n    if(reservationId !\u003d null) {\n      appSubContext.setReservationID(reservationId);\n    }\n\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException, IOException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "b32ffa2753e83615b980721b6067fcc35ce54372": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4779. Fix AM container allocation logic in SLS. Contributed by Wangda Tan.\n",
      "commitDate": "24/02/17 8:09 AM",
      "commitName": "b32ffa2753e83615b980721b6067fcc35ce54372",
      "commitAuthor": "Sunil G",
      "commitDateOld": "30/12/15 3:30 PM",
      "commitNameOld": "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 421.69,
      "commitsBetweenForRepo": 2829,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,41 @@\n   private void submitApp()\n           throws YarnException, InterruptedException, IOException {\n     // ask for new application\n     GetNewApplicationRequest newAppRequest \u003d\n         Records.newRecord(GetNewApplicationRequest.class);\n     GetNewApplicationResponse newAppResponse \u003d \n         rm.getClientRMService().getNewApplication(newAppRequest);\n     appId \u003d newAppResponse.getApplicationId();\n     \n     // submit the application\n     final SubmitApplicationRequest subAppRequest \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     ApplicationSubmissionContext appSubContext \u003d \n         Records.newRecord(ApplicationSubmissionContext.class);\n     appSubContext.setApplicationId(appId);\n     appSubContext.setMaxAppAttempts(1);\n     appSubContext.setQueue(queue);\n     appSubContext.setPriority(Priority.newInstance(0));\n     ContainerLaunchContext conLauContext \u003d \n         Records.newRecord(ContainerLaunchContext.class);\n     conLauContext.setApplicationACLs(\n         new HashMap\u003cApplicationAccessType, String\u003e());\n     conLauContext.setCommands(new ArrayList\u003cString\u003e());\n     conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n     conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n     conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n     appSubContext.setAMContainerSpec(conLauContext);\n-    appSubContext.setUnmanagedAM(true);\n+    appSubContext.setResource(Resources\n+        .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n+            MR_AM_CONTAINER_RESOURCE_VCORES));\n     subAppRequest.setApplicationSubmissionContext(appSubContext);\n     UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws YarnException, IOException {\n         rm.getClientRMService().submitApplication(subAppRequest);\n         return null;\n       }\n     });\n     LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n-    \n-    // waiting until application ACCEPTED\n-    RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n-    while(app.getState() !\u003d RMAppState.ACCEPTED) {\n-      Thread.sleep(10);\n-    }\n-\n-    // Waiting until application attempt reach LAUNCHED\n-    // \"Unmanaged AM must register after AM attempt reaches LAUNCHED state\"\n-    this.appAttemptId \u003d rm.getRMContext().getRMApps().get(appId)\n-        .getCurrentAppAttempt().getAppAttemptId();\n-    RMAppAttempt rmAppAttempt \u003d rm.getRMContext().getRMApps().get(appId)\n-        .getCurrentAppAttempt();\n-    while (rmAppAttempt.getAppAttemptState() !\u003d RMAppAttemptState.LAUNCHED) {\n-      Thread.sleep(10);\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitApp()\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d \n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n    \n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d \n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d \n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(\n        new HashMap\u003cApplicationAccessType, String\u003e());\n    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setResource(Resources\n        .createResource(MR_AM_CONTAINER_RESOURCE_MEMORY_MB,\n            MR_AM_CONTAINER_RESOURCE_VCORES));\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException, IOException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4522. Queue acl can be checked at app submission. (Jian He via wangda)\n",
      "commitDate": "30/12/15 3:30 PM",
      "commitName": "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "25/07/14 6:29 PM",
      "commitNameOld": "b0c2c856192e71145c012504511fad172436131b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 522.92,
      "commitsBetweenForRepo": 4329,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   private void submitApp()\n           throws YarnException, InterruptedException, IOException {\n     // ask for new application\n     GetNewApplicationRequest newAppRequest \u003d\n         Records.newRecord(GetNewApplicationRequest.class);\n     GetNewApplicationResponse newAppResponse \u003d \n         rm.getClientRMService().getNewApplication(newAppRequest);\n     appId \u003d newAppResponse.getApplicationId();\n     \n     // submit the application\n     final SubmitApplicationRequest subAppRequest \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     ApplicationSubmissionContext appSubContext \u003d \n         Records.newRecord(ApplicationSubmissionContext.class);\n     appSubContext.setApplicationId(appId);\n     appSubContext.setMaxAppAttempts(1);\n     appSubContext.setQueue(queue);\n     appSubContext.setPriority(Priority.newInstance(0));\n     ContainerLaunchContext conLauContext \u003d \n         Records.newRecord(ContainerLaunchContext.class);\n     conLauContext.setApplicationACLs(\n         new HashMap\u003cApplicationAccessType, String\u003e());\n     conLauContext.setCommands(new ArrayList\u003cString\u003e());\n     conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n     conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n     conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n     appSubContext.setAMContainerSpec(conLauContext);\n     appSubContext.setUnmanagedAM(true);\n     subAppRequest.setApplicationSubmissionContext(appSubContext);\n     UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n-      public Object run() throws YarnException {\n+      public Object run() throws YarnException, IOException {\n         rm.getClientRMService().submitApplication(subAppRequest);\n         return null;\n       }\n     });\n     LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n     \n     // waiting until application ACCEPTED\n     RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n     while(app.getState() !\u003d RMAppState.ACCEPTED) {\n       Thread.sleep(10);\n     }\n \n     // Waiting until application attempt reach LAUNCHED\n     // \"Unmanaged AM must register after AM attempt reaches LAUNCHED state\"\n     this.appAttemptId \u003d rm.getRMContext().getRMApps().get(appId)\n         .getCurrentAppAttempt().getAppAttemptId();\n     RMAppAttempt rmAppAttempt \u003d rm.getRMContext().getRMApps().get(appId)\n         .getCurrentAppAttempt();\n     while (rmAppAttempt.getAppAttemptState() !\u003d RMAppAttemptState.LAUNCHED) {\n       Thread.sleep(10);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitApp()\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d \n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n    \n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d \n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d \n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(\n        new HashMap\u003cApplicationAccessType, String\u003e());\n    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setUnmanagedAM(true);\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException, IOException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n    \n    // waiting until application ACCEPTED\n    RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n    while(app.getState() !\u003d RMAppState.ACCEPTED) {\n      Thread.sleep(10);\n    }\n\n    // Waiting until application attempt reach LAUNCHED\n    // \"Unmanaged AM must register after AM attempt reaches LAUNCHED state\"\n    this.appAttemptId \u003d rm.getRMContext().getRMApps().get(appId)\n        .getCurrentAppAttempt().getAppAttemptId();\n    RMAppAttempt rmAppAttempt \u003d rm.getRMContext().getRMApps().get(appId)\n        .getCurrentAppAttempt();\n    while (rmAppAttempt.getAppAttemptState() !\u003d RMAppAttemptState.LAUNCHED) {\n      Thread.sleep(10);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "b0c2c856192e71145c012504511fad172436131b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1726. ResourceSchedulerWrapper broken due to AbstractYarnScheduler. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613547 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/14 6:29 PM",
      "commitName": "b0c2c856192e71145c012504511fad172436131b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "25/07/14 10:12 AM",
      "commitNameOld": "77363b9d839e47bef2325b8682eabe00d4c83354",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.35,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,55 @@\n   private void submitApp()\n           throws YarnException, InterruptedException, IOException {\n     // ask for new application\n     GetNewApplicationRequest newAppRequest \u003d\n         Records.newRecord(GetNewApplicationRequest.class);\n     GetNewApplicationResponse newAppResponse \u003d \n         rm.getClientRMService().getNewApplication(newAppRequest);\n     appId \u003d newAppResponse.getApplicationId();\n     \n     // submit the application\n     final SubmitApplicationRequest subAppRequest \u003d\n         Records.newRecord(SubmitApplicationRequest.class);\n     ApplicationSubmissionContext appSubContext \u003d \n         Records.newRecord(ApplicationSubmissionContext.class);\n     appSubContext.setApplicationId(appId);\n     appSubContext.setMaxAppAttempts(1);\n     appSubContext.setQueue(queue);\n     appSubContext.setPriority(Priority.newInstance(0));\n     ContainerLaunchContext conLauContext \u003d \n         Records.newRecord(ContainerLaunchContext.class);\n     conLauContext.setApplicationACLs(\n         new HashMap\u003cApplicationAccessType, String\u003e());\n     conLauContext.setCommands(new ArrayList\u003cString\u003e());\n     conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n     conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n     conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n     appSubContext.setAMContainerSpec(conLauContext);\n     appSubContext.setUnmanagedAM(true);\n     subAppRequest.setApplicationSubmissionContext(appSubContext);\n     UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws YarnException {\n         rm.getClientRMService().submitApplication(subAppRequest);\n         return null;\n       }\n     });\n     LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n     \n     // waiting until application ACCEPTED\n     RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n     while(app.getState() !\u003d RMAppState.ACCEPTED) {\n-      Thread.sleep(50);\n+      Thread.sleep(10);\n     }\n \n-    appAttemptId \u003d rm.getRMContext().getRMApps().get(appId)\n-            .getCurrentAppAttempt().getAppAttemptId();\n+    // Waiting until application attempt reach LAUNCHED\n+    // \"Unmanaged AM must register after AM attempt reaches LAUNCHED state\"\n+    this.appAttemptId \u003d rm.getRMContext().getRMApps().get(appId)\n+        .getCurrentAppAttempt().getAppAttemptId();\n+    RMAppAttempt rmAppAttempt \u003d rm.getRMContext().getRMApps().get(appId)\n+        .getCurrentAppAttempt();\n+    while (rmAppAttempt.getAppAttemptState() !\u003d RMAppAttemptState.LAUNCHED) {\n+      Thread.sleep(10);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitApp()\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d \n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n    \n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d \n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d \n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(\n        new HashMap\u003cApplicationAccessType, String\u003e());\n    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setUnmanagedAM(true);\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n    \n    // waiting until application ACCEPTED\n    RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n    while(app.getState() !\u003d RMAppState.ACCEPTED) {\n      Thread.sleep(10);\n    }\n\n    // Waiting until application attempt reach LAUNCHED\n    // \"Unmanaged AM must register after AM attempt reaches LAUNCHED state\"\n    this.appAttemptId \u003d rm.getRMContext().getRMApps().get(appId)\n        .getCurrentAppAttempt().getAppAttemptId();\n    RMAppAttempt rmAppAttempt \u003d rm.getRMContext().getRMApps().get(appId)\n        .getCurrentAppAttempt();\n    while (rmAppAttempt.getAppAttemptState() !\u003d RMAppAttemptState.LAUNCHED) {\n      Thread.sleep(10);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,48 @@\n+  private void submitApp()\n+          throws YarnException, InterruptedException, IOException {\n+    // ask for new application\n+    GetNewApplicationRequest newAppRequest \u003d\n+        Records.newRecord(GetNewApplicationRequest.class);\n+    GetNewApplicationResponse newAppResponse \u003d \n+        rm.getClientRMService().getNewApplication(newAppRequest);\n+    appId \u003d newAppResponse.getApplicationId();\n+    \n+    // submit the application\n+    final SubmitApplicationRequest subAppRequest \u003d\n+        Records.newRecord(SubmitApplicationRequest.class);\n+    ApplicationSubmissionContext appSubContext \u003d \n+        Records.newRecord(ApplicationSubmissionContext.class);\n+    appSubContext.setApplicationId(appId);\n+    appSubContext.setMaxAppAttempts(1);\n+    appSubContext.setQueue(queue);\n+    appSubContext.setPriority(Priority.newInstance(0));\n+    ContainerLaunchContext conLauContext \u003d \n+        Records.newRecord(ContainerLaunchContext.class);\n+    conLauContext.setApplicationACLs(\n+        new HashMap\u003cApplicationAccessType, String\u003e());\n+    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n+    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n+    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n+    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n+    appSubContext.setAMContainerSpec(conLauContext);\n+    appSubContext.setUnmanagedAM(true);\n+    subAppRequest.setApplicationSubmissionContext(appSubContext);\n+    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n+    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n+      @Override\n+      public Object run() throws YarnException {\n+        rm.getClientRMService().submitApplication(subAppRequest);\n+        return null;\n+      }\n+    });\n+    LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n+    \n+    // waiting until application ACCEPTED\n+    RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n+    while(app.getState() !\u003d RMAppState.ACCEPTED) {\n+      Thread.sleep(50);\n+    }\n+\n+    appAttemptId \u003d rm.getRMContext().getRMApps().get(appId)\n+            .getCurrentAppAttempt().getAppAttemptId();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitApp()\n          throws YarnException, InterruptedException, IOException {\n    // ask for new application\n    GetNewApplicationRequest newAppRequest \u003d\n        Records.newRecord(GetNewApplicationRequest.class);\n    GetNewApplicationResponse newAppResponse \u003d \n        rm.getClientRMService().getNewApplication(newAppRequest);\n    appId \u003d newAppResponse.getApplicationId();\n    \n    // submit the application\n    final SubmitApplicationRequest subAppRequest \u003d\n        Records.newRecord(SubmitApplicationRequest.class);\n    ApplicationSubmissionContext appSubContext \u003d \n        Records.newRecord(ApplicationSubmissionContext.class);\n    appSubContext.setApplicationId(appId);\n    appSubContext.setMaxAppAttempts(1);\n    appSubContext.setQueue(queue);\n    appSubContext.setPriority(Priority.newInstance(0));\n    ContainerLaunchContext conLauContext \u003d \n        Records.newRecord(ContainerLaunchContext.class);\n    conLauContext.setApplicationACLs(\n        new HashMap\u003cApplicationAccessType, String\u003e());\n    conLauContext.setCommands(new ArrayList\u003cString\u003e());\n    conLauContext.setEnvironment(new HashMap\u003cString, String\u003e());\n    conLauContext.setLocalResources(new HashMap\u003cString, LocalResource\u003e());\n    conLauContext.setServiceData(new HashMap\u003cString, ByteBuffer\u003e());\n    appSubContext.setAMContainerSpec(conLauContext);\n    appSubContext.setUnmanagedAM(true);\n    subAppRequest.setApplicationSubmissionContext(appSubContext);\n    UserGroupInformation ugi \u003d UserGroupInformation.createRemoteUser(user);\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws YarnException {\n        rm.getClientRMService().submitApplication(subAppRequest);\n        return null;\n      }\n    });\n    LOG.info(MessageFormat.format(\"Submit a new application {0}\", appId));\n    \n    // waiting until application ACCEPTED\n    RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n    while(app.getState() !\u003d RMAppState.ACCEPTED) {\n      Thread.sleep(50);\n    }\n\n    appAttemptId \u003d rm.getRMContext().getRMApps().get(appId)\n            .getCurrentAppAttempt().getAppAttemptId();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java"
    }
  }
}