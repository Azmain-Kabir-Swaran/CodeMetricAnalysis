{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ComparableVersion.java",
  "functionName": "compareTo",
  "functionId": "compareTo___item-Item",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ComparableVersion.java",
  "functionStartLine": 295,
  "functionEndLine": 337,
  "numCommitsSeen": 6,
  "timeTaken": 562,
  "changeHistory": [
    "e21a03f7175dd2c563adc252de2574bd82c9e55e"
  ],
  "changeHistoryShort": {
    "e21a03f7175dd2c563adc252de2574bd82c9e55e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e21a03f7175dd2c563adc252de2574bd82c9e55e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10250. VersionUtil returns wrong value when comparing two versions. Contributed by Yongjun Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 1:36 PM",
      "commitName": "e21a03f7175dd2c563adc252de2574bd82c9e55e",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,43 @@\n+        public int compareTo( Item item )\n+        {\n+            if ( item \u003d\u003d null )\n+            {\n+                if ( size() \u003d\u003d 0 )\n+                {\n+                    return 0; // 1-0 \u003d 1- (normalize) \u003d 1\n+                }\n+                Item first \u003d get( 0 );\n+                return first.compareTo( null );\n+            }\n+            switch ( item.getType() )\n+            {\n+                case INTEGER_ITEM:\n+                    return -1; // 1-1 \u003c 1.0.x\n+\n+                case STRING_ITEM:\n+                    return 1; // 1-1 \u003e 1-sp\n+\n+                case LIST_ITEM:\n+                    Iterator\u003cItem\u003e left \u003d iterator();\n+                    Iterator\u003cItem\u003e right \u003d ( (ListItem) item ).iterator();\n+\n+                    while ( left.hasNext() || right.hasNext() )\n+                    {\n+                        Item l \u003d left.hasNext() ? left.next() : null;\n+                        Item r \u003d right.hasNext() ? right.next() : null;\n+\n+                        // if this is shorter, then invert the compare and mul with -1\n+                        int result \u003d l \u003d\u003d null ? -1 * r.compareTo( l ) : l.compareTo( r );\n+                        \n+                        if ( result !\u003d 0 )\n+                        {\n+                            return result;\n+                        }\n+                    }\n+\n+                    return 0;\n+\n+                default:\n+                    throw new RuntimeException( \"invalid item: \" + item.getClass() );\n+            }\n+        }\n\\ No newline at end of file\n",
      "actualSource": "        public int compareTo( Item item )\n        {\n            if ( item \u003d\u003d null )\n            {\n                if ( size() \u003d\u003d 0 )\n                {\n                    return 0; // 1-0 \u003d 1- (normalize) \u003d 1\n                }\n                Item first \u003d get( 0 );\n                return first.compareTo( null );\n            }\n            switch ( item.getType() )\n            {\n                case INTEGER_ITEM:\n                    return -1; // 1-1 \u003c 1.0.x\n\n                case STRING_ITEM:\n                    return 1; // 1-1 \u003e 1-sp\n\n                case LIST_ITEM:\n                    Iterator\u003cItem\u003e left \u003d iterator();\n                    Iterator\u003cItem\u003e right \u003d ( (ListItem) item ).iterator();\n\n                    while ( left.hasNext() || right.hasNext() )\n                    {\n                        Item l \u003d left.hasNext() ? left.next() : null;\n                        Item r \u003d right.hasNext() ? right.next() : null;\n\n                        // if this is shorter, then invert the compare and mul with -1\n                        int result \u003d l \u003d\u003d null ? -1 * r.compareTo( l ) : l.compareTo( r );\n                        \n                        if ( result !\u003d 0 )\n                        {\n                            return result;\n                        }\n                    }\n\n                    return 0;\n\n                default:\n                    throw new RuntimeException( \"invalid item: \" + item.getClass() );\n            }\n        }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ComparableVersion.java"
    }
  }
}