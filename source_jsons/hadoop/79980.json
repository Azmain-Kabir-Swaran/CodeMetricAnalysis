{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RawLocalFileSystem.java",
  "functionName": "createPathHandle",
  "functionId": "createPathHandle___stat-FileStatus__opts-Options.HandleOpt",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
  "functionStartLine": 899,
  "functionEndLine": 923,
  "numCommitsSeen": 53,
  "timeTaken": 716,
  "changeHistory": [
    "980031bb043dd026a6bf42b0e71d304ac89294a5"
  ],
  "changeHistoryShort": {
    "980031bb043dd026a6bf42b0e71d304ac89294a5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "980031bb043dd026a6bf42b0e71d304ac89294a5": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13186. Multipart Uploader API. Contributed by Ewan Higgs\n",
      "commitDate": "17/06/18 11:54 AM",
      "commitName": "980031bb043dd026a6bf42b0e71d304ac89294a5",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,25 @@\n+  protected PathHandle createPathHandle(FileStatus stat,\n+      Options.HandleOpt... opts) {\n+    if (stat.isDirectory() || stat.isSymlink()) {\n+      throw new IllegalArgumentException(\"PathHandle only available for files\");\n+    }\n+    String authority \u003d stat.getPath().toUri().getAuthority();\n+    if (authority !\u003d null \u0026\u0026 !authority.equals(\"file://\")) {\n+      throw new IllegalArgumentException(\"Wrong FileSystem: \" + stat.getPath());\n+    }\n+    Options.HandleOpt.Data data \u003d\n+        Options.HandleOpt.getOpt(Options.HandleOpt.Data.class, opts)\n+            .orElse(Options.HandleOpt.changed(false));\n+    Options.HandleOpt.Location loc \u003d\n+        Options.HandleOpt.getOpt(Options.HandleOpt.Location.class, opts)\n+            .orElse(Options.HandleOpt.moved(false));\n+    if (loc.allowChange()) {\n+      throw new UnsupportedOperationException(\"Tracking file movement in \" +\n+          \"basic FileSystem is not supported\");\n+    }\n+    final Path p \u003d stat.getPath();\n+    final Optional\u003cLong\u003e mtime \u003d !data.allowChange()\n+        ? Optional.of(stat.getModificationTime())\n+        : Optional.empty();\n+    return new LocalFileSystemPathHandle(p.toString(), mtime);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected PathHandle createPathHandle(FileStatus stat,\n      Options.HandleOpt... opts) {\n    if (stat.isDirectory() || stat.isSymlink()) {\n      throw new IllegalArgumentException(\"PathHandle only available for files\");\n    }\n    String authority \u003d stat.getPath().toUri().getAuthority();\n    if (authority !\u003d null \u0026\u0026 !authority.equals(\"file://\")) {\n      throw new IllegalArgumentException(\"Wrong FileSystem: \" + stat.getPath());\n    }\n    Options.HandleOpt.Data data \u003d\n        Options.HandleOpt.getOpt(Options.HandleOpt.Data.class, opts)\n            .orElse(Options.HandleOpt.changed(false));\n    Options.HandleOpt.Location loc \u003d\n        Options.HandleOpt.getOpt(Options.HandleOpt.Location.class, opts)\n            .orElse(Options.HandleOpt.moved(false));\n    if (loc.allowChange()) {\n      throw new UnsupportedOperationException(\"Tracking file movement in \" +\n          \"basic FileSystem is not supported\");\n    }\n    final Path p \u003d stat.getPath();\n    final Optional\u003cLong\u003e mtime \u003d !data.allowChange()\n        ? Optional.of(stat.getModificationTime())\n        : Optional.empty();\n    return new LocalFileSystemPathHandle(p.toString(), mtime);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
    }
  }
}