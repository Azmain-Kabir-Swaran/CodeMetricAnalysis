{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HAUtil.java",
  "functionName": "getConfForOtherNodes",
  "functionId": "getConfForOtherNodes___myConf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
  "functionStartLine": 199,
  "functionEndLine": 218,
  "numCommitsSeen": 68,
  "timeTaken": 3318,
  "changeHistory": [
    "ececeea8f2ba47b8618e22e52bc839f4f9ac511b",
    "4d7055e0c8d1936d6c87cec14dbbfdff77b837f3",
    "49dfad942970459297f72632ed8dfd353e0c86de",
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76",
    "260dfa367e3c161edcc9d2b2217661710199c95e",
    "c17b4f8eefe5b77b77761a0bb46b49cd1ea6965d",
    "32c313d51cd2483ea510afe044c55eeaed7c2b2d",
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa"
  ],
  "changeHistoryShort": {
    "ececeea8f2ba47b8618e22e52bc839f4f9ac511b": "Ybodychange",
    "4d7055e0c8d1936d6c87cec14dbbfdff77b837f3": "Ybodychange",
    "49dfad942970459297f72632ed8dfd353e0c86de": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76": "Ybodychange",
    "260dfa367e3c161edcc9d2b2217661710199c95e": "Ybodychange",
    "c17b4f8eefe5b77b77761a0bb46b49cd1ea6965d": "Ybodychange",
    "32c313d51cd2483ea510afe044c55eeaed7c2b2d": "Ybodychange",
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ececeea8f2ba47b8618e22e52bc839f4f9ac511b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13202. Fix the outdated javadocs in HAUtil. Contributed by Chao Sun.\n",
      "commitDate": "01/03/18 1:51 AM",
      "commitName": "ececeea8f2ba47b8618e22e52bc839f4f9ac511b",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "07/02/18 9:40 AM",
      "commitNameOld": "01bd6ab18fa48f4c7cac1497905b52e547962599",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 21.67,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public static List\u003cConfiguration\u003e getConfForOtherNodes(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n-    List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n+    List\u003cString\u003e otherNodes \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n \n     // Look up the address of the other NNs\n-    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n+    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNodes.size());\n     myConf \u003d new Configuration(myConf);\n     // unset independent properties\n     for (String idpKey : HA_SPECIAL_INDEPENDENT_KEYS) {\n       myConf.unset(idpKey);\n     }\n-    for (String nn : otherNn) {\n+    for (String nn : otherNodes) {\n       Configuration confForOtherNode \u003d new Configuration(myConf);\n       NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n       confs.add(confForOtherNode);\n     }\n     return confs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cConfiguration\u003e getConfForOtherNodes(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    List\u003cString\u003e otherNodes \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n\n    // Look up the address of the other NNs\n    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNodes.size());\n    myConf \u003d new Configuration(myConf);\n    // unset independent properties\n    for (String idpKey : HA_SPECIAL_INDEPENDENT_KEYS) {\n      myConf.unset(idpKey);\n    }\n    for (String nn : otherNodes) {\n      Configuration confForOtherNode \u003d new Configuration(myConf);\n      NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n      confs.add(confForOtherNode);\n    }\n    return confs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "4d7055e0c8d1936d6c87cec14dbbfdff77b837f3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9718. HAUtil#getConfForOtherNodes should unset independent generic keys before initialize (Contributed by DENG FEI)\n",
      "commitDate": "01/02/16 11:21 PM",
      "commitName": "4d7055e0c8d1936d6c87cec14dbbfdff77b837f3",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "22/09/15 8:52 PM",
      "commitNameOld": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 132.15,
      "commitsBetweenForRepo": 917,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,20 @@\n   public static List\u003cConfiguration\u003e getConfForOtherNodes(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n     List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n \n     // Look up the address of the other NNs\n     List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n+    myConf \u003d new Configuration(myConf);\n+    // unset independent properties\n+    for (String idpKey : HA_SPECIAL_INDEPENDENT_KEYS) {\n+      myConf.unset(idpKey);\n+    }\n     for (String nn : otherNn) {\n       Configuration confForOtherNode \u003d new Configuration(myConf);\n       NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n       confs.add(confForOtherNode);\n     }\n     return confs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cConfiguration\u003e getConfForOtherNodes(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n\n    // Look up the address of the other NNs\n    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n    myConf \u003d new Configuration(myConf);\n    // unset independent properties\n    for (String idpKey : HA_SPECIAL_INDEPENDENT_KEYS) {\n      myConf.unset(idpKey);\n    }\n    for (String nn : otherNn) {\n      Configuration confForOtherNode \u003d new Configuration(myConf);\n      NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n      confs.add(confForOtherNode);\n    }\n    return confs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "49dfad942970459297f72632ed8dfd353e0c86de": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.\n",
      "commitDate": "23/06/15 5:26 PM",
      "commitName": "49dfad942970459297f72632ed8dfd353e0c86de",
      "commitAuthor": "Aaron T. Myers",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.\n",
          "commitDate": "23/06/15 5:26 PM",
          "commitName": "49dfad942970459297f72632ed8dfd353e0c86de",
          "commitAuthor": "Aaron T. Myers",
          "commitDateOld": "21/04/15 9:59 PM",
          "commitNameOld": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 62.81,
          "commitsBetweenForRepo": 570,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,15 @@\n-  public static Configuration getConfForOtherNode(\n+  public static List\u003cConfiguration\u003e getConfForOtherNodes(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n-    String otherNn \u003d getNameNodeIdOfOtherNode(myConf, nsId);\n-    \n-    // Look up the address of the active NN.\n-    Configuration confForOtherNode \u003d new Configuration(myConf);\n-    NameNode.initializeGenericKeys(confForOtherNode, nsId, otherNn);\n-    return confForOtherNode;\n+    List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n+\n+    // Look up the address of the other NNs\n+    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n+    for (String nn : otherNn) {\n+      Configuration confForOtherNode \u003d new Configuration(myConf);\n+      NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n+      confs.add(confForOtherNode);\n+    }\n+    return confs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cConfiguration\u003e getConfForOtherNodes(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n\n    // Look up the address of the other NNs\n    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n    for (String nn : otherNn) {\n      Configuration confForOtherNode \u003d new Configuration(myConf);\n      NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n      confs.add(confForOtherNode);\n    }\n    return confs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
          "extendedDetails": {
            "oldValue": "getConfForOtherNode",
            "newValue": "getConfForOtherNodes"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.\n",
          "commitDate": "23/06/15 5:26 PM",
          "commitName": "49dfad942970459297f72632ed8dfd353e0c86de",
          "commitAuthor": "Aaron T. Myers",
          "commitDateOld": "21/04/15 9:59 PM",
          "commitNameOld": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 62.81,
          "commitsBetweenForRepo": 570,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,15 @@\n-  public static Configuration getConfForOtherNode(\n+  public static List\u003cConfiguration\u003e getConfForOtherNodes(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n-    String otherNn \u003d getNameNodeIdOfOtherNode(myConf, nsId);\n-    \n-    // Look up the address of the active NN.\n-    Configuration confForOtherNode \u003d new Configuration(myConf);\n-    NameNode.initializeGenericKeys(confForOtherNode, nsId, otherNn);\n-    return confForOtherNode;\n+    List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n+\n+    // Look up the address of the other NNs\n+    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n+    for (String nn : otherNn) {\n+      Configuration confForOtherNode \u003d new Configuration(myConf);\n+      NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n+      confs.add(confForOtherNode);\n+    }\n+    return confs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cConfiguration\u003e getConfForOtherNodes(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n\n    // Look up the address of the other NNs\n    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n    for (String nn : otherNn) {\n      Configuration confForOtherNode \u003d new Configuration(myConf);\n      NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n      confs.add(confForOtherNode);\n    }\n    return confs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
          "extendedDetails": {
            "oldValue": "Configuration",
            "newValue": "List\u003cConfiguration\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.\n",
          "commitDate": "23/06/15 5:26 PM",
          "commitName": "49dfad942970459297f72632ed8dfd353e0c86de",
          "commitAuthor": "Aaron T. Myers",
          "commitDateOld": "21/04/15 9:59 PM",
          "commitNameOld": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 62.81,
          "commitsBetweenForRepo": 570,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,15 @@\n-  public static Configuration getConfForOtherNode(\n+  public static List\u003cConfiguration\u003e getConfForOtherNodes(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n-    String otherNn \u003d getNameNodeIdOfOtherNode(myConf, nsId);\n-    \n-    // Look up the address of the active NN.\n-    Configuration confForOtherNode \u003d new Configuration(myConf);\n-    NameNode.initializeGenericKeys(confForOtherNode, nsId, otherNn);\n-    return confForOtherNode;\n+    List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n+\n+    // Look up the address of the other NNs\n+    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n+    for (String nn : otherNn) {\n+      Configuration confForOtherNode \u003d new Configuration(myConf);\n+      NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n+      confs.add(confForOtherNode);\n+    }\n+    return confs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cConfiguration\u003e getConfForOtherNodes(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    List\u003cString\u003e otherNn \u003d getNameNodeIdOfOtherNodes(myConf, nsId);\n\n    // Look up the address of the other NNs\n    List\u003cConfiguration\u003e confs \u003d new ArrayList\u003cConfiguration\u003e(otherNn.size());\n    for (String nn : otherNn) {\n      Configuration confForOtherNode \u003d new Configuration(myConf);\n      NameNode.initializeGenericKeys(confForOtherNode, nsId, nn);\n      confs.add(confForOtherNode);\n    }\n    return confs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76": {
      "type": "Ybodychange",
      "commitMessage": "Fix issue with NN/DN re-registration.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358347 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/07/12 11:59 AM",
      "commitName": "fb95fce24056c0b0aa5b77683c684fe1b68c4f76",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "20/05/12 2:13 PM",
      "commitNameOld": "260dfa367e3c161edcc9d2b2217661710199c95e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 46.91,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,11 @@\n   public static Configuration getConfForOtherNode(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n-    Preconditions.checkArgument(nsId !\u003d null,\n-        \"Could not determine namespace id. Please ensure that this \" +\n-        \"machine is one of the machines listed as a NN RPC address, \" +\n-        \"or configure \" + DFSConfigKeys.DFS_NAMESERVICE_ID);\n-    \n-    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n-    String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n-    Preconditions.checkArgument(nnIds !\u003d null,\n-        \"Could not determine namenode ids in namespace \u0027%s\u0027. \" +\n-        \"Please configure \" +\n-        DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX,\n-            nsId),\n-        nsId);\n-    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n-        \"Expected exactly 2 NameNodes in namespace \u0027%s\u0027. \" +\n-        \"Instead, got only %s (NN ids were \u0027%s\u0027\",\n-        nsId, nnIds.size(), Joiner.on(\"\u0027,\u0027\").join(nnIds));\n-    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n-        \"Could not determine own NN ID in namespace \u0027%s\u0027. Please \" +\n-        \"ensure that this node is one of the machines listed as an \" +\n-        \"NN RPC address, or configure \" + DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY,\n-        nsId);\n-\n-    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n-    nnSet.remove(myNNId);\n-    assert nnSet.size() \u003d\u003d 1;\n-    String activeNN \u003d nnSet.get(0);\n+    String otherNn \u003d getNameNodeIdOfOtherNode(myConf, nsId);\n     \n     // Look up the address of the active NN.\n     Configuration confForOtherNode \u003d new Configuration(myConf);\n-    NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n+    NameNode.initializeGenericKeys(confForOtherNode, nsId, otherNn);\n     return confForOtherNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration getConfForOtherNode(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    String otherNn \u003d getNameNodeIdOfOtherNode(myConf, nsId);\n    \n    // Look up the address of the active NN.\n    Configuration confForOtherNode \u003d new Configuration(myConf);\n    NameNode.initializeGenericKeys(confForOtherNode, nsId, otherNn);\n    return confForOtherNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "260dfa367e3c161edcc9d2b2217661710199c95e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2885. Remove \"federation\" from the nameservice config options. Contributed by Tsz Wo (Nicholas), SZE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1340841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/05/12 2:13 PM",
      "commitName": "260dfa367e3c161edcc9d2b2217661710199c95e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "17/04/12 3:21 PM",
      "commitNameOld": "c80dbe5e09ab1eb3c1b0277055f28717895d6dd9",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 32.95,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public static Configuration getConfForOtherNode(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n     Preconditions.checkArgument(nsId !\u003d null,\n         \"Could not determine namespace id. Please ensure that this \" +\n         \"machine is one of the machines listed as a NN RPC address, \" +\n-        \"or configure \" + DFSConfigKeys.DFS_FEDERATION_NAMESERVICE_ID);\n+        \"or configure \" + DFSConfigKeys.DFS_NAMESERVICE_ID);\n     \n     Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n     String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n     Preconditions.checkArgument(nnIds !\u003d null,\n         \"Could not determine namenode ids in namespace \u0027%s\u0027. \" +\n         \"Please configure \" +\n         DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX,\n             nsId),\n         nsId);\n     Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n         \"Expected exactly 2 NameNodes in namespace \u0027%s\u0027. \" +\n         \"Instead, got only %s (NN ids were \u0027%s\u0027\",\n         nsId, nnIds.size(), Joiner.on(\"\u0027,\u0027\").join(nnIds));\n     Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n         \"Could not determine own NN ID in namespace \u0027%s\u0027. Please \" +\n         \"ensure that this node is one of the machines listed as an \" +\n         \"NN RPC address, or configure \" + DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY,\n         nsId);\n \n     ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n     nnSet.remove(myNNId);\n     assert nnSet.size() \u003d\u003d 1;\n     String activeNN \u003d nnSet.get(0);\n     \n     // Look up the address of the active NN.\n     Configuration confForOtherNode \u003d new Configuration(myConf);\n     NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n     return confForOtherNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration getConfForOtherNode(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    Preconditions.checkArgument(nsId !\u003d null,\n        \"Could not determine namespace id. Please ensure that this \" +\n        \"machine is one of the machines listed as a NN RPC address, \" +\n        \"or configure \" + DFSConfigKeys.DFS_NAMESERVICE_ID);\n    \n    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n    String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n    Preconditions.checkArgument(nnIds !\u003d null,\n        \"Could not determine namenode ids in namespace \u0027%s\u0027. \" +\n        \"Please configure \" +\n        DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX,\n            nsId),\n        nsId);\n    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n        \"Expected exactly 2 NameNodes in namespace \u0027%s\u0027. \" +\n        \"Instead, got only %s (NN ids were \u0027%s\u0027\",\n        nsId, nnIds.size(), Joiner.on(\"\u0027,\u0027\").join(nnIds));\n    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n        \"Could not determine own NN ID in namespace \u0027%s\u0027. Please \" +\n        \"ensure that this node is one of the machines listed as an \" +\n        \"NN RPC address, or configure \" + DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY,\n        nsId);\n\n    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n    nnSet.remove(myNNId);\n    assert nnSet.size() \u003d\u003d 1;\n    String activeNN \u003d nnSet.get(0);\n    \n    // Look up the address of the active NN.\n    Configuration confForOtherNode \u003d new Configuration(myConf);\n    NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n    return confForOtherNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "c17b4f8eefe5b77b77761a0bb46b49cd1ea6965d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2819. Document new HA-related configs in hdfs-default.xml. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240914 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 12:21 AM",
      "commitName": "c17b4f8eefe5b77b77761a0bb46b49cd1ea6965d",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "02/02/12 2:21 PM",
      "commitNameOld": "32c313d51cd2483ea510afe044c55eeaed7c2b2d",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 3.42,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public static Configuration getConfForOtherNode(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n     Preconditions.checkArgument(nsId !\u003d null,\n         \"Could not determine namespace id. Please ensure that this \" +\n         \"machine is one of the machines listed as a NN RPC address, \" +\n         \"or configure \" + DFSConfigKeys.DFS_FEDERATION_NAMESERVICE_ID);\n     \n     Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n     String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n     Preconditions.checkArgument(nnIds !\u003d null,\n         \"Could not determine namenode ids in namespace \u0027%s\u0027. \" +\n         \"Please configure \" +\n-        DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY,\n+        DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX,\n             nsId),\n         nsId);\n     Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n         \"Expected exactly 2 NameNodes in namespace \u0027%s\u0027. \" +\n         \"Instead, got only %s (NN ids were \u0027%s\u0027\",\n         nsId, nnIds.size(), Joiner.on(\"\u0027,\u0027\").join(nnIds));\n     Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n         \"Could not determine own NN ID in namespace \u0027%s\u0027. Please \" +\n         \"ensure that this node is one of the machines listed as an \" +\n         \"NN RPC address, or configure \" + DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY,\n         nsId);\n \n     ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n     nnSet.remove(myNNId);\n     assert nnSet.size() \u003d\u003d 1;\n     String activeNN \u003d nnSet.get(0);\n     \n     // Look up the address of the active NN.\n     Configuration confForOtherNode \u003d new Configuration(myConf);\n     NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n     return confForOtherNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration getConfForOtherNode(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    Preconditions.checkArgument(nsId !\u003d null,\n        \"Could not determine namespace id. Please ensure that this \" +\n        \"machine is one of the machines listed as a NN RPC address, \" +\n        \"or configure \" + DFSConfigKeys.DFS_FEDERATION_NAMESERVICE_ID);\n    \n    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n    String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n    Preconditions.checkArgument(nnIds !\u003d null,\n        \"Could not determine namenode ids in namespace \u0027%s\u0027. \" +\n        \"Please configure \" +\n        DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX,\n            nsId),\n        nsId);\n    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n        \"Expected exactly 2 NameNodes in namespace \u0027%s\u0027. \" +\n        \"Instead, got only %s (NN ids were \u0027%s\u0027\",\n        nsId, nnIds.size(), Joiner.on(\"\u0027,\u0027\").join(nnIds));\n    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n        \"Could not determine own NN ID in namespace \u0027%s\u0027. Please \" +\n        \"ensure that this node is one of the machines listed as an \" +\n        \"NN RPC address, or configure \" + DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY,\n        nsId);\n\n    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n    nnSet.remove(myNNId);\n    assert nnSet.size() \u003d\u003d 1;\n    String activeNN \u003d nnSet.get(0);\n    \n    // Look up the address of the active NN.\n    Configuration confForOtherNode \u003d new Configuration(myConf);\n    NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n    return confForOtherNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "32c313d51cd2483ea510afe044c55eeaed7c2b2d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2861. checkpointing should verify that the dfs.http.address has been configured to a non-loopback for peer NN. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1239886 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/12 2:21 PM",
      "commitName": "32c313d51cd2483ea510afe044c55eeaed7c2b2d",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "29/01/12 6:52 PM",
      "commitNameOld": "6122357da51bc447391a464a8f7b4de1bae2d8cf",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 3.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,37 @@\n   public static Configuration getConfForOtherNode(\n       Configuration myConf) {\n     \n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n+    Preconditions.checkArgument(nsId !\u003d null,\n+        \"Could not determine namespace id. Please ensure that this \" +\n+        \"machine is one of the machines listed as a NN RPC address, \" +\n+        \"or configure \" + DFSConfigKeys.DFS_FEDERATION_NAMESERVICE_ID);\n+    \n     Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n     String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n     Preconditions.checkArgument(nnIds !\u003d null,\n-        \"Could not determine namenode ids in namespace \u0027%s\u0027\",\n+        \"Could not determine namenode ids in namespace \u0027%s\u0027. \" +\n+        \"Please configure \" +\n+        DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY,\n+            nsId),\n         nsId);\n     Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n-        \"Expected exactly 2 NameNodes in this namespace. Instead, got: \u0027%s\u0027\",\n-        Joiner.on(\"\u0027,\u0027\").join(nnIds));\n+        \"Expected exactly 2 NameNodes in namespace \u0027%s\u0027. \" +\n+        \"Instead, got only %s (NN ids were \u0027%s\u0027\",\n+        nsId, nnIds.size(), Joiner.on(\"\u0027,\u0027\").join(nnIds));\n     Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n-        \"Could not determine own NN ID\");\n+        \"Could not determine own NN ID in namespace \u0027%s\u0027. Please \" +\n+        \"ensure that this node is one of the machines listed as an \" +\n+        \"NN RPC address, or configure \" + DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY,\n+        nsId);\n \n     ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n     nnSet.remove(myNNId);\n     assert nnSet.size() \u003d\u003d 1;\n     String activeNN \u003d nnSet.get(0);\n     \n     // Look up the address of the active NN.\n     Configuration confForOtherNode \u003d new Configuration(myConf);\n     NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n     return confForOtherNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration getConfForOtherNode(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    Preconditions.checkArgument(nsId !\u003d null,\n        \"Could not determine namespace id. Please ensure that this \" +\n        \"machine is one of the machines listed as a NN RPC address, \" +\n        \"or configure \" + DFSConfigKeys.DFS_FEDERATION_NAMESERVICE_ID);\n    \n    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n    String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n    Preconditions.checkArgument(nnIds !\u003d null,\n        \"Could not determine namenode ids in namespace \u0027%s\u0027. \" +\n        \"Please configure \" +\n        DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY,\n            nsId),\n        nsId);\n    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n        \"Expected exactly 2 NameNodes in namespace \u0027%s\u0027. \" +\n        \"Instead, got only %s (NN ids were \u0027%s\u0027\",\n        nsId, nnIds.size(), Joiner.on(\"\u0027,\u0027\").join(nnIds));\n    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n        \"Could not determine own NN ID in namespace \u0027%s\u0027. Please \" +\n        \"ensure that this node is one of the machines listed as an \" +\n        \"NN RPC address, or configure \" + DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY,\n        nsId);\n\n    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n    nnSet.remove(myNNId);\n    assert nnSet.size() \u003d\u003d 1;\n    String activeNN \u003d nnSet.get(0);\n    \n    // Look up the address of the active NN.\n    Configuration confForOtherNode \u003d new Configuration(myConf);\n    NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n    return confForOtherNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2737. Automatically trigger log rolls periodically on the active NN. Contributed by Todd Lipcon and Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1234256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/01/12 7:17 PM",
      "commitName": "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,25 @@\n+  public static Configuration getConfForOtherNode(\n+      Configuration myConf) {\n+    \n+    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n+    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n+    String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n+    Preconditions.checkArgument(nnIds !\u003d null,\n+        \"Could not determine namenode ids in namespace \u0027%s\u0027\",\n+        nsId);\n+    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n+        \"Expected exactly 2 NameNodes in this namespace. Instead, got: \u0027%s\u0027\",\n+        Joiner.on(\"\u0027,\u0027\").join(nnIds));\n+    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n+        \"Could not determine own NN ID\");\n+\n+    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n+    nnSet.remove(myNNId);\n+    assert nnSet.size() \u003d\u003d 1;\n+    String activeNN \u003d nnSet.get(0);\n+    \n+    // Look up the address of the active NN.\n+    Configuration confForOtherNode \u003d new Configuration(myConf);\n+    NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n+    return confForOtherNode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration getConfForOtherNode(\n      Configuration myConf) {\n    \n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(myConf);\n    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(myConf, nsId);\n    String myNNId \u003d myConf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n    Preconditions.checkArgument(nnIds !\u003d null,\n        \"Could not determine namenode ids in namespace \u0027%s\u0027\",\n        nsId);\n    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n        \"Expected exactly 2 NameNodes in this namespace. Instead, got: \u0027%s\u0027\",\n        Joiner.on(\"\u0027,\u0027\").join(nnIds));\n    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n        \"Could not determine own NN ID\");\n\n    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n    nnSet.remove(myNNId);\n    assert nnSet.size() \u003d\u003d 1;\n    String activeNN \u003d nnSet.get(0);\n    \n    // Look up the address of the active NN.\n    Configuration confForOtherNode \u003d new Configuration(myConf);\n    NameNode.initializeGenericKeys(confForOtherNode, nsId, activeNN);\n    return confForOtherNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java"
    }
  }
}