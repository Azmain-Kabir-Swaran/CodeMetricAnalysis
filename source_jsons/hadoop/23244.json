{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InputSampler.java",
  "functionName": "writePartitionFile",
  "functionId": "writePartitionFile___job-Job__sampler-Sampler__K,V__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
  "functionStartLine": 312,
  "functionEndLine": 340,
  "numCommitsSeen": 9,
  "timeTaken": 4700,
  "changeHistory": [
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "75c31df9dd1d9435aec4cc245e1e58ca326e6159",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "75c31df9dd1d9435aec4cc245e1e58ca326e6159": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "21/03/15 9:33 PM",
      "commitNameOld": "1d5c796d654c8959972d15cc6742731a99380bfc",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 604.6,
      "commitsBetweenForRepo": 4587,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   public static \u003cK,V\u003e void writePartitionFile(Job job, Sampler\u003cK,V\u003e sampler) \n       throws IOException, ClassNotFoundException, InterruptedException {\n     Configuration conf \u003d job.getConfiguration();\n     final InputFormat inf \u003d \n         ReflectionUtils.newInstance(job.getInputFormatClass(), conf);\n     int numPartitions \u003d job.getNumReduceTasks();\n     K[] samples \u003d (K[])sampler.getSample(inf, job);\n     LOG.info(\"Using \" + samples.length + \" samples\");\n     RawComparator\u003cK\u003e comparator \u003d\n       (RawComparator\u003cK\u003e) job.getSortComparator();\n     Arrays.sort(samples, comparator);\n     Path dst \u003d new Path(TotalOrderPartitioner.getPartitionFile(conf));\n     FileSystem fs \u003d dst.getFileSystem(conf);\n-    if (fs.exists(dst)) {\n-      fs.delete(dst, false);\n-    }\n-    SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs, \n+    fs.delete(dst, false);\n+    SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs,\n       conf, dst, job.getMapOutputKeyClass(), NullWritable.class);\n     NullWritable nullValue \u003d NullWritable.get();\n     float stepSize \u003d samples.length / (float) numPartitions;\n     int last \u003d -1;\n     for(int i \u003d 1; i \u003c numPartitions; ++i) {\n       int k \u003d Math.round(stepSize * i);\n       while (last \u003e\u003d k \u0026\u0026 comparator.compare(samples[last], samples[k]) \u003d\u003d 0) {\n         ++k;\n       }\n       writer.append(samples[k], nullValue);\n       last \u003d k;\n     }\n     writer.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cK,V\u003e void writePartitionFile(Job job, Sampler\u003cK,V\u003e sampler) \n      throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    final InputFormat inf \u003d \n        ReflectionUtils.newInstance(job.getInputFormatClass(), conf);\n    int numPartitions \u003d job.getNumReduceTasks();\n    K[] samples \u003d (K[])sampler.getSample(inf, job);\n    LOG.info(\"Using \" + samples.length + \" samples\");\n    RawComparator\u003cK\u003e comparator \u003d\n      (RawComparator\u003cK\u003e) job.getSortComparator();\n    Arrays.sort(samples, comparator);\n    Path dst \u003d new Path(TotalOrderPartitioner.getPartitionFile(conf));\n    FileSystem fs \u003d dst.getFileSystem(conf);\n    fs.delete(dst, false);\n    SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs,\n      conf, dst, job.getMapOutputKeyClass(), NullWritable.class);\n    NullWritable nullValue \u003d NullWritable.get();\n    float stepSize \u003d samples.length / (float) numPartitions;\n    int last \u003d -1;\n    for(int i \u003d 1; i \u003c numPartitions; ++i) {\n      int k \u003d Math.round(stepSize * i);\n      while (last \u003e\u003d k \u0026\u0026 comparator.compare(samples[last], samples[k]) \u003d\u003d 0) {\n        ++k;\n      }\n      writer.append(samples[k], nullValue);\n      last \u003d k;\n    }\n    writer.close();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
      "extendedDetails": {}
    },
    "75c31df9dd1d9435aec4cc245e1e58ca326e6159": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5020. Compile failure with JDK8 (Trevor Robinson via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521576 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 11:31 AM",
      "commitName": "75c31df9dd1d9435aec4cc245e1e58ca326e6159",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "08/05/13 2:42 PM",
      "commitNameOld": "f6167ef6c6026d8d3a9c567de7ac3cffe7fffcec",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 124.87,
      "commitsBetweenForRepo": 740,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public static \u003cK,V\u003e void writePartitionFile(Job job, Sampler\u003cK,V\u003e sampler) \n       throws IOException, ClassNotFoundException, InterruptedException {\n     Configuration conf \u003d job.getConfiguration();\n     final InputFormat inf \u003d \n         ReflectionUtils.newInstance(job.getInputFormatClass(), conf);\n     int numPartitions \u003d job.getNumReduceTasks();\n-    K[] samples \u003d sampler.getSample(inf, job);\n+    K[] samples \u003d (K[])sampler.getSample(inf, job);\n     LOG.info(\"Using \" + samples.length + \" samples\");\n     RawComparator\u003cK\u003e comparator \u003d\n       (RawComparator\u003cK\u003e) job.getSortComparator();\n     Arrays.sort(samples, comparator);\n     Path dst \u003d new Path(TotalOrderPartitioner.getPartitionFile(conf));\n     FileSystem fs \u003d dst.getFileSystem(conf);\n     if (fs.exists(dst)) {\n       fs.delete(dst, false);\n     }\n     SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs, \n       conf, dst, job.getMapOutputKeyClass(), NullWritable.class);\n     NullWritable nullValue \u003d NullWritable.get();\n     float stepSize \u003d samples.length / (float) numPartitions;\n     int last \u003d -1;\n     for(int i \u003d 1; i \u003c numPartitions; ++i) {\n       int k \u003d Math.round(stepSize * i);\n       while (last \u003e\u003d k \u0026\u0026 comparator.compare(samples[last], samples[k]) \u003d\u003d 0) {\n         ++k;\n       }\n       writer.append(samples[k], nullValue);\n       last \u003d k;\n     }\n     writer.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cK,V\u003e void writePartitionFile(Job job, Sampler\u003cK,V\u003e sampler) \n      throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    final InputFormat inf \u003d \n        ReflectionUtils.newInstance(job.getInputFormatClass(), conf);\n    int numPartitions \u003d job.getNumReduceTasks();\n    K[] samples \u003d (K[])sampler.getSample(inf, job);\n    LOG.info(\"Using \" + samples.length + \" samples\");\n    RawComparator\u003cK\u003e comparator \u003d\n      (RawComparator\u003cK\u003e) job.getSortComparator();\n    Arrays.sort(samples, comparator);\n    Path dst \u003d new Path(TotalOrderPartitioner.getPartitionFile(conf));\n    FileSystem fs \u003d dst.getFileSystem(conf);\n    if (fs.exists(dst)) {\n      fs.delete(dst, false);\n    }\n    SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs, \n      conf, dst, job.getMapOutputKeyClass(), NullWritable.class);\n    NullWritable nullValue \u003d NullWritable.get();\n    float stepSize \u003d samples.length / (float) numPartitions;\n    int last \u003d -1;\n    for(int i \u003d 1; i \u003c numPartitions; ++i) {\n      int k \u003d Math.round(stepSize * i);\n      while (last \u003e\u003d k \u0026\u0026 comparator.compare(samples[last], samples[k]) \u003d\u003d 0) {\n        ++k;\n      }\n      writer.append(samples[k], nullValue);\n      last \u003d k;\n    }\n    writer.close();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static \u003cK,V\u003e void writePartitionFile(Job job, Sampler\u003cK,V\u003e sampler) \n      throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    final InputFormat inf \u003d \n        ReflectionUtils.newInstance(job.getInputFormatClass(), conf);\n    int numPartitions \u003d job.getNumReduceTasks();\n    K[] samples \u003d sampler.getSample(inf, job);\n    LOG.info(\"Using \" + samples.length + \" samples\");\n    RawComparator\u003cK\u003e comparator \u003d\n      (RawComparator\u003cK\u003e) job.getSortComparator();\n    Arrays.sort(samples, comparator);\n    Path dst \u003d new Path(TotalOrderPartitioner.getPartitionFile(conf));\n    FileSystem fs \u003d dst.getFileSystem(conf);\n    if (fs.exists(dst)) {\n      fs.delete(dst, false);\n    }\n    SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs, \n      conf, dst, job.getMapOutputKeyClass(), NullWritable.class);\n    NullWritable nullValue \u003d NullWritable.get();\n    float stepSize \u003d samples.length / (float) numPartitions;\n    int last \u003d -1;\n    for(int i \u003d 1; i \u003c numPartitions; ++i) {\n      int k \u003d Math.round(stepSize * i);\n      while (last \u003e\u003d k \u0026\u0026 comparator.compare(samples[last], samples[k]) \u003d\u003d 0) {\n        ++k;\n      }\n      writer.append(samples[k], nullValue);\n      last \u003d k;\n    }\n    writer.close();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static \u003cK,V\u003e void writePartitionFile(Job job, Sampler\u003cK,V\u003e sampler) \n      throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    final InputFormat inf \u003d \n        ReflectionUtils.newInstance(job.getInputFormatClass(), conf);\n    int numPartitions \u003d job.getNumReduceTasks();\n    K[] samples \u003d sampler.getSample(inf, job);\n    LOG.info(\"Using \" + samples.length + \" samples\");\n    RawComparator\u003cK\u003e comparator \u003d\n      (RawComparator\u003cK\u003e) job.getSortComparator();\n    Arrays.sort(samples, comparator);\n    Path dst \u003d new Path(TotalOrderPartitioner.getPartitionFile(conf));\n    FileSystem fs \u003d dst.getFileSystem(conf);\n    if (fs.exists(dst)) {\n      fs.delete(dst, false);\n    }\n    SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs, \n      conf, dst, job.getMapOutputKeyClass(), NullWritable.class);\n    NullWritable nullValue \u003d NullWritable.get();\n    float stepSize \u003d samples.length / (float) numPartitions;\n    int last \u003d -1;\n    for(int i \u003d 1; i \u003c numPartitions; ++i) {\n      int k \u003d Math.round(stepSize * i);\n      while (last \u003e\u003d k \u0026\u0026 comparator.compare(samples[last], samples[k]) \u003d\u003d 0) {\n        ++k;\n      }\n      writer.append(samples[k], nullValue);\n      last \u003d k;\n    }\n    writer.close();\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,31 @@\n+  public static \u003cK,V\u003e void writePartitionFile(Job job, Sampler\u003cK,V\u003e sampler) \n+      throws IOException, ClassNotFoundException, InterruptedException {\n+    Configuration conf \u003d job.getConfiguration();\n+    final InputFormat inf \u003d \n+        ReflectionUtils.newInstance(job.getInputFormatClass(), conf);\n+    int numPartitions \u003d job.getNumReduceTasks();\n+    K[] samples \u003d sampler.getSample(inf, job);\n+    LOG.info(\"Using \" + samples.length + \" samples\");\n+    RawComparator\u003cK\u003e comparator \u003d\n+      (RawComparator\u003cK\u003e) job.getSortComparator();\n+    Arrays.sort(samples, comparator);\n+    Path dst \u003d new Path(TotalOrderPartitioner.getPartitionFile(conf));\n+    FileSystem fs \u003d dst.getFileSystem(conf);\n+    if (fs.exists(dst)) {\n+      fs.delete(dst, false);\n+    }\n+    SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs, \n+      conf, dst, job.getMapOutputKeyClass(), NullWritable.class);\n+    NullWritable nullValue \u003d NullWritable.get();\n+    float stepSize \u003d samples.length / (float) numPartitions;\n+    int last \u003d -1;\n+    for(int i \u003d 1; i \u003c numPartitions; ++i) {\n+      int k \u003d Math.round(stepSize * i);\n+      while (last \u003e\u003d k \u0026\u0026 comparator.compare(samples[last], samples[k]) \u003d\u003d 0) {\n+        ++k;\n+      }\n+      writer.append(samples[k], nullValue);\n+      last \u003d k;\n+    }\n+    writer.close();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cK,V\u003e void writePartitionFile(Job job, Sampler\u003cK,V\u003e sampler) \n      throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    final InputFormat inf \u003d \n        ReflectionUtils.newInstance(job.getInputFormatClass(), conf);\n    int numPartitions \u003d job.getNumReduceTasks();\n    K[] samples \u003d sampler.getSample(inf, job);\n    LOG.info(\"Using \" + samples.length + \" samples\");\n    RawComparator\u003cK\u003e comparator \u003d\n      (RawComparator\u003cK\u003e) job.getSortComparator();\n    Arrays.sort(samples, comparator);\n    Path dst \u003d new Path(TotalOrderPartitioner.getPartitionFile(conf));\n    FileSystem fs \u003d dst.getFileSystem(conf);\n    if (fs.exists(dst)) {\n      fs.delete(dst, false);\n    }\n    SequenceFile.Writer writer \u003d SequenceFile.createWriter(fs, \n      conf, dst, job.getMapOutputKeyClass(), NullWritable.class);\n    NullWritable nullValue \u003d NullWritable.get();\n    float stepSize \u003d samples.length / (float) numPartitions;\n    int last \u003d -1;\n    for(int i \u003d 1; i \u003c numPartitions; ++i) {\n      int k \u003d Math.round(stepSize * i);\n      while (last \u003e\u003d k \u0026\u0026 comparator.compare(samples[last], samples[k]) \u003d\u003d 0) {\n        ++k;\n      }\n      writer.append(samples[k], nullValue);\n      last \u003d k;\n    }\n    writer.close();\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java"
    }
  }
}