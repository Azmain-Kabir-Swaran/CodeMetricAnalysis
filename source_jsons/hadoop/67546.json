{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BaseSolver.java",
  "functionName": "toRecurringRDL",
  "functionId": "toRecurringRDL___containerSpec-Resource(modifiers-final)__containerRequests-RLESparseResourceAllocation(modifiers-final)__config-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/BaseSolver.java",
  "functionStartLine": 60,
  "functionEndLine": 93,
  "numCommitsSeen": 1,
  "timeTaken": 364,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,34 @@\n+  public final ReservationSubmissionRequest toRecurringRDL(\n+      final Resource containerSpec,\n+      final RLESparseResourceAllocation containerRequests,\n+      final Configuration config) {\n+    final int timeInterval \u003d\n+        config.getInt(ResourceEstimatorConfiguration.TIME_INTERVAL_KEY, 5);\n+    long pipelineSubmissionTime \u003d containerRequests.getEarliestStartTime();\n+    long pipelineFinishTime \u003d containerRequests.getLatestNonNullTime();\n+    final long containerMemAlloc \u003d containerSpec.getMemorySize();\n+    final long jobLen \u003d\n+        (pipelineFinishTime - pipelineSubmissionTime) / timeInterval;\n+    List\u003cReservationRequest\u003e reservationRequestList \u003d new ArrayList\u003c\u003e();\n+    for (int i \u003d 0; i \u003c jobLen; i++) {\n+      // container spec, # of containers, concurrency, duration\n+      ReservationRequest reservationRequest \u003d ReservationRequest\n+          .newInstance(containerSpec, (int) (\n+              containerRequests.getCapacityAtTime(i * timeInterval)\n+                  .getMemorySize() / containerMemAlloc), 1, timeInterval);\n+      reservationRequestList.add(reservationRequest);\n+    }\n+    ReservationRequests reservationRequests \u003d ReservationRequests\n+        .newInstance(reservationRequestList,\n+            ReservationRequestInterpreter.R_ALL);\n+    ReservationDefinition reservationDefinition \u003d ReservationDefinition\n+        .newInstance(pipelineSubmissionTime, pipelineFinishTime,\n+            reservationRequests, \"LpSolver#toRecurringRDL\");\n+    ReservationId reservationId \u003d\n+        ReservationId.newInstance(RAND.nextLong(), RAND.nextLong());\n+    ReservationSubmissionRequest reservationSubmissionRequest \u003d\n+        ReservationSubmissionRequest\n+            .newInstance(reservationDefinition, \"resourceestimator\",\n+                reservationId);\n+    return reservationSubmissionRequest;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public final ReservationSubmissionRequest toRecurringRDL(\n      final Resource containerSpec,\n      final RLESparseResourceAllocation containerRequests,\n      final Configuration config) {\n    final int timeInterval \u003d\n        config.getInt(ResourceEstimatorConfiguration.TIME_INTERVAL_KEY, 5);\n    long pipelineSubmissionTime \u003d containerRequests.getEarliestStartTime();\n    long pipelineFinishTime \u003d containerRequests.getLatestNonNullTime();\n    final long containerMemAlloc \u003d containerSpec.getMemorySize();\n    final long jobLen \u003d\n        (pipelineFinishTime - pipelineSubmissionTime) / timeInterval;\n    List\u003cReservationRequest\u003e reservationRequestList \u003d new ArrayList\u003c\u003e();\n    for (int i \u003d 0; i \u003c jobLen; i++) {\n      // container spec, # of containers, concurrency, duration\n      ReservationRequest reservationRequest \u003d ReservationRequest\n          .newInstance(containerSpec, (int) (\n              containerRequests.getCapacityAtTime(i * timeInterval)\n                  .getMemorySize() / containerMemAlloc), 1, timeInterval);\n      reservationRequestList.add(reservationRequest);\n    }\n    ReservationRequests reservationRequests \u003d ReservationRequests\n        .newInstance(reservationRequestList,\n            ReservationRequestInterpreter.R_ALL);\n    ReservationDefinition reservationDefinition \u003d ReservationDefinition\n        .newInstance(pipelineSubmissionTime, pipelineFinishTime,\n            reservationRequests, \"LpSolver#toRecurringRDL\");\n    ReservationId reservationId \u003d\n        ReservationId.newInstance(RAND.nextLong(), RAND.nextLong());\n    ReservationSubmissionRequest reservationSubmissionRequest \u003d\n        ReservationSubmissionRequest\n            .newInstance(reservationDefinition, \"resourceestimator\",\n                reservationId);\n    return reservationSubmissionRequest;\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/BaseSolver.java"
    }
  }
}