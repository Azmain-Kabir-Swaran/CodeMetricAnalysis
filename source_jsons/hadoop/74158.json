{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceAuthorizationManager.java",
  "functionName": "refreshWithLoadedConfiguration",
  "functionId": "refreshWithLoadedConfiguration___conf-Configuration__provider-PolicyProvider",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
  "functionStartLine": 156,
  "functionEndLine": 203,
  "numCommitsSeen": 16,
  "timeTaken": 2003,
  "changeHistory": [
    "20625c8f048701c9516da159b24c0b33983e4bb7",
    "c1cd41cc49ad99e733dc6b4e90cf29bb8020be06",
    "bbbbd270c7ff0fba55ecd863104ced4c27a8478b",
    "44ac7437addedcd1f67a8992194ee29168d342cc",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "b812af964d100c50d065cdd9007cef31ea2642a8"
  ],
  "changeHistoryShort": {
    "20625c8f048701c9516da159b24c0b33983e4bb7": "Ybodychange",
    "c1cd41cc49ad99e733dc6b4e90cf29bb8020be06": "Ybodychange",
    "bbbbd270c7ff0fba55ecd863104ced4c27a8478b": "Ybodychange",
    "44ac7437addedcd1f67a8992194ee29168d342cc": "Ymodifierchange",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Yrename",
    "b812af964d100c50d065cdd9007cef31ea2642a8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "20625c8f048701c9516da159b24c0b33983e4bb7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10651. Add ability to restrict service access using IP addresses and hostnames. (Benoy Antony)\n",
      "commitDate": "08/01/15 10:06 AM",
      "commitName": "20625c8f048701c9516da159b24c0b33983e4bb7",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "17/08/14 10:06 AM",
      "commitNameOld": "c1cd41cc49ad99e733dc6b4e90cf29bb8020be06",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 144.04,
      "commitsBetweenForRepo": 1216,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,48 @@\n   public void refreshWithLoadedConfiguration(Configuration conf,\n       PolicyProvider provider) {\n     final Map\u003cClass\u003c?\u003e, AccessControlList[]\u003e newAcls \u003d\n       new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList[]\u003e();\n+    final Map\u003cClass\u003c?\u003e, MachineList[]\u003e newMachineLists \u003d\n+      new IdentityHashMap\u003cClass\u003c?\u003e, MachineList[]\u003e();\n     \n     String defaultAcl \u003d conf.get(\n         CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL,\n         AccessControlList.WILDCARD_ACL_VALUE);\n \n     String defaultBlockedAcl \u003d conf.get(\n       CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_BLOCKED_ACL, \"\");\n \n+    String defaultServiceHostsKey \u003d getHostKey(\n+      CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL);\n+    String defaultMachineList \u003d conf.get(defaultServiceHostsKey,\n+      MachineList.WILDCARD_VALUE);\n+    String defaultBlockedMachineList\u003d conf.get(\n+     defaultServiceHostsKey+ BLOCKED, \"\");\n+\n     // Parse the config file\n     Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d\n             new AccessControlList(\n                 conf.get(service.getServiceKey(),\n                     defaultAcl)\n             );\n         AccessControlList blockedAcl \u003d\n            new AccessControlList(\n            conf.get(service.getServiceKey() + BLOCKED,\n            defaultBlockedAcl));\n         newAcls.put(service.getProtocol(), new AccessControlList[] {acl, blockedAcl});\n+        String serviceHostsKey \u003d getHostKey(service.getServiceKey());\n+        MachineList machineList \u003d new MachineList (conf.get(serviceHostsKey, defaultMachineList));\n+        MachineList blockedMachineList \u003d new MachineList(\n+          conf.get(serviceHostsKey + BLOCKED, defaultBlockedMachineList));\n+        newMachineLists.put(service.getProtocol(),\n+            new MachineList[] {machineList, blockedMachineList});\n       }\n     }\n \n     // Flip to the newly parsed permissions\n     protocolToAcls \u003d newAcls;\n+    protocolToMachineLists \u003d newMachineLists;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshWithLoadedConfiguration(Configuration conf,\n      PolicyProvider provider) {\n    final Map\u003cClass\u003c?\u003e, AccessControlList[]\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList[]\u003e();\n    final Map\u003cClass\u003c?\u003e, MachineList[]\u003e newMachineLists \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, MachineList[]\u003e();\n    \n    String defaultAcl \u003d conf.get(\n        CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL,\n        AccessControlList.WILDCARD_ACL_VALUE);\n\n    String defaultBlockedAcl \u003d conf.get(\n      CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_BLOCKED_ACL, \"\");\n\n    String defaultServiceHostsKey \u003d getHostKey(\n      CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL);\n    String defaultMachineList \u003d conf.get(defaultServiceHostsKey,\n      MachineList.WILDCARD_VALUE);\n    String defaultBlockedMachineList\u003d conf.get(\n     defaultServiceHostsKey+ BLOCKED, \"\");\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d\n            new AccessControlList(\n                conf.get(service.getServiceKey(),\n                    defaultAcl)\n            );\n        AccessControlList blockedAcl \u003d\n           new AccessControlList(\n           conf.get(service.getServiceKey() + BLOCKED,\n           defaultBlockedAcl));\n        newAcls.put(service.getProtocol(), new AccessControlList[] {acl, blockedAcl});\n        String serviceHostsKey \u003d getHostKey(service.getServiceKey());\n        MachineList machineList \u003d new MachineList (conf.get(serviceHostsKey, defaultMachineList));\n        MachineList blockedMachineList \u003d new MachineList(\n          conf.get(serviceHostsKey + BLOCKED, defaultBlockedMachineList));\n        newMachineLists.put(service.getProtocol(),\n            new MachineList[] {machineList, blockedMachineList});\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcls \u003d newAcls;\n    protocolToMachineLists \u003d newMachineLists;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {}
    },
    "c1cd41cc49ad99e733dc6b4e90cf29bb8020be06": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10650. Add ability to specify a reverse ACL (black list) of users and groups. (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618482 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/14 10:06 AM",
      "commitName": "c1cd41cc49ad99e733dc6b4e90cf29bb8020be06",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "27/06/14 11:43 AM",
      "commitNameOld": "bbbbd270c7ff0fba55ecd863104ced4c27a8478b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 50.93,
      "commitsBetweenForRepo": 367,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n   public void refreshWithLoadedConfiguration(Configuration conf,\n       PolicyProvider provider) {\n-    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n-        new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n+    final Map\u003cClass\u003c?\u003e, AccessControlList[]\u003e newAcls \u003d\n+      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList[]\u003e();\n     \n     String defaultAcl \u003d conf.get(\n         CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL,\n         AccessControlList.WILDCARD_ACL_VALUE);\n \n+    String defaultBlockedAcl \u003d conf.get(\n+      CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_BLOCKED_ACL, \"\");\n+\n     // Parse the config file\n     Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d\n             new AccessControlList(\n                 conf.get(service.getServiceKey(),\n                     defaultAcl)\n             );\n-        newAcls.put(service.getProtocol(), acl);\n+        AccessControlList blockedAcl \u003d\n+           new AccessControlList(\n+           conf.get(service.getServiceKey() + BLOCKED,\n+           defaultBlockedAcl));\n+        newAcls.put(service.getProtocol(), new AccessControlList[] {acl, blockedAcl});\n       }\n     }\n \n     // Flip to the newly parsed permissions\n-    protocolToAcl \u003d newAcls;\n+    protocolToAcls \u003d newAcls;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshWithLoadedConfiguration(Configuration conf,\n      PolicyProvider provider) {\n    final Map\u003cClass\u003c?\u003e, AccessControlList[]\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList[]\u003e();\n    \n    String defaultAcl \u003d conf.get(\n        CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL,\n        AccessControlList.WILDCARD_ACL_VALUE);\n\n    String defaultBlockedAcl \u003d conf.get(\n      CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_BLOCKED_ACL, \"\");\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d\n            new AccessControlList(\n                conf.get(service.getServiceKey(),\n                    defaultAcl)\n            );\n        AccessControlList blockedAcl \u003d\n           new AccessControlList(\n           conf.get(service.getServiceKey() + BLOCKED,\n           defaultBlockedAcl));\n        newAcls.put(service.getProtocol(), new AccessControlList[] {acl, blockedAcl});\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcls \u003d newAcls;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {}
    },
    "bbbbd270c7ff0fba55ecd863104ced4c27a8478b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10649. Allow overriding the default ACL for service authorization (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606179 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/06/14 11:43 AM",
      "commitName": "bbbbd270c7ff0fba55ecd863104ced4c27a8478b",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "17/06/14 10:29 PM",
      "commitNameOld": "44ac7437addedcd1f67a8992194ee29168d342cc",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 9.55,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   public void refreshWithLoadedConfiguration(Configuration conf,\n       PolicyProvider provider) {\n     final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n         new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n+    \n+    String defaultAcl \u003d conf.get(\n+        CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL,\n+        AccessControlList.WILDCARD_ACL_VALUE);\n \n     // Parse the config file\n     Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d\n             new AccessControlList(\n                 conf.get(service.getServiceKey(),\n-                    AccessControlList.WILDCARD_ACL_VALUE)\n+                    defaultAcl)\n             );\n         newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n     protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshWithLoadedConfiguration(Configuration conf,\n      PolicyProvider provider) {\n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n        new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n    \n    String defaultAcl \u003d conf.get(\n        CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL,\n        AccessControlList.WILDCARD_ACL_VALUE);\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d\n            new AccessControlList(\n                conf.get(service.getServiceKey(),\n                    defaultAcl)\n            );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {}
    },
    "44ac7437addedcd1f67a8992194ee29168d342cc": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-10590. ServiceAuthorizationManager is not threadsafe. (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603356 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/14 10:29 PM",
      "commitName": "44ac7437addedcd1f67a8992194ee29168d342cc",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "10/02/14 2:50 PM",
      "commitNameOld": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 127.28,
      "commitsBetweenForRepo": 893,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n-  public synchronized void refreshWithLoadedConfiguration(Configuration conf,\n+  public void refreshWithLoadedConfiguration(Configuration conf,\n       PolicyProvider provider) {\n     final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n         new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n     Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d\n             new AccessControlList(\n                 conf.get(service.getServiceKey(),\n                     AccessControlList.WILDCARD_ACL_VALUE)\n             );\n         newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n     protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshWithLoadedConfiguration(Configuration conf,\n      PolicyProvider provider) {\n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n        new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d\n            new AccessControlList(\n                conf.get(service.getServiceKey(),\n                    AccessControlList.WILDCARD_ACL_VALUE)\n            );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public]"
      }
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Yrename",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/14 2:46 PM",
      "commitNameOld": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n-  public synchronized void refreshWithConfiguration(Configuration conf,\n+  public synchronized void refreshWithLoadedConfiguration(Configuration conf,\n       PolicyProvider provider) {\n     final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n         new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n     Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d\n             new AccessControlList(\n                 conf.get(service.getServiceKey(),\n                     AccessControlList.WILDCARD_ACL_VALUE)\n             );\n         newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n     protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void refreshWithLoadedConfiguration(Configuration conf,\n      PolicyProvider provider) {\n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n        new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d\n            new AccessControlList(\n                conf.get(service.getServiceKey(),\n                    AccessControlList.WILDCARD_ACL_VALUE)\n            );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldValue": "refreshWithConfiguration",
        "newValue": "refreshWithLoadedConfiguration"
      }
    },
    "b812af964d100c50d065cdd9007cef31ea2642a8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1669. Modified RM HA handling of protocol level service-ACLS to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564549 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/14 2:46 PM",
      "commitName": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,21 @@\n+  public synchronized void refreshWithConfiguration(Configuration conf,\n+      PolicyProvider provider) {\n+    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n+        new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n+\n+    // Parse the config file\n+    Service[] services \u003d provider.getServices();\n+    if (services !\u003d null) {\n+      for (Service service : services) {\n+        AccessControlList acl \u003d\n+            new AccessControlList(\n+                conf.get(service.getServiceKey(),\n+                    AccessControlList.WILDCARD_ACL_VALUE)\n+            );\n+        newAcls.put(service.getProtocol(), acl);\n+      }\n+    }\n+\n+    // Flip to the newly parsed permissions\n+    protocolToAcl \u003d newAcls;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void refreshWithConfiguration(Configuration conf,\n      PolicyProvider provider) {\n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n        new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d\n            new AccessControlList(\n                conf.get(service.getServiceKey(),\n                    AccessControlList.WILDCARD_ACL_VALUE)\n            );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java"
    }
  }
}