{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LowRedundancyBlocks.java",
  "functionName": "update",
  "functionId": "update___block-BlockInfo__curReplicas-int__readOnlyReplicas-int__outOfServiceReplicas-int__curExpectedReplicas-int__curReplicasDelta-int__expectedReplicasDelta-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java",
  "functionStartLine": 442,
  "functionEndLine": 473,
  "numCommitsSeen": 66,
  "timeTaken": 10940,
  "changeHistory": [
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
    "07b98e7830c2214340cb7f434df674057e89df94",
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
    "32d043d9c5f4615058ea4f65a58ba271ba47fcb5",
    "5411dc559d5f73e4153e76fdff94a26869c17a37",
    "2c494a843699b478039f41336cf47bd4c635eb76",
    "6e3fcffe291faec40fa9214f4880a35a952836c4",
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
    "8c5b23b5473e447384f818d69d907d5c35ed6d6a",
    "db71de2e11cfa56a254ef4c92fea5ef4f8c19100",
    "dc847b39fdee85b45ef26e8e7380d722ffb89e4e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e": "Ybodychange",
    "07b98e7830c2214340cb7f434df674057e89df94": "Ybodychange",
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": "Ymultichange(Yparameterchange,Ybodychange)",
    "32d043d9c5f4615058ea4f65a58ba271ba47fcb5": "Ymultichange(Yfilerename,Ybodychange)",
    "5411dc559d5f73e4153e76fdff94a26869c17a37": "Ymultichange(Yparameterchange,Ybodychange)",
    "2c494a843699b478039f41336cf47bd4c635eb76": "Ybodychange",
    "6e3fcffe291faec40fa9214f4880a35a952836c4": "Ymultichange(Yparameterchange,Ybodychange)",
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31": "Ymultichange(Yparameterchange,Ybodychange)",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": "Ybodychange",
    "8c5b23b5473e447384f818d69d907d5c35ed6d6a": "Ybodychange",
    "db71de2e11cfa56a254ef4c92fea5ef4f8c19100": "Ybodychange",
    "dc847b39fdee85b45ef26e8e7380d722ffb89e4e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": "Yfilerename",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": "Yfilerename",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10999. Introduce separate stats for Replicated and Erasure Coded Blocks apart from the current Aggregated stats. (Manoj Govindassamy via lei)\n",
      "commitDate": "14/06/17 10:44 AM",
      "commitName": "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "01/05/17 12:19 PM",
      "commitNameOld": "07b98e7830c2214340cb7f434df674057e89df94",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 43.93,
      "commitsBetweenForRepo": 223,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,32 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n       int readOnlyReplicas, int outOfServiceReplicas,\n       int curExpectedReplicas,\n       int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n         outOfServiceReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n         outOfServiceReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     // oldPri is mostly correct, but not always. If not found with oldPri,\n     // other levels will be searched until the block is found \u0026 removed.\n-    remove(block, oldPri);\n-    if(priorityQueues.get(curPri).add(block)) {\n+    remove(block, oldPri, oldExpectedReplicas);\n+    if(add(block, curPri, curExpectedReplicas)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n               + \"replicas and needs {} replicas so is added to \"\n               + \"neededReconstructions at priority level {}\",\n           block, curReplicas, curExpectedReplicas, curPri);\n \n     }\n-    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n-      // corruptReplOneBlocks could possibly change\n-      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n-          curExpectedReplicas \u003d\u003d 1) {\n-        // add a new corrupt block with replication factor 1\n-        corruptReplOneBlocks++;\n-      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n-          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n-        // remove an existing corrupt block with replication factor 1\n-        corruptReplOneBlocks--;\n-      }\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n      int readOnlyReplicas, int outOfServiceReplicas,\n      int curExpectedReplicas,\n      int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n        outOfServiceReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n        outOfServiceReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    // oldPri is mostly correct, but not always. If not found with oldPri,\n    // other levels will be searched until the block is found \u0026 removed.\n    remove(block, oldPri, oldExpectedReplicas);\n    if(add(block, curPri, curExpectedReplicas)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n              + \"replicas and needs {} replicas so is added to \"\n              + \"neededReconstructions at priority level {}\",\n          block, curReplicas, curExpectedReplicas, curPri);\n\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java",
      "extendedDetails": {}
    },
    "07b98e7830c2214340cb7f434df674057e89df94": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11609. Some blocks can be permanently lost if nodes are decommissioned while dead. Contributed by Kihwal Lee.\n",
      "commitDate": "01/05/17 12:19 PM",
      "commitName": "07b98e7830c2214340cb7f434df674057e89df94",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "17/10/16 5:45 PM",
      "commitNameOld": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 195.77,
      "commitsBetweenForRepo": 1181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n       int readOnlyReplicas, int outOfServiceReplicas,\n       int curExpectedReplicas,\n       int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n         outOfServiceReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n         outOfServiceReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n-    if(oldPri !\u003d curPri) {\n-      remove(block, oldPri);\n-    }\n+    // oldPri is mostly correct, but not always. If not found with oldPri,\n+    // other levels will be searched until the block is found \u0026 removed.\n+    remove(block, oldPri);\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n               + \"replicas and needs {} replicas so is added to \"\n               + \"neededReconstructions at priority level {}\",\n           block, curReplicas, curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n      int readOnlyReplicas, int outOfServiceReplicas,\n      int curExpectedReplicas,\n      int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n        outOfServiceReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n        outOfServiceReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    // oldPri is mostly correct, but not always. If not found with oldPri,\n    // other levels will be searched until the block is found \u0026 removed.\n    remove(block, oldPri);\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n              + \"replicas and needs {} replicas so is added to \"\n              + \"neededReconstructions at priority level {}\",\n          block, curReplicas, curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java",
      "extendedDetails": {}
    },
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
      "commitDate": "17/10/16 5:45 PM",
      "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
      "commitAuthor": "Ming Ma",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
          "commitDate": "17/10/16 5:45 PM",
          "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
          "commitAuthor": "Ming Ma",
          "commitDateOld": "16/03/16 4:53 PM",
          "commitNameOld": "32d043d9c5f4615058ea4f65a58ba271ba47fcb5",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 215.04,
          "commitsBetweenForRepo": 1525,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n-                           int readOnlyReplicas, int decommissionedReplicas,\n-                           int curExpectedReplicas,\n-                           int curReplicasDelta, int expectedReplicasDelta) {\n+      int readOnlyReplicas, int outOfServiceReplicas,\n+      int curExpectedReplicas,\n+      int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n-        decommissionedReplicas, curExpectedReplicas);\n+        outOfServiceReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n-        decommissionedReplicas, oldExpectedReplicas);\n+        outOfServiceReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n               + \"replicas and needs {} replicas so is added to \"\n               + \"neededReconstructions at priority level {}\",\n           block, curReplicas, curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n      int readOnlyReplicas, int outOfServiceReplicas,\n      int curExpectedReplicas,\n      int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n        outOfServiceReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n        outOfServiceReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n              + \"replicas and needs {} replicas so is added to \"\n              + \"neededReconstructions at priority level {}\",\n          block, curReplicas, curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java",
          "extendedDetails": {
            "oldValue": "[block-BlockInfo, curReplicas-int, readOnlyReplicas-int, decommissionedReplicas-int, curExpectedReplicas-int, curReplicasDelta-int, expectedReplicasDelta-int]",
            "newValue": "[block-BlockInfo, curReplicas-int, readOnlyReplicas-int, outOfServiceReplicas-int, curExpectedReplicas-int, curReplicasDelta-int, expectedReplicasDelta-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
          "commitDate": "17/10/16 5:45 PM",
          "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
          "commitAuthor": "Ming Ma",
          "commitDateOld": "16/03/16 4:53 PM",
          "commitNameOld": "32d043d9c5f4615058ea4f65a58ba271ba47fcb5",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 215.04,
          "commitsBetweenForRepo": 1525,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n-                           int readOnlyReplicas, int decommissionedReplicas,\n-                           int curExpectedReplicas,\n-                           int curReplicasDelta, int expectedReplicasDelta) {\n+      int readOnlyReplicas, int outOfServiceReplicas,\n+      int curExpectedReplicas,\n+      int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n-        decommissionedReplicas, curExpectedReplicas);\n+        outOfServiceReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n-        decommissionedReplicas, oldExpectedReplicas);\n+        outOfServiceReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n               + \"replicas and needs {} replicas so is added to \"\n               + \"neededReconstructions at priority level {}\",\n           block, curReplicas, curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n      int readOnlyReplicas, int outOfServiceReplicas,\n      int curExpectedReplicas,\n      int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n        outOfServiceReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n        outOfServiceReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n              + \"replicas and needs {} replicas so is added to \"\n              + \"neededReconstructions at priority level {}\",\n          block, curReplicas, curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java",
          "extendedDetails": {}
        }
      ]
    },
    "32d043d9c5f4615058ea4f65a58ba271ba47fcb5": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-9857. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-1]. Contributed by Rakesh R.\n",
      "commitDate": "16/03/16 4:53 PM",
      "commitName": "32d043d9c5f4615058ea4f65a58ba271ba47fcb5",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-9857. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-1]. Contributed by Rakesh R.\n",
          "commitDate": "16/03/16 4:53 PM",
          "commitName": "32d043d9c5f4615058ea4f65a58ba271ba47fcb5",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "16/03/16 7:35 AM",
          "commitNameOld": "605fdcbb81687c73ba91a3bd0d607cabd3dc5a67",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.39,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n                            int readOnlyReplicas, int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n         decommissionedReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n         decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n+      NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n-          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n-              \"replicas and needs {} replicas so is added to \" +\n-              \"neededReplications at priority level {}\", block, curReplicas,\n-          curExpectedReplicas, curPri);\n+          \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n+              + \"replicas and needs {} replicas so is added to \"\n+              + \"neededReconstructions at priority level {}\",\n+          block, curReplicas, curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int readOnlyReplicas, int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n        decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n        decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n              + \"replicas and needs {} replicas so is added to \"\n              + \"neededReconstructions at priority level {}\",\n          block, curReplicas, curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9857. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-1]. Contributed by Rakesh R.\n",
          "commitDate": "16/03/16 4:53 PM",
          "commitName": "32d043d9c5f4615058ea4f65a58ba271ba47fcb5",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "16/03/16 7:35 AM",
          "commitNameOld": "605fdcbb81687c73ba91a3bd0d607cabd3dc5a67",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.39,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n                            int readOnlyReplicas, int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n         decommissionedReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n         decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n+      NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n-          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n-              \"replicas and needs {} replicas so is added to \" +\n-              \"neededReplications at priority level {}\", block, curReplicas,\n-          curExpectedReplicas, curPri);\n+          \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n+              + \"replicas and needs {} replicas so is added to \"\n+              + \"neededReconstructions at priority level {}\",\n+          block, curReplicas, curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int readOnlyReplicas, int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n        decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n        decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"LowRedundancyBlocks.update \" +\n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.LowRedundancyBlock.update: {} has only {} \"\n              + \"replicas and needs {} replicas so is added to \"\n              + \"neededReconstructions at priority level {}\",\n          block, curReplicas, curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java",
          "extendedDetails": {}
        }
      ]
    },
    "5411dc559d5f73e4153e76fdff94a26869c17a37": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9205. Do not schedule corrupt blocks for replication.  (szetszwo)\n",
      "commitDate": "15/10/15 3:07 AM",
      "commitName": "5411dc559d5f73e4153e76fdff94a26869c17a37",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9205. Do not schedule corrupt blocks for replication.  (szetszwo)\n",
          "commitDate": "15/10/15 3:07 AM",
          "commitName": "5411dc559d5f73e4153e76fdff94a26869c17a37",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "24/08/15 12:59 PM",
          "commitNameOld": "6b6a63bbbda920315d3d24b61ed3344a78a981b6",
          "commitAuthorOld": "",
          "daysBetweenCommits": 51.59,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n-                           int decommissionedReplicas,\n+                           int readOnlyReplicas, int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n-    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas,\n-        curExpectedReplicas);\n-    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas,\n-        oldExpectedReplicas);\n+    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n+        decommissionedReplicas, curExpectedReplicas);\n+    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n+        decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n               \"replicas and needs {} replicas so is added to \" +\n               \"neededReplications at priority level {}\", block, curReplicas,\n           curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int readOnlyReplicas, int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n        decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n        decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n              \"replicas and needs {} replicas so is added to \" +\n              \"neededReplications at priority level {}\", block, curReplicas,\n          curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
          "extendedDetails": {
            "oldValue": "[block-BlockInfo, curReplicas-int, decommissionedReplicas-int, curExpectedReplicas-int, curReplicasDelta-int, expectedReplicasDelta-int]",
            "newValue": "[block-BlockInfo, curReplicas-int, readOnlyReplicas-int, decommissionedReplicas-int, curExpectedReplicas-int, curReplicasDelta-int, expectedReplicasDelta-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9205. Do not schedule corrupt blocks for replication.  (szetszwo)\n",
          "commitDate": "15/10/15 3:07 AM",
          "commitName": "5411dc559d5f73e4153e76fdff94a26869c17a37",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "24/08/15 12:59 PM",
          "commitNameOld": "6b6a63bbbda920315d3d24b61ed3344a78a981b6",
          "commitAuthorOld": "",
          "daysBetweenCommits": 51.59,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n-                           int decommissionedReplicas,\n+                           int readOnlyReplicas, int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n-    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas,\n-        curExpectedReplicas);\n-    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas,\n-        oldExpectedReplicas);\n+    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n+        decommissionedReplicas, curExpectedReplicas);\n+    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n+        decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n               \"replicas and needs {} replicas so is added to \" +\n               \"neededReplications at priority level {}\", block, curReplicas,\n           curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int readOnlyReplicas, int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, readOnlyReplicas,\n        decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, readOnlyReplicas,\n        decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n              \"replicas and needs {} replicas so is added to \" +\n              \"neededReplications at priority level {}\", block, curReplicas,\n          curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
          "extendedDetails": {}
        }
      ]
    },
    "2c494a843699b478039f41336cf47bd4c635eb76": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8461. Erasure coding: fix priority level of UnderReplicatedBlocks for striped block. Contributed by Walter Su.\n",
      "commitDate": "06/07/15 4:39 PM",
      "commitName": "2c494a843699b478039f41336cf47bd4c635eb76",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:41 AM",
      "commitNameOld": "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 41.21,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   synchronized void update(BlockInfo block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n-    int curPri \u003d getPriority(curReplicas, decommissionedReplicas, curExpectedReplicas);\n-    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n+    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas,\n+        curExpectedReplicas);\n+    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas,\n+        oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n               \"replicas and needs {} replicas so is added to \" +\n               \"neededReplications at priority level {}\", block, curReplicas,\n           curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas,\n        curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas,\n        oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n              \"replicas and needs {} replicas so is added to \" +\n              \"neededReplications at priority level {}\", block, curReplicas,\n          curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {}
    },
    "6e3fcffe291faec40fa9214f4880a35a952836c4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8608. Merge HDFS-7912 to trunk and branch-2 (track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks). Contributed by Zhe Zhang.\n",
      "commitDate": "17/06/15 8:05 AM",
      "commitName": "6e3fcffe291faec40fa9214f4880a35a952836c4",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8608. Merge HDFS-7912 to trunk and branch-2 (track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks). Contributed by Zhe Zhang.\n",
          "commitDate": "17/06/15 8:05 AM",
          "commitName": "6e3fcffe291faec40fa9214f4880a35a952836c4",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "03/02/15 3:01 PM",
          "commitNameOld": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 133.67,
          "commitsBetweenForRepo": 1249,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,44 @@\n-  synchronized void update(Block block, int curReplicas,\n+  synchronized void update(BlockInfo block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n-    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n-    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n+    int curPri \u003d getPriority(curReplicas, decommissionedReplicas,\n+        curExpectedReplicas);\n+    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas,\n+        oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n               \"replicas and needs {} replicas so is added to \" +\n               \"neededReplications at priority level {}\", block, curReplicas,\n           curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(curReplicas, decommissionedReplicas,\n        curExpectedReplicas);\n    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas,\n        oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n              \"replicas and needs {} replicas so is added to \" +\n              \"neededReplications at priority level {}\", block, curReplicas,\n          curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
          "extendedDetails": {
            "oldValue": "[block-Block, curReplicas-int, decommissionedReplicas-int, curExpectedReplicas-int, curReplicasDelta-int, expectedReplicasDelta-int]",
            "newValue": "[block-BlockInfo, curReplicas-int, decommissionedReplicas-int, curExpectedReplicas-int, curReplicasDelta-int, expectedReplicasDelta-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8608. Merge HDFS-7912 to trunk and branch-2 (track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks). Contributed by Zhe Zhang.\n",
          "commitDate": "17/06/15 8:05 AM",
          "commitName": "6e3fcffe291faec40fa9214f4880a35a952836c4",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "03/02/15 3:01 PM",
          "commitNameOld": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 133.67,
          "commitsBetweenForRepo": 1249,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,44 @@\n-  synchronized void update(Block block, int curReplicas,\n+  synchronized void update(BlockInfo block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n-    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n-    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n+    int curPri \u003d getPriority(curReplicas, decommissionedReplicas,\n+        curExpectedReplicas);\n+    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas,\n+        oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n               \"replicas and needs {} replicas so is added to \" +\n               \"neededReplications at priority level {}\", block, curReplicas,\n           curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(curReplicas, decommissionedReplicas,\n        curExpectedReplicas);\n    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas,\n        oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n              \"replicas and needs {} replicas so is added to \" +\n              \"neededReplications at priority level {}\", block, curReplicas,\n          curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
          "extendedDetails": {}
        }
      ]
    },
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7912. Erasure Coding: track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:41 AM",
      "commitName": "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7912. Erasure Coding: track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks. Contributed by Jing Zhao.\n",
          "commitDate": "26/05/15 11:41 AM",
          "commitName": "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "03/02/15 3:01 PM",
          "commitNameOld": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 111.82,
          "commitsBetweenForRepo": 1107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-  synchronized void update(Block block, int curReplicas,\n+  synchronized void update(BlockInfo block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n-    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n-    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n+    int curPri \u003d getPriority(curReplicas, decommissionedReplicas, curExpectedReplicas);\n+    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n               \"replicas and needs {} replicas so is added to \" +\n               \"neededReplications at priority level {}\", block, curReplicas,\n           curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n              \"replicas and needs {} replicas so is added to \" +\n              \"neededReplications at priority level {}\", block, curReplicas,\n          curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
          "extendedDetails": {
            "oldValue": "[block-Block, curReplicas-int, decommissionedReplicas-int, curExpectedReplicas-int, curReplicasDelta-int, expectedReplicasDelta-int]",
            "newValue": "[block-BlockInfo, curReplicas-int, decommissionedReplicas-int, curExpectedReplicas-int, curReplicasDelta-int, expectedReplicasDelta-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7912. Erasure Coding: track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks. Contributed by Jing Zhao.\n",
          "commitDate": "26/05/15 11:41 AM",
          "commitName": "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "03/02/15 3:01 PM",
          "commitNameOld": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 111.82,
          "commitsBetweenForRepo": 1107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-  synchronized void update(Block block, int curReplicas,\n+  synchronized void update(BlockInfo block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n-    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n-    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n+    int curPri \u003d getPriority(curReplicas, decommissionedReplicas, curExpectedReplicas);\n+    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n               \"replicas and needs {} replicas so is added to \" +\n               \"neededReplications at priority level {}\", block, curReplicas,\n           curExpectedReplicas, curPri);\n \n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void update(BlockInfo block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n              \"replicas and needs {} replicas so is added to \" +\n              \"neededReplications at priority level {}\", block, curReplicas,\n          curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
          "extendedDetails": {}
        }
      ]
    },
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7712. Switch blockStateChangeLog to use slf4j.\n",
      "commitDate": "03/02/15 3:01 PM",
      "commitName": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "23/10/14 12:28 PM",
      "commitNameOld": "8c5b23b5473e447384f818d69d907d5c35ed6d6a",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 103.15,
      "commitsBetweenForRepo": 743,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,42 @@\n   synchronized void update(Block block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n-      if(NameNode.blockStateChangeLog.isDebugEnabled()) {\n-        NameNode.blockStateChangeLog.debug(\n-          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n-          + block\n-          + \" has only \"+ curReplicas\n-          + \" replicas and needs \" + curExpectedReplicas\n-          + \" replicas so is added to neededReplications\"\n-          + \" at priority level \" + curPri);\n-      }\n+      NameNode.blockStateChangeLog.debug(\n+          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n+              \"replicas and needs {} replicas so is added to \" +\n+              \"neededReplications at priority level {}\", block, curReplicas,\n+          curExpectedReplicas, curPri);\n+\n     }\n     if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n       // corruptReplOneBlocks could possibly change\n       if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas \u003d\u003d 1) {\n         // add a new corrupt block with replication factor 1\n         corruptReplOneBlocks++;\n       } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n           curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n         // remove an existing corrupt block with replication factor 1\n         corruptReplOneBlocks--;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void update(Block block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update: {} has only {} \" +\n              \"replicas and needs {} replicas so is added to \" +\n              \"neededReplications at priority level {}\", block, curReplicas,\n          curExpectedReplicas, curPri);\n\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {}
    },
    "8c5b23b5473e447384f818d69d907d5c35ed6d6a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7165. Separate block metrics for files with replication count 1. (Zhe Zhang via wang)\n",
      "commitDate": "23/10/14 12:28 PM",
      "commitName": "8c5b23b5473e447384f818d69d907d5c35ed6d6a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/03/14 4:32 PM",
      "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 212.83,
      "commitsBetweenForRepo": 1693,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,45 @@\n   synchronized void update(Block block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n       if(NameNode.blockStateChangeLog.isDebugEnabled()) {\n         NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n           + block\n           + \" has only \"+ curReplicas\n           + \" replicas and needs \" + curExpectedReplicas\n           + \" replicas so is added to neededReplications\"\n           + \" at priority level \" + curPri);\n       }\n     }\n+    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n+      // corruptReplOneBlocks could possibly change\n+      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n+          curExpectedReplicas \u003d\u003d 1) {\n+        // add a new corrupt block with replication factor 1\n+        corruptReplOneBlocks++;\n+      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n+          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n+        // remove an existing corrupt block with replication factor 1\n+        corruptReplOneBlocks--;\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void update(Block block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      if(NameNode.blockStateChangeLog.isDebugEnabled()) {\n        NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+ curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n    if (oldPri !\u003d curPri || expectedReplicasDelta !\u003d 0) {\n      // corruptReplOneBlocks could possibly change\n      if (curPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas \u003d\u003d 1) {\n        // add a new corrupt block with replication factor 1\n        corruptReplOneBlocks++;\n      } else if (oldPri \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS \u0026\u0026\n          curExpectedReplicas - expectedReplicasDelta \u003d\u003d 1) {\n        // remove an existing corrupt block with replication factor 1\n        corruptReplOneBlocks--;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {}
    },
    "db71de2e11cfa56a254ef4c92fea5ef4f8c19100": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4080. Add a separate logger for block state change logs to enable turning off those logs. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407566 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/12 10:07 AM",
      "commitName": "db71de2e11cfa56a254ef4c92fea5ef4f8c19100",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "09/02/12 6:05 PM",
      "commitNameOld": "dc847b39fdee85b45ef26e8e7380d722ffb89e4e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 273.67,
      "commitsBetweenForRepo": 1694,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   synchronized void update(Block block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n     if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n     if(priorityQueues.get(curPri).add(block)) {\n-      if(NameNode.stateChangeLog.isDebugEnabled()) {\n-        NameNode.stateChangeLog.debug(\n+      if(NameNode.blockStateChangeLog.isDebugEnabled()) {\n+        NameNode.blockStateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n           + block\n           + \" has only \"+ curReplicas\n           + \" replicas and needs \" + curExpectedReplicas\n           + \" replicas so is added to neededReplications\"\n           + \" at priority level \" + curPri);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void update(Block block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      if(NameNode.blockStateChangeLog.isDebugEnabled()) {\n        NameNode.blockStateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+ curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {}
    },
    "dc847b39fdee85b45ef26e8e7380d722ffb89e4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2486. Remove unnecessary priority level checks in UnderReplicatedBlocks.  Contributed by Uma Maheswara Rao G \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1242636 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/12 6:05 PM",
      "commitName": "dc847b39fdee85b45ef26e8e7380d722ffb89e4e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/12/11 5:58 PM",
      "commitNameOld": "43100e9c0e14bae32ee0ca9e76b90e79561b568c",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 59.01,
      "commitsBetweenForRepo": 342,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   synchronized void update(Block block, int curReplicas,\n                            int decommissionedReplicas,\n                            int curExpectedReplicas,\n                            int curReplicasDelta, int expectedReplicasDelta) {\n     int oldReplicas \u003d curReplicas-curReplicasDelta;\n     int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n     int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n     int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n         block +\n         \" curReplicas \" + curReplicas +\n         \" curExpectedReplicas \" + curExpectedReplicas +\n         \" oldReplicas \" + oldReplicas +\n         \" oldExpectedReplicas  \" + oldExpectedReplicas +\n         \" curPri  \" + curPri +\n         \" oldPri  \" + oldPri);\n     }\n-    if(oldPri !\u003d LEVEL \u0026\u0026 oldPri !\u003d curPri) {\n+    if(oldPri !\u003d curPri) {\n       remove(block, oldPri);\n     }\n-    if(curPri !\u003d LEVEL \u0026\u0026 priorityQueues.get(curPri).add(block)) {\n+    if(priorityQueues.get(curPri).add(block)) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n           \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n           + block\n           + \" has only \"+ curReplicas\n           + \" replicas and needs \" + curExpectedReplicas\n           + \" replicas so is added to neededReplications\"\n           + \" at priority level \" + curPri);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void update(Block block, int curReplicas,\n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(priorityQueues.get(curPri).add(block)) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+ curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void update(Block block, int curReplicas, \n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d LEVEL \u0026\u0026 oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(curPri !\u003d LEVEL \u0026\u0026 priorityQueues.get(curPri).add(block)) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void update(Block block, int curReplicas, \n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d LEVEL \u0026\u0026 oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(curPri !\u003d LEVEL \u0026\u0026 priorityQueues.get(curPri).add(block)) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java"
      }
    },
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 6:31 PM",
      "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 5:26 PM",
      "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void update(Block block, int curReplicas, \n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d LEVEL \u0026\u0026 oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(curPri !\u003d LEVEL \u0026\u0026 priorityQueues.get(curPri).add(block)) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/UnderReplicatedBlocks.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java"
      }
    },
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": {
      "type": "Yfilerename",
      "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 5:26 PM",
      "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 4:57 PM",
      "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void update(Block block, int curReplicas, \n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d LEVEL \u0026\u0026 oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(curPri !\u003d LEVEL \u0026\u0026 priorityQueues.get(curPri).add(block)) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/UnderReplicatedBlocks.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/UnderReplicatedBlocks.java"
      }
    },
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 4:43 PM",
      "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 9:21 AM",
      "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void update(Block block, int curReplicas, \n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d LEVEL \u0026\u0026 oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(curPri !\u003d LEVEL \u0026\u0026 priorityQueues.get(curPri).add(block)) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/UnderReplicatedBlocks.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/UnderReplicatedBlocks.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,33 @@\n+  synchronized void update(Block block, int curReplicas, \n+                           int decommissionedReplicas,\n+                           int curExpectedReplicas,\n+                           int curReplicasDelta, int expectedReplicasDelta) {\n+    int oldReplicas \u003d curReplicas-curReplicasDelta;\n+    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n+    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n+    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n+    if(NameNode.stateChangeLog.isDebugEnabled()) {\n+      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n+        block +\n+        \" curReplicas \" + curReplicas +\n+        \" curExpectedReplicas \" + curExpectedReplicas +\n+        \" oldReplicas \" + oldReplicas +\n+        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n+        \" curPri  \" + curPri +\n+        \" oldPri  \" + oldPri);\n+    }\n+    if(oldPri !\u003d LEVEL \u0026\u0026 oldPri !\u003d curPri) {\n+      remove(block, oldPri);\n+    }\n+    if(curPri !\u003d LEVEL \u0026\u0026 priorityQueues.get(curPri).add(block)) {\n+      if(NameNode.stateChangeLog.isDebugEnabled()) {\n+        NameNode.stateChangeLog.debug(\n+          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n+          + block\n+          + \" has only \"+curReplicas\n+          + \" replicas and needs \" + curExpectedReplicas\n+          + \" replicas so is added to neededReplications\"\n+          + \" at priority level \" + curPri);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void update(Block block, int curReplicas, \n                           int decommissionedReplicas,\n                           int curExpectedReplicas,\n                           int curReplicasDelta, int expectedReplicasDelta) {\n    int oldReplicas \u003d curReplicas-curReplicasDelta;\n    int oldExpectedReplicas \u003d curExpectedReplicas-expectedReplicasDelta;\n    int curPri \u003d getPriority(block, curReplicas, decommissionedReplicas, curExpectedReplicas);\n    int oldPri \u003d getPriority(block, oldReplicas, decommissionedReplicas, oldExpectedReplicas);\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"UnderReplicationBlocks.update \" + \n        block +\n        \" curReplicas \" + curReplicas +\n        \" curExpectedReplicas \" + curExpectedReplicas +\n        \" oldReplicas \" + oldReplicas +\n        \" oldExpectedReplicas  \" + oldExpectedReplicas +\n        \" curPri  \" + curPri +\n        \" oldPri  \" + oldPri);\n    }\n    if(oldPri !\u003d LEVEL \u0026\u0026 oldPri !\u003d curPri) {\n      remove(block, oldPri);\n    }\n    if(curPri !\u003d LEVEL \u0026\u0026 priorityQueues.get(curPri).add(block)) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n          \"BLOCK* NameSystem.UnderReplicationBlock.update:\"\n          + block\n          + \" has only \"+curReplicas\n          + \" replicas and needs \" + curExpectedReplicas\n          + \" replicas so is added to neededReplications\"\n          + \" at priority level \" + curPri);\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/UnderReplicatedBlocks.java"
    }
  }
}