{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "getResourceTypesMinimumAllocation",
  "functionId": "getResourceTypesMinimumAllocation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 605,
  "functionEndLine": 622,
  "numCommitsSeen": 41,
  "timeTaken": 2917,
  "changeHistory": [
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9"
  ],
  "changeHistoryShort": {
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ymultichange(Yfilerename,Ybodychange)",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,18 @@\n   public static Resource getResourceTypesMinimumAllocation() {\n-    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d getResourceTypes();\n     Resource ret \u003d Resource.newInstance(0, 0);\n-    for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceTypes\n-        .entrySet()) {\n-      String name \u003d entry.getKey();\n+    for (ResourceInformation entry : resourceTypesArray) {\n+      String name \u003d entry.getName();\n       if (name.equals(ResourceInformation.MEMORY_MB.getName())) {\n-        ret.setMemorySize(entry.getValue().getMinimumAllocation());\n-        continue;\n-      }\n-      if (name.equals(ResourceInformation.VCORES.getName())) {\n-        Long tmp \u003d entry.getValue().getMinimumAllocation();\n+        ret.setMemorySize(entry.getMinimumAllocation());\n+      } else if (name.equals(ResourceInformation.VCORES.getName())) {\n+        Long tmp \u003d entry.getMinimumAllocation();\n         if (tmp \u003e Integer.MAX_VALUE) {\n           tmp \u003d (long) Integer.MAX_VALUE;\n         }\n         ret.setVirtualCores(tmp.intValue());\n-        continue;\n+      } else {\n+        ret.setResourceValue(name, entry.getMinimumAllocation());\n       }\n-      ret.setResourceValue(name, entry.getValue().getMinimumAllocation());\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Resource getResourceTypesMinimumAllocation() {\n    Resource ret \u003d Resource.newInstance(0, 0);\n    for (ResourceInformation entry : resourceTypesArray) {\n      String name \u003d entry.getName();\n      if (name.equals(ResourceInformation.MEMORY_MB.getName())) {\n        ret.setMemorySize(entry.getMinimumAllocation());\n      } else if (name.equals(ResourceInformation.VCORES.getName())) {\n        Long tmp \u003d entry.getMinimumAllocation();\n        if (tmp \u003e Integer.MAX_VALUE) {\n          tmp \u003d (long) Integer.MAX_VALUE;\n        }\n        ret.setVirtualCores(tmp.intValue());\n      } else {\n        ret.setResourceValue(name, entry.getMinimumAllocation());\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,18 @@\n   public static Resource getResourceTypesMinimumAllocation() {\n-    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d getResourceTypes();\n     Resource ret \u003d Resource.newInstance(0, 0);\n-    for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceTypes\n-        .entrySet()) {\n-      String name \u003d entry.getKey();\n+    for (ResourceInformation entry : resourceTypesArray) {\n+      String name \u003d entry.getName();\n       if (name.equals(ResourceInformation.MEMORY_MB.getName())) {\n-        ret.setMemorySize(entry.getValue().getMinimumAllocation());\n-        continue;\n-      }\n-      if (name.equals(ResourceInformation.VCORES.getName())) {\n-        Long tmp \u003d entry.getValue().getMinimumAllocation();\n+        ret.setMemorySize(entry.getMinimumAllocation());\n+      } else if (name.equals(ResourceInformation.VCORES.getName())) {\n+        Long tmp \u003d entry.getMinimumAllocation();\n         if (tmp \u003e Integer.MAX_VALUE) {\n           tmp \u003d (long) Integer.MAX_VALUE;\n         }\n         ret.setVirtualCores(tmp.intValue());\n-        continue;\n+      } else {\n+        ret.setResourceValue(name, entry.getMinimumAllocation());\n       }\n-      ret.setResourceValue(name, entry.getValue().getMinimumAllocation());\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Resource getResourceTypesMinimumAllocation() {\n    Resource ret \u003d Resource.newInstance(0, 0);\n    for (ResourceInformation entry : resourceTypesArray) {\n      String name \u003d entry.getName();\n      if (name.equals(ResourceInformation.MEMORY_MB.getName())) {\n        ret.setMemorySize(entry.getMinimumAllocation());\n      } else if (name.equals(ResourceInformation.VCORES.getName())) {\n        Long tmp \u003d entry.getMinimumAllocation();\n        if (tmp \u003e Integer.MAX_VALUE) {\n          tmp \u003d (long) Integer.MAX_VALUE;\n        }\n        ret.setVirtualCores(tmp.intValue());\n      } else {\n        ret.setResourceValue(name, entry.getMinimumAllocation());\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,22 @@\n+  public static Resource getResourceTypesMinimumAllocation() {\n+    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d getResourceTypes();\n+    Resource ret \u003d Resource.newInstance(0, 0);\n+    for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceTypes\n+        .entrySet()) {\n+      String name \u003d entry.getKey();\n+      if (name.equals(ResourceInformation.MEMORY_MB.getName())) {\n+        ret.setMemorySize(entry.getValue().getMinimumAllocation());\n+        continue;\n+      }\n+      if (name.equals(ResourceInformation.VCORES.getName())) {\n+        Long tmp \u003d entry.getValue().getMinimumAllocation();\n+        if (tmp \u003e Integer.MAX_VALUE) {\n+          tmp \u003d (long) Integer.MAX_VALUE;\n+        }\n+        ret.setVirtualCores(tmp.intValue());\n+        continue;\n+      }\n+      ret.setResourceValue(name, entry.getValue().getMinimumAllocation());\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Resource getResourceTypesMinimumAllocation() {\n    Map\u003cString, ResourceInformation\u003e resourceTypes \u003d getResourceTypes();\n    Resource ret \u003d Resource.newInstance(0, 0);\n    for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceTypes\n        .entrySet()) {\n      String name \u003d entry.getKey();\n      if (name.equals(ResourceInformation.MEMORY_MB.getName())) {\n        ret.setMemorySize(entry.getValue().getMinimumAllocation());\n        continue;\n      }\n      if (name.equals(ResourceInformation.VCORES.getName())) {\n        Long tmp \u003d entry.getValue().getMinimumAllocation();\n        if (tmp \u003e Integer.MAX_VALUE) {\n          tmp \u003d (long) Integer.MAX_VALUE;\n        }\n        ret.setVirtualCores(tmp.intValue());\n        continue;\n      }\n      ret.setResourceValue(name, entry.getValue().getMinimumAllocation());\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}