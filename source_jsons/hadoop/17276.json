{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MembershipNamenodeResolver.java",
  "functionName": "updateActiveNamenode",
  "functionId": "updateActiveNamenode___nsId-String(modifiers-final)__address-InetSocketAddress(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
  "functionStartLine": 140,
  "functionEndLine": 174,
  "numCommitsSeen": 13,
  "timeTaken": 2364,
  "changeHistory": [
    "7b62409ace165603ee137561d7d75b1e742ed9a2",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81"
  ],
  "changeHistoryShort": {
    "7b62409ace165603ee137561d7d75b1e742ed9a2": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638": "Ybodychange",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b62409ace165603ee137561d7d75b1e742ed9a2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15108. RBF: MembershipNamenodeResolver should invalidate cache incase of active namenode update. Contributed by Ayush Saxena.\n",
      "commitDate": "10/01/20 8:51 PM",
      "commitName": "7b62409ace165603ee137561d7d75b1e742ed9a2",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "04/11/19 10:03 PM",
      "commitNameOld": "79010627074c4b830008444f92d8410aa1717006",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 66.95,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   public void updateActiveNamenode(\n       final String nsId, final InetSocketAddress address) throws IOException {\n \n     // Called when we have an RPC miss and successful hit on an alternate NN.\n     // Temporarily update our cache, it will be overwritten on the next update.\n     try {\n       MembershipState partial \u003d MembershipState.newInstance();\n       String rpcAddress \u003d address.getHostName() + \":\" + address.getPort();\n       partial.setRpcAddress(rpcAddress);\n       partial.setNameserviceId(nsId);\n \n       GetNamenodeRegistrationsRequest request \u003d\n           GetNamenodeRegistrationsRequest.newInstance(partial);\n \n       MembershipStore membership \u003d getMembershipStore();\n       GetNamenodeRegistrationsResponse response \u003d\n           membership.getNamenodeRegistrations(request);\n       List\u003cMembershipState\u003e records \u003d response.getNamenodeMemberships();\n \n       if (records !\u003d null \u0026\u0026 records.size() \u003d\u003d 1) {\n         MembershipState record \u003d records.get(0);\n         UpdateNamenodeRegistrationRequest updateRequest \u003d\n             UpdateNamenodeRegistrationRequest.newInstance(\n                 record.getNameserviceId(), record.getNamenodeId(), ACTIVE);\n         membership.updateNamenodeRegistration(updateRequest);\n+\n+        cacheNS.remove(nsId);\n+        // Invalidating the full cacheBp since getting the blockpool id from\n+        // namespace id is quite costly.\n+        cacheBP.clear();\n       }\n     } catch (StateStoreUnavailableException e) {\n       LOG.error(\"Cannot update {} as active, State Store unavailable\", address);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateActiveNamenode(\n      final String nsId, final InetSocketAddress address) throws IOException {\n\n    // Called when we have an RPC miss and successful hit on an alternate NN.\n    // Temporarily update our cache, it will be overwritten on the next update.\n    try {\n      MembershipState partial \u003d MembershipState.newInstance();\n      String rpcAddress \u003d address.getHostName() + \":\" + address.getPort();\n      partial.setRpcAddress(rpcAddress);\n      partial.setNameserviceId(nsId);\n\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance(partial);\n\n      MembershipStore membership \u003d getMembershipStore();\n      GetNamenodeRegistrationsResponse response \u003d\n          membership.getNamenodeRegistrations(request);\n      List\u003cMembershipState\u003e records \u003d response.getNamenodeMemberships();\n\n      if (records !\u003d null \u0026\u0026 records.size() \u003d\u003d 1) {\n        MembershipState record \u003d records.get(0);\n        UpdateNamenodeRegistrationRequest updateRequest \u003d\n            UpdateNamenodeRegistrationRequest.newInstance(\n                record.getNameserviceId(), record.getNamenodeId(), ACTIVE);\n        membership.updateNamenodeRegistration(updateRequest);\n\n        cacheNS.remove(nsId);\n        // Invalidating the full cacheBp since getting the blockpool id from\n        // namespace id is quite costly.\n        cacheBP.clear();\n      }\n    } catch (StateStoreUnavailableException e) {\n      LOG.error(\"Cannot update {} as active, State Store unavailable\", address);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void updateActiveNamenode(\n      final String nsId, final InetSocketAddress address) throws IOException {\n\n    // Called when we have an RPC miss and successful hit on an alternate NN.\n    // Temporarily update our cache, it will be overwritten on the next update.\n    try {\n      MembershipState partial \u003d MembershipState.newInstance();\n      String rpcAddress \u003d address.getHostName() + \":\" + address.getPort();\n      partial.setRpcAddress(rpcAddress);\n      partial.setNameserviceId(nsId);\n\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance(partial);\n\n      MembershipStore membership \u003d getMembershipStore();\n      GetNamenodeRegistrationsResponse response \u003d\n          membership.getNamenodeRegistrations(request);\n      List\u003cMembershipState\u003e records \u003d response.getNamenodeMemberships();\n\n      if (records !\u003d null \u0026\u0026 records.size() \u003d\u003d 1) {\n        MembershipState record \u003d records.get(0);\n        UpdateNamenodeRegistrationRequest updateRequest \u003d\n            UpdateNamenodeRegistrationRequest.newInstance(\n                record.getNameserviceId(), record.getNamenodeId(), ACTIVE);\n        membership.updateNamenodeRegistration(updateRequest);\n      }\n    } catch (StateStoreUnavailableException e) {\n      LOG.error(\"Cannot update {} as active, State Store unavailable\", address);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java"
      }
    },
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10646. Federation admin tool. Contributed by Inigo Goiri.\n\n(cherry picked from commit ae27e31fbcf546481db0b0345772db2e9132372e)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "b3e6bd22e3c02b3e4f50396538f56a1bcb007638",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public void updateActiveNamenode(\n       final String nsId, final InetSocketAddress address) throws IOException {\n \n     // Called when we have an RPC miss and successful hit on an alternate NN.\n     // Temporarily update our cache, it will be overwritten on the next update.\n     try {\n       MembershipState partial \u003d MembershipState.newInstance();\n       String rpcAddress \u003d address.getHostName() + \":\" + address.getPort();\n       partial.setRpcAddress(rpcAddress);\n       partial.setNameserviceId(nsId);\n \n       GetNamenodeRegistrationsRequest request \u003d\n           GetNamenodeRegistrationsRequest.newInstance(partial);\n \n+      MembershipStore membership \u003d getMembershipStore();\n       GetNamenodeRegistrationsResponse response \u003d\n-          this.membershipInterface.getNamenodeRegistrations(request);\n+          membership.getNamenodeRegistrations(request);\n       List\u003cMembershipState\u003e records \u003d response.getNamenodeMemberships();\n \n       if (records !\u003d null \u0026\u0026 records.size() \u003d\u003d 1) {\n         MembershipState record \u003d records.get(0);\n         UpdateNamenodeRegistrationRequest updateRequest \u003d\n             UpdateNamenodeRegistrationRequest.newInstance(\n                 record.getNameserviceId(), record.getNamenodeId(), ACTIVE);\n-        this.membershipInterface.updateNamenodeRegistration(updateRequest);\n+        membership.updateNamenodeRegistration(updateRequest);\n       }\n     } catch (StateStoreUnavailableException e) {\n       LOG.error(\"Cannot update {} as active, State Store unavailable\", address);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateActiveNamenode(\n      final String nsId, final InetSocketAddress address) throws IOException {\n\n    // Called when we have an RPC miss and successful hit on an alternate NN.\n    // Temporarily update our cache, it will be overwritten on the next update.\n    try {\n      MembershipState partial \u003d MembershipState.newInstance();\n      String rpcAddress \u003d address.getHostName() + \":\" + address.getPort();\n      partial.setRpcAddress(rpcAddress);\n      partial.setNameserviceId(nsId);\n\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance(partial);\n\n      MembershipStore membership \u003d getMembershipStore();\n      GetNamenodeRegistrationsResponse response \u003d\n          membership.getNamenodeRegistrations(request);\n      List\u003cMembershipState\u003e records \u003d response.getNamenodeMemberships();\n\n      if (records !\u003d null \u0026\u0026 records.size() \u003d\u003d 1) {\n        MembershipState record \u003d records.get(0);\n        UpdateNamenodeRegistrationRequest updateRequest \u003d\n            UpdateNamenodeRegistrationRequest.newInstance(\n                record.getNameserviceId(), record.getNamenodeId(), ACTIVE);\n        membership.updateNamenodeRegistration(updateRequest);\n      }\n    } catch (StateStoreUnavailableException e) {\n      LOG.error(\"Cannot update {} as active, State Store unavailable\", address);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10687. Federation Membership State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 95cae08849d23cf12c5d280c29f90908e6a90d40)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,29 @@\n+  public void updateActiveNamenode(\n+      final String nsId, final InetSocketAddress address) throws IOException {\n+\n+    // Called when we have an RPC miss and successful hit on an alternate NN.\n+    // Temporarily update our cache, it will be overwritten on the next update.\n+    try {\n+      MembershipState partial \u003d MembershipState.newInstance();\n+      String rpcAddress \u003d address.getHostName() + \":\" + address.getPort();\n+      partial.setRpcAddress(rpcAddress);\n+      partial.setNameserviceId(nsId);\n+\n+      GetNamenodeRegistrationsRequest request \u003d\n+          GetNamenodeRegistrationsRequest.newInstance(partial);\n+\n+      GetNamenodeRegistrationsResponse response \u003d\n+          this.membershipInterface.getNamenodeRegistrations(request);\n+      List\u003cMembershipState\u003e records \u003d response.getNamenodeMemberships();\n+\n+      if (records !\u003d null \u0026\u0026 records.size() \u003d\u003d 1) {\n+        MembershipState record \u003d records.get(0);\n+        UpdateNamenodeRegistrationRequest updateRequest \u003d\n+            UpdateNamenodeRegistrationRequest.newInstance(\n+                record.getNameserviceId(), record.getNamenodeId(), ACTIVE);\n+        this.membershipInterface.updateNamenodeRegistration(updateRequest);\n+      }\n+    } catch (StateStoreUnavailableException e) {\n+      LOG.error(\"Cannot update {} as active, State Store unavailable\", address);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateActiveNamenode(\n      final String nsId, final InetSocketAddress address) throws IOException {\n\n    // Called when we have an RPC miss and successful hit on an alternate NN.\n    // Temporarily update our cache, it will be overwritten on the next update.\n    try {\n      MembershipState partial \u003d MembershipState.newInstance();\n      String rpcAddress \u003d address.getHostName() + \":\" + address.getPort();\n      partial.setRpcAddress(rpcAddress);\n      partial.setNameserviceId(nsId);\n\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance(partial);\n\n      GetNamenodeRegistrationsResponse response \u003d\n          this.membershipInterface.getNamenodeRegistrations(request);\n      List\u003cMembershipState\u003e records \u003d response.getNamenodeMemberships();\n\n      if (records !\u003d null \u0026\u0026 records.size() \u003d\u003d 1) {\n        MembershipState record \u003d records.get(0);\n        UpdateNamenodeRegistrationRequest updateRequest \u003d\n            UpdateNamenodeRegistrationRequest.newInstance(\n                record.getNameserviceId(), record.getNamenodeId(), ACTIVE);\n        this.membershipInterface.updateNamenodeRegistration(updateRequest);\n      }\n    } catch (StateStoreUnavailableException e) {\n      LOG.error(\"Cannot update {} as active, State Store unavailable\", address);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java"
    }
  }
}