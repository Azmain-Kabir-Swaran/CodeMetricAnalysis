{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationCLI.java",
  "functionName": "addContainerOptions",
  "functionId": "addContainerOptions___opts-Options",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
  "functionStartLine": 958,
  "functionEndLine": 1004,
  "numCommitsSeen": 72,
  "timeTaken": 1295,
  "changeHistory": [
    "206e6339469ca6d362382efbb488089ece830e98"
  ],
  "changeHistoryShort": {
    "206e6339469ca6d362382efbb488089ece830e98": "Yintroduced"
  },
  "changeHistoryDetails": {
    "206e6339469ca6d362382efbb488089ece830e98": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9453. Clean up code long if-else chain in ApplicationCLI#run. Contributed by Wanqiang Ji.\n",
      "commitDate": "13/05/19 11:11 AM",
      "commitName": "206e6339469ca6d362382efbb488089ece830e98",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "diff": "@@ -0,0 +1,47 @@\n+  private void addContainerOptions(Options opts) {\n+    opts.addOption(SHELL_CMD, true, \"Run a shell in the container.\");\n+    opts.addOption(STATUS_CMD, true,\n+        \"Prints the status of the container.\");\n+    opts.addOption(LIST_CMD, true, \"List containers for application attempt \"\n+        + \"when application attempt ID is provided. When application name is \"\n+        + \"provided, then it finds the instances of the application based on \"\n+        + \"app\u0027s own implementation, and -appTypes option must be specified \"\n+        + \"unless it is the default yarn-service type. With app name, it \"\n+        + \"supports optional use of -version to filter instances based on app \"\n+        + \"version, -components to filter instances based on component names, \"\n+        + \"-states to filter instances based on instance state.\");\n+    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n+    opts.getOption(SHELL_CMD).setArgName(\"Container ID [bash|sh]\");\n+    opts.getOption(SHELL_CMD).setArgs(3);\n+    opts.getOption(STATUS_CMD).setArgName(\"Container ID\");\n+    opts.getOption(LIST_CMD).setArgName(\"Application Name or Attempt ID\");\n+    opts.addOption(APP_TYPE_CMD, true, \"Works with -list to specify the app \"\n+        + \"type when application name is provided.\");\n+    opts.getOption(APP_TYPE_CMD).setValueSeparator(\u0027,\u0027);\n+    opts.getOption(APP_TYPE_CMD).setArgs(Option.UNLIMITED_VALUES);\n+    opts.getOption(APP_TYPE_CMD).setArgName(\"Types\");\n+\n+    opts.addOption(VERSION, true, \"Works with -list to filter instances \"\n+        + \"based on input application version.\");\n+    opts.getOption(VERSION).setArgs(1);\n+\n+    opts.addOption(COMPONENTS, true, \"Works with -list to filter instances \"\n+        + \"based on input comma-separated list of component names.\");\n+    opts.getOption(COMPONENTS).setValueSeparator(\u0027,\u0027);\n+    opts.getOption(COMPONENTS).setArgs(Option.UNLIMITED_VALUES);\n+\n+    opts.addOption(STATES, true, \"Works with -list to filter instances based \"\n+        + \"on input comma-separated list of instance states.\");\n+    opts.getOption(STATES).setValueSeparator(\u0027,\u0027);\n+    opts.getOption(STATES).setArgs(Option.UNLIMITED_VALUES);\n+\n+    opts.addOption(SIGNAL_CMD, true, \"Signal the container. The available \"\n+        + \"signal commands are \"\n+        + java.util.Arrays.asList(SignalContainerCommand.values())\n+        + \" Default command is OUTPUT_THREAD_DUMP.\");\n+    opts.getOption(SIGNAL_CMD).setArgName(\"container ID [signal command]\");\n+    opts.getOption(SIGNAL_CMD).setArgs(3);\n+    opts.addOption(CLUSTER_ID_OPTION, true, \"ClusterId. By default, it will \"\n+        + \"take default cluster id from the RM\");\n+    opts.getOption(CLUSTER_ID_OPTION).setArgName(\"Cluster ID\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addContainerOptions(Options opts) {\n    opts.addOption(SHELL_CMD, true, \"Run a shell in the container.\");\n    opts.addOption(STATUS_CMD, true,\n        \"Prints the status of the container.\");\n    opts.addOption(LIST_CMD, true, \"List containers for application attempt \"\n        + \"when application attempt ID is provided. When application name is \"\n        + \"provided, then it finds the instances of the application based on \"\n        + \"app\u0027s own implementation, and -appTypes option must be specified \"\n        + \"unless it is the default yarn-service type. With app name, it \"\n        + \"supports optional use of -version to filter instances based on app \"\n        + \"version, -components to filter instances based on component names, \"\n        + \"-states to filter instances based on instance state.\");\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    opts.getOption(SHELL_CMD).setArgName(\"Container ID [bash|sh]\");\n    opts.getOption(SHELL_CMD).setArgs(3);\n    opts.getOption(STATUS_CMD).setArgName(\"Container ID\");\n    opts.getOption(LIST_CMD).setArgName(\"Application Name or Attempt ID\");\n    opts.addOption(APP_TYPE_CMD, true, \"Works with -list to specify the app \"\n        + \"type when application name is provided.\");\n    opts.getOption(APP_TYPE_CMD).setValueSeparator(\u0027,\u0027);\n    opts.getOption(APP_TYPE_CMD).setArgs(Option.UNLIMITED_VALUES);\n    opts.getOption(APP_TYPE_CMD).setArgName(\"Types\");\n\n    opts.addOption(VERSION, true, \"Works with -list to filter instances \"\n        + \"based on input application version.\");\n    opts.getOption(VERSION).setArgs(1);\n\n    opts.addOption(COMPONENTS, true, \"Works with -list to filter instances \"\n        + \"based on input comma-separated list of component names.\");\n    opts.getOption(COMPONENTS).setValueSeparator(\u0027,\u0027);\n    opts.getOption(COMPONENTS).setArgs(Option.UNLIMITED_VALUES);\n\n    opts.addOption(STATES, true, \"Works with -list to filter instances based \"\n        + \"on input comma-separated list of instance states.\");\n    opts.getOption(STATES).setValueSeparator(\u0027,\u0027);\n    opts.getOption(STATES).setArgs(Option.UNLIMITED_VALUES);\n\n    opts.addOption(SIGNAL_CMD, true, \"Signal the container. The available \"\n        + \"signal commands are \"\n        + java.util.Arrays.asList(SignalContainerCommand.values())\n        + \" Default command is OUTPUT_THREAD_DUMP.\");\n    opts.getOption(SIGNAL_CMD).setArgName(\"container ID [signal command]\");\n    opts.getOption(SIGNAL_CMD).setArgs(3);\n    opts.addOption(CLUSTER_ID_OPTION, true, \"ClusterId. By default, it will \"\n        + \"take default cluster id from the RM\");\n    opts.getOption(CLUSTER_ID_OPTION).setArgName(\"Cluster ID\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java"
    }
  }
}