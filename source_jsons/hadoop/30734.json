{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDBTimelineStore.java",
  "functionName": "getTimelineDomain",
  "functionId": "getTimelineDomain___iterator-DBIterator__domainId-String__prefix-byte[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
  "functionStartLine": 1780,
  "functionEndLine": 1818,
  "numCommitsSeen": 12,
  "timeTaken": 975,
  "changeHistory": [
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,39 @@\n+  private static TimelineDomain getTimelineDomain(DBIterator iterator,\n+      String domainId, byte[] prefix) throws IOException {\n+    // Iterate over all the rows whose key starts with prefix to retrieve the\n+    // domain information.\n+    TimelineDomain domain \u003d new TimelineDomain();\n+    domain.setId(domainId);\n+    boolean noRows \u003d true;\n+    for (; iterator.hasNext(); iterator.next()) {\n+      byte[] key \u003d iterator.peekNext().getKey();\n+      if (!prefixMatches(prefix, prefix.length, key)) {\n+        break;\n+      }\n+      if (noRows) {\n+        noRows \u003d false;\n+      }\n+      byte[] value \u003d iterator.peekNext().getValue();\n+      if (value !\u003d null \u0026\u0026 value.length \u003e 0) {\n+        if (key[prefix.length] \u003d\u003d DESCRIPTION_COLUMN[0]) {\n+          domain.setDescription(new String(value, UTF_8));\n+        } else if (key[prefix.length] \u003d\u003d OWNER_COLUMN[0]) {\n+          domain.setOwner(new String(value, UTF_8));\n+        } else if (key[prefix.length] \u003d\u003d READER_COLUMN[0]) {\n+          domain.setReaders(new String(value, UTF_8));\n+        } else if (key[prefix.length] \u003d\u003d WRITER_COLUMN[0]) {\n+          domain.setWriters(new String(value, UTF_8));\n+        } else if (key[prefix.length] \u003d\u003d TIMESTAMP_COLUMN[0]) {\n+          domain.setCreatedTime(readReverseOrderedLong(value, 0));\n+          domain.setModifiedTime(readReverseOrderedLong(value, 8));\n+        } else {\n+          LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\n+        }\n+      }\n+    }\n+    if (noRows) {\n+      return null;\n+    } else {\n+      return domain;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static TimelineDomain getTimelineDomain(DBIterator iterator,\n      String domainId, byte[] prefix) throws IOException {\n    // Iterate over all the rows whose key starts with prefix to retrieve the\n    // domain information.\n    TimelineDomain domain \u003d new TimelineDomain();\n    domain.setId(domainId);\n    boolean noRows \u003d true;\n    for (; iterator.hasNext(); iterator.next()) {\n      byte[] key \u003d iterator.peekNext().getKey();\n      if (!prefixMatches(prefix, prefix.length, key)) {\n        break;\n      }\n      if (noRows) {\n        noRows \u003d false;\n      }\n      byte[] value \u003d iterator.peekNext().getValue();\n      if (value !\u003d null \u0026\u0026 value.length \u003e 0) {\n        if (key[prefix.length] \u003d\u003d DESCRIPTION_COLUMN[0]) {\n          domain.setDescription(new String(value, UTF_8));\n        } else if (key[prefix.length] \u003d\u003d OWNER_COLUMN[0]) {\n          domain.setOwner(new String(value, UTF_8));\n        } else if (key[prefix.length] \u003d\u003d READER_COLUMN[0]) {\n          domain.setReaders(new String(value, UTF_8));\n        } else if (key[prefix.length] \u003d\u003d WRITER_COLUMN[0]) {\n          domain.setWriters(new String(value, UTF_8));\n        } else if (key[prefix.length] \u003d\u003d TIMESTAMP_COLUMN[0]) {\n          domain.setCreatedTime(readReverseOrderedLong(value, 0));\n          domain.setModifiedTime(readReverseOrderedLong(value, 8));\n        } else {\n          LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\n        }\n      }\n    }\n    if (noRows) {\n      return null;\n    } else {\n      return domain;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java"
    }
  }
}