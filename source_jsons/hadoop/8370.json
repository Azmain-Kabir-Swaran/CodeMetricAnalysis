{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeResourcePolicy.java",
  "functionName": "areResourcesAvailable",
  "functionId": "areResourcesAvailable___resources-Collection__? extends CheckableNameNodeResource____minimumRedundantResources-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeResourcePolicy.java",
  "functionStartLine": 41,
  "functionEndLine": 79,
  "numCommitsSeen": 3,
  "timeTaken": 1179,
  "changeHistory": [
    "74d4573a23db5586c6e47ff2277aa7c35237da34",
    "6be13332db5342465c2f279a5984b4b8a33420fc",
    "a27adf3de4ea88a80401fc7157c5e39747230c2a"
  ],
  "changeHistoryShort": {
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Ybodychange",
    "6be13332db5342465c2f279a5984b4b8a33420fc": "Ybodychange",
    "a27adf3de4ea88a80401fc7157c5e39747230c2a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "30/01/12 6:17 PM",
      "commitNameOld": "6be13332db5342465c2f279a5984b4b8a33420fc",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 170.92,
      "commitsBetweenForRepo": 1177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,39 @@\n   static boolean areResourcesAvailable(\n       Collection\u003c? extends CheckableNameNodeResource\u003e resources,\n       int minimumRedundantResources) {\n+\n+    // TODO: workaround:\n+    // - during startup, if there are no edits dirs on disk, then there is\n+    // a call to areResourcesAvailable() with no dirs at all, which was\n+    // previously causing the NN to enter safemode\n+    if (resources.isEmpty()) {\n+      return true;\n+    }\n     \n     int requiredResourceCount \u003d 0;\n     int redundantResourceCount \u003d 0;\n     int disabledRedundantResourceCount \u003d 0;\n     for (CheckableNameNodeResource resource : resources) {\n       if (!resource.isRequired()) {\n         redundantResourceCount++;\n         if (!resource.isResourceAvailable()) {\n           disabledRedundantResourceCount++;\n         }\n       } else {\n         requiredResourceCount++;\n         if (!resource.isResourceAvailable()) {\n           // Short circuit - a required resource is not available.\n           return false;\n         }\n       }\n     }\n     \n     if (redundantResourceCount \u003d\u003d 0) {\n       // If there are no redundant resources, return true if there are any\n       // required resources available.\n       return requiredResourceCount \u003e 0;\n     } else {\n       return redundantResourceCount - disabledRedundantResourceCount \u003e\u003d\n           minimumRedundantResources;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean areResourcesAvailable(\n      Collection\u003c? extends CheckableNameNodeResource\u003e resources,\n      int minimumRedundantResources) {\n\n    // TODO: workaround:\n    // - during startup, if there are no edits dirs on disk, then there is\n    // a call to areResourcesAvailable() with no dirs at all, which was\n    // previously causing the NN to enter safemode\n    if (resources.isEmpty()) {\n      return true;\n    }\n    \n    int requiredResourceCount \u003d 0;\n    int redundantResourceCount \u003d 0;\n    int disabledRedundantResourceCount \u003d 0;\n    for (CheckableNameNodeResource resource : resources) {\n      if (!resource.isRequired()) {\n        redundantResourceCount++;\n        if (!resource.isResourceAvailable()) {\n          disabledRedundantResourceCount++;\n        }\n      } else {\n        requiredResourceCount++;\n        if (!resource.isResourceAvailable()) {\n          // Short circuit - a required resource is not available.\n          return false;\n        }\n      }\n    }\n    \n    if (redundantResourceCount \u003d\u003d 0) {\n      // If there are no redundant resources, return true if there are any\n      // required resources available.\n      return requiredResourceCount \u003e 0;\n    } else {\n      return redundantResourceCount - disabledRedundantResourceCount \u003e\u003d\n          minimumRedundantResources;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeResourcePolicy.java",
      "extendedDetails": {}
    },
    "6be13332db5342465c2f279a5984b4b8a33420fc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2853. HA: NN fails to start if the shared edits dir is marked required. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238134 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/12 6:17 PM",
      "commitName": "6be13332db5342465c2f279a5984b4b8a33420fc",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "07/12/11 1:47 PM",
      "commitNameOld": "a27adf3de4ea88a80401fc7157c5e39747230c2a",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 54.19,
      "commitsBetweenForRepo": 335,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,31 @@\n   static boolean areResourcesAvailable(\n       Collection\u003c? extends CheckableNameNodeResource\u003e resources,\n       int minimumRedundantResources) {\n     \n     int requiredResourceCount \u003d 0;\n     int redundantResourceCount \u003d 0;\n     int disabledRedundantResourceCount \u003d 0;\n     for (CheckableNameNodeResource resource : resources) {\n       if (!resource.isRequired()) {\n         redundantResourceCount++;\n         if (!resource.isResourceAvailable()) {\n           disabledRedundantResourceCount++;\n         }\n       } else {\n         requiredResourceCount++;\n         if (!resource.isResourceAvailable()) {\n           // Short circuit - a required resource is not available.\n           return false;\n         }\n       }\n     }\n     \n-    if (redundantResourceCount \u003c minimumRedundantResources) {\n-      throw new RuntimeException(\"Need a minimum of \" + minimumRedundantResources\n-          + \" for NN to operate but only \" + redundantResourceCount\n-          + \" are configured.\");\n-    }\n-    \n     if (redundantResourceCount \u003d\u003d 0) {\n       // If there are no redundant resources, return true if there are any\n       // required resources available.\n       return requiredResourceCount \u003e 0;\n     } else {\n       return redundantResourceCount - disabledRedundantResourceCount \u003e\u003d\n           minimumRedundantResources;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean areResourcesAvailable(\n      Collection\u003c? extends CheckableNameNodeResource\u003e resources,\n      int minimumRedundantResources) {\n    \n    int requiredResourceCount \u003d 0;\n    int redundantResourceCount \u003d 0;\n    int disabledRedundantResourceCount \u003d 0;\n    for (CheckableNameNodeResource resource : resources) {\n      if (!resource.isRequired()) {\n        redundantResourceCount++;\n        if (!resource.isResourceAvailable()) {\n          disabledRedundantResourceCount++;\n        }\n      } else {\n        requiredResourceCount++;\n        if (!resource.isResourceAvailable()) {\n          // Short circuit - a required resource is not available.\n          return false;\n        }\n      }\n    }\n    \n    if (redundantResourceCount \u003d\u003d 0) {\n      // If there are no redundant resources, return true if there are any\n      // required resources available.\n      return requiredResourceCount \u003e 0;\n    } else {\n      return redundantResourceCount - disabledRedundantResourceCount \u003e\u003d\n          minimumRedundantResources;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeResourcePolicy.java",
      "extendedDetails": {}
    },
    "a27adf3de4ea88a80401fc7157c5e39747230c2a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2430. The number of failed or low-resource volumes the NN can tolerate should be configurable. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1211650 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/11 1:47 PM",
      "commitName": "a27adf3de4ea88a80401fc7157c5e39747230c2a",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,37 @@\n+  static boolean areResourcesAvailable(\n+      Collection\u003c? extends CheckableNameNodeResource\u003e resources,\n+      int minimumRedundantResources) {\n+    \n+    int requiredResourceCount \u003d 0;\n+    int redundantResourceCount \u003d 0;\n+    int disabledRedundantResourceCount \u003d 0;\n+    for (CheckableNameNodeResource resource : resources) {\n+      if (!resource.isRequired()) {\n+        redundantResourceCount++;\n+        if (!resource.isResourceAvailable()) {\n+          disabledRedundantResourceCount++;\n+        }\n+      } else {\n+        requiredResourceCount++;\n+        if (!resource.isResourceAvailable()) {\n+          // Short circuit - a required resource is not available.\n+          return false;\n+        }\n+      }\n+    }\n+    \n+    if (redundantResourceCount \u003c minimumRedundantResources) {\n+      throw new RuntimeException(\"Need a minimum of \" + minimumRedundantResources\n+          + \" for NN to operate but only \" + redundantResourceCount\n+          + \" are configured.\");\n+    }\n+    \n+    if (redundantResourceCount \u003d\u003d 0) {\n+      // If there are no redundant resources, return true if there are any\n+      // required resources available.\n+      return requiredResourceCount \u003e 0;\n+    } else {\n+      return redundantResourceCount - disabledRedundantResourceCount \u003e\u003d\n+          minimumRedundantResources;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean areResourcesAvailable(\n      Collection\u003c? extends CheckableNameNodeResource\u003e resources,\n      int minimumRedundantResources) {\n    \n    int requiredResourceCount \u003d 0;\n    int redundantResourceCount \u003d 0;\n    int disabledRedundantResourceCount \u003d 0;\n    for (CheckableNameNodeResource resource : resources) {\n      if (!resource.isRequired()) {\n        redundantResourceCount++;\n        if (!resource.isResourceAvailable()) {\n          disabledRedundantResourceCount++;\n        }\n      } else {\n        requiredResourceCount++;\n        if (!resource.isResourceAvailable()) {\n          // Short circuit - a required resource is not available.\n          return false;\n        }\n      }\n    }\n    \n    if (redundantResourceCount \u003c minimumRedundantResources) {\n      throw new RuntimeException(\"Need a minimum of \" + minimumRedundantResources\n          + \" for NN to operate but only \" + redundantResourceCount\n          + \" are configured.\");\n    }\n    \n    if (redundantResourceCount \u003d\u003d 0) {\n      // If there are no redundant resources, return true if there are any\n      // required resources available.\n      return requiredResourceCount \u003e 0;\n    } else {\n      return redundantResourceCount - disabledRedundantResourceCount \u003e\u003d\n          minimumRedundantResources;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeResourcePolicy.java"
    }
  }
}