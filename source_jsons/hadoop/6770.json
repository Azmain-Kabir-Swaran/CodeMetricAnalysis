{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSEditLogOp.java",
  "functionName": "readXAttrsFromXml",
  "functionId": "readXAttrsFromXml___st-Stanza",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java",
  "functionStartLine": 5556,
  "functionEndLine": 5579,
  "numCommitsSeen": 159,
  "timeTaken": 5187,
  "changeHistory": [
    "d417e49ce4db119cdeb01be526cdb07f24baf388",
    "ac23a55547716df29b3e25c98a113399e184d9d1"
  ],
  "changeHistoryShort": {
    "d417e49ce4db119cdeb01be526cdb07f24baf388": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d417e49ce4db119cdeb01be526cdb07f24baf388": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 10:37 AM",
      "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/05/14 6:57 AM",
          "commitNameOld": "ac23a55547716df29b3e25c98a113399e184d9d1",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 29.15,
          "commitsBetweenForRepo": 170,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,24 @@\n-  private static XAttr readXAttrFromXml(Stanza st) \n+  private static List\u003cXAttr\u003e readXAttrsFromXml(Stanza st)\n       throws InvalidXmlException {\n     if (!st.hasChildren(\"XATTR\")) {\n       return null;\n     }\n-    \n-    Stanza a \u003d st.getChildren(\"XATTR\").get(0);\n-    XAttr.Builder builder \u003d new XAttr.Builder();\n-    builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n-        setName(a.getValue(\"NAME\"));\n-    String v \u003d a.getValueOrNull(\"VALUE\");\n-    if (v !\u003d null) {\n-      try {\n-        builder.setValue(XAttrCodec.decodeValue(v));\n-      } catch (IOException e) {\n-        throw new InvalidXmlException(e.toString());\n+\n+    List\u003cStanza\u003e stanzas \u003d st.getChildren(\"XATTR\");\n+    List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(stanzas.size());\n+    for (Stanza a: stanzas) {\n+      XAttr.Builder builder \u003d new XAttr.Builder();\n+      builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n+          setName(a.getValue(\"NAME\"));\n+      String v \u003d a.getValueOrNull(\"VALUE\");\n+      if (v !\u003d null) {\n+        try {\n+          builder.setValue(XAttrCodec.decodeValue(v));\n+        } catch (IOException e) {\n+          throw new InvalidXmlException(e.toString());\n+        }\n       }\n+      xattrs.add(builder.build());\n     }\n-    return builder.build();\n+    return xattrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static List\u003cXAttr\u003e readXAttrsFromXml(Stanza st)\n      throws InvalidXmlException {\n    if (!st.hasChildren(\"XATTR\")) {\n      return null;\n    }\n\n    List\u003cStanza\u003e stanzas \u003d st.getChildren(\"XATTR\");\n    List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(stanzas.size());\n    for (Stanza a: stanzas) {\n      XAttr.Builder builder \u003d new XAttr.Builder();\n      builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n          setName(a.getValue(\"NAME\"));\n      String v \u003d a.getValueOrNull(\"VALUE\");\n      if (v !\u003d null) {\n        try {\n          builder.setValue(XAttrCodec.decodeValue(v));\n        } catch (IOException e) {\n          throw new InvalidXmlException(e.toString());\n        }\n      }\n      xattrs.add(builder.build());\n    }\n    return xattrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java",
          "extendedDetails": {
            "oldValue": "readXAttrFromXml",
            "newValue": "readXAttrsFromXml"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/05/14 6:57 AM",
          "commitNameOld": "ac23a55547716df29b3e25c98a113399e184d9d1",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 29.15,
          "commitsBetweenForRepo": 170,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,24 @@\n-  private static XAttr readXAttrFromXml(Stanza st) \n+  private static List\u003cXAttr\u003e readXAttrsFromXml(Stanza st)\n       throws InvalidXmlException {\n     if (!st.hasChildren(\"XATTR\")) {\n       return null;\n     }\n-    \n-    Stanza a \u003d st.getChildren(\"XATTR\").get(0);\n-    XAttr.Builder builder \u003d new XAttr.Builder();\n-    builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n-        setName(a.getValue(\"NAME\"));\n-    String v \u003d a.getValueOrNull(\"VALUE\");\n-    if (v !\u003d null) {\n-      try {\n-        builder.setValue(XAttrCodec.decodeValue(v));\n-      } catch (IOException e) {\n-        throw new InvalidXmlException(e.toString());\n+\n+    List\u003cStanza\u003e stanzas \u003d st.getChildren(\"XATTR\");\n+    List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(stanzas.size());\n+    for (Stanza a: stanzas) {\n+      XAttr.Builder builder \u003d new XAttr.Builder();\n+      builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n+          setName(a.getValue(\"NAME\"));\n+      String v \u003d a.getValueOrNull(\"VALUE\");\n+      if (v !\u003d null) {\n+        try {\n+          builder.setValue(XAttrCodec.decodeValue(v));\n+        } catch (IOException e) {\n+          throw new InvalidXmlException(e.toString());\n+        }\n       }\n+      xattrs.add(builder.build());\n     }\n-    return builder.build();\n+    return xattrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static List\u003cXAttr\u003e readXAttrsFromXml(Stanza st)\n      throws InvalidXmlException {\n    if (!st.hasChildren(\"XATTR\")) {\n      return null;\n    }\n\n    List\u003cStanza\u003e stanzas \u003d st.getChildren(\"XATTR\");\n    List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(stanzas.size());\n    for (Stanza a: stanzas) {\n      XAttr.Builder builder \u003d new XAttr.Builder();\n      builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n          setName(a.getValue(\"NAME\"));\n      String v \u003d a.getValueOrNull(\"VALUE\");\n      if (v !\u003d null) {\n        try {\n          builder.setValue(XAttrCodec.decodeValue(v));\n        } catch (IOException e) {\n          throw new InvalidXmlException(e.toString());\n        }\n      }\n      xattrs.add(builder.build());\n    }\n    return xattrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java",
          "extendedDetails": {
            "oldValue": "XAttr",
            "newValue": "List\u003cXAttr\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/05/14 6:57 AM",
          "commitNameOld": "ac23a55547716df29b3e25c98a113399e184d9d1",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 29.15,
          "commitsBetweenForRepo": 170,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,24 @@\n-  private static XAttr readXAttrFromXml(Stanza st) \n+  private static List\u003cXAttr\u003e readXAttrsFromXml(Stanza st)\n       throws InvalidXmlException {\n     if (!st.hasChildren(\"XATTR\")) {\n       return null;\n     }\n-    \n-    Stanza a \u003d st.getChildren(\"XATTR\").get(0);\n-    XAttr.Builder builder \u003d new XAttr.Builder();\n-    builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n-        setName(a.getValue(\"NAME\"));\n-    String v \u003d a.getValueOrNull(\"VALUE\");\n-    if (v !\u003d null) {\n-      try {\n-        builder.setValue(XAttrCodec.decodeValue(v));\n-      } catch (IOException e) {\n-        throw new InvalidXmlException(e.toString());\n+\n+    List\u003cStanza\u003e stanzas \u003d st.getChildren(\"XATTR\");\n+    List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(stanzas.size());\n+    for (Stanza a: stanzas) {\n+      XAttr.Builder builder \u003d new XAttr.Builder();\n+      builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n+          setName(a.getValue(\"NAME\"));\n+      String v \u003d a.getValueOrNull(\"VALUE\");\n+      if (v !\u003d null) {\n+        try {\n+          builder.setValue(XAttrCodec.decodeValue(v));\n+        } catch (IOException e) {\n+          throw new InvalidXmlException(e.toString());\n+        }\n       }\n+      xattrs.add(builder.build());\n     }\n-    return builder.build();\n+    return xattrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static List\u003cXAttr\u003e readXAttrsFromXml(Stanza st)\n      throws InvalidXmlException {\n    if (!st.hasChildren(\"XATTR\")) {\n      return null;\n    }\n\n    List\u003cStanza\u003e stanzas \u003d st.getChildren(\"XATTR\");\n    List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(stanzas.size());\n    for (Stanza a: stanzas) {\n      XAttr.Builder builder \u003d new XAttr.Builder();\n      builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n          setName(a.getValue(\"NAME\"));\n      String v \u003d a.getValueOrNull(\"VALUE\");\n      if (v !\u003d null) {\n        try {\n          builder.setValue(XAttrCodec.decodeValue(v));\n        } catch (IOException e) {\n          throw new InvalidXmlException(e.toString());\n        }\n      }\n      xattrs.add(builder.build());\n    }\n    return xattrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Yintroduced",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,20 @@\n+  private static XAttr readXAttrFromXml(Stanza st) \n+      throws InvalidXmlException {\n+    if (!st.hasChildren(\"XATTR\")) {\n+      return null;\n+    }\n+    \n+    Stanza a \u003d st.getChildren(\"XATTR\").get(0);\n+    XAttr.Builder builder \u003d new XAttr.Builder();\n+    builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n+        setName(a.getValue(\"NAME\"));\n+    String v \u003d a.getValueOrNull(\"VALUE\");\n+    if (v !\u003d null) {\n+      try {\n+        builder.setValue(XAttrCodec.decodeValue(v));\n+      } catch (IOException e) {\n+        throw new InvalidXmlException(e.toString());\n+      }\n+    }\n+    return builder.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static XAttr readXAttrFromXml(Stanza st) \n      throws InvalidXmlException {\n    if (!st.hasChildren(\"XATTR\")) {\n      return null;\n    }\n    \n    Stanza a \u003d st.getChildren(\"XATTR\").get(0);\n    XAttr.Builder builder \u003d new XAttr.Builder();\n    builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue(\"NAMESPACE\"))).\n        setName(a.getValue(\"NAME\"));\n    String v \u003d a.getValueOrNull(\"VALUE\");\n    if (v !\u003d null) {\n      try {\n        builder.setValue(XAttrCodec.decodeValue(v));\n      } catch (IOException e) {\n        throw new InvalidXmlException(e.toString());\n      }\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java"
    }
  }
}