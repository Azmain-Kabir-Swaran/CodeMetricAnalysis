{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppManager.java",
  "functionName": "updateApplicationTimeout",
  "functionId": "updateApplicationTimeout___app-RMApp__newTimeoutInISO8601Format-Map__ApplicationTimeoutType,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
  "functionStartLine": 660,
  "functionEndLine": 721,
  "numCommitsSeen": 106,
  "timeTaken": 5446,
  "changeHistory": [
    "8ef46595da6aefe4458aa7181670c3d9b13e7ec6",
    "56d93d2e39ead89bb79c4f4096554820dc77e84b",
    "543aac9f281871a40473e83061f6deadc0bbdab7",
    "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a",
    "a926f895c11cd69cf2117c3b970304f3f1f53d92",
    "bcc15c6290b3912a054323695a6a931b0de163bd"
  ],
  "changeHistoryShort": {
    "8ef46595da6aefe4458aa7181670c3d9b13e7ec6": "Ybodychange",
    "56d93d2e39ead89bb79c4f4096554820dc77e84b": "Ymultichange(Yreturntypechange,Ybodychange)",
    "543aac9f281871a40473e83061f6deadc0bbdab7": "Ybodychange",
    "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a": "Ybodychange",
    "a926f895c11cd69cf2117c3b970304f3f1f53d92": "Ybodychange",
    "bcc15c6290b3912a054323695a6a931b0de163bd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8ef46595da6aefe4458aa7181670c3d9b13e7ec6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9438. launchTime not written to state store for running applications\n",
      "commitDate": "27/08/19 3:53 PM",
      "commitName": "8ef46595da6aefe4458aa7181670c3d9b13e7ec6",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "12/08/19 6:15 AM",
      "commitNameOld": "e4b538bbda6dc25d7f45bffd6a4ce49f3f84acdc",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 15.4,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n   public Map\u003cApplicationTimeoutType, String\u003e updateApplicationTimeout(RMApp app,\n       Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n       throws YarnException {\n     ApplicationId applicationId \u003d app.getApplicationId();\n     synchronized (applicationId) {\n       if (app.isAppInCompletedStates()) {\n         return newTimeoutInISO8601Format;\n       }\n \n       Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n           .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n \n       // validation is only for lifetime\n       Long updatedlifetimeInMillis \u003d\n           newExpireTime.get(ApplicationTimeoutType.LIFETIME);\n       if (updatedlifetimeInMillis !\u003d null) {\n         long queueMaxLifetimeInSec \u003d\n             scheduler.getMaximumApplicationLifetime(app.getQueue());\n \n         if (queueMaxLifetimeInSec \u003e 0) {\n           if (updatedlifetimeInMillis \u003e (app.getSubmitTime()\n               + queueMaxLifetimeInSec * 1000)) {\n             updatedlifetimeInMillis \u003d\n                 app.getSubmitTime() + queueMaxLifetimeInSec * 1000;\n             // cut off to maximum queue lifetime if update lifetime is exceeding\n             // queue lifetime.\n             newExpireTime.put(ApplicationTimeoutType.LIFETIME,\n                 updatedlifetimeInMillis);\n \n             newTimeoutInISO8601Format.put(ApplicationTimeoutType.LIFETIME,\n                 Times.formatISO8601(updatedlifetimeInMillis.longValue()));\n           }\n         }\n       }\n \n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n           app.getApplicationTimeouts();\n       currentExpireTimeouts.putAll(newExpireTime);\n \n       ApplicationStateData appState \u003d\n           ApplicationStateData.newInstance(app.getSubmitTime(),\n               app.getStartTime(), app.getApplicationSubmissionContext(),\n               app.getUser(), app.getCallerContext());\n       appState.setApplicationTimeouts(currentExpireTimeouts);\n+      appState.setLaunchTime(app.getLaunchTime());\n \n       // update to state store. Though it synchronous call, update via future to\n       // know any exception has been set. It is required because in non-HA mode,\n       // state-store errors are skipped.\n       this.rmContext.getStateStore()\n           .updateApplicationStateSynchronously(appState, false, future);\n \n       getChecked(future);\n \n       // update in-memory\n       ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n \n       return newTimeoutInISO8601Format;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cApplicationTimeoutType, String\u003e updateApplicationTimeout(RMApp app,\n      Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n      throws YarnException {\n    ApplicationId applicationId \u003d app.getApplicationId();\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return newTimeoutInISO8601Format;\n      }\n\n      Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n          .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n\n      // validation is only for lifetime\n      Long updatedlifetimeInMillis \u003d\n          newExpireTime.get(ApplicationTimeoutType.LIFETIME);\n      if (updatedlifetimeInMillis !\u003d null) {\n        long queueMaxLifetimeInSec \u003d\n            scheduler.getMaximumApplicationLifetime(app.getQueue());\n\n        if (queueMaxLifetimeInSec \u003e 0) {\n          if (updatedlifetimeInMillis \u003e (app.getSubmitTime()\n              + queueMaxLifetimeInSec * 1000)) {\n            updatedlifetimeInMillis \u003d\n                app.getSubmitTime() + queueMaxLifetimeInSec * 1000;\n            // cut off to maximum queue lifetime if update lifetime is exceeding\n            // queue lifetime.\n            newExpireTime.put(ApplicationTimeoutType.LIFETIME,\n                updatedlifetimeInMillis);\n\n            newTimeoutInISO8601Format.put(ApplicationTimeoutType.LIFETIME,\n                Times.formatISO8601(updatedlifetimeInMillis.longValue()));\n          }\n        }\n      }\n\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n          app.getApplicationTimeouts();\n      currentExpireTimeouts.putAll(newExpireTime);\n\n      ApplicationStateData appState \u003d\n          ApplicationStateData.newInstance(app.getSubmitTime(),\n              app.getStartTime(), app.getApplicationSubmissionContext(),\n              app.getUser(), app.getCallerContext());\n      appState.setApplicationTimeouts(currentExpireTimeouts);\n      appState.setLaunchTime(app.getLaunchTime());\n\n      // update to state store. Though it synchronous call, update via future to\n      // know any exception has been set. It is required because in non-HA mode,\n      // state-store errors are skipped.\n      this.rmContext.getStateStore()\n          .updateApplicationStateSynchronously(appState, false, future);\n\n      getChecked(future);\n\n      // update in-memory\n      ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n\n      return newTimeoutInISO8601Format;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "56d93d2e39ead89bb79c4f4096554820dc77e84b": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6600. Introduce default and max lifetime of application at LeafQueue level. Contributed by Rohith Sharma K S.\n",
      "commitDate": "07/09/17 6:45 PM",
      "commitName": "56d93d2e39ead89bb79c4f4096554820dc77e84b",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6600. Introduce default and max lifetime of application at LeafQueue level. Contributed by Rohith Sharma K S.\n",
          "commitDate": "07/09/17 6:45 PM",
          "commitName": "56d93d2e39ead89bb79c4f4096554820dc77e84b",
          "commitAuthor": "Sunil G",
          "commitDateOld": "01/08/17 9:56 AM",
          "commitNameOld": "91f120f743662c6e037e8f21b1792e81d58ac664",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 37.37,
          "commitsBetweenForRepo": 356,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,61 @@\n-  public void updateApplicationTimeout(RMApp app,\n+  public Map\u003cApplicationTimeoutType, String\u003e updateApplicationTimeout(RMApp app,\n       Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n       throws YarnException {\n     ApplicationId applicationId \u003d app.getApplicationId();\n     synchronized (applicationId) {\n       if (app.isAppInCompletedStates()) {\n-        return;\n+        return newTimeoutInISO8601Format;\n       }\n \n       Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n           .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n \n+      // validation is only for lifetime\n+      Long updatedlifetimeInMillis \u003d\n+          newExpireTime.get(ApplicationTimeoutType.LIFETIME);\n+      if (updatedlifetimeInMillis !\u003d null) {\n+        long queueMaxLifetimeInSec \u003d\n+            scheduler.getMaximumApplicationLifetime(app.getQueue());\n+\n+        if (queueMaxLifetimeInSec \u003e 0) {\n+          if (updatedlifetimeInMillis \u003e (app.getSubmitTime()\n+              + queueMaxLifetimeInSec * 1000)) {\n+            updatedlifetimeInMillis \u003d\n+                app.getSubmitTime() + queueMaxLifetimeInSec * 1000;\n+            // cut off to maximum queue lifetime if update lifetime is exceeding\n+            // queue lifetime.\n+            newExpireTime.put(ApplicationTimeoutType.LIFETIME,\n+                updatedlifetimeInMillis);\n+\n+            newTimeoutInISO8601Format.put(ApplicationTimeoutType.LIFETIME,\n+                Times.formatISO8601(updatedlifetimeInMillis.longValue()));\n+          }\n+        }\n+      }\n+\n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n           app.getApplicationTimeouts();\n       currentExpireTimeouts.putAll(newExpireTime);\n \n       ApplicationStateData appState \u003d\n           ApplicationStateData.newInstance(app.getSubmitTime(),\n               app.getStartTime(), app.getApplicationSubmissionContext(),\n               app.getUser(), app.getCallerContext());\n       appState.setApplicationTimeouts(currentExpireTimeouts);\n \n       // update to state store. Though it synchronous call, update via future to\n       // know any exception has been set. It is required because in non-HA mode,\n       // state-store errors are skipped.\n       this.rmContext.getStateStore()\n           .updateApplicationStateSynchronously(appState, false, future);\n \n       getChecked(future);\n \n       // update in-memory\n       ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n+\n+      return newTimeoutInISO8601Format;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cApplicationTimeoutType, String\u003e updateApplicationTimeout(RMApp app,\n      Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n      throws YarnException {\n    ApplicationId applicationId \u003d app.getApplicationId();\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return newTimeoutInISO8601Format;\n      }\n\n      Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n          .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n\n      // validation is only for lifetime\n      Long updatedlifetimeInMillis \u003d\n          newExpireTime.get(ApplicationTimeoutType.LIFETIME);\n      if (updatedlifetimeInMillis !\u003d null) {\n        long queueMaxLifetimeInSec \u003d\n            scheduler.getMaximumApplicationLifetime(app.getQueue());\n\n        if (queueMaxLifetimeInSec \u003e 0) {\n          if (updatedlifetimeInMillis \u003e (app.getSubmitTime()\n              + queueMaxLifetimeInSec * 1000)) {\n            updatedlifetimeInMillis \u003d\n                app.getSubmitTime() + queueMaxLifetimeInSec * 1000;\n            // cut off to maximum queue lifetime if update lifetime is exceeding\n            // queue lifetime.\n            newExpireTime.put(ApplicationTimeoutType.LIFETIME,\n                updatedlifetimeInMillis);\n\n            newTimeoutInISO8601Format.put(ApplicationTimeoutType.LIFETIME,\n                Times.formatISO8601(updatedlifetimeInMillis.longValue()));\n          }\n        }\n      }\n\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n          app.getApplicationTimeouts();\n      currentExpireTimeouts.putAll(newExpireTime);\n\n      ApplicationStateData appState \u003d\n          ApplicationStateData.newInstance(app.getSubmitTime(),\n              app.getStartTime(), app.getApplicationSubmissionContext(),\n              app.getUser(), app.getCallerContext());\n      appState.setApplicationTimeouts(currentExpireTimeouts);\n\n      // update to state store. Though it synchronous call, update via future to\n      // know any exception has been set. It is required because in non-HA mode,\n      // state-store errors are skipped.\n      this.rmContext.getStateStore()\n          .updateApplicationStateSynchronously(appState, false, future);\n\n      getChecked(future);\n\n      // update in-memory\n      ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n\n      return newTimeoutInISO8601Format;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Map\u003cApplicationTimeoutType,String\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6600. Introduce default and max lifetime of application at LeafQueue level. Contributed by Rohith Sharma K S.\n",
          "commitDate": "07/09/17 6:45 PM",
          "commitName": "56d93d2e39ead89bb79c4f4096554820dc77e84b",
          "commitAuthor": "Sunil G",
          "commitDateOld": "01/08/17 9:56 AM",
          "commitNameOld": "91f120f743662c6e037e8f21b1792e81d58ac664",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 37.37,
          "commitsBetweenForRepo": 356,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,61 @@\n-  public void updateApplicationTimeout(RMApp app,\n+  public Map\u003cApplicationTimeoutType, String\u003e updateApplicationTimeout(RMApp app,\n       Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n       throws YarnException {\n     ApplicationId applicationId \u003d app.getApplicationId();\n     synchronized (applicationId) {\n       if (app.isAppInCompletedStates()) {\n-        return;\n+        return newTimeoutInISO8601Format;\n       }\n \n       Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n           .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n \n+      // validation is only for lifetime\n+      Long updatedlifetimeInMillis \u003d\n+          newExpireTime.get(ApplicationTimeoutType.LIFETIME);\n+      if (updatedlifetimeInMillis !\u003d null) {\n+        long queueMaxLifetimeInSec \u003d\n+            scheduler.getMaximumApplicationLifetime(app.getQueue());\n+\n+        if (queueMaxLifetimeInSec \u003e 0) {\n+          if (updatedlifetimeInMillis \u003e (app.getSubmitTime()\n+              + queueMaxLifetimeInSec * 1000)) {\n+            updatedlifetimeInMillis \u003d\n+                app.getSubmitTime() + queueMaxLifetimeInSec * 1000;\n+            // cut off to maximum queue lifetime if update lifetime is exceeding\n+            // queue lifetime.\n+            newExpireTime.put(ApplicationTimeoutType.LIFETIME,\n+                updatedlifetimeInMillis);\n+\n+            newTimeoutInISO8601Format.put(ApplicationTimeoutType.LIFETIME,\n+                Times.formatISO8601(updatedlifetimeInMillis.longValue()));\n+          }\n+        }\n+      }\n+\n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n           app.getApplicationTimeouts();\n       currentExpireTimeouts.putAll(newExpireTime);\n \n       ApplicationStateData appState \u003d\n           ApplicationStateData.newInstance(app.getSubmitTime(),\n               app.getStartTime(), app.getApplicationSubmissionContext(),\n               app.getUser(), app.getCallerContext());\n       appState.setApplicationTimeouts(currentExpireTimeouts);\n \n       // update to state store. Though it synchronous call, update via future to\n       // know any exception has been set. It is required because in non-HA mode,\n       // state-store errors are skipped.\n       this.rmContext.getStateStore()\n           .updateApplicationStateSynchronously(appState, false, future);\n \n       getChecked(future);\n \n       // update in-memory\n       ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n+\n+      return newTimeoutInISO8601Format;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cApplicationTimeoutType, String\u003e updateApplicationTimeout(RMApp app,\n      Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n      throws YarnException {\n    ApplicationId applicationId \u003d app.getApplicationId();\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return newTimeoutInISO8601Format;\n      }\n\n      Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n          .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n\n      // validation is only for lifetime\n      Long updatedlifetimeInMillis \u003d\n          newExpireTime.get(ApplicationTimeoutType.LIFETIME);\n      if (updatedlifetimeInMillis !\u003d null) {\n        long queueMaxLifetimeInSec \u003d\n            scheduler.getMaximumApplicationLifetime(app.getQueue());\n\n        if (queueMaxLifetimeInSec \u003e 0) {\n          if (updatedlifetimeInMillis \u003e (app.getSubmitTime()\n              + queueMaxLifetimeInSec * 1000)) {\n            updatedlifetimeInMillis \u003d\n                app.getSubmitTime() + queueMaxLifetimeInSec * 1000;\n            // cut off to maximum queue lifetime if update lifetime is exceeding\n            // queue lifetime.\n            newExpireTime.put(ApplicationTimeoutType.LIFETIME,\n                updatedlifetimeInMillis);\n\n            newTimeoutInISO8601Format.put(ApplicationTimeoutType.LIFETIME,\n                Times.formatISO8601(updatedlifetimeInMillis.longValue()));\n          }\n        }\n      }\n\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n          app.getApplicationTimeouts();\n      currentExpireTimeouts.putAll(newExpireTime);\n\n      ApplicationStateData appState \u003d\n          ApplicationStateData.newInstance(app.getSubmitTime(),\n              app.getStartTime(), app.getApplicationSubmissionContext(),\n              app.getUser(), app.getCallerContext());\n      appState.setApplicationTimeouts(currentExpireTimeouts);\n\n      // update to state store. Though it synchronous call, update via future to\n      // know any exception has been set. It is required because in non-HA mode,\n      // state-store errors are skipped.\n      this.rmContext.getStateStore()\n          .updateApplicationStateSynchronously(appState, false, future);\n\n      getChecked(future);\n\n      // update in-memory\n      ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n\n      return newTimeoutInISO8601Format;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "543aac9f281871a40473e83061f6deadc0bbdab7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14386. Rewind trunk from Guava 21.0 back to Guava 11.0.2.\n",
      "commitDate": "09/05/17 9:22 AM",
      "commitName": "543aac9f281871a40473e83061f6deadc0bbdab7",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/04/17 1:17 PM",
      "commitNameOld": "2ba21d63767e11535d3210dc58a03b41e83df949",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 14.84,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public void updateApplicationTimeout(RMApp app,\n       Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n       throws YarnException {\n     ApplicationId applicationId \u003d app.getApplicationId();\n     synchronized (applicationId) {\n       if (app.isAppInCompletedStates()) {\n         return;\n       }\n \n       Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n           .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n \n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n           app.getApplicationTimeouts();\n       currentExpireTimeouts.putAll(newExpireTime);\n \n       ApplicationStateData appState \u003d\n           ApplicationStateData.newInstance(app.getSubmitTime(),\n               app.getStartTime(), app.getApplicationSubmissionContext(),\n               app.getUser(), app.getCallerContext());\n       appState.setApplicationTimeouts(currentExpireTimeouts);\n \n       // update to state store. Though it synchronous call, update via future to\n       // know any exception has been set. It is required because in non-HA mode,\n       // state-store errors are skipped.\n       this.rmContext.getStateStore()\n           .updateApplicationStateSynchronously(appState, false, future);\n \n-      Futures.getChecked(future, YarnException.class);\n+      getChecked(future);\n \n       // update in-memory\n       ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateApplicationTimeout(RMApp app,\n      Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n      throws YarnException {\n    ApplicationId applicationId \u003d app.getApplicationId();\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return;\n      }\n\n      Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n          .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n          app.getApplicationTimeouts();\n      currentExpireTimeouts.putAll(newExpireTime);\n\n      ApplicationStateData appState \u003d\n          ApplicationStateData.newInstance(app.getSubmitTime(),\n              app.getStartTime(), app.getApplicationSubmissionContext(),\n              app.getUser(), app.getCallerContext());\n      appState.setApplicationTimeouts(currentExpireTimeouts);\n\n      // update to state store. Though it synchronous call, update via future to\n      // know any exception has been set. It is required because in non-HA mode,\n      // state-store errors are skipped.\n      this.rmContext.getStateStore()\n          .updateApplicationStateSynchronously(appState, false, future);\n\n      getChecked(future);\n\n      // update in-memory\n      ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10101. Update guava dependency to the latest version. (ozawa)\n",
      "commitDate": "24/03/17 6:06 PM",
      "commitName": "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "23/02/17 12:49 AM",
      "commitNameOld": "a207aa9930e7ee4f10228e2db4b4e733794eb8ea",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 29.68,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public void updateApplicationTimeout(RMApp app,\n       Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n       throws YarnException {\n     ApplicationId applicationId \u003d app.getApplicationId();\n     synchronized (applicationId) {\n       if (app.isAppInCompletedStates()) {\n         return;\n       }\n \n       Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n           .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n \n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n           app.getApplicationTimeouts();\n       currentExpireTimeouts.putAll(newExpireTime);\n \n       ApplicationStateData appState \u003d\n           ApplicationStateData.newInstance(app.getSubmitTime(),\n               app.getStartTime(), app.getApplicationSubmissionContext(),\n               app.getUser(), app.getCallerContext());\n       appState.setApplicationTimeouts(currentExpireTimeouts);\n \n       // update to state store. Though it synchronous call, update via future to\n       // know any exception has been set. It is required because in non-HA mode,\n       // state-store errors are skipped.\n       this.rmContext.getStateStore()\n           .updateApplicationStateSynchronously(appState, false, future);\n \n-      Futures.get(future, YarnException.class);\n+      Futures.getChecked(future, YarnException.class);\n \n       // update in-memory\n       ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateApplicationTimeout(RMApp app,\n      Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n      throws YarnException {\n    ApplicationId applicationId \u003d app.getApplicationId();\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return;\n      }\n\n      Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n          .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n          app.getApplicationTimeouts();\n      currentExpireTimeouts.putAll(newExpireTime);\n\n      ApplicationStateData appState \u003d\n          ApplicationStateData.newInstance(app.getSubmitTime(),\n              app.getStartTime(), app.getApplicationSubmissionContext(),\n              app.getUser(), app.getCallerContext());\n      appState.setApplicationTimeouts(currentExpireTimeouts);\n\n      // update to state store. Though it synchronous call, update via future to\n      // know any exception has been set. It is required because in non-HA mode,\n      // state-store errors are skipped.\n      this.rmContext.getStateStore()\n          .updateApplicationStateSynchronously(appState, false, future);\n\n      Futures.getChecked(future, YarnException.class);\n\n      // update in-memory\n      ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "a926f895c11cd69cf2117c3b970304f3f1f53d92": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5865. Retrospect updateApplicationPriority api to handle state store exception in align with YARN-5611. Contributed by Sunil G.\n",
      "commitDate": "22/11/16 1:19 AM",
      "commitName": "a926f895c11cd69cf2117c3b970304f3f1f53d92",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "10/11/16 2:35 PM",
      "commitNameOld": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 11.45,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   public void updateApplicationTimeout(RMApp app,\n       Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n       throws YarnException {\n     ApplicationId applicationId \u003d app.getApplicationId();\n     synchronized (applicationId) {\n+      if (app.isAppInCompletedStates()) {\n+        return;\n+      }\n+\n       Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n           .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n \n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n           app.getApplicationTimeouts();\n       currentExpireTimeouts.putAll(newExpireTime);\n \n       ApplicationStateData appState \u003d\n           ApplicationStateData.newInstance(app.getSubmitTime(),\n               app.getStartTime(), app.getApplicationSubmissionContext(),\n               app.getUser(), app.getCallerContext());\n       appState.setApplicationTimeouts(currentExpireTimeouts);\n \n       // update to state store. Though it synchronous call, update via future to\n       // know any exception has been set. It is required because in non-HA mode,\n       // state-store errors are skipped.\n       this.rmContext.getStateStore()\n           .updateApplicationStateSynchronously(appState, false, future);\n \n       Futures.get(future, YarnException.class);\n \n       // update in-memory\n       ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateApplicationTimeout(RMApp app,\n      Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n      throws YarnException {\n    ApplicationId applicationId \u003d app.getApplicationId();\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return;\n      }\n\n      Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n          .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n          app.getApplicationTimeouts();\n      currentExpireTimeouts.putAll(newExpireTime);\n\n      ApplicationStateData appState \u003d\n          ApplicationStateData.newInstance(app.getSubmitTime(),\n              app.getStartTime(), app.getApplicationSubmissionContext(),\n              app.getUser(), app.getCallerContext());\n      appState.setApplicationTimeouts(currentExpireTimeouts);\n\n      // update to state store. Though it synchronous call, update via future to\n      // know any exception has been set. It is required because in non-HA mode,\n      // state-store errors are skipped.\n      this.rmContext.getStateStore()\n          .updateApplicationStateSynchronously(appState, false, future);\n\n      Futures.get(future, YarnException.class);\n\n      // update in-memory\n      ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "bcc15c6290b3912a054323695a6a931b0de163bd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5611. Provide an API to update lifetime of an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "09/11/16 4:08 PM",
      "commitName": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,32 @@\n+  public void updateApplicationTimeout(RMApp app,\n+      Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n+      throws YarnException {\n+    ApplicationId applicationId \u003d app.getApplicationId();\n+    synchronized (applicationId) {\n+      Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n+          .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n+\n+      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n+\n+      Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n+          app.getApplicationTimeouts();\n+      currentExpireTimeouts.putAll(newExpireTime);\n+\n+      ApplicationStateData appState \u003d\n+          ApplicationStateData.newInstance(app.getSubmitTime(),\n+              app.getStartTime(), app.getApplicationSubmissionContext(),\n+              app.getUser(), app.getCallerContext());\n+      appState.setApplicationTimeouts(currentExpireTimeouts);\n+\n+      // update to state store. Though it synchronous call, update via future to\n+      // know any exception has been set. It is required because in non-HA mode,\n+      // state-store errors are skipped.\n+      this.rmContext.getStateStore()\n+          .updateApplicationStateSynchronously(appState, false, future);\n+\n+      Futures.get(future, YarnException.class);\n+\n+      // update in-memory\n+      ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateApplicationTimeout(RMApp app,\n      Map\u003cApplicationTimeoutType, String\u003e newTimeoutInISO8601Format)\n      throws YarnException {\n    ApplicationId applicationId \u003d app.getApplicationId();\n    synchronized (applicationId) {\n      Map\u003cApplicationTimeoutType, Long\u003e newExpireTime \u003d RMServerUtils\n          .validateISO8601AndConvertToLocalTimeEpoch(newTimeoutInISO8601Format);\n\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      Map\u003cApplicationTimeoutType, Long\u003e currentExpireTimeouts \u003d\n          app.getApplicationTimeouts();\n      currentExpireTimeouts.putAll(newExpireTime);\n\n      ApplicationStateData appState \u003d\n          ApplicationStateData.newInstance(app.getSubmitTime(),\n              app.getStartTime(), app.getApplicationSubmissionContext(),\n              app.getUser(), app.getCallerContext());\n      appState.setApplicationTimeouts(currentExpireTimeouts);\n\n      // update to state store. Though it synchronous call, update via future to\n      // know any exception has been set. It is required because in non-HA mode,\n      // state-store errors are skipped.\n      this.rmContext.getStateStore()\n          .updateApplicationStateSynchronously(appState, false, future);\n\n      Futures.get(future, YarnException.class);\n\n      // update in-memory\n      ((RMAppImpl) app).updateApplicationTimeout(newExpireTime);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java"
    }
  }
}