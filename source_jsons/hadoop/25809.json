{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerAllocator.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
  "functionStartLine": 211,
  "functionEndLine": 245,
  "numCommitsSeen": 82,
  "timeTaken": 4690,
  "changeHistory": [
    "85826f6ca5a6d06b711a6805f7a1a6788852db05",
    "2273a74c1f3895163046cca09ff5e983df301d22",
    "0aafc122d401a2f49d0f9ca556343f9ba871e979",
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
    "4aa9b3e75ca86917125e56e1b438668273a5d87f",
    "3164e7d83875aa6b7435d1dfe61ac280aa277f1c",
    "4228de94028f1e10ca59ce23e963e488fe566909",
    "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698",
    "0928502029ef141759008997335ea2cd836a7154"
  ],
  "changeHistoryShort": {
    "85826f6ca5a6d06b711a6805f7a1a6788852db05": "Ybodychange",
    "2273a74c1f3895163046cca09ff5e983df301d22": "Ybodychange",
    "0aafc122d401a2f49d0f9ca556343f9ba871e979": "Ybodychange",
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": "Ybodychange",
    "4aa9b3e75ca86917125e56e1b438668273a5d87f": "Ybodychange",
    "3164e7d83875aa6b7435d1dfe61ac280aa277f1c": "Ybodychange",
    "4228de94028f1e10ca59ce23e963e488fe566909": "Ybodychange",
    "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Yintroduced"
  },
  "changeHistoryDetails": {
    "85826f6ca5a6d06b711a6805f7a1a6788852db05": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6066. Opportunistic containers Minor fixes : API annotations, parameter name changes, checkstyles. (asuresh)\n\n(cherry picked from commit 4985217de453a04ddffd7b52644bdc8d153f753c)\n",
      "commitDate": "08/01/17 9:04 AM",
      "commitName": "85826f6ca5a6d06b711a6805f7a1a6788852db05",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "16/12/16 8:14 AM",
      "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 23.03,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     reduceSlowStart \u003d conf.getFloat(\n         MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n         DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n     maxReduceRampupLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n     maxReducePreemptionLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n     reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n     reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n     maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n     maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n     RackResolver.init(conf);\n     retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                 MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n     mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n     reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n     // Init startTime to current time. If all goes well, it will be reset after\n     // first attempt to contact RM.\n     retrystartTime \u003d System.currentTimeMillis();\n-    this.scheduledRequests.setNumOpportunisticMapsPer100(\n-        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PERCENTAGE,\n-            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PERCENTAGE));\n-    LOG.info(this.scheduledRequests.getNumOpportunisticMapsPer100() +\n+    this.scheduledRequests.setNumOpportunisticMapsPercent(\n+        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PERCENT,\n+            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PERCENT));\n+    LOG.info(this.scheduledRequests.getNumOpportunisticMapsPercent() +\n         \"% of the mappers will be scheduled using OPPORTUNISTIC containers\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n    reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n    maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n    maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n    reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n    this.scheduledRequests.setNumOpportunisticMapsPercent(\n        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PERCENT,\n            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PERCENT));\n    LOG.info(this.scheduledRequests.getNumOpportunisticMapsPercent() +\n        \"% of the mappers will be scheduled using OPPORTUNISTIC containers\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "2273a74c1f3895163046cca09ff5e983df301d22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5646. Add documentation and update config parameter names for scheduling of OPPORTUNISTIC containers. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "16/12/16 8:14 AM",
      "commitName": "2273a74c1f3895163046cca09ff5e983df301d22",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "04/11/16 7:31 AM",
      "commitNameOld": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 42.07,
      "commitsBetweenForRepo": 292,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     reduceSlowStart \u003d conf.getFloat(\n         MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n         DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n     maxReduceRampupLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n     maxReducePreemptionLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n     reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n     reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n     maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n     maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n     RackResolver.init(conf);\n     retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                 MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n     mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n     reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n     // Init startTime to current time. If all goes well, it will be reset after\n     // first attempt to contact RM.\n     retrystartTime \u003d System.currentTimeMillis();\n     this.scheduledRequests.setNumOpportunisticMapsPer100(\n-        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PER_100,\n-            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PER_100));\n+        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PERCENTAGE,\n+            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PERCENTAGE));\n     LOG.info(this.scheduledRequests.getNumOpportunisticMapsPer100() +\n         \"% of the mappers will be scheduled using OPPORTUNISTIC containers\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n    reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n    maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n    maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n    reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n    this.scheduledRequests.setNumOpportunisticMapsPer100(\n        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PERCENTAGE,\n            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PERCENTAGE));\n    LOG.info(this.scheduledRequests.getNumOpportunisticMapsPer100() +\n        \"% of the mappers will be scheduled using OPPORTUNISTIC containers\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "0aafc122d401a2f49d0f9ca556343f9ba871e979": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2995. Enhance UI to show cluster resource utilization of various container Execution types. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "04/11/16 7:31 AM",
      "commitName": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/11/16 8:47 PM",
      "commitNameOld": "fc2b69eba1c5df59f6175205c27dc7b584df50c0",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 2.45,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     reduceSlowStart \u003d conf.getFloat(\n         MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n         DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n     maxReduceRampupLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n     maxReducePreemptionLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n     reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n     reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n     maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n     maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n     RackResolver.init(conf);\n     retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                 MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n     mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n     reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n     // Init startTime to current time. If all goes well, it will be reset after\n     // first attempt to contact RM.\n     retrystartTime \u003d System.currentTimeMillis();\n     this.scheduledRequests.setNumOpportunisticMapsPer100(\n         conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PER_100,\n             MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PER_100));\n+    LOG.info(this.scheduledRequests.getNumOpportunisticMapsPer100() +\n+        \"% of the mappers will be scheduled using OPPORTUNISTIC containers\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n    reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n    maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n    maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n    reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n    this.scheduledRequests.setNumOpportunisticMapsPer100(\n        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PER_100,\n            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PER_100));\n    LOG.info(this.scheduledRequests.getNumOpportunisticMapsPer100() +\n        \"% of the mappers will be scheduled using OPPORTUNISTIC containers\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6703. Add flag to allow MapReduce AM to request for OPPORTUNISTIC containers. Contributed by Arun Suresh\n",
      "commitDate": "24/05/16 7:47 PM",
      "commitName": "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/05/16 3:25 PM",
      "commitNameOld": "c9bb96fa81fc925e33ccc0b02c98cc2d929df120",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 18.18,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     reduceSlowStart \u003d conf.getFloat(\n         MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n         DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n     maxReduceRampupLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n     maxReducePreemptionLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n     reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n     reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n     maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n     maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n     RackResolver.init(conf);\n     retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                 MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n     mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n     reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n     // Init startTime to current time. If all goes well, it will be reset after\n     // first attempt to contact RM.\n     retrystartTime \u003d System.currentTimeMillis();\n+    this.scheduledRequests.setNumOpportunisticMapsPer100(\n+        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PER_100,\n+            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PER_100));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n    reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n    maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n    maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n    reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n    this.scheduledRequests.setNumOpportunisticMapsPer100(\n        conf.getInt(MRJobConfig.MR_NUM_OPPORTUNISTIC_MAPS_PER_100,\n            MRJobConfig.DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PER_100));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "4aa9b3e75ca86917125e56e1b438668273a5d87f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6302. Incorrect headroom can lead to a deadlock between map and reduce allocations. (kasha)\n",
      "commitDate": "09/10/15 7:37 AM",
      "commitName": "4aa9b3e75ca86917125e56e1b438668273a5d87f",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "21/09/15 8:54 PM",
      "commitNameOld": "dfd807afab0fae3839c9cc5d552aa0304444f956",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 17.45,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     reduceSlowStart \u003d conf.getFloat(\n         MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n         DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n     maxReduceRampupLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n     maxReducePreemptionLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n-    allocationDelayThresholdMs \u003d conf.getInt(\n+    reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n+        MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n+        MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n+    reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n     maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n     maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n     RackResolver.init(conf);\n     retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                 MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n     mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n     reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n     // Init startTime to current time. If all goes well, it will be reset after\n     // first attempt to contact RM.\n     retrystartTime \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    reducerUnconditionalPreemptionDelayMs \u003d 1000 * conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC);\n    reducerNoHeadroomPreemptionDelayMs \u003d conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n    maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n    maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n    reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "3164e7d83875aa6b7435d1dfe61ac280aa277f1c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6304. Specifying node labels when submitting MR jobs. (Naganarasimha G R via wangda)\n",
      "commitDate": "27/05/15 2:26 PM",
      "commitName": "3164e7d83875aa6b7435d1dfe61ac280aa277f1c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/03/15 12:30 PM",
      "commitNameOld": "30da99cbaf36aeef38a858251ce8ffa5eb657b38",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 70.08,
      "commitsBetweenForRepo": 677,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     reduceSlowStart \u003d conf.getFloat(\n         MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n         DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n     maxReduceRampupLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n     maxReducePreemptionLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n     allocationDelayThresholdMs \u003d conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n     maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n     maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n         MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n     RackResolver.init(conf);\n     retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                 MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n+    mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n+    reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n     // Init startTime to current time. If all goes well, it will be reset after\n     // first attempt to contact RM.\n     retrystartTime \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    allocationDelayThresholdMs \u003d conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n    maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n    maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    mapNodeLabelExpression \u003d conf.get(MRJobConfig.MAP_NODE_LABEL_EXP);\n    reduceNodeLabelExpression \u003d conf.get(MRJobConfig.REDUCE_NODE_LABEL_EXP);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "4228de94028f1e10ca59ce23e963e488fe566909": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5583. Ability to limit running map and reduce tasks. Contributed by Jason Lowe.\n",
      "commitDate": "03/03/15 2:02 AM",
      "commitName": "4228de94028f1e10ca59ce23e963e488fe566909",
      "commitAuthor": "Junping Du",
      "commitDateOld": "28/01/15 3:51 PM",
      "commitNameOld": "cff05bff1fe24628677d41a0d537f2c383b44faf",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 33.42,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     reduceSlowStart \u003d conf.getFloat(\n         MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n         DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n     maxReduceRampupLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n     maxReducePreemptionLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n     allocationDelayThresholdMs \u003d conf.getInt(\n         MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n         MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n+    maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n+        MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n+    maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n+        MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n     RackResolver.init(conf);\n     retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                 MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n     // Init startTime to current time. If all goes well, it will be reset after\n     // first attempt to contact RM.\n     retrystartTime \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    allocationDelayThresholdMs \u003d conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n    maxRunningMaps \u003d conf.getInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_MAP_LIMIT);\n    maxRunningReduces \u003d conf.getInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,\n        MRJobConfig.DEFAULT_JOB_RUNNING_REDUCE_LIMIT);\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5844. Add a configurable delay to reducer-preemption. (Maysam Yabandeh via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603957 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 10:22 AM",
      "commitName": "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "22/04/14 11:44 AM",
      "commitNameOld": "4a91b876db768e7997e740d754aeea66c3b7a36c",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 57.94,
      "commitsBetweenForRepo": 333,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,21 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     reduceSlowStart \u003d conf.getFloat(\n         MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n         DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n     maxReduceRampupLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n     maxReducePreemptionLimit \u003d conf.getFloat(\n         MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n         MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n+    allocationDelayThresholdMs \u003d conf.getInt(\n+        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n+        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n     RackResolver.init(conf);\n     retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                 MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n     // Init startTime to current time. If all goes well, it will be reset after\n     // first attempt to contact RM.\n     retrystartTime \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    allocationDelayThresholdMs \u003d conf.getInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        MRJobConfig.DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC) * 1000;//sec -\u003e ms\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Yintroduced",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  protected void serviceInit(Configuration conf) throws Exception {\n+    super.serviceInit(conf);\n+    reduceSlowStart \u003d conf.getFloat(\n+        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n+        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n+    maxReduceRampupLimit \u003d conf.getFloat(\n+        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n+        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n+    maxReducePreemptionLimit \u003d conf.getFloat(\n+        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n+        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n+    RackResolver.init(conf);\n+    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n+                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n+    // Init startTime to current time. If all goes well, it will be reset after\n+    // first attempt to contact RM.\n+    retrystartTime \u003d System.currentTimeMillis();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    reduceSlowStart \u003d conf.getFloat(\n        MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, \n        DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART);\n    maxReduceRampupLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT, \n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT);\n    maxReducePreemptionLimit \u003d conf.getFloat(\n        MRJobConfig.MR_AM_JOB_REDUCE_PREEMPTION_LIMIT,\n        MRJobConfig.DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT);\n    RackResolver.init(conf);\n    retryInterval \u003d getConfig().getLong(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,\n                                MRJobConfig.DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS);\n    // Init startTime to current time. If all goes well, it will be reset after\n    // first attempt to contact RM.\n    retrystartTime \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
    }
  }
}