{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedScheduler.java",
  "functionName": "updateParameters",
  "functionId": "updateParameters___registerResponse-RegisterDistributedSchedulingAMResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
  "functionStartLine": 185,
  "functionEndLine": 200,
  "numCommitsSeen": 12,
  "timeTaken": 3022,
  "changeHistory": [
    "10be45986cdf86a89055065b752959bd6369d54f",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "10be45986cdf86a89055065b752959bd6369d54f": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ybodychange",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/08/16 12:42 AM",
      "commitNameOld": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 51.6,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,16 @@\n   private void updateParameters(\n       RegisterDistributedSchedulingAMResponse registerResponse) {\n-    oppContainerContext.getAppParams().setMinResource(\n-        registerResponse.getMinContainerResource());\n-    oppContainerContext.getAppParams().setMaxResource(\n-        registerResponse.getMaxContainerResource());\n-    oppContainerContext.getAppParams().setIncrementResource(\n-        registerResponse.getIncrContainerResource());\n-    if (oppContainerContext.getAppParams().getIncrementResource() \u003d\u003d null) {\n-      oppContainerContext.getAppParams().setIncrementResource(\n-          oppContainerContext.getAppParams().getMinResource());\n+    Resource incrementResource \u003d registerResponse.getIncrContainerResource();\n+    if (incrementResource \u003d\u003d null) {\n+      incrementResource \u003d registerResponse.getMinContainerResource();\n     }\n-    oppContainerContext.getAppParams().setContainerTokenExpiryInterval(\n+    oppContainerContext.updateAllocationParams(\n+        registerResponse.getMinContainerResource(),\n+        registerResponse.getMaxContainerResource(),\n+        incrementResource,\n         registerResponse.getContainerTokenExpiryInterval());\n \n     oppContainerContext.getContainerIdGenerator()\n         .resetContainerIdCounter(registerResponse.getContainerIdStart());\n     setNodeList(registerResponse.getNodesForScheduling());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateParameters(\n      RegisterDistributedSchedulingAMResponse registerResponse) {\n    Resource incrementResource \u003d registerResponse.getIncrContainerResource();\n    if (incrementResource \u003d\u003d null) {\n      incrementResource \u003d registerResponse.getMinContainerResource();\n    }\n    oppContainerContext.updateAllocationParams(\n        registerResponse.getMinContainerResource(),\n        registerResponse.getMaxContainerResource(),\n        incrementResource,\n        registerResponse.getContainerTokenExpiryInterval());\n\n    oppContainerContext.getContainerIdGenerator()\n        .resetContainerIdCounter(registerResponse.getContainerIdStart());\n    setNodeList(registerResponse.getNodesForScheduling());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/07/16 11:48 AM",
      "commitNameOld": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.54,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   private void updateParameters(\n       RegisterDistributedSchedulingAMResponse registerResponse) {\n-    appParams.minResource \u003d registerResponse.getMinContainerResource();\n-    appParams.maxResource \u003d registerResponse.getMaxContainerResource();\n-    appParams.incrementResource \u003d\n-        registerResponse.getIncrContainerResource();\n-    if (appParams.incrementResource \u003d\u003d null) {\n-      appParams.incrementResource \u003d appParams.minResource;\n+    oppContainerContext.getAppParams().setMinResource(\n+        registerResponse.getMinContainerResource());\n+    oppContainerContext.getAppParams().setMaxResource(\n+        registerResponse.getMaxContainerResource());\n+    oppContainerContext.getAppParams().setIncrementResource(\n+        registerResponse.getIncrContainerResource());\n+    if (oppContainerContext.getAppParams().getIncrementResource() \u003d\u003d null) {\n+      oppContainerContext.getAppParams().setIncrementResource(\n+          oppContainerContext.getAppParams().getMinResource());\n     }\n-    appParams.containerTokenExpiryInterval \u003d registerResponse\n-        .getContainerTokenExpiryInterval();\n+    oppContainerContext.getAppParams().setContainerTokenExpiryInterval(\n+        registerResponse.getContainerTokenExpiryInterval());\n \n-    containerIdCounter\n+    oppContainerContext.getContainerIdGenerator()\n         .resetContainerIdCounter(registerResponse.getContainerIdStart());\n     setNodeList(registerResponse.getNodesForScheduling());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateParameters(\n      RegisterDistributedSchedulingAMResponse registerResponse) {\n    oppContainerContext.getAppParams().setMinResource(\n        registerResponse.getMinContainerResource());\n    oppContainerContext.getAppParams().setMaxResource(\n        registerResponse.getMaxContainerResource());\n    oppContainerContext.getAppParams().setIncrementResource(\n        registerResponse.getIncrContainerResource());\n    if (oppContainerContext.getAppParams().getIncrementResource() \u003d\u003d null) {\n      oppContainerContext.getAppParams().setIncrementResource(\n          oppContainerContext.getAppParams().getMinResource());\n    }\n    oppContainerContext.getAppParams().setContainerTokenExpiryInterval(\n        registerResponse.getContainerTokenExpiryInterval());\n\n    oppContainerContext.getContainerIdGenerator()\n        .resetContainerIdCounter(registerResponse.getContainerIdStart());\n    setNodeList(registerResponse.getNodesForScheduling());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
      "extendedDetails": {}
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n   private void updateParameters(\n-      DistSchedRegisterResponse registerResponse) {\n-    appParams.minResource \u003d registerResponse.getMinAllocatableCapabilty();\n-    appParams.maxResource \u003d registerResponse.getMaxAllocatableCapabilty();\n+      RegisterDistributedSchedulingAMResponse registerResponse) {\n+    appParams.minResource \u003d registerResponse.getMinContainerResource();\n+    appParams.maxResource \u003d registerResponse.getMaxContainerResource();\n     appParams.incrementResource \u003d\n-        registerResponse.getIncrAllocatableCapabilty();\n+        registerResponse.getIncrContainerResource();\n     if (appParams.incrementResource \u003d\u003d null) {\n       appParams.incrementResource \u003d appParams.minResource;\n     }\n     appParams.containerTokenExpiryInterval \u003d registerResponse\n         .getContainerTokenExpiryInterval();\n \n     containerIdCounter\n         .resetContainerIdCounter(registerResponse.getContainerIdStart());\n     setNodeList(registerResponse.getNodesForScheduling());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateParameters(\n      RegisterDistributedSchedulingAMResponse registerResponse) {\n    appParams.minResource \u003d registerResponse.getMinContainerResource();\n    appParams.maxResource \u003d registerResponse.getMaxContainerResource();\n    appParams.incrementResource \u003d\n        registerResponse.getIncrContainerResource();\n    if (appParams.incrementResource \u003d\u003d null) {\n      appParams.incrementResource \u003d appParams.minResource;\n    }\n    appParams.containerTokenExpiryInterval \u003d registerResponse\n        .getContainerTokenExpiryInterval();\n\n    containerIdCounter\n        .resetContainerIdCounter(registerResponse.getContainerIdStart());\n    setNodeList(registerResponse.getNodesForScheduling());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/LocalScheduler.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n   private void updateParameters(\n-      DistSchedRegisterResponse registerResponse) {\n-    appParams.minResource \u003d registerResponse.getMinAllocatableCapabilty();\n-    appParams.maxResource \u003d registerResponse.getMaxAllocatableCapabilty();\n+      RegisterDistributedSchedulingAMResponse registerResponse) {\n+    appParams.minResource \u003d registerResponse.getMinContainerResource();\n+    appParams.maxResource \u003d registerResponse.getMaxContainerResource();\n     appParams.incrementResource \u003d\n-        registerResponse.getIncrAllocatableCapabilty();\n+        registerResponse.getIncrContainerResource();\n     if (appParams.incrementResource \u003d\u003d null) {\n       appParams.incrementResource \u003d appParams.minResource;\n     }\n     appParams.containerTokenExpiryInterval \u003d registerResponse\n         .getContainerTokenExpiryInterval();\n \n     containerIdCounter\n         .resetContainerIdCounter(registerResponse.getContainerIdStart());\n     setNodeList(registerResponse.getNodesForScheduling());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateParameters(\n      RegisterDistributedSchedulingAMResponse registerResponse) {\n    appParams.minResource \u003d registerResponse.getMinContainerResource();\n    appParams.maxResource \u003d registerResponse.getMaxContainerResource();\n    appParams.incrementResource \u003d\n        registerResponse.getIncrContainerResource();\n    if (appParams.incrementResource \u003d\u003d null) {\n      appParams.incrementResource \u003d appParams.minResource;\n    }\n    appParams.containerTokenExpiryInterval \u003d registerResponse\n        .getContainerTokenExpiryInterval();\n\n    containerIdCounter\n        .resetContainerIdCounter(registerResponse.getContainerIdStart());\n    setNodeList(registerResponse.getNodesForScheduling());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n   private void updateParameters(\n-      DistSchedRegisterResponse registerResponse) {\n-    appParams.minResource \u003d registerResponse.getMinAllocatableCapabilty();\n-    appParams.maxResource \u003d registerResponse.getMaxAllocatableCapabilty();\n+      RegisterDistributedSchedulingAMResponse registerResponse) {\n+    appParams.minResource \u003d registerResponse.getMinContainerResource();\n+    appParams.maxResource \u003d registerResponse.getMaxContainerResource();\n     appParams.incrementResource \u003d\n-        registerResponse.getIncrAllocatableCapabilty();\n+        registerResponse.getIncrContainerResource();\n     if (appParams.incrementResource \u003d\u003d null) {\n       appParams.incrementResource \u003d appParams.minResource;\n     }\n     appParams.containerTokenExpiryInterval \u003d registerResponse\n         .getContainerTokenExpiryInterval();\n \n     containerIdCounter\n         .resetContainerIdCounter(registerResponse.getContainerIdStart());\n     setNodeList(registerResponse.getNodesForScheduling());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateParameters(\n      RegisterDistributedSchedulingAMResponse registerResponse) {\n    appParams.minResource \u003d registerResponse.getMinContainerResource();\n    appParams.maxResource \u003d registerResponse.getMaxContainerResource();\n    appParams.incrementResource \u003d\n        registerResponse.getIncrContainerResource();\n    if (appParams.incrementResource \u003d\u003d null) {\n      appParams.incrementResource \u003d appParams.minResource;\n    }\n    appParams.containerTokenExpiryInterval \u003d registerResponse\n        .getContainerTokenExpiryInterval();\n\n    containerIdCounter\n        .resetContainerIdCounter(registerResponse.getContainerIdStart());\n    setNodeList(registerResponse.getNodesForScheduling());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
          "extendedDetails": {
            "oldValue": "[registerResponse-DistSchedRegisterResponse]",
            "newValue": "[registerResponse-RegisterDistributedSchedulingAMResponse]"
          }
        }
      ]
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,16 @@\n+  private void updateParameters(\n+      DistSchedRegisterResponse registerResponse) {\n+    appParams.minResource \u003d registerResponse.getMinAllocatableCapabilty();\n+    appParams.maxResource \u003d registerResponse.getMaxAllocatableCapabilty();\n+    appParams.incrementResource \u003d\n+        registerResponse.getIncrAllocatableCapabilty();\n+    if (appParams.incrementResource \u003d\u003d null) {\n+      appParams.incrementResource \u003d appParams.minResource;\n+    }\n+    appParams.containerTokenExpiryInterval \u003d registerResponse\n+        .getContainerTokenExpiryInterval();\n+\n+    containerIdCounter\n+        .resetContainerIdCounter(registerResponse.getContainerIdStart());\n+    setNodeList(registerResponse.getNodesForScheduling());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateParameters(\n      DistSchedRegisterResponse registerResponse) {\n    appParams.minResource \u003d registerResponse.getMinAllocatableCapabilty();\n    appParams.maxResource \u003d registerResponse.getMaxAllocatableCapabilty();\n    appParams.incrementResource \u003d\n        registerResponse.getIncrAllocatableCapabilty();\n    if (appParams.incrementResource \u003d\u003d null) {\n      appParams.incrementResource \u003d appParams.minResource;\n    }\n    appParams.containerTokenExpiryInterval \u003d registerResponse\n        .getContainerTokenExpiryInterval();\n\n    containerIdCounter\n        .resetContainerIdCounter(registerResponse.getContainerIdStart());\n    setNodeList(registerResponse.getNodesForScheduling());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/LocalScheduler.java"
    }
  }
}