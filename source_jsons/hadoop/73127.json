{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CryptoInputStream.java",
  "functionName": "read",
  "functionId": "read___bufferPool-ByteBufferPool__maxLength-int__opts-EnumSet__ReadOption__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
  "functionStartLine": 704,
  "functionEndLine": 732,
  "numCommitsSeen": 19,
  "timeTaken": 1901,
  "changeHistory": [
    "13b427fc05da7352fadd7214adfa09c326bba238",
    "4877f0aa518832c37a06e6d3bd2c9552fc3141dc",
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d"
  ],
  "changeHistoryShort": {
    "13b427fc05da7352fadd7214adfa09c326bba238": "Ybodychange",
    "4877f0aa518832c37a06e6d3bd2c9552fc3141dc": "Ybodychange",
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": "Ybodychange",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13b427fc05da7352fadd7214adfa09c326bba238": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14564: Add libhdfs APIs for readFully; add readFully to ByteBufferPositionedReadable (#963) Contributed by Sahil Takiar.\n\nReviewed-by: Siyao Meng \u003csmeng@cloudera.com\u003e",
      "commitDate": "27/09/19 12:25 PM",
      "commitName": "13b427fc05da7352fadd7214adfa09c326bba238",
      "commitAuthor": "Sahil Takiar",
      "commitDateOld": "30/04/19 2:52 PM",
      "commitNameOld": "4877f0aa518832c37a06e6d3bd2c9552fc3141dc",
      "commitAuthorOld": "Sahil Takiar",
      "daysBetweenCommits": 149.9,
      "commitsBetweenForRepo": 1211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public ByteBuffer read(ByteBufferPool bufferPool, int maxLength,\n       EnumSet\u003cReadOption\u003e opts) throws IOException,\n       UnsupportedOperationException {\n     checkStream();\n     if (outBuffer.remaining() \u003e 0) {\n       if (!(in instanceof Seekable)) {\n-        throw new UnsupportedOperationException(\"This stream does not \" +\n-                \"support seek.\");\n+        throw new UnsupportedOperationException(in.getClass().getCanonicalName()\n+            + \" does not support seek.\");\n       }\n       // Have some decrypted data unread, need to reset.\n       ((Seekable) in).seek(getPos());\n       resetStreamOffset(getPos());\n     }\n     if (!(in instanceof HasEnhancedByteBufferAccess)) {\n-      throw new UnsupportedOperationException(\"This stream does not support \" +\n-          \"enhanced byte buffer access.\");\n+      throw new UnsupportedOperationException(in.getClass().getCanonicalName()\n+          + \" does not support enhanced byte buffer access.\");\n     }\n     final ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n         read(bufferPool, maxLength, opts);\n     if (buffer !\u003d null) {\n       final int n \u003d buffer.remaining();\n       if (n \u003e 0) {\n         streamOffset +\u003d buffer.remaining(); // Read n bytes\n         final int pos \u003d buffer.position();\n         decrypt(buffer, n, pos);\n       }\n     }\n     return buffer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ByteBuffer read(ByteBufferPool bufferPool, int maxLength,\n      EnumSet\u003cReadOption\u003e opts) throws IOException,\n      UnsupportedOperationException {\n    checkStream();\n    if (outBuffer.remaining() \u003e 0) {\n      if (!(in instanceof Seekable)) {\n        throw new UnsupportedOperationException(in.getClass().getCanonicalName()\n            + \" does not support seek.\");\n      }\n      // Have some decrypted data unread, need to reset.\n      ((Seekable) in).seek(getPos());\n      resetStreamOffset(getPos());\n    }\n    if (!(in instanceof HasEnhancedByteBufferAccess)) {\n      throw new UnsupportedOperationException(in.getClass().getCanonicalName()\n          + \" does not support enhanced byte buffer access.\");\n    }\n    final ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n        read(bufferPool, maxLength, opts);\n    if (buffer !\u003d null) {\n      final int n \u003d buffer.remaining();\n      if (n \u003e 0) {\n        streamOffset +\u003d buffer.remaining(); // Read n bytes\n        final int pos \u003d buffer.position();\n        decrypt(buffer, n, pos);\n      }\n    }\n    return buffer;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "4877f0aa518832c37a06e6d3bd2c9552fc3141dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3246: pRead equivalent for direct read path (#597)\n\nHDFS-3246: pRead equivalent for direct read path\r\n\r\nContributed by Sahil Takiar",
      "commitDate": "30/04/19 2:52 PM",
      "commitName": "4877f0aa518832c37a06e6d3bd2c9552fc3141dc",
      "commitAuthor": "Sahil Takiar",
      "commitDateOld": "06/03/19 3:04 PM",
      "commitNameOld": "618e009ac0ab14b24c0c19153778173ee3142292",
      "commitAuthorOld": "Sahil Takiar",
      "daysBetweenCommits": 54.95,
      "commitsBetweenForRepo": 370,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   public ByteBuffer read(ByteBufferPool bufferPool, int maxLength,\n       EnumSet\u003cReadOption\u003e opts) throws IOException,\n       UnsupportedOperationException {\n     checkStream();\n-    try {\n-      if (outBuffer.remaining() \u003e 0) {\n-        // Have some decrypted data unread, need to reset.\n-        ((Seekable) in).seek(getPos());\n-        resetStreamOffset(getPos());\n+    if (outBuffer.remaining() \u003e 0) {\n+      if (!(in instanceof Seekable)) {\n+        throw new UnsupportedOperationException(\"This stream does not \" +\n+                \"support seek.\");\n       }\n-      final ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n-          read(bufferPool, maxLength, opts);\n-      if (buffer !\u003d null) {\n-        final int n \u003d buffer.remaining();\n-        if (n \u003e 0) {\n-          streamOffset +\u003d buffer.remaining(); // Read n bytes\n-          final int pos \u003d buffer.position();\n-          decrypt(buffer, n, pos);\n-        }\n-      }\n-      return buffer;\n-    } catch (ClassCastException e) {\n-      throw new UnsupportedOperationException(\"This stream does not support \" + \n+      // Have some decrypted data unread, need to reset.\n+      ((Seekable) in).seek(getPos());\n+      resetStreamOffset(getPos());\n+    }\n+    if (!(in instanceof HasEnhancedByteBufferAccess)) {\n+      throw new UnsupportedOperationException(\"This stream does not support \" +\n           \"enhanced byte buffer access.\");\n     }\n+    final ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n+        read(bufferPool, maxLength, opts);\n+    if (buffer !\u003d null) {\n+      final int n \u003d buffer.remaining();\n+      if (n \u003e 0) {\n+        streamOffset +\u003d buffer.remaining(); // Read n bytes\n+        final int pos \u003d buffer.position();\n+        decrypt(buffer, n, pos);\n+      }\n+    }\n+    return buffer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ByteBuffer read(ByteBufferPool bufferPool, int maxLength,\n      EnumSet\u003cReadOption\u003e opts) throws IOException,\n      UnsupportedOperationException {\n    checkStream();\n    if (outBuffer.remaining() \u003e 0) {\n      if (!(in instanceof Seekable)) {\n        throw new UnsupportedOperationException(\"This stream does not \" +\n                \"support seek.\");\n      }\n      // Have some decrypted data unread, need to reset.\n      ((Seekable) in).seek(getPos());\n      resetStreamOffset(getPos());\n    }\n    if (!(in instanceof HasEnhancedByteBufferAccess)) {\n      throw new UnsupportedOperationException(\"This stream does not support \" +\n          \"enhanced byte buffer access.\");\n    }\n    final ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n        read(bufferPool, maxLength, opts);\n    if (buffer !\u003d null) {\n      final int n \u003d buffer.remaining();\n      if (n \u003e 0) {\n        streamOffset +\u003d buffer.remaining(); // Read n bytes\n        final int pos \u003d buffer.position();\n        decrypt(buffer, n, pos);\n      }\n    }\n    return buffer;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10628. Javadoc and few code style improvement for Crypto input and output streams. (yliu via clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 3:09 PM",
      "commitName": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "23/05/14 6:19 PM",
      "commitNameOld": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthorOld": "Yi Liu",
      "daysBetweenCommits": 5.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public ByteBuffer read(ByteBufferPool bufferPool, int maxLength,\n       EnumSet\u003cReadOption\u003e opts) throws IOException,\n       UnsupportedOperationException {\n     checkStream();\n     try {\n       if (outBuffer.remaining() \u003e 0) {\n         // Have some decrypted data unread, need to reset.\n         ((Seekable) in).seek(getPos());\n         resetStreamOffset(getPos());\n       }\n-      ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n+      final ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n           read(bufferPool, maxLength, opts);\n       if (buffer !\u003d null) {\n-        int n \u003d buffer.remaining();\n+        final int n \u003d buffer.remaining();\n         if (n \u003e 0) {\n           streamOffset +\u003d buffer.remaining(); // Read n bytes\n-          int pos \u003d buffer.position();\n+          final int pos \u003d buffer.position();\n           decrypt(buffer, n, pos);\n         }\n       }\n       return buffer;\n     } catch (ClassCastException e) {\n       throw new UnsupportedOperationException(\"This stream does not support \" + \n           \"enhanced byte buffer access.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ByteBuffer read(ByteBufferPool bufferPool, int maxLength,\n      EnumSet\u003cReadOption\u003e opts) throws IOException,\n      UnsupportedOperationException {\n    checkStream();\n    try {\n      if (outBuffer.remaining() \u003e 0) {\n        // Have some decrypted data unread, need to reset.\n        ((Seekable) in).seek(getPos());\n        resetStreamOffset(getPos());\n      }\n      final ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n          read(bufferPool, maxLength, opts);\n      if (buffer !\u003d null) {\n        final int n \u003d buffer.remaining();\n        if (n \u003e 0) {\n          streamOffset +\u003d buffer.remaining(); // Read n bytes\n          final int pos \u003d buffer.position();\n          decrypt(buffer, n, pos);\n        }\n      }\n      return buffer;\n    } catch (ClassCastException e) {\n      throw new UnsupportedOperationException(\"This stream does not support \" + \n          \"enhanced byte buffer access.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10603. Crypto input and output streams implementing Hadoop stream interfaces. Contributed by Yi Liu and Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1597230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 6:19 PM",
      "commitName": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthor": "Yi Liu",
      "diff": "@@ -0,0 +1,26 @@\n+  public ByteBuffer read(ByteBufferPool bufferPool, int maxLength,\n+      EnumSet\u003cReadOption\u003e opts) throws IOException,\n+      UnsupportedOperationException {\n+    checkStream();\n+    try {\n+      if (outBuffer.remaining() \u003e 0) {\n+        // Have some decrypted data unread, need to reset.\n+        ((Seekable) in).seek(getPos());\n+        resetStreamOffset(getPos());\n+      }\n+      ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n+          read(bufferPool, maxLength, opts);\n+      if (buffer !\u003d null) {\n+        int n \u003d buffer.remaining();\n+        if (n \u003e 0) {\n+          streamOffset +\u003d buffer.remaining(); // Read n bytes\n+          int pos \u003d buffer.position();\n+          decrypt(buffer, n, pos);\n+        }\n+      }\n+      return buffer;\n+    } catch (ClassCastException e) {\n+      throw new UnsupportedOperationException(\"This stream does not support \" + \n+          \"enhanced byte buffer access.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ByteBuffer read(ByteBufferPool bufferPool, int maxLength,\n      EnumSet\u003cReadOption\u003e opts) throws IOException,\n      UnsupportedOperationException {\n    checkStream();\n    try {\n      if (outBuffer.remaining() \u003e 0) {\n        // Have some decrypted data unread, need to reset.\n        ((Seekable) in).seek(getPos());\n        resetStreamOffset(getPos());\n      }\n      ByteBuffer buffer \u003d ((HasEnhancedByteBufferAccess) in).\n          read(bufferPool, maxLength, opts);\n      if (buffer !\u003d null) {\n        int n \u003d buffer.remaining();\n        if (n \u003e 0) {\n          streamOffset +\u003d buffer.remaining(); // Read n bytes\n          int pos \u003d buffer.position();\n          decrypt(buffer, n, pos);\n        }\n      }\n      return buffer;\n    } catch (ClassCastException e) {\n      throw new UnsupportedOperationException(\"This stream does not support \" + \n          \"enhanced byte buffer access.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java"
    }
  }
}