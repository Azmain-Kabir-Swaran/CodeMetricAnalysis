{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSACLs.java",
  "functionName": "setKMSACLs",
  "functionId": "setKMSACLs___conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSACLs.java",
  "functionStartLine": 95,
  "functionEndLine": 111,
  "numCommitsSeen": 19,
  "timeTaken": 1080,
  "changeHistory": [
    "b02a4b40610e93eef6559db09a11d287e859446d",
    "d9a03e272adbf3e9fde501610400f18fb4f6b865",
    "80d7f0911cf42eee001fe1a3d6958b82635df671",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "b02a4b40610e93eef6559db09a11d287e859446d": "Yrename",
    "d9a03e272adbf3e9fde501610400f18fb4f6b865": "Ybodychange",
    "80d7f0911cf42eee001fe1a3d6958b82635df671": "Ybodychange",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b02a4b40610e93eef6559db09a11d287e859446d": {
      "type": "Yrename",
      "commitMessage": "HADOOP-10758. KMS: add ACLs on per key basis. (tucu)\n",
      "commitDate": "10/09/14 2:26 PM",
      "commitName": "b02a4b40610e93eef6559db09a11d287e859446d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "03/09/14 3:08 PM",
      "commitNameOld": "d9a03e272adbf3e9fde501610400f18fb4f6b865",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.97,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n-  private void setACLs(Configuration conf) {\n+  private void setKMSACLs(Configuration conf) {\n     Map\u003cType, AccessControlList\u003e tempAcls \u003d new HashMap\u003cType, AccessControlList\u003e();\n     Map\u003cType, AccessControlList\u003e tempBlacklist \u003d new HashMap\u003cType, AccessControlList\u003e();\n     for (Type aclType : Type.values()) {\n       String aclStr \u003d conf.get(aclType.getAclConfigKey(), ACL_DEFAULT);\n       tempAcls.put(aclType, new AccessControlList(aclStr));\n       String blacklistStr \u003d conf.get(aclType.getBlacklistConfigKey());\n       if (blacklistStr !\u003d null) {\n         // Only add if blacklist is present\n         tempBlacklist.put(aclType, new AccessControlList(blacklistStr));\n         LOG.info(\"\u0027{}\u0027 Blacklist \u0027{}\u0027\", aclType, blacklistStr);\n       }\n       LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n     }\n     acls \u003d tempAcls;\n     blacklistedAcls \u003d tempBlacklist;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setKMSACLs(Configuration conf) {\n    Map\u003cType, AccessControlList\u003e tempAcls \u003d new HashMap\u003cType, AccessControlList\u003e();\n    Map\u003cType, AccessControlList\u003e tempBlacklist \u003d new HashMap\u003cType, AccessControlList\u003e();\n    for (Type aclType : Type.values()) {\n      String aclStr \u003d conf.get(aclType.getAclConfigKey(), ACL_DEFAULT);\n      tempAcls.put(aclType, new AccessControlList(aclStr));\n      String blacklistStr \u003d conf.get(aclType.getBlacklistConfigKey());\n      if (blacklistStr !\u003d null) {\n        // Only add if blacklist is present\n        tempBlacklist.put(aclType, new AccessControlList(blacklistStr));\n        LOG.info(\"\u0027{}\u0027 Blacklist \u0027{}\u0027\", aclType, blacklistStr);\n      }\n      LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n    }\n    acls \u003d tempAcls;\n    blacklistedAcls \u003d tempBlacklist;\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSACLs.java",
      "extendedDetails": {
        "oldValue": "setACLs",
        "newValue": "setKMSACLs"
      }
    },
    "d9a03e272adbf3e9fde501610400f18fb4f6b865": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10863. KMS should have a blacklist for decrypting EEKs. (asuresh via tucu)\n",
      "commitDate": "03/09/14 3:08 PM",
      "commitName": "d9a03e272adbf3e9fde501610400f18fb4f6b865",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "14/08/14 10:03 PM",
      "commitNameOld": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 19.71,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,17 @@\n   private void setACLs(Configuration conf) {\n     Map\u003cType, AccessControlList\u003e tempAcls \u003d new HashMap\u003cType, AccessControlList\u003e();\n+    Map\u003cType, AccessControlList\u003e tempBlacklist \u003d new HashMap\u003cType, AccessControlList\u003e();\n     for (Type aclType : Type.values()) {\n-      String aclStr \u003d conf.get(aclType.getConfigKey(), ACL_DEFAULT);\n+      String aclStr \u003d conf.get(aclType.getAclConfigKey(), ACL_DEFAULT);\n       tempAcls.put(aclType, new AccessControlList(aclStr));\n+      String blacklistStr \u003d conf.get(aclType.getBlacklistConfigKey());\n+      if (blacklistStr !\u003d null) {\n+        // Only add if blacklist is present\n+        tempBlacklist.put(aclType, new AccessControlList(blacklistStr));\n+        LOG.info(\"\u0027{}\u0027 Blacklist \u0027{}\u0027\", aclType, blacklistStr);\n+      }\n       LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n     }\n     acls \u003d tempAcls;\n+    blacklistedAcls \u003d tempBlacklist;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setACLs(Configuration conf) {\n    Map\u003cType, AccessControlList\u003e tempAcls \u003d new HashMap\u003cType, AccessControlList\u003e();\n    Map\u003cType, AccessControlList\u003e tempBlacklist \u003d new HashMap\u003cType, AccessControlList\u003e();\n    for (Type aclType : Type.values()) {\n      String aclStr \u003d conf.get(aclType.getAclConfigKey(), ACL_DEFAULT);\n      tempAcls.put(aclType, new AccessControlList(aclStr));\n      String blacklistStr \u003d conf.get(aclType.getBlacklistConfigKey());\n      if (blacklistStr !\u003d null) {\n        // Only add if blacklist is present\n        tempBlacklist.put(aclType, new AccessControlList(blacklistStr));\n        LOG.info(\"\u0027{}\u0027 Blacklist \u0027{}\u0027\", aclType, blacklistStr);\n      }\n      LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n    }\n    acls \u003d tempAcls;\n    blacklistedAcls \u003d tempBlacklist;\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSACLs.java",
      "extendedDetails": {}
    },
    "80d7f0911cf42eee001fe1a3d6958b82635df671": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10824. Refactor KMSACLs to avoid locking. (Benoy Antony via umamahesh)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610969 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/14 4:24 AM",
      "commitName": "80d7f0911cf42eee001fe1a3d6958b82635df671",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "05/05/14 2:43 PM",
      "commitNameOld": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 71.57,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,9 @@\n   private void setACLs(Configuration conf) {\n-    lock.writeLock().lock();\n-    try {\n-      acls \u003d new HashMap\u003cType, AccessControlList\u003e();\n-      for (Type aclType : Type.values()) {\n-        String aclStr \u003d conf.get(aclType.getConfigKey(), ACL_DEFAULT);\n-        acls.put(aclType, new AccessControlList(aclStr));\n-        LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n-      }\n-    } finally {\n-      lock.writeLock().unlock();\n+    Map\u003cType, AccessControlList\u003e tempAcls \u003d new HashMap\u003cType, AccessControlList\u003e();\n+    for (Type aclType : Type.values()) {\n+      String aclStr \u003d conf.get(aclType.getConfigKey(), ACL_DEFAULT);\n+      tempAcls.put(aclType, new AccessControlList(aclStr));\n+      LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n     }\n+    acls \u003d tempAcls;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setACLs(Configuration conf) {\n    Map\u003cType, AccessControlList\u003e tempAcls \u003d new HashMap\u003cType, AccessControlList\u003e();\n    for (Type aclType : Type.values()) {\n      String aclStr \u003d conf.get(aclType.getConfigKey(), ACL_DEFAULT);\n      tempAcls.put(aclType, new AccessControlList(aclStr));\n      LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n    }\n    acls \u003d tempAcls;\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSACLs.java",
      "extendedDetails": {}
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,13 @@\n+  private void setACLs(Configuration conf) {\n+    lock.writeLock().lock();\n+    try {\n+      acls \u003d new HashMap\u003cType, AccessControlList\u003e();\n+      for (Type aclType : Type.values()) {\n+        String aclStr \u003d conf.get(aclType.getConfigKey(), ACL_DEFAULT);\n+        acls.put(aclType, new AccessControlList(aclStr));\n+        LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n+      }\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setACLs(Configuration conf) {\n    lock.writeLock().lock();\n    try {\n      acls \u003d new HashMap\u003cType, AccessControlList\u003e();\n      for (Type aclType : Type.values()) {\n        String aclStr \u003d conf.get(aclType.getConfigKey(), ACL_DEFAULT);\n        acls.put(aclType, new AccessControlList(aclStr));\n        LOG.info(\"\u0027{}\u0027 ACL \u0027{}\u0027\", aclType, aclStr);\n      }\n    } finally {\n      lock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSACLs.java"
    }
  }
}