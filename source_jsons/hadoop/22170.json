{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleSchedulerImpl.java",
  "functionName": "getMapsForHost",
  "functionId": "getMapsForHost___host-MapHost",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
  "functionStartLine": 465,
  "functionEndLine": 493,
  "numCommitsSeen": 19,
  "timeTaken": 6726,
  "changeHistory": [
    "0b8a7c18ddbe73b356b3c9baf4460659ccaee095",
    "dc2b2ae31f2eb6dae324c2e14ed7660ce605a89b",
    "1a389305b27ac1efec4d7923b87de3e703bf70e1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "0b8a7c18ddbe73b356b3c9baf4460659ccaee095": "Ybodychange",
    "dc2b2ae31f2eb6dae324c2e14ed7660ce605a89b": "Ybodychange",
    "1a389305b27ac1efec4d7923b87de3e703bf70e1": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b8a7c18ddbe73b356b3c9baf4460659ccaee095": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6715. Fix Several Unsafe Practices (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "05/01/17 5:56 PM",
      "commitName": "0b8a7c18ddbe73b356b3c9baf4460659ccaee095",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "21/10/16 5:46 PM",
      "commitNameOld": "d4725bfcb2d300219d65395a78f957afbf37b201",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 76.05,
      "commitsBetweenForRepo": 510,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n     List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n     Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n     List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n     int includedMaps \u003d 0;\n     int totalSize \u003d list.size();\n     // find the maps that we still need, up to the limit\n     while (itr.hasNext()) {\n       TaskAttemptID id \u003d itr.next();\n       if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n         result.add(id);\n         if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n           break;\n         }\n       }\n     }\n     // put back the maps left after the limit\n     while (itr.hasNext()) {\n       TaskAttemptID id \u003d itr.next();\n       if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n         host.addKnownMap(id);\n       }\n     }\n-    LOG.debug(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n-             host + \" to \" + Thread.currentThread().getName());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" + host\n+          + \" to \" + Thread.currentThread().getName());\n+    }\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n    List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n    Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n    List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n    int includedMaps \u003d 0;\n    int totalSize \u003d list.size();\n    // find the maps that we still need, up to the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        result.add(id);\n        if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n          break;\n        }\n      }\n    }\n    // put back the maps left after the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        host.addKnownMap(id);\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" + host\n          + \" to \" + Thread.currentThread().getName());\n    }\n    return result;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {}
    },
    "dc2b2ae31f2eb6dae324c2e14ed7660ce605a89b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5981. Log levels of certain MR logs can be changed to DEBUG.\nContributed by Varun Saxena.\n",
      "commitDate": "08/05/15 8:57 AM",
      "commitName": "dc2b2ae31f2eb6dae324c2e14ed7660ce605a89b",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "12/02/15 3:08 AM",
      "commitNameOld": "b42d09eb62bd1725d70da59f1a6fdac83cea82d1",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 85.2,
      "commitsBetweenForRepo": 797,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n     List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n     Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n     List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n     int includedMaps \u003d 0;\n     int totalSize \u003d list.size();\n     // find the maps that we still need, up to the limit\n     while (itr.hasNext()) {\n       TaskAttemptID id \u003d itr.next();\n       if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n         result.add(id);\n         if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n           break;\n         }\n       }\n     }\n     // put back the maps left after the limit\n     while (itr.hasNext()) {\n       TaskAttemptID id \u003d itr.next();\n       if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n         host.addKnownMap(id);\n       }\n     }\n-    LOG.info(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n+    LOG.debug(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n              host + \" to \" + Thread.currentThread().getName());\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n    List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n    Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n    List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n    int includedMaps \u003d 0;\n    int totalSize \u003d list.size();\n    // find the maps that we still need, up to the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        result.add(id);\n        if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n          break;\n        }\n      }\n    }\n    // put back the maps left after the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        host.addKnownMap(id);\n      }\n    }\n    LOG.debug(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n             host + \" to \" + Thread.currentThread().getName());\n    return result;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {}
    },
    "1a389305b27ac1efec4d7923b87de3e703bf70e1": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-5192. Allow for alternate resolutions of TaskCompletionEvents. Contributed by Chris Douglas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493445 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/13 8:07 PM",
      "commitName": "1a389305b27ac1efec4d7923b87de3e703bf70e1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "15/06/13 4:09 PM",
      "commitNameOld": "29a370872435ee558fbeb9f64bf70da87f8cd27a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n    List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n    Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n    List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n    int includedMaps \u003d 0;\n    int totalSize \u003d list.size();\n    // find the maps that we still need, up to the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        result.add(id);\n        if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n          break;\n        }\n      }\n    }\n    // put back the maps left after the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        host.addKnownMap(id);\n      }\n    }\n    LOG.info(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n             host + \" to \" + Thread.currentThread().getName());\n    return result;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
        "oldMethodName": "getMapsForHost",
        "newMethodName": "getMapsForHost"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n    List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n    Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n    List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n    int includedMaps \u003d 0;\n    int totalSize \u003d list.size();\n    // find the maps that we still need, up to the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        result.add(id);\n        if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n          break;\n        }\n      }\n    }\n    // put back the maps left after the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        host.addKnownMap(id);\n      }\n    }\n    LOG.info(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n             host + \" to \" + Thread.currentThread().getName());\n    return result;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n    List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n    Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n    List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n    int includedMaps \u003d 0;\n    int totalSize \u003d list.size();\n    // find the maps that we still need, up to the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        result.add(id);\n        if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n          break;\n        }\n      }\n    }\n    // put back the maps left after the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        host.addKnownMap(id);\n      }\n    }\n    LOG.info(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n             host + \" to \" + Thread.currentThread().getName());\n    return result;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,27 @@\n+  public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n+    List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n+    Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n+    List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n+    int includedMaps \u003d 0;\n+    int totalSize \u003d list.size();\n+    // find the maps that we still need, up to the limit\n+    while (itr.hasNext()) {\n+      TaskAttemptID id \u003d itr.next();\n+      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n+        result.add(id);\n+        if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n+          break;\n+        }\n+      }\n+    }\n+    // put back the maps left after the limit\n+    while (itr.hasNext()) {\n+      TaskAttemptID id \u003d itr.next();\n+      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n+        host.addKnownMap(id);\n+      }\n+    }\n+    LOG.info(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n+             host + \" to \" + Thread.currentThread().getName());\n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cTaskAttemptID\u003e getMapsForHost(MapHost host) {\n    List\u003cTaskAttemptID\u003e list \u003d host.getAndClearKnownMaps();\n    Iterator\u003cTaskAttemptID\u003e itr \u003d list.iterator();\n    List\u003cTaskAttemptID\u003e result \u003d new ArrayList\u003cTaskAttemptID\u003e();\n    int includedMaps \u003d 0;\n    int totalSize \u003d list.size();\n    // find the maps that we still need, up to the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        result.add(id);\n        if (++includedMaps \u003e\u003d MAX_MAPS_AT_ONCE) {\n          break;\n        }\n      }\n    }\n    // put back the maps left after the limit\n    while (itr.hasNext()) {\n      TaskAttemptID id \u003d itr.next();\n      if (!obsoleteMaps.contains(id) \u0026\u0026 !finishedMaps[id.getTaskID().getId()]) {\n        host.addKnownMap(id);\n      }\n    }\n    LOG.info(\"assigned \" + includedMaps + \" of \" + totalSize + \" to \" +\n             host + \" to \" + Thread.currentThread().getName());\n    return result;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
    }
  }
}