{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProvidedStorageMap.java",
  "functionName": "getStorage",
  "functionId": "getStorage___dn-DatanodeDescriptor__s-DatanodeStorage",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ProvidedStorageMap.java",
  "functionStartLine": 127,
  "functionEndLine": 145,
  "numCommitsSeen": 26,
  "timeTaken": 4433,
  "changeHistory": [
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
    "71d0a825711387fe06396323a9ca6a5af0ade415",
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5",
    "546b95f4843f3cbbbdf72d90d202cad551696082",
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925"
  ],
  "changeHistoryShort": {
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88": "Ymultichange(Yparameterchange,Ybodychange)",
    "71d0a825711387fe06396323a9ca6a5af0ade415": "Ybodychange",
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5": "Ybodychange",
    "546b95f4843f3cbbbdf72d90d202cad551696082": "Ymultichange(Yparameterchange,Ybodychange)",
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12775. [READ] Fix reporting of Provided volumes\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
      "commitAuthor": "Virajith Jalaparti",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12775. [READ] Fix reporting of Provided volumes\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "15/12/17 5:51 PM",
          "commitNameOld": "71d0a825711387fe06396323a9ca6a5af0ade415",
          "commitAuthorOld": "Virajith Jalaparti",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n-  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n-      BlockReportContext context) throws IOException {\n+  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)\n+      throws IOException {\n     if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n       if (StorageType.PROVIDED.equals(s.getStorageType())) {\n         if (providedStorageInfo.getState() \u003d\u003d State.FAILED\n             \u0026\u0026 s.getState() \u003d\u003d State.NORMAL) {\n           providedStorageInfo.setState(State.NORMAL);\n           LOG.info(\"Provided storage transitioning to state \" + State.NORMAL);\n         }\n-        processProvidedStorageReport(context);\n-        dn.injectStorage(providedStorageInfo);\n+        if (dn.getStorageInfo(s.getStorageID()) \u003d\u003d null) {\n+          dn.injectStorage(providedStorageInfo);\n+        }\n+        processProvidedStorageReport();\n         return providedDescriptor.getProvidedStorage(dn, s);\n       }\n       LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n     }\n     return dn.getStorageInfo(s.getStorageID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)\n      throws IOException {\n    if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n      if (StorageType.PROVIDED.equals(s.getStorageType())) {\n        if (providedStorageInfo.getState() \u003d\u003d State.FAILED\n            \u0026\u0026 s.getState() \u003d\u003d State.NORMAL) {\n          providedStorageInfo.setState(State.NORMAL);\n          LOG.info(\"Provided storage transitioning to state \" + State.NORMAL);\n        }\n        if (dn.getStorageInfo(s.getStorageID()) \u003d\u003d null) {\n          dn.injectStorage(providedStorageInfo);\n        }\n        processProvidedStorageReport();\n        return providedDescriptor.getProvidedStorage(dn, s);\n      }\n      LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n    }\n    return dn.getStorageInfo(s.getStorageID());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ProvidedStorageMap.java",
          "extendedDetails": {
            "oldValue": "[dn-DatanodeDescriptor, s-DatanodeStorage, context-BlockReportContext]",
            "newValue": "[dn-DatanodeDescriptor, s-DatanodeStorage]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12775. [READ] Fix reporting of Provided volumes\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "15/12/17 5:51 PM",
          "commitNameOld": "71d0a825711387fe06396323a9ca6a5af0ade415",
          "commitAuthorOld": "Virajith Jalaparti",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n-  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n-      BlockReportContext context) throws IOException {\n+  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)\n+      throws IOException {\n     if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n       if (StorageType.PROVIDED.equals(s.getStorageType())) {\n         if (providedStorageInfo.getState() \u003d\u003d State.FAILED\n             \u0026\u0026 s.getState() \u003d\u003d State.NORMAL) {\n           providedStorageInfo.setState(State.NORMAL);\n           LOG.info(\"Provided storage transitioning to state \" + State.NORMAL);\n         }\n-        processProvidedStorageReport(context);\n-        dn.injectStorage(providedStorageInfo);\n+        if (dn.getStorageInfo(s.getStorageID()) \u003d\u003d null) {\n+          dn.injectStorage(providedStorageInfo);\n+        }\n+        processProvidedStorageReport();\n         return providedDescriptor.getProvidedStorage(dn, s);\n       }\n       LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n     }\n     return dn.getStorageInfo(s.getStorageID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)\n      throws IOException {\n    if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n      if (StorageType.PROVIDED.equals(s.getStorageType())) {\n        if (providedStorageInfo.getState() \u003d\u003d State.FAILED\n            \u0026\u0026 s.getState() \u003d\u003d State.NORMAL) {\n          providedStorageInfo.setState(State.NORMAL);\n          LOG.info(\"Provided storage transitioning to state \" + State.NORMAL);\n        }\n        if (dn.getStorageInfo(s.getStorageID()) \u003d\u003d null) {\n          dn.injectStorage(providedStorageInfo);\n        }\n        processProvidedStorageReport();\n        return providedDescriptor.getProvidedStorage(dn, s);\n      }\n      LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n    }\n    return dn.getStorageInfo(s.getStorageID());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ProvidedStorageMap.java",
          "extendedDetails": {}
        }
      ]
    },
    "71d0a825711387fe06396323a9ca6a5af0ade415": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12607. [READ] Even one dead datanode with PROVIDED storage results in ProvidedStorageInfo being marked as FAILED\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "71d0a825711387fe06396323a9ca6a5af0ade415",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,17 @@\n   DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n       BlockReportContext context) throws IOException {\n     if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n       if (StorageType.PROVIDED.equals(s.getStorageType())) {\n+        if (providedStorageInfo.getState() \u003d\u003d State.FAILED\n+            \u0026\u0026 s.getState() \u003d\u003d State.NORMAL) {\n+          providedStorageInfo.setState(State.NORMAL);\n+          LOG.info(\"Provided storage transitioning to state \" + State.NORMAL);\n+        }\n         processProvidedStorageReport(context);\n         dn.injectStorage(providedStorageInfo);\n         return providedDescriptor.getProvidedStorage(dn, s);\n       }\n       LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n     }\n     return dn.getStorageInfo(s.getStorageID());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n      BlockReportContext context) throws IOException {\n    if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n      if (StorageType.PROVIDED.equals(s.getStorageType())) {\n        if (providedStorageInfo.getState() \u003d\u003d State.FAILED\n            \u0026\u0026 s.getState() \u003d\u003d State.NORMAL) {\n          providedStorageInfo.setState(State.NORMAL);\n          LOG.info(\"Provided storage transitioning to state \" + State.NORMAL);\n        }\n        processProvidedStorageReport(context);\n        dn.injectStorage(providedStorageInfo);\n        return providedDescriptor.getProvidedStorage(dn, s);\n      }\n      LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n    }\n    return dn.getStorageInfo(s.getStorageID());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ProvidedStorageMap.java",
      "extendedDetails": {}
    },
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11902. [READ] Merge BlockFormatProvider and FileRegionProvider.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "546b95f4843f3cbbbdf72d90d202cad551696082",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,12 @@\n   DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n       BlockReportContext context) throws IOException {\n     if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n       if (StorageType.PROVIDED.equals(s.getStorageType())) {\n-        // poll service, initiate\n-        blockProvider.start(context);\n+        processProvidedStorageReport(context);\n         dn.injectStorage(providedStorageInfo);\n         return providedDescriptor.getProvidedStorage(dn, s);\n       }\n       LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n     }\n     return dn.getStorageInfo(s.getStorageID());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n      BlockReportContext context) throws IOException {\n    if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n      if (StorageType.PROVIDED.equals(s.getStorageType())) {\n        processProvidedStorageReport(context);\n        dn.injectStorage(providedStorageInfo);\n        return providedDescriptor.getProvidedStorage(dn, s);\n      }\n      LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n    }\n    return dn.getStorageInfo(s.getStorageID());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ProvidedStorageMap.java",
      "extendedDetails": {}
    },
    "546b95f4843f3cbbbdf72d90d202cad551696082": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11673. [READ] Handle failures of Datanode with PROVIDED storage\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "546b95f4843f3cbbbdf72d90d202cad551696082",
      "commitAuthor": "Virajith Jalaparti",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11673. [READ] Handle failures of Datanode with PROVIDED storage\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "546b95f4843f3cbbbdf72d90d202cad551696082",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "15/12/17 5:51 PM",
          "commitNameOld": "89b9faf5294c93f66ba7bbe08f5ab9083ecb5d72",
          "commitAuthorOld": "Virajith Jalaparti",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)\n-      throws IOException {\n+  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n+      BlockReportContext context) throws IOException {\n     if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n       if (StorageType.PROVIDED.equals(s.getStorageType())) {\n         // poll service, initiate\n-        blockProvider.start();\n+        blockProvider.start(context);\n         dn.injectStorage(providedStorageInfo);\n         return providedDescriptor.getProvidedStorage(dn, s);\n       }\n       LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n     }\n     return dn.getStorageInfo(s.getStorageID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n      BlockReportContext context) throws IOException {\n    if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n      if (StorageType.PROVIDED.equals(s.getStorageType())) {\n        // poll service, initiate\n        blockProvider.start(context);\n        dn.injectStorage(providedStorageInfo);\n        return providedDescriptor.getProvidedStorage(dn, s);\n      }\n      LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n    }\n    return dn.getStorageInfo(s.getStorageID());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ProvidedStorageMap.java",
          "extendedDetails": {
            "oldValue": "[dn-DatanodeDescriptor, s-DatanodeStorage]",
            "newValue": "[dn-DatanodeDescriptor, s-DatanodeStorage, context-BlockReportContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11673. [READ] Handle failures of Datanode with PROVIDED storage\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "546b95f4843f3cbbbdf72d90d202cad551696082",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "15/12/17 5:51 PM",
          "commitNameOld": "89b9faf5294c93f66ba7bbe08f5ab9083ecb5d72",
          "commitAuthorOld": "Virajith Jalaparti",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)\n-      throws IOException {\n+  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n+      BlockReportContext context) throws IOException {\n     if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n       if (StorageType.PROVIDED.equals(s.getStorageType())) {\n         // poll service, initiate\n-        blockProvider.start();\n+        blockProvider.start(context);\n         dn.injectStorage(providedStorageInfo);\n         return providedDescriptor.getProvidedStorage(dn, s);\n       }\n       LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n     }\n     return dn.getStorageInfo(s.getStorageID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,\n      BlockReportContext context) throws IOException {\n    if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n      if (StorageType.PROVIDED.equals(s.getStorageType())) {\n        // poll service, initiate\n        blockProvider.start(context);\n        dn.injectStorage(providedStorageInfo);\n        return providedDescriptor.getProvidedStorage(dn, s);\n      }\n      LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n    }\n    return dn.getStorageInfo(s.getStorageID());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ProvidedStorageMap.java",
          "extendedDetails": {}
        }
      ]
    },
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
      "commitAuthor": "Virajith Jalaparti",
      "diff": "@@ -0,0 +1,13 @@\n+  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)\n+      throws IOException {\n+    if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n+      if (StorageType.PROVIDED.equals(s.getStorageType())) {\n+        // poll service, initiate\n+        blockProvider.start();\n+        dn.injectStorage(providedStorageInfo);\n+        return providedDescriptor.getProvidedStorage(dn, s);\n+      }\n+      LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n+    }\n+    return dn.getStorageInfo(s.getStorageID());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)\n      throws IOException {\n    if (providedEnabled \u0026\u0026 storageId.equals(s.getStorageID())) {\n      if (StorageType.PROVIDED.equals(s.getStorageType())) {\n        // poll service, initiate\n        blockProvider.start();\n        dn.injectStorage(providedStorageInfo);\n        return providedDescriptor.getProvidedStorage(dn, s);\n      }\n      LOG.warn(\"Reserved storage {} reported as non-provided from {}\", s, dn);\n    }\n    return dn.getStorageInfo(s.getStorageID());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ProvidedStorageMap.java"
    }
  }
}