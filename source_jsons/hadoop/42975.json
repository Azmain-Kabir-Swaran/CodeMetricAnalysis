{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecommissioningNodesWatcher.java",
  "functionName": "logDecommissioningNodesStatus",
  "functionId": "logDecommissioningNodesStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java",
  "functionStartLine": 350,
  "functionEndLine": 384,
  "numCommitsSeen": 7,
  "timeTaken": 1633,
  "changeHistory": [
    "9a928377868dfb2dc846c340501b3248eb6ad77f",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421"
  ],
  "changeHistoryShort": {
    "9a928377868dfb2dc846c340501b3248eb6ad77f": "Ybodychange",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a928377868dfb2dc846c340501b3248eb6ad77f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6188. Fix OOM issue with decommissioningNodesWatcher in the case of clusters with\nlarge number of nodes (Contributed by Ajay Jadhav via Daniel Templeton)\n",
      "commitDate": "17/02/17 1:13 PM",
      "commitName": "9a928377868dfb2dc846c340501b3248eb6ad77f",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "18/08/16 7:27 AM",
      "commitNameOld": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 183.28,
      "commitsBetweenForRepo": 1150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private void logDecommissioningNodesStatus() {\n     if (!LOG.isDebugEnabled() || decomNodes.size() \u003d\u003d 0) {\n       return;\n     }\n-    StringBuilder sb \u003d new StringBuilder();\n     long now \u003d mclock.getTime();\n     for (DecommissioningNodeContext d : decomNodes.values()) {\n+      StringBuilder sb \u003d new StringBuilder();\n       DecommissioningNodeStatus s \u003d checkDecommissioningStatus(d.nodeId);\n       sb.append(String.format(\n           \"%n  %-34s %4ds fresh:%3ds containers:%2d %14s\",\n           d.nodeId.getHost(),\n           (now - d.decommissioningStartTime) / 1000,\n           (now - d.lastUpdateTime) / 1000,\n           d.numActiveContainers,\n           s));\n       if (s \u003d\u003d DecommissioningNodeStatus.WAIT_APP ||\n           s \u003d\u003d DecommissioningNodeStatus.WAIT_CONTAINER) {\n         sb.append(String.format(\" timeout:%4ds\", getTimeoutInSec(d)));\n       }\n       for (ApplicationId aid : d.appIds) {\n         sb.append(\"\\n    \" + aid);\n         RMApp rmApp \u003d rmContext.getRMApps().get(aid);\n         if (rmApp !\u003d null) {\n           sb.append(String.format(\n               \" %s %9s %5.2f%% %5ds\",\n               rmApp.getState(),\n               (rmApp.getApplicationType() \u003d\u003d null)?\n                   \"\" : rmApp.getApplicationType(),\n               100.0 * rmApp.getProgress(),\n               (mclock.getTime() - rmApp.getStartTime()) / 1000));\n         }\n       }\n+      LOG.debug(\"Decommissioning node: \" + sb.toString());\n     }\n-    LOG.info(\"Decommissioning Nodes: \" + sb.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void logDecommissioningNodesStatus() {\n    if (!LOG.isDebugEnabled() || decomNodes.size() \u003d\u003d 0) {\n      return;\n    }\n    long now \u003d mclock.getTime();\n    for (DecommissioningNodeContext d : decomNodes.values()) {\n      StringBuilder sb \u003d new StringBuilder();\n      DecommissioningNodeStatus s \u003d checkDecommissioningStatus(d.nodeId);\n      sb.append(String.format(\n          \"%n  %-34s %4ds fresh:%3ds containers:%2d %14s\",\n          d.nodeId.getHost(),\n          (now - d.decommissioningStartTime) / 1000,\n          (now - d.lastUpdateTime) / 1000,\n          d.numActiveContainers,\n          s));\n      if (s \u003d\u003d DecommissioningNodeStatus.WAIT_APP ||\n          s \u003d\u003d DecommissioningNodeStatus.WAIT_CONTAINER) {\n        sb.append(String.format(\" timeout:%4ds\", getTimeoutInSec(d)));\n      }\n      for (ApplicationId aid : d.appIds) {\n        sb.append(\"\\n    \" + aid);\n        RMApp rmApp \u003d rmContext.getRMApps().get(aid);\n        if (rmApp !\u003d null) {\n          sb.append(String.format(\n              \" %s %9s %5.2f%% %5ds\",\n              rmApp.getState(),\n              (rmApp.getApplicationType() \u003d\u003d null)?\n                  \"\" : rmApp.getApplicationType(),\n              100.0 * rmApp.getProgress(),\n              (mclock.getTime() - rmApp.getStartTime()) / 1000));\n        }\n      }\n      LOG.debug(\"Decommissioning node: \" + sb.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java",
      "extendedDetails": {}
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,35 @@\n+  private void logDecommissioningNodesStatus() {\n+    if (!LOG.isDebugEnabled() || decomNodes.size() \u003d\u003d 0) {\n+      return;\n+    }\n+    StringBuilder sb \u003d new StringBuilder();\n+    long now \u003d mclock.getTime();\n+    for (DecommissioningNodeContext d : decomNodes.values()) {\n+      DecommissioningNodeStatus s \u003d checkDecommissioningStatus(d.nodeId);\n+      sb.append(String.format(\n+          \"%n  %-34s %4ds fresh:%3ds containers:%2d %14s\",\n+          d.nodeId.getHost(),\n+          (now - d.decommissioningStartTime) / 1000,\n+          (now - d.lastUpdateTime) / 1000,\n+          d.numActiveContainers,\n+          s));\n+      if (s \u003d\u003d DecommissioningNodeStatus.WAIT_APP ||\n+          s \u003d\u003d DecommissioningNodeStatus.WAIT_CONTAINER) {\n+        sb.append(String.format(\" timeout:%4ds\", getTimeoutInSec(d)));\n+      }\n+      for (ApplicationId aid : d.appIds) {\n+        sb.append(\"\\n    \" + aid);\n+        RMApp rmApp \u003d rmContext.getRMApps().get(aid);\n+        if (rmApp !\u003d null) {\n+          sb.append(String.format(\n+              \" %s %9s %5.2f%% %5ds\",\n+              rmApp.getState(),\n+              (rmApp.getApplicationType() \u003d\u003d null)?\n+                  \"\" : rmApp.getApplicationType(),\n+              100.0 * rmApp.getProgress(),\n+              (mclock.getTime() - rmApp.getStartTime()) / 1000));\n+        }\n+      }\n+    }\n+    LOG.info(\"Decommissioning Nodes: \" + sb.toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void logDecommissioningNodesStatus() {\n    if (!LOG.isDebugEnabled() || decomNodes.size() \u003d\u003d 0) {\n      return;\n    }\n    StringBuilder sb \u003d new StringBuilder();\n    long now \u003d mclock.getTime();\n    for (DecommissioningNodeContext d : decomNodes.values()) {\n      DecommissioningNodeStatus s \u003d checkDecommissioningStatus(d.nodeId);\n      sb.append(String.format(\n          \"%n  %-34s %4ds fresh:%3ds containers:%2d %14s\",\n          d.nodeId.getHost(),\n          (now - d.decommissioningStartTime) / 1000,\n          (now - d.lastUpdateTime) / 1000,\n          d.numActiveContainers,\n          s));\n      if (s \u003d\u003d DecommissioningNodeStatus.WAIT_APP ||\n          s \u003d\u003d DecommissioningNodeStatus.WAIT_CONTAINER) {\n        sb.append(String.format(\" timeout:%4ds\", getTimeoutInSec(d)));\n      }\n      for (ApplicationId aid : d.appIds) {\n        sb.append(\"\\n    \" + aid);\n        RMApp rmApp \u003d rmContext.getRMApps().get(aid);\n        if (rmApp !\u003d null) {\n          sb.append(String.format(\n              \" %s %9s %5.2f%% %5ds\",\n              rmApp.getState(),\n              (rmApp.getApplicationType() \u003d\u003d null)?\n                  \"\" : rmApp.getApplicationType(),\n              100.0 * rmApp.getProgress(),\n              (mclock.getTime() - rmApp.getStartTime()) / 1000));\n        }\n      }\n    }\n    LOG.info(\"Decommissioning Nodes: \" + sb.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java"
    }
  }
}