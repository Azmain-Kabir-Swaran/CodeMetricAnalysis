{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebAppProxyServlet.java",
  "functionName": "getTrackingUri",
  "functionId": "getTrackingUri___req-HttpServletRequest__resp-HttpServletResponse__id-ApplicationId__originalUri-String__appReportSource-AppReportSource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
  "functionStartLine": 560,
  "functionEndLine": 592,
  "numCommitsSeen": 31,
  "timeTaken": 1521,
  "changeHistory": [
    "736d33cddd88a0cec925a451940b2523999a9c51"
  ],
  "changeHistoryShort": {
    "736d33cddd88a0cec925a451940b2523999a9c51": "Yintroduced"
  },
  "changeHistoryDetails": {
    "736d33cddd88a0cec925a451940b2523999a9c51": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4767. Network issues can cause persistent RM UI outage. (Daniel Templeton via kasha)\n",
      "commitDate": "03/10/16 2:35 PM",
      "commitName": "736d33cddd88a0cec925a451940b2523999a9c51",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,33 @@\n+  private URI getTrackingUri(HttpServletRequest req, HttpServletResponse resp,\n+      ApplicationId id, String originalUri, AppReportSource appReportSource)\n+      throws IOException, URISyntaxException {\n+    URI trackingUri \u003d null;\n+\n+    if ((originalUri \u003d\u003d null) ||\n+        originalUri.equals(\"N/A\") ||\n+        originalUri.equals(\"\")) {\n+      if (appReportSource \u003d\u003d AppReportSource.RM) {\n+        // fallback to ResourceManager\u0027s app page if no tracking URI provided\n+        // and Application Report was fetched from RM\n+        LOG.debug(\"Original tracking url is \u0027{}\u0027. Redirecting to RM app page\",\n+            originalUri \u003d\u003d null ? \"NULL\" : originalUri);\n+        ProxyUtils.sendRedirect(req, resp,\n+            StringHelper.pjoin(rmAppPageUrlBase, id.toString()));\n+      } else if (appReportSource \u003d\u003d AppReportSource.AHS) {\n+        // fallback to Application History Server app page if the application\n+        // report was fetched from AHS\n+        LOG.debug(\"Original tracking url is \u0027{}\u0027. Redirecting to AHS app page\",\n+            originalUri \u003d\u003d null ? \"NULL\" : originalUri);\n+        ProxyUtils.sendRedirect(req, resp,\n+            StringHelper.pjoin(ahsAppPageUrlBase, id.toString()));\n+      }\n+    } else if (ProxyUriUtils.getSchemeFromUrl(originalUri).isEmpty()) {\n+      trackingUri \u003d\n+          ProxyUriUtils.getUriFromAMUrl(WebAppUtils.getHttpSchemePrefix(conf),\n+            originalUri);\n+    } else {\n+      trackingUri \u003d new URI(originalUri);\n+    }\n+\n+    return trackingUri;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private URI getTrackingUri(HttpServletRequest req, HttpServletResponse resp,\n      ApplicationId id, String originalUri, AppReportSource appReportSource)\n      throws IOException, URISyntaxException {\n    URI trackingUri \u003d null;\n\n    if ((originalUri \u003d\u003d null) ||\n        originalUri.equals(\"N/A\") ||\n        originalUri.equals(\"\")) {\n      if (appReportSource \u003d\u003d AppReportSource.RM) {\n        // fallback to ResourceManager\u0027s app page if no tracking URI provided\n        // and Application Report was fetched from RM\n        LOG.debug(\"Original tracking url is \u0027{}\u0027. Redirecting to RM app page\",\n            originalUri \u003d\u003d null ? \"NULL\" : originalUri);\n        ProxyUtils.sendRedirect(req, resp,\n            StringHelper.pjoin(rmAppPageUrlBase, id.toString()));\n      } else if (appReportSource \u003d\u003d AppReportSource.AHS) {\n        // fallback to Application History Server app page if the application\n        // report was fetched from AHS\n        LOG.debug(\"Original tracking url is \u0027{}\u0027. Redirecting to AHS app page\",\n            originalUri \u003d\u003d null ? \"NULL\" : originalUri);\n        ProxyUtils.sendRedirect(req, resp,\n            StringHelper.pjoin(ahsAppPageUrlBase, id.toString()));\n      }\n    } else if (ProxyUriUtils.getSchemeFromUrl(originalUri).isEmpty()) {\n      trackingUri \u003d\n          ProxyUriUtils.getUriFromAMUrl(WebAppUtils.getHttpSchemePrefix(conf),\n            originalUri);\n    } else {\n      trackingUri \u003d new URI(originalUri);\n    }\n\n    return trackingUri;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java"
    }
  }
}