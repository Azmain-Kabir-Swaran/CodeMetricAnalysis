{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SequenceFile.java",
  "functionName": "next",
  "functionId": "next",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
  "functionStartLine": 3421,
  "functionEndLine": 3446,
  "numCommitsSeen": 46,
  "timeTaken": 3434,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public boolean next() throws IOException {\n        if (size() \u003d\u003d 0)\n          return false;\n        if (minSegment !\u003d null) {\n          //minSegment is non-null for all invocations of next except the first\n          //one. For the first invocation, the priority queue is ready for use\n          //but for the subsequent invocations, first adjust the queue \n          adjustPriorityQueue(minSegment);\n          if (size() \u003d\u003d 0) {\n            minSegment \u003d null;\n            return false;\n          }\n        }\n        minSegment \u003d (SegmentDescriptor)top();\n        long startPos \u003d minSegment.in.getPosition(); // Current position in stream\n        //save the raw key reference\n        rawKey \u003d minSegment.getKey();\n        //load the raw value. Re-use the existing rawValue buffer\n        if (rawValue \u003d\u003d null) {\n          rawValue \u003d minSegment.in.createValueBytes();\n        }\n        minSegment.nextRawValue(rawValue);\n        long endPos \u003d minSegment.in.getPosition(); // End position after reading value\n        updateProgress(endPos - startPos);\n        return true;\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public boolean next() throws IOException {\n        if (size() \u003d\u003d 0)\n          return false;\n        if (minSegment !\u003d null) {\n          //minSegment is non-null for all invocations of next except the first\n          //one. For the first invocation, the priority queue is ready for use\n          //but for the subsequent invocations, first adjust the queue \n          adjustPriorityQueue(minSegment);\n          if (size() \u003d\u003d 0) {\n            minSegment \u003d null;\n            return false;\n          }\n        }\n        minSegment \u003d (SegmentDescriptor)top();\n        long startPos \u003d minSegment.in.getPosition(); // Current position in stream\n        //save the raw key reference\n        rawKey \u003d minSegment.getKey();\n        //load the raw value. Re-use the existing rawValue buffer\n        if (rawValue \u003d\u003d null) {\n          rawValue \u003d minSegment.in.createValueBytes();\n        }\n        minSegment.nextRawValue(rawValue);\n        long endPos \u003d minSegment.in.getPosition(); // End position after reading value\n        updateProgress(endPos - startPos);\n        return true;\n      }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public boolean next() throws IOException {\n        if (size() \u003d\u003d 0)\n          return false;\n        if (minSegment !\u003d null) {\n          //minSegment is non-null for all invocations of next except the first\n          //one. For the first invocation, the priority queue is ready for use\n          //but for the subsequent invocations, first adjust the queue \n          adjustPriorityQueue(minSegment);\n          if (size() \u003d\u003d 0) {\n            minSegment \u003d null;\n            return false;\n          }\n        }\n        minSegment \u003d (SegmentDescriptor)top();\n        long startPos \u003d minSegment.in.getPosition(); // Current position in stream\n        //save the raw key reference\n        rawKey \u003d minSegment.getKey();\n        //load the raw value. Re-use the existing rawValue buffer\n        if (rawValue \u003d\u003d null) {\n          rawValue \u003d minSegment.in.createValueBytes();\n        }\n        minSegment.nextRawValue(rawValue);\n        long endPos \u003d minSegment.in.getPosition(); // End position after reading value\n        updateProgress(endPos - startPos);\n        return true;\n      }",
      "path": "common/src/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "common/src/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,26 @@\n+      public boolean next() throws IOException {\n+        if (size() \u003d\u003d 0)\n+          return false;\n+        if (minSegment !\u003d null) {\n+          //minSegment is non-null for all invocations of next except the first\n+          //one. For the first invocation, the priority queue is ready for use\n+          //but for the subsequent invocations, first adjust the queue \n+          adjustPriorityQueue(minSegment);\n+          if (size() \u003d\u003d 0) {\n+            minSegment \u003d null;\n+            return false;\n+          }\n+        }\n+        minSegment \u003d (SegmentDescriptor)top();\n+        long startPos \u003d minSegment.in.getPosition(); // Current position in stream\n+        //save the raw key reference\n+        rawKey \u003d minSegment.getKey();\n+        //load the raw value. Re-use the existing rawValue buffer\n+        if (rawValue \u003d\u003d null) {\n+          rawValue \u003d minSegment.in.createValueBytes();\n+        }\n+        minSegment.nextRawValue(rawValue);\n+        long endPos \u003d minSegment.in.getPosition(); // End position after reading value\n+        updateProgress(endPos - startPos);\n+        return true;\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public boolean next() throws IOException {\n        if (size() \u003d\u003d 0)\n          return false;\n        if (minSegment !\u003d null) {\n          //minSegment is non-null for all invocations of next except the first\n          //one. For the first invocation, the priority queue is ready for use\n          //but for the subsequent invocations, first adjust the queue \n          adjustPriorityQueue(minSegment);\n          if (size() \u003d\u003d 0) {\n            minSegment \u003d null;\n            return false;\n          }\n        }\n        minSegment \u003d (SegmentDescriptor)top();\n        long startPos \u003d minSegment.in.getPosition(); // Current position in stream\n        //save the raw key reference\n        rawKey \u003d minSegment.getKey();\n        //load the raw value. Re-use the existing rawValue buffer\n        if (rawValue \u003d\u003d null) {\n          rawValue \u003d minSegment.in.createValueBytes();\n        }\n        minSegment.nextRawValue(rawValue);\n        long endPos \u003d minSegment.in.getPosition(); // End position after reading value\n        updateProgress(endPos - startPos);\n        return true;\n      }",
      "path": "src/java/org/apache/hadoop/io/SequenceFile.java"
    }
  }
}