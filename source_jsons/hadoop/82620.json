{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileBasedIPList.java",
  "functionName": "readLines",
  "functionId": "readLines___fileName-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/FileBasedIPList.java",
  "functionStartLine": 86,
  "functionEndLine": 115,
  "numCommitsSeen": 9,
  "timeTaken": 2177,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "ccaf036662e22da14583942054898c99fa51dae5",
    "770b5eb2db686275df445be9280e76cc3710ffdc",
    "ecf1469fa51f9977f70652fac313d4a9ec1eb86f",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
    "86840834ed822527196a7eca117648be4df43292"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "770b5eb2db686275df445be9280e76cc3710ffdc": "Ybodychange",
    "ecf1469fa51f9977f70652fac313d4a9ec1eb86f": "Ymultichange(Yexceptionschange,Ybodychange)",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": "Ybodychange",
    "86840834ed822527196a7eca117648be4df43292": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 653.64,
      "commitsBetweenForRepo": 5524,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private static String[] readLines(String fileName) throws IOException {\n     try {\n       if (fileName !\u003d null) {\n         File file \u003d new File (fileName);\n         if (file.exists()) {\n           try (\n               Reader fileReader \u003d new InputStreamReader(\n-                  new FileInputStream(file), StandardCharsets.UTF_8);\n+                  Files.newInputStream(file.toPath()), StandardCharsets.UTF_8);\n               BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n             List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n             String line \u003d null;\n             while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n               lines.add(line);\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n                   \" from file \u003d \" + fileName);\n             }\n             return (lines.toArray(new String[lines.size()]));\n           }\n         } else {\n           LOG.debug(\"Missing ip list file : \"+ fileName);\n         }\n       }\n     } catch (IOException ioe) {\n       LOG.error(ioe.toString());\n       throw ioe;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static String[] readLines(String fileName) throws IOException {\n    try {\n      if (fileName !\u003d null) {\n        File file \u003d new File (fileName);\n        if (file.exists()) {\n          try (\n              Reader fileReader \u003d new InputStreamReader(\n                  Files.newInputStream(file.toPath()), StandardCharsets.UTF_8);\n              BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n            List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n            String line \u003d null;\n            while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n              lines.add(line);\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n                  \" from file \u003d \" + fileName);\n            }\n            return (lines.toArray(new String[lines.size()]));\n          }\n        } else {\n          LOG.debug(\"Missing ip list file : \"+ fileName);\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(ioe.toString());\n      throw ioe;\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/FileBasedIPList.java",
      "extendedDetails": {}
    },
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "01/08/16 1:35 AM",
      "commitNameOld": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 350.83,
      "commitsBetweenForRepo": 2088,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private static String[] readLines(String fileName) throws IOException {\n     try {\n       if (fileName !\u003d null) {\n         File file \u003d new File (fileName);\n         if (file.exists()) {\n           try (\n               Reader fileReader \u003d new InputStreamReader(\n                   new FileInputStream(file), StandardCharsets.UTF_8);\n               BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n             List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n             String line \u003d null;\n             while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n               lines.add(line);\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n                   \" from file \u003d \" + fileName);\n             }\n             return (lines.toArray(new String[lines.size()]));\n           }\n         } else {\n           LOG.debug(\"Missing ip list file : \"+ fileName);\n         }\n       }\n     } catch (IOException ioe) {\n-      LOG.error(ioe);\n+      LOG.error(ioe.toString());\n       throw ioe;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static String[] readLines(String fileName) throws IOException {\n    try {\n      if (fileName !\u003d null) {\n        File file \u003d new File (fileName);\n        if (file.exists()) {\n          try (\n              Reader fileReader \u003d new InputStreamReader(\n                  new FileInputStream(file), StandardCharsets.UTF_8);\n              BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n            List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n            String line \u003d null;\n            while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n              lines.add(line);\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n                  \" from file \u003d \" + fileName);\n            }\n            return (lines.toArray(new String[lines.size()]));\n          }\n        } else {\n          LOG.debug(\"Missing ip list file : \"+ fileName);\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(ioe.toString());\n      throw ioe;\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/FileBasedIPList.java",
      "extendedDetails": {}
    },
    "770b5eb2db686275df445be9280e76cc3710ffdc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13444. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "01/08/16 1:35 AM",
      "commitName": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/12/14 10:20 PM",
      "commitNameOld": "399d25884a99f3e0b2ef65eaf9f3149d0d523f13",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 584.09,
      "commitsBetweenForRepo": 4471,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private static String[] readLines(String fileName) throws IOException {\n     try {\n       if (fileName !\u003d null) {\n         File file \u003d new File (fileName);\n         if (file.exists()) {\n           try (\n               Reader fileReader \u003d new InputStreamReader(\n-                  new FileInputStream(file), Charsets.UTF_8);\n+                  new FileInputStream(file), StandardCharsets.UTF_8);\n               BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n             List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n             String line \u003d null;\n             while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n               lines.add(line);\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n                   \" from file \u003d \" + fileName);\n             }\n             return (lines.toArray(new String[lines.size()]));\n           }\n         } else {\n           LOG.debug(\"Missing ip list file : \"+ fileName);\n         }\n       }\n     } catch (IOException ioe) {\n       LOG.error(ioe);\n       throw ioe;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static String[] readLines(String fileName) throws IOException {\n    try {\n      if (fileName !\u003d null) {\n        File file \u003d new File (fileName);\n        if (file.exists()) {\n          try (\n              Reader fileReader \u003d new InputStreamReader(\n                  new FileInputStream(file), StandardCharsets.UTF_8);\n              BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n            List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n            String line \u003d null;\n            while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n              lines.add(line);\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n                  \" from file \u003d \" + fileName);\n            }\n            return (lines.toArray(new String[lines.size()]));\n          }\n        } else {\n          LOG.debug(\"Missing ip list file : \"+ fileName);\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(ioe);\n      throw ioe;\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/FileBasedIPList.java",
      "extendedDetails": {}
    },
    "ecf1469fa51f9977f70652fac313d4a9ec1eb86f": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-11414. FileBasedIPList#readLines() can leak file descriptors. (ozawa)\n",
      "commitDate": "21/12/14 8:05 PM",
      "commitName": "ecf1469fa51f9977f70652fac313d4a9ec1eb86f",
      "commitAuthor": "Tsuyoshi Ozawa",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-11414. FileBasedIPList#readLines() can leak file descriptors. (ozawa)\n",
          "commitDate": "21/12/14 8:05 PM",
          "commitName": "ecf1469fa51f9977f70652fac313d4a9ec1eb86f",
          "commitAuthor": "Tsuyoshi Ozawa",
          "commitDateOld": "11/12/14 4:42 PM",
          "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 10.14,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,30 @@\n-  private static String[] readLines(String fileName) {\n+  private static String[] readLines(String fileName) throws IOException {\n     try {\n       if (fileName !\u003d null) {\n         File file \u003d new File (fileName);\n         if (file.exists()) {\n-          Reader fileReader \u003d new InputStreamReader(\n-              new FileInputStream(file), Charsets.UTF_8);\n-          BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n-          List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n-          String line \u003d null;\n-          while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n-            lines.add(line);\n+          try (\n+              Reader fileReader \u003d new InputStreamReader(\n+                  new FileInputStream(file), Charsets.UTF_8);\n+              BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n+            List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n+            String line \u003d null;\n+            while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n+              lines.add(line);\n+            }\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n+                  \" from file \u003d \" + fileName);\n+            }\n+            return (lines.toArray(new String[lines.size()]));\n           }\n-          bufferedReader.close();\n-          LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\" from file \u003d \" + fileName);\n-          return(lines.toArray(new String[lines.size()]));\n-        }\n-        else {\n+        } else {\n           LOG.debug(\"Missing ip list file : \"+ fileName);\n         }\n       }\n-    }\n-    catch (Throwable t) {\n-      LOG.error(t);\n+    } catch (IOException ioe) {\n+      LOG.error(ioe);\n+      throw ioe;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static String[] readLines(String fileName) throws IOException {\n    try {\n      if (fileName !\u003d null) {\n        File file \u003d new File (fileName);\n        if (file.exists()) {\n          try (\n              Reader fileReader \u003d new InputStreamReader(\n                  new FileInputStream(file), Charsets.UTF_8);\n              BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n            List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n            String line \u003d null;\n            while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n              lines.add(line);\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n                  \" from file \u003d \" + fileName);\n            }\n            return (lines.toArray(new String[lines.size()]));\n          }\n        } else {\n          LOG.debug(\"Missing ip list file : \"+ fileName);\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(ioe);\n      throw ioe;\n    }\n    return null;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/FileBasedIPList.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11414. FileBasedIPList#readLines() can leak file descriptors. (ozawa)\n",
          "commitDate": "21/12/14 8:05 PM",
          "commitName": "ecf1469fa51f9977f70652fac313d4a9ec1eb86f",
          "commitAuthor": "Tsuyoshi Ozawa",
          "commitDateOld": "11/12/14 4:42 PM",
          "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 10.14,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,30 @@\n-  private static String[] readLines(String fileName) {\n+  private static String[] readLines(String fileName) throws IOException {\n     try {\n       if (fileName !\u003d null) {\n         File file \u003d new File (fileName);\n         if (file.exists()) {\n-          Reader fileReader \u003d new InputStreamReader(\n-              new FileInputStream(file), Charsets.UTF_8);\n-          BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n-          List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n-          String line \u003d null;\n-          while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n-            lines.add(line);\n+          try (\n+              Reader fileReader \u003d new InputStreamReader(\n+                  new FileInputStream(file), Charsets.UTF_8);\n+              BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n+            List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n+            String line \u003d null;\n+            while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n+              lines.add(line);\n+            }\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n+                  \" from file \u003d \" + fileName);\n+            }\n+            return (lines.toArray(new String[lines.size()]));\n           }\n-          bufferedReader.close();\n-          LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\" from file \u003d \" + fileName);\n-          return(lines.toArray(new String[lines.size()]));\n-        }\n-        else {\n+        } else {\n           LOG.debug(\"Missing ip list file : \"+ fileName);\n         }\n       }\n-    }\n-    catch (Throwable t) {\n-      LOG.error(t);\n+    } catch (IOException ioe) {\n+      LOG.error(ioe);\n+      throw ioe;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static String[] readLines(String fileName) throws IOException {\n    try {\n      if (fileName !\u003d null) {\n        File file \u003d new File (fileName);\n        if (file.exists()) {\n          try (\n              Reader fileReader \u003d new InputStreamReader(\n                  new FileInputStream(file), Charsets.UTF_8);\n              BufferedReader bufferedReader \u003d new BufferedReader(fileReader)) {\n            List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n            String line \u003d null;\n            while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n              lines.add(line);\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\n                  \" from file \u003d \" + fileName);\n            }\n            return (lines.toArray(new String[lines.size()]));\n          }\n        } else {\n          LOG.debug(\"Missing ip list file : \"+ fileName);\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(ioe);\n      throw ioe;\n    }\n    return null;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/FileBasedIPList.java",
          "extendedDetails": {}
        }
      ]
    },
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11389. Clean up byte to string encoding issues in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 4:42 PM",
      "commitName": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/08/14 12:02 PM",
      "commitNameOld": "86840834ed822527196a7eca117648be4df43292",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 116.24,
      "commitsBetweenForRepo": 1078,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   private static String[] readLines(String fileName) {\n     try {\n       if (fileName !\u003d null) {\n         File file \u003d new File (fileName);\n         if (file.exists()) {\n-          FileReader fileReader \u003d new FileReader(file);\n+          Reader fileReader \u003d new InputStreamReader(\n+              new FileInputStream(file), Charsets.UTF_8);\n           BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n           List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n           String line \u003d null;\n           while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n             lines.add(line);\n           }\n           bufferedReader.close();\n           LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\" from file \u003d \" + fileName);\n           return(lines.toArray(new String[lines.size()]));\n         }\n         else {\n           LOG.debug(\"Missing ip list file : \"+ fileName);\n         }\n       }\n     }\n     catch (Throwable t) {\n       LOG.error(t);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static String[] readLines(String fileName) {\n    try {\n      if (fileName !\u003d null) {\n        File file \u003d new File (fileName);\n        if (file.exists()) {\n          Reader fileReader \u003d new InputStreamReader(\n              new FileInputStream(file), Charsets.UTF_8);\n          BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n          List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n          String line \u003d null;\n          while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n            lines.add(line);\n          }\n          bufferedReader.close();\n          LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\" from file \u003d \" + fileName);\n          return(lines.toArray(new String[lines.size()]));\n        }\n        else {\n          LOG.debug(\"Missing ip list file : \"+ fileName);\n        }\n      }\n    }\n    catch (Throwable t) {\n      LOG.error(t);\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/FileBasedIPList.java",
      "extendedDetails": {}
    },
    "86840834ed822527196a7eca117648be4df43292": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10335. An ip whilelist based implementation to resolve Sasl properties per connection. (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618503 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/14 12:02 PM",
      "commitName": "86840834ed822527196a7eca117648be4df43292",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,26 @@\n+  private static String[] readLines(String fileName) {\n+    try {\n+      if (fileName !\u003d null) {\n+        File file \u003d new File (fileName);\n+        if (file.exists()) {\n+          FileReader fileReader \u003d new FileReader(file);\n+          BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n+          List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n+          String line \u003d null;\n+          while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n+            lines.add(line);\n+          }\n+          bufferedReader.close();\n+          LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\" from file \u003d \" + fileName);\n+          return(lines.toArray(new String[lines.size()]));\n+        }\n+        else {\n+          LOG.debug(\"Missing ip list file : \"+ fileName);\n+        }\n+      }\n+    }\n+    catch (Throwable t) {\n+      LOG.error(t);\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static String[] readLines(String fileName) {\n    try {\n      if (fileName !\u003d null) {\n        File file \u003d new File (fileName);\n        if (file.exists()) {\n          FileReader fileReader \u003d new FileReader(file);\n          BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n          List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n          String line \u003d null;\n          while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n            lines.add(line);\n          }\n          bufferedReader.close();\n          LOG.debug(\"Loaded IP list of size \u003d \" + lines.size() +\" from file \u003d \" + fileName);\n          return(lines.toArray(new String[lines.size()]));\n        }\n        else {\n          LOG.debug(\"Missing ip list file : \"+ fileName);\n        }\n      }\n    }\n    catch (Throwable t) {\n      LOG.error(t);\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/FileBasedIPList.java"
    }
  }
}