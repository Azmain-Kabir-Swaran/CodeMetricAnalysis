{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CpuTimeTracker.java",
  "functionName": "getCpuTrackerUsagePercent",
  "functionId": "getCpuTrackerUsagePercent",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CpuTimeTracker.java",
  "functionStartLine": 65,
  "functionEndLine": 84,
  "numCommitsSeen": 6,
  "timeTaken": 1441,
  "changeHistory": [
    "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d",
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385"
  ],
  "changeHistoryShort": {
    "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d": "Ymultichange(Yfilerename,Ybodychange)",
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HADOOP-12180. Move ResourceCalculatorPlugin from YARN to Common. (Chris Douglas via kasha)\n",
      "commitDate": "09/07/15 9:56 AM",
      "commitName": "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-12180. Move ResourceCalculatorPlugin from YARN to Common. (Chris Douglas via kasha)\n",
          "commitDate": "09/07/15 9:56 AM",
          "commitName": "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "09/07/15 9:48 AM",
          "commitNameOld": "aa067c6aa47b4c79577096817acc00ad6421180c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n   public float getCpuTrackerUsagePercent() {\n     if (lastSampleTime \u003d\u003d UNAVAILABLE ||\n         lastSampleTime \u003e sampleTime) {\n       // lastSampleTime \u003e sampleTime may happen when the system time is changed\n       lastSampleTime \u003d sampleTime;\n       lastCumulativeCpuTime \u003d cumulativeCpuTime;\n       return cpuUsage;\n     }\n     // When lastSampleTime is sufficiently old, update cpuUsage.\n     // Also take a sample of the current time and cumulative CPU time for the\n     // use of the next calculation.\n-    if (sampleTime \u003e lastSampleTime + MINIMUM_UPDATE_INTERVAL) {\n+    if (sampleTime \u003e lastSampleTime + minimumTimeInterval) {\n       cpuUsage \u003d\n           ((cumulativeCpuTime.subtract(lastCumulativeCpuTime)).floatValue())\n           * 100F / ((float) (sampleTime - lastSampleTime));\n       lastSampleTime \u003d sampleTime;\n       lastCumulativeCpuTime \u003d cumulativeCpuTime;\n     }\n     return cpuUsage;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public float getCpuTrackerUsagePercent() {\n    if (lastSampleTime \u003d\u003d UNAVAILABLE ||\n        lastSampleTime \u003e sampleTime) {\n      // lastSampleTime \u003e sampleTime may happen when the system time is changed\n      lastSampleTime \u003d sampleTime;\n      lastCumulativeCpuTime \u003d cumulativeCpuTime;\n      return cpuUsage;\n    }\n    // When lastSampleTime is sufficiently old, update cpuUsage.\n    // Also take a sample of the current time and cumulative CPU time for the\n    // use of the next calculation.\n    if (sampleTime \u003e lastSampleTime + minimumTimeInterval) {\n      cpuUsage \u003d\n          ((cumulativeCpuTime.subtract(lastCumulativeCpuTime)).floatValue())\n          * 100F / ((float) (sampleTime - lastSampleTime));\n      lastSampleTime \u003d sampleTime;\n      lastCumulativeCpuTime \u003d cumulativeCpuTime;\n    }\n    return cpuUsage;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CpuTimeTracker.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/CpuTimeTracker.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CpuTimeTracker.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12180. Move ResourceCalculatorPlugin from YARN to Common. (Chris Douglas via kasha)\n",
          "commitDate": "09/07/15 9:56 AM",
          "commitName": "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "09/07/15 9:48 AM",
          "commitNameOld": "aa067c6aa47b4c79577096817acc00ad6421180c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n   public float getCpuTrackerUsagePercent() {\n     if (lastSampleTime \u003d\u003d UNAVAILABLE ||\n         lastSampleTime \u003e sampleTime) {\n       // lastSampleTime \u003e sampleTime may happen when the system time is changed\n       lastSampleTime \u003d sampleTime;\n       lastCumulativeCpuTime \u003d cumulativeCpuTime;\n       return cpuUsage;\n     }\n     // When lastSampleTime is sufficiently old, update cpuUsage.\n     // Also take a sample of the current time and cumulative CPU time for the\n     // use of the next calculation.\n-    if (sampleTime \u003e lastSampleTime + MINIMUM_UPDATE_INTERVAL) {\n+    if (sampleTime \u003e lastSampleTime + minimumTimeInterval) {\n       cpuUsage \u003d\n           ((cumulativeCpuTime.subtract(lastCumulativeCpuTime)).floatValue())\n           * 100F / ((float) (sampleTime - lastSampleTime));\n       lastSampleTime \u003d sampleTime;\n       lastCumulativeCpuTime \u003d cumulativeCpuTime;\n     }\n     return cpuUsage;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public float getCpuTrackerUsagePercent() {\n    if (lastSampleTime \u003d\u003d UNAVAILABLE ||\n        lastSampleTime \u003e sampleTime) {\n      // lastSampleTime \u003e sampleTime may happen when the system time is changed\n      lastSampleTime \u003d sampleTime;\n      lastCumulativeCpuTime \u003d cumulativeCpuTime;\n      return cpuUsage;\n    }\n    // When lastSampleTime is sufficiently old, update cpuUsage.\n    // Also take a sample of the current time and cumulative CPU time for the\n    // use of the next calculation.\n    if (sampleTime \u003e lastSampleTime + minimumTimeInterval) {\n      cpuUsage \u003d\n          ((cumulativeCpuTime.subtract(lastCumulativeCpuTime)).floatValue())\n          * 100F / ((float) (sampleTime - lastSampleTime));\n      lastSampleTime \u003d sampleTime;\n      lastCumulativeCpuTime \u003d cumulativeCpuTime;\n    }\n    return cpuUsage;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CpuTimeTracker.java",
          "extendedDetails": {}
        }
      ]
    },
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3122. Metrics for container\u0027s actual CPU usage. (Anubhav Dhoot via kasha)\n",
      "commitDate": "04/03/15 5:33 PM",
      "commitName": "53947f37c7a84a84ef4ab1a3cab63ff27c078385",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,20 @@\n+  public float getCpuTrackerUsagePercent() {\n+    if (lastSampleTime \u003d\u003d UNAVAILABLE ||\n+        lastSampleTime \u003e sampleTime) {\n+      // lastSampleTime \u003e sampleTime may happen when the system time is changed\n+      lastSampleTime \u003d sampleTime;\n+      lastCumulativeCpuTime \u003d cumulativeCpuTime;\n+      return cpuUsage;\n+    }\n+    // When lastSampleTime is sufficiently old, update cpuUsage.\n+    // Also take a sample of the current time and cumulative CPU time for the\n+    // use of the next calculation.\n+    if (sampleTime \u003e lastSampleTime + MINIMUM_UPDATE_INTERVAL) {\n+      cpuUsage \u003d\n+          ((cumulativeCpuTime.subtract(lastCumulativeCpuTime)).floatValue())\n+          * 100F / ((float) (sampleTime - lastSampleTime));\n+      lastSampleTime \u003d sampleTime;\n+      lastCumulativeCpuTime \u003d cumulativeCpuTime;\n+    }\n+    return cpuUsage;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public float getCpuTrackerUsagePercent() {\n    if (lastSampleTime \u003d\u003d UNAVAILABLE ||\n        lastSampleTime \u003e sampleTime) {\n      // lastSampleTime \u003e sampleTime may happen when the system time is changed\n      lastSampleTime \u003d sampleTime;\n      lastCumulativeCpuTime \u003d cumulativeCpuTime;\n      return cpuUsage;\n    }\n    // When lastSampleTime is sufficiently old, update cpuUsage.\n    // Also take a sample of the current time and cumulative CPU time for the\n    // use of the next calculation.\n    if (sampleTime \u003e lastSampleTime + MINIMUM_UPDATE_INTERVAL) {\n      cpuUsage \u003d\n          ((cumulativeCpuTime.subtract(lastCumulativeCpuTime)).floatValue())\n          * 100F / ((float) (sampleTime - lastSampleTime));\n      lastSampleTime \u003d sampleTime;\n      lastCumulativeCpuTime \u003d cumulativeCpuTime;\n    }\n    return cpuUsage;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/CpuTimeTracker.java"
    }
  }
}