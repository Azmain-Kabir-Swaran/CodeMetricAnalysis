{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QuorumException.java",
  "functionName": "create",
  "functionId": "create___simpleMsg-String__successes-Map__K,V____exceptions-Map__K,Throwable__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumException.java",
  "functionStartLine": 43,
  "functionEndLine": 82,
  "numCommitsSeen": 2,
  "timeTaken": 1088,
  "changeHistory": [
    "f9a0d78ef5889bb1b9510ba15a1a780fcc9560fd",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "f9a0d78ef5889bb1b9510ba15a1a780fcc9560fd": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f9a0d78ef5889bb1b9510ba15a1a780fcc9560fd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3826. QJM: Some trivial logging / exception text improvements. Contributed by Todd Lipcon and Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1375356 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/08/12 5:48 PM",
      "commitName": "f9a0d78ef5889bb1b9510ba15a1a780fcc9560fd",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "19/07/12 5:25 PM",
      "commitNameOld": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 32.02,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n   public static \u003cK, V\u003e QuorumException create(\n       String simpleMsg,\n       Map\u003cK, V\u003e successes,\n       Map\u003cK, Throwable\u003e exceptions) {\n     Preconditions.checkArgument(!exceptions.isEmpty(),\n         \"Must pass exceptions\");\n     \n     StringBuilder msg \u003d new StringBuilder();\n     msg.append(simpleMsg).append(\". \");\n     if (!successes.isEmpty()) {\n       msg.append(successes.size()).append(\" successful responses:\\n\");\n+      \n       Joiner.on(\"\\n\")\n-          .useForNull(\"null\")\n+          .useForNull(\"null [success]\")\n           .withKeyValueSeparator(\": \")\n           .appendTo(msg, successes);\n       msg.append(\"\\n\");\n     }\n+    \n     msg.append(exceptions.size() + \" exceptions thrown:\\n\");\n     boolean isFirst \u003d true;\n     \n     for (Map.Entry\u003cK, Throwable\u003e e : exceptions.entrySet()) {\n       if (!isFirst) {\n         msg.append(\"\\n\");\n       }\n       isFirst \u003d false;\n       \n       msg.append(e.getKey()).append(\": \");\n       \n       if (e.getValue() instanceof RuntimeException) {\n         msg.append(StringUtils.stringifyException(e.getValue()));\n-      } else {\n+      } else if (e.getValue().getLocalizedMessage() !\u003d null) {\n         msg.append(e.getValue().getLocalizedMessage());\n+      } else {\n+        msg.append(StringUtils.stringifyException(e.getValue()));\n       }\n     }\n     return new QuorumException(msg.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cK, V\u003e QuorumException create(\n      String simpleMsg,\n      Map\u003cK, V\u003e successes,\n      Map\u003cK, Throwable\u003e exceptions) {\n    Preconditions.checkArgument(!exceptions.isEmpty(),\n        \"Must pass exceptions\");\n    \n    StringBuilder msg \u003d new StringBuilder();\n    msg.append(simpleMsg).append(\". \");\n    if (!successes.isEmpty()) {\n      msg.append(successes.size()).append(\" successful responses:\\n\");\n      \n      Joiner.on(\"\\n\")\n          .useForNull(\"null [success]\")\n          .withKeyValueSeparator(\": \")\n          .appendTo(msg, successes);\n      msg.append(\"\\n\");\n    }\n    \n    msg.append(exceptions.size() + \" exceptions thrown:\\n\");\n    boolean isFirst \u003d true;\n    \n    for (Map.Entry\u003cK, Throwable\u003e e : exceptions.entrySet()) {\n      if (!isFirst) {\n        msg.append(\"\\n\");\n      }\n      isFirst \u003d false;\n      \n      msg.append(e.getKey()).append(\": \");\n      \n      if (e.getValue() instanceof RuntimeException) {\n        msg.append(StringUtils.stringifyException(e.getValue()));\n      } else if (e.getValue().getLocalizedMessage() !\u003d null) {\n        msg.append(e.getValue().getLocalizedMessage());\n      } else {\n        msg.append(StringUtils.stringifyException(e.getValue()));\n      }\n    }\n    return new QuorumException(msg.toString());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumException.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,36 @@\n+  public static \u003cK, V\u003e QuorumException create(\n+      String simpleMsg,\n+      Map\u003cK, V\u003e successes,\n+      Map\u003cK, Throwable\u003e exceptions) {\n+    Preconditions.checkArgument(!exceptions.isEmpty(),\n+        \"Must pass exceptions\");\n+    \n+    StringBuilder msg \u003d new StringBuilder();\n+    msg.append(simpleMsg).append(\". \");\n+    if (!successes.isEmpty()) {\n+      msg.append(successes.size()).append(\" successful responses:\\n\");\n+      Joiner.on(\"\\n\")\n+          .useForNull(\"null\")\n+          .withKeyValueSeparator(\": \")\n+          .appendTo(msg, successes);\n+      msg.append(\"\\n\");\n+    }\n+    msg.append(exceptions.size() + \" exceptions thrown:\\n\");\n+    boolean isFirst \u003d true;\n+    \n+    for (Map.Entry\u003cK, Throwable\u003e e : exceptions.entrySet()) {\n+      if (!isFirst) {\n+        msg.append(\"\\n\");\n+      }\n+      isFirst \u003d false;\n+      \n+      msg.append(e.getKey()).append(\": \");\n+      \n+      if (e.getValue() instanceof RuntimeException) {\n+        msg.append(StringUtils.stringifyException(e.getValue()));\n+      } else {\n+        msg.append(e.getValue().getLocalizedMessage());\n+      }\n+    }\n+    return new QuorumException(msg.toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cK, V\u003e QuorumException create(\n      String simpleMsg,\n      Map\u003cK, V\u003e successes,\n      Map\u003cK, Throwable\u003e exceptions) {\n    Preconditions.checkArgument(!exceptions.isEmpty(),\n        \"Must pass exceptions\");\n    \n    StringBuilder msg \u003d new StringBuilder();\n    msg.append(simpleMsg).append(\". \");\n    if (!successes.isEmpty()) {\n      msg.append(successes.size()).append(\" successful responses:\\n\");\n      Joiner.on(\"\\n\")\n          .useForNull(\"null\")\n          .withKeyValueSeparator(\": \")\n          .appendTo(msg, successes);\n      msg.append(\"\\n\");\n    }\n    msg.append(exceptions.size() + \" exceptions thrown:\\n\");\n    boolean isFirst \u003d true;\n    \n    for (Map.Entry\u003cK, Throwable\u003e e : exceptions.entrySet()) {\n      if (!isFirst) {\n        msg.append(\"\\n\");\n      }\n      isFirst \u003d false;\n      \n      msg.append(e.getKey()).append(\": \");\n      \n      if (e.getValue() instanceof RuntimeException) {\n        msg.append(StringUtils.stringifyException(e.getValue()));\n      } else {\n        msg.append(e.getValue().getLocalizedMessage());\n      }\n    }\n    return new QuorumException(msg.toString());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumException.java"
    }
  }
}