{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "storeEmptyLinkFile",
  "functionId": "storeEmptyLinkFile___key-String__tempBlobKey-String__permissionStatus-PermissionStatus",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 1795,
  "functionEndLine": 1825,
  "numCommitsSeen": 53,
  "timeTaken": 2435,
  "changeHistory": [
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "commitDateOld": "24/06/14 1:52 PM",
      "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 106.02,
      "commitsBetweenForRepo": 1005,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n   public void storeEmptyLinkFile(String key, String tempBlobKey,\n       PermissionStatus permissionStatus) throws AzureException {\n     if (null \u003d\u003d storageInteractionLayer) {\n       final String errMsg \u003d String.format(\n           \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n           sessionUri);\n       throw new AssertionError(errMsg);\n     }\n     // Check if there is an authenticated account associated with the file\n     // this instance of the WASB file system. If not the file system has not\n     // been authenticated and all access is anonymous.\n     if (!isAuthenticatedAccess()) {\n       // Preemptively raise an exception indicating no uploads are\n       // allowed to anonymous accounts.\n       throw new AzureException(\n           \"Uploads to to public accounts using anonymous access is prohibited.\");\n     }\n \n     try {\n       checkContainer(ContainerAccessType.PureWrite);\n \n-      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n+      CloudBlobWrapper blob \u003d getBlobReference(key);\n       storePermissionStatus(blob, permissionStatus);\n       storeLinkAttribute(blob, tempBlobKey);\n-      blob.upload(new ByteArrayInputStream(new byte[0]),\n-          getInstrumentedContext());\n+      openOutputStream(blob).close();\n     } catch (Exception e) {\n       // Caught exception while attempting upload. Re-throw as an Azure\n       // storage exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void storeEmptyLinkFile(String key, String tempBlobKey,\n      PermissionStatus permissionStatus) throws AzureException {\n    if (null \u003d\u003d storageInteractionLayer) {\n      final String errMsg \u003d String.format(\n          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n          sessionUri);\n      throw new AssertionError(errMsg);\n    }\n    // Check if there is an authenticated account associated with the file\n    // this instance of the WASB file system. If not the file system has not\n    // been authenticated and all access is anonymous.\n    if (!isAuthenticatedAccess()) {\n      // Preemptively raise an exception indicating no uploads are\n      // allowed to anonymous accounts.\n      throw new AzureException(\n          \"Uploads to to public accounts using anonymous access is prohibited.\");\n    }\n\n    try {\n      checkContainer(ContainerAccessType.PureWrite);\n\n      CloudBlobWrapper blob \u003d getBlobReference(key);\n      storePermissionStatus(blob, permissionStatus);\n      storeLinkAttribute(blob, tempBlobKey);\n      openOutputStream(blob).close();\n    } catch (Exception e) {\n      // Caught exception while attempting upload. Re-throw as an Azure\n      // storage exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,32 @@\n+  public void storeEmptyLinkFile(String key, String tempBlobKey,\n+      PermissionStatus permissionStatus) throws AzureException {\n+    if (null \u003d\u003d storageInteractionLayer) {\n+      final String errMsg \u003d String.format(\n+          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n+          sessionUri);\n+      throw new AssertionError(errMsg);\n+    }\n+    // Check if there is an authenticated account associated with the file\n+    // this instance of the WASB file system. If not the file system has not\n+    // been authenticated and all access is anonymous.\n+    if (!isAuthenticatedAccess()) {\n+      // Preemptively raise an exception indicating no uploads are\n+      // allowed to anonymous accounts.\n+      throw new AzureException(\n+          \"Uploads to to public accounts using anonymous access is prohibited.\");\n+    }\n+\n+    try {\n+      checkContainer(ContainerAccessType.PureWrite);\n+\n+      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n+      storePermissionStatus(blob, permissionStatus);\n+      storeLinkAttribute(blob, tempBlobKey);\n+      blob.upload(new ByteArrayInputStream(new byte[0]),\n+          getInstrumentedContext());\n+    } catch (Exception e) {\n+      // Caught exception while attempting upload. Re-throw as an Azure\n+      // storage exception.\n+      throw new AzureException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void storeEmptyLinkFile(String key, String tempBlobKey,\n      PermissionStatus permissionStatus) throws AzureException {\n    if (null \u003d\u003d storageInteractionLayer) {\n      final String errMsg \u003d String.format(\n          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n          sessionUri);\n      throw new AssertionError(errMsg);\n    }\n    // Check if there is an authenticated account associated with the file\n    // this instance of the WASB file system. If not the file system has not\n    // been authenticated and all access is anonymous.\n    if (!isAuthenticatedAccess()) {\n      // Preemptively raise an exception indicating no uploads are\n      // allowed to anonymous accounts.\n      throw new AzureException(\n          \"Uploads to to public accounts using anonymous access is prohibited.\");\n    }\n\n    try {\n      checkContainer(ContainerAccessType.PureWrite);\n\n      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n      storePermissionStatus(blob, permissionStatus);\n      storeLinkAttribute(blob, tempBlobKey);\n      blob.upload(new ByteArrayInputStream(new byte[0]),\n          getInstrumentedContext());\n    } catch (Exception e) {\n      // Caught exception while attempting upload. Re-throw as an Azure\n      // storage exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}