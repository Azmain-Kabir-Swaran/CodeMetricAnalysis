{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "handleContainerUpdates",
  "functionId": "handleContainerUpdates___appAttempt-SchedulerApplicationAttempt__updates-ContainerUpdates",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 1312,
  "functionEndLine": 1342,
  "numCommitsSeen": 184,
  "timeTaken": 4839,
  "changeHistory": [
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4"
  ],
  "changeHistoryShort": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/02/17 11:16 PM",
          "commitNameOld": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  private void handlePromotionRequests(\n-      SchedulerApplicationAttempt applicationAttempt,\n-      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n-    for (UpdateContainerRequest uReq : updateContainerRequests) {\n-      RMContainer rmContainer \u003d\n-          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n-      // Check if this is a container update\n-      // And not in the middle of a Demotion\n-      if (rmContainer !\u003d null) {\n-        // Check if this is an executionType change request\n-        // If so, fix the rr to make it look like a normal rr\n-        // with relaxLocality\u003dfalse and numContainers\u003d1\n-        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n-            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n-\n-        // Add only if no outstanding promote requests exist.\n-        if (!applicationAttempt.getUpdateContext()\n-            .checkAndAddToOutstandingIncreases(\n-                rmContainer, schedulerNode, uReq)) {\n-          applicationAttempt.addToUpdateContainerErrors(\n-              UpdateContainerError.newInstance(\n-              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n-        }\n-      } else {\n-        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n-            + uReq.getContainerId() + \"]\");\n-      }\n+  protected void handleContainerUpdates(\n+      SchedulerApplicationAttempt appAttempt, ContainerUpdates updates) {\n+    List\u003cUpdateContainerRequest\u003e promotionRequests \u003d\n+        updates.getPromotionRequests();\n+    if (promotionRequests !\u003d null \u0026\u0026 !promotionRequests.isEmpty()) {\n+      LOG.info(\"Promotion Update requests : \" + promotionRequests);\n+      // Promotion is technically an increase request from\n+      // 0 resources to target resources.\n+      handleIncreaseRequests(appAttempt, promotionRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e increaseRequests \u003d\n+        updates.getIncreaseRequests();\n+    if (increaseRequests !\u003d null \u0026\u0026 !increaseRequests.isEmpty()) {\n+      LOG.info(\"Resource increase requests : \" + increaseRequests);\n+      handleIncreaseRequests(appAttempt, increaseRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e demotionRequests \u003d\n+        updates.getDemotionRequests();\n+    if (demotionRequests !\u003d null \u0026\u0026 !demotionRequests.isEmpty()) {\n+      LOG.info(\"Demotion Update requests : \" + demotionRequests);\n+      // Demotion is technically a decrease request from initial\n+      // to 0 resources\n+      handleDecreaseRequests(appAttempt, demotionRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e decreaseRequests \u003d\n+        updates.getDecreaseRequests();\n+    if (decreaseRequests !\u003d null \u0026\u0026 !decreaseRequests.isEmpty()) {\n+      LOG.info(\"Resource decrease requests : \" + decreaseRequests);\n+      handleDecreaseRequests(appAttempt, decreaseRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void handleContainerUpdates(\n      SchedulerApplicationAttempt appAttempt, ContainerUpdates updates) {\n    List\u003cUpdateContainerRequest\u003e promotionRequests \u003d\n        updates.getPromotionRequests();\n    if (promotionRequests !\u003d null \u0026\u0026 !promotionRequests.isEmpty()) {\n      LOG.info(\"Promotion Update requests : \" + promotionRequests);\n      // Promotion is technically an increase request from\n      // 0 resources to target resources.\n      handleIncreaseRequests(appAttempt, promotionRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e increaseRequests \u003d\n        updates.getIncreaseRequests();\n    if (increaseRequests !\u003d null \u0026\u0026 !increaseRequests.isEmpty()) {\n      LOG.info(\"Resource increase requests : \" + increaseRequests);\n      handleIncreaseRequests(appAttempt, increaseRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e demotionRequests \u003d\n        updates.getDemotionRequests();\n    if (demotionRequests !\u003d null \u0026\u0026 !demotionRequests.isEmpty()) {\n      LOG.info(\"Demotion Update requests : \" + demotionRequests);\n      // Demotion is technically a decrease request from initial\n      // to 0 resources\n      handleDecreaseRequests(appAttempt, demotionRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e decreaseRequests \u003d\n        updates.getDecreaseRequests();\n    if (decreaseRequests !\u003d null \u0026\u0026 !decreaseRequests.isEmpty()) {\n      LOG.info(\"Resource decrease requests : \" + decreaseRequests);\n      handleDecreaseRequests(appAttempt, decreaseRequests);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "handlePromotionRequests",
            "newValue": "handleContainerUpdates"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/02/17 11:16 PM",
          "commitNameOld": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  private void handlePromotionRequests(\n-      SchedulerApplicationAttempt applicationAttempt,\n-      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n-    for (UpdateContainerRequest uReq : updateContainerRequests) {\n-      RMContainer rmContainer \u003d\n-          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n-      // Check if this is a container update\n-      // And not in the middle of a Demotion\n-      if (rmContainer !\u003d null) {\n-        // Check if this is an executionType change request\n-        // If so, fix the rr to make it look like a normal rr\n-        // with relaxLocality\u003dfalse and numContainers\u003d1\n-        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n-            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n-\n-        // Add only if no outstanding promote requests exist.\n-        if (!applicationAttempt.getUpdateContext()\n-            .checkAndAddToOutstandingIncreases(\n-                rmContainer, schedulerNode, uReq)) {\n-          applicationAttempt.addToUpdateContainerErrors(\n-              UpdateContainerError.newInstance(\n-              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n-        }\n-      } else {\n-        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n-            + uReq.getContainerId() + \"]\");\n-      }\n+  protected void handleContainerUpdates(\n+      SchedulerApplicationAttempt appAttempt, ContainerUpdates updates) {\n+    List\u003cUpdateContainerRequest\u003e promotionRequests \u003d\n+        updates.getPromotionRequests();\n+    if (promotionRequests !\u003d null \u0026\u0026 !promotionRequests.isEmpty()) {\n+      LOG.info(\"Promotion Update requests : \" + promotionRequests);\n+      // Promotion is technically an increase request from\n+      // 0 resources to target resources.\n+      handleIncreaseRequests(appAttempt, promotionRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e increaseRequests \u003d\n+        updates.getIncreaseRequests();\n+    if (increaseRequests !\u003d null \u0026\u0026 !increaseRequests.isEmpty()) {\n+      LOG.info(\"Resource increase requests : \" + increaseRequests);\n+      handleIncreaseRequests(appAttempt, increaseRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e demotionRequests \u003d\n+        updates.getDemotionRequests();\n+    if (demotionRequests !\u003d null \u0026\u0026 !demotionRequests.isEmpty()) {\n+      LOG.info(\"Demotion Update requests : \" + demotionRequests);\n+      // Demotion is technically a decrease request from initial\n+      // to 0 resources\n+      handleDecreaseRequests(appAttempt, demotionRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e decreaseRequests \u003d\n+        updates.getDecreaseRequests();\n+    if (decreaseRequests !\u003d null \u0026\u0026 !decreaseRequests.isEmpty()) {\n+      LOG.info(\"Resource decrease requests : \" + decreaseRequests);\n+      handleDecreaseRequests(appAttempt, decreaseRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void handleContainerUpdates(\n      SchedulerApplicationAttempt appAttempt, ContainerUpdates updates) {\n    List\u003cUpdateContainerRequest\u003e promotionRequests \u003d\n        updates.getPromotionRequests();\n    if (promotionRequests !\u003d null \u0026\u0026 !promotionRequests.isEmpty()) {\n      LOG.info(\"Promotion Update requests : \" + promotionRequests);\n      // Promotion is technically an increase request from\n      // 0 resources to target resources.\n      handleIncreaseRequests(appAttempt, promotionRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e increaseRequests \u003d\n        updates.getIncreaseRequests();\n    if (increaseRequests !\u003d null \u0026\u0026 !increaseRequests.isEmpty()) {\n      LOG.info(\"Resource increase requests : \" + increaseRequests);\n      handleIncreaseRequests(appAttempt, increaseRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e demotionRequests \u003d\n        updates.getDemotionRequests();\n    if (demotionRequests !\u003d null \u0026\u0026 !demotionRequests.isEmpty()) {\n      LOG.info(\"Demotion Update requests : \" + demotionRequests);\n      // Demotion is technically a decrease request from initial\n      // to 0 resources\n      handleDecreaseRequests(appAttempt, demotionRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e decreaseRequests \u003d\n        updates.getDecreaseRequests();\n    if (decreaseRequests !\u003d null \u0026\u0026 !decreaseRequests.isEmpty()) {\n      LOG.info(\"Resource decrease requests : \" + decreaseRequests);\n      handleDecreaseRequests(appAttempt, decreaseRequests);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttempt-SchedulerApplicationAttempt, updateContainerRequests-List\u003cUpdateContainerRequest\u003e]",
            "newValue": "[appAttempt-SchedulerApplicationAttempt, updates-ContainerUpdates]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/02/17 11:16 PM",
          "commitNameOld": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  private void handlePromotionRequests(\n-      SchedulerApplicationAttempt applicationAttempt,\n-      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n-    for (UpdateContainerRequest uReq : updateContainerRequests) {\n-      RMContainer rmContainer \u003d\n-          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n-      // Check if this is a container update\n-      // And not in the middle of a Demotion\n-      if (rmContainer !\u003d null) {\n-        // Check if this is an executionType change request\n-        // If so, fix the rr to make it look like a normal rr\n-        // with relaxLocality\u003dfalse and numContainers\u003d1\n-        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n-            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n-\n-        // Add only if no outstanding promote requests exist.\n-        if (!applicationAttempt.getUpdateContext()\n-            .checkAndAddToOutstandingIncreases(\n-                rmContainer, schedulerNode, uReq)) {\n-          applicationAttempt.addToUpdateContainerErrors(\n-              UpdateContainerError.newInstance(\n-              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n-        }\n-      } else {\n-        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n-            + uReq.getContainerId() + \"]\");\n-      }\n+  protected void handleContainerUpdates(\n+      SchedulerApplicationAttempt appAttempt, ContainerUpdates updates) {\n+    List\u003cUpdateContainerRequest\u003e promotionRequests \u003d\n+        updates.getPromotionRequests();\n+    if (promotionRequests !\u003d null \u0026\u0026 !promotionRequests.isEmpty()) {\n+      LOG.info(\"Promotion Update requests : \" + promotionRequests);\n+      // Promotion is technically an increase request from\n+      // 0 resources to target resources.\n+      handleIncreaseRequests(appAttempt, promotionRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e increaseRequests \u003d\n+        updates.getIncreaseRequests();\n+    if (increaseRequests !\u003d null \u0026\u0026 !increaseRequests.isEmpty()) {\n+      LOG.info(\"Resource increase requests : \" + increaseRequests);\n+      handleIncreaseRequests(appAttempt, increaseRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e demotionRequests \u003d\n+        updates.getDemotionRequests();\n+    if (demotionRequests !\u003d null \u0026\u0026 !demotionRequests.isEmpty()) {\n+      LOG.info(\"Demotion Update requests : \" + demotionRequests);\n+      // Demotion is technically a decrease request from initial\n+      // to 0 resources\n+      handleDecreaseRequests(appAttempt, demotionRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e decreaseRequests \u003d\n+        updates.getDecreaseRequests();\n+    if (decreaseRequests !\u003d null \u0026\u0026 !decreaseRequests.isEmpty()) {\n+      LOG.info(\"Resource decrease requests : \" + decreaseRequests);\n+      handleDecreaseRequests(appAttempt, decreaseRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void handleContainerUpdates(\n      SchedulerApplicationAttempt appAttempt, ContainerUpdates updates) {\n    List\u003cUpdateContainerRequest\u003e promotionRequests \u003d\n        updates.getPromotionRequests();\n    if (promotionRequests !\u003d null \u0026\u0026 !promotionRequests.isEmpty()) {\n      LOG.info(\"Promotion Update requests : \" + promotionRequests);\n      // Promotion is technically an increase request from\n      // 0 resources to target resources.\n      handleIncreaseRequests(appAttempt, promotionRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e increaseRequests \u003d\n        updates.getIncreaseRequests();\n    if (increaseRequests !\u003d null \u0026\u0026 !increaseRequests.isEmpty()) {\n      LOG.info(\"Resource increase requests : \" + increaseRequests);\n      handleIncreaseRequests(appAttempt, increaseRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e demotionRequests \u003d\n        updates.getDemotionRequests();\n    if (demotionRequests !\u003d null \u0026\u0026 !demotionRequests.isEmpty()) {\n      LOG.info(\"Demotion Update requests : \" + demotionRequests);\n      // Demotion is technically a decrease request from initial\n      // to 0 resources\n      handleDecreaseRequests(appAttempt, demotionRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e decreaseRequests \u003d\n        updates.getDecreaseRequests();\n    if (decreaseRequests !\u003d null \u0026\u0026 !decreaseRequests.isEmpty()) {\n      LOG.info(\"Resource decrease requests : \" + decreaseRequests);\n      handleDecreaseRequests(appAttempt, decreaseRequests);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/02/17 11:16 PM",
          "commitNameOld": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  private void handlePromotionRequests(\n-      SchedulerApplicationAttempt applicationAttempt,\n-      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n-    for (UpdateContainerRequest uReq : updateContainerRequests) {\n-      RMContainer rmContainer \u003d\n-          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n-      // Check if this is a container update\n-      // And not in the middle of a Demotion\n-      if (rmContainer !\u003d null) {\n-        // Check if this is an executionType change request\n-        // If so, fix the rr to make it look like a normal rr\n-        // with relaxLocality\u003dfalse and numContainers\u003d1\n-        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n-            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n-\n-        // Add only if no outstanding promote requests exist.\n-        if (!applicationAttempt.getUpdateContext()\n-            .checkAndAddToOutstandingIncreases(\n-                rmContainer, schedulerNode, uReq)) {\n-          applicationAttempt.addToUpdateContainerErrors(\n-              UpdateContainerError.newInstance(\n-              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n-        }\n-      } else {\n-        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n-            + uReq.getContainerId() + \"]\");\n-      }\n+  protected void handleContainerUpdates(\n+      SchedulerApplicationAttempt appAttempt, ContainerUpdates updates) {\n+    List\u003cUpdateContainerRequest\u003e promotionRequests \u003d\n+        updates.getPromotionRequests();\n+    if (promotionRequests !\u003d null \u0026\u0026 !promotionRequests.isEmpty()) {\n+      LOG.info(\"Promotion Update requests : \" + promotionRequests);\n+      // Promotion is technically an increase request from\n+      // 0 resources to target resources.\n+      handleIncreaseRequests(appAttempt, promotionRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e increaseRequests \u003d\n+        updates.getIncreaseRequests();\n+    if (increaseRequests !\u003d null \u0026\u0026 !increaseRequests.isEmpty()) {\n+      LOG.info(\"Resource increase requests : \" + increaseRequests);\n+      handleIncreaseRequests(appAttempt, increaseRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e demotionRequests \u003d\n+        updates.getDemotionRequests();\n+    if (demotionRequests !\u003d null \u0026\u0026 !demotionRequests.isEmpty()) {\n+      LOG.info(\"Demotion Update requests : \" + demotionRequests);\n+      // Demotion is technically a decrease request from initial\n+      // to 0 resources\n+      handleDecreaseRequests(appAttempt, demotionRequests);\n+    }\n+    List\u003cUpdateContainerRequest\u003e decreaseRequests \u003d\n+        updates.getDecreaseRequests();\n+    if (decreaseRequests !\u003d null \u0026\u0026 !decreaseRequests.isEmpty()) {\n+      LOG.info(\"Resource decrease requests : \" + decreaseRequests);\n+      handleDecreaseRequests(appAttempt, decreaseRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void handleContainerUpdates(\n      SchedulerApplicationAttempt appAttempt, ContainerUpdates updates) {\n    List\u003cUpdateContainerRequest\u003e promotionRequests \u003d\n        updates.getPromotionRequests();\n    if (promotionRequests !\u003d null \u0026\u0026 !promotionRequests.isEmpty()) {\n      LOG.info(\"Promotion Update requests : \" + promotionRequests);\n      // Promotion is technically an increase request from\n      // 0 resources to target resources.\n      handleIncreaseRequests(appAttempt, promotionRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e increaseRequests \u003d\n        updates.getIncreaseRequests();\n    if (increaseRequests !\u003d null \u0026\u0026 !increaseRequests.isEmpty()) {\n      LOG.info(\"Resource increase requests : \" + increaseRequests);\n      handleIncreaseRequests(appAttempt, increaseRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e demotionRequests \u003d\n        updates.getDemotionRequests();\n    if (demotionRequests !\u003d null \u0026\u0026 !demotionRequests.isEmpty()) {\n      LOG.info(\"Demotion Update requests : \" + demotionRequests);\n      // Demotion is technically a decrease request from initial\n      // to 0 resources\n      handleDecreaseRequests(appAttempt, demotionRequests);\n    }\n    List\u003cUpdateContainerRequest\u003e decreaseRequests \u003d\n        updates.getDecreaseRequests();\n    if (decreaseRequests !\u003d null \u0026\u0026 !decreaseRequests.isEmpty()) {\n      LOG.info(\"Resource decrease requests : \" + decreaseRequests);\n      handleDecreaseRequests(appAttempt, decreaseRequests);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,29 @@\n+  private void handlePromotionRequests(\n+      SchedulerApplicationAttempt applicationAttempt,\n+      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n+    for (UpdateContainerRequest uReq : updateContainerRequests) {\n+      RMContainer rmContainer \u003d\n+          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n+      // Check if this is a container update\n+      // And not in the middle of a Demotion\n+      if (rmContainer !\u003d null) {\n+        // Check if this is an executionType change request\n+        // If so, fix the rr to make it look like a normal rr\n+        // with relaxLocality\u003dfalse and numContainers\u003d1\n+        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n+            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n+\n+        // Add only if no outstanding promote requests exist.\n+        if (!applicationAttempt.getUpdateContext()\n+            .checkAndAddToOutstandingIncreases(\n+                rmContainer, schedulerNode, uReq)) {\n+          applicationAttempt.addToUpdateContainerErrors(\n+              UpdateContainerError.newInstance(\n+              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n+        }\n+      } else {\n+        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n+            + uReq.getContainerId() + \"]\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handlePromotionRequests(\n      SchedulerApplicationAttempt applicationAttempt,\n      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n    for (UpdateContainerRequest uReq : updateContainerRequests) {\n      RMContainer rmContainer \u003d\n          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n      // Check if this is a container update\n      // And not in the middle of a Demotion\n      if (rmContainer !\u003d null) {\n        // Check if this is an executionType change request\n        // If so, fix the rr to make it look like a normal rr\n        // with relaxLocality\u003dfalse and numContainers\u003d1\n        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n\n        // Add only if no outstanding promote requests exist.\n        if (!applicationAttempt.getUpdateContext()\n            .checkAndAddToOutstandingIncreases(\n                rmContainer, schedulerNode, uReq)) {\n          applicationAttempt.addToUpdateContainerErrors(\n              UpdateContainerError.newInstance(\n              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n        }\n      } else {\n        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n            + uReq.getContainerId() + \"]\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}