{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineEntityReaderFactory.java",
  "functionName": "createMultipleEntitiesReader",
  "functionId": "createMultipleEntitiesReader___context-TimelineReaderContext__filters-TimelineEntityFilters__dataToRetrieve-TimelineDataToRetrieve",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
  "functionStartLine": 71,
  "functionEndLine": 91,
  "numCommitsSeen": 21,
  "timeTaken": 5962,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f",
    "02a9710a099fc9572122d87dd3e90c78522f5836",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
    "8ef546c1ee9fce0b171813547253374d268566ba",
    "1f710484e5b8ab4d5c67379c012004e8a4242d15",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": "Ybodychange",
    "02a9710a099fc9572122d87dd3e90c78522f5836": "Ybodychange",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ymultichange(Yparameterchange,Ybodychange)",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Ymultichange(Yparameterchange,Ybodychange)",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": "Yfilerename",
    "8ef546c1ee9fce0b171813547253374d268566ba": "Ymultichange(Yparameterchange,Ybodychange)",
    "1f710484e5b8ab4d5c67379c012004e8a4242d15": "Ymultichange(Yparameterchange,Ybodychange)",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": "Ybodychange",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(\n      TimelineReaderContext context, TimelineEntityFilters filters,\n      TimelineDataToRetrieve dataToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n      return new ApplicationEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n      return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_RUN.matches(context.getEntityType())) {\n      return new FlowRunEntityReader(context, filters, dataToRetrieve);\n    } else {\n      if (context.getDoAsUser() !\u003d null) {\n        return new SubApplicationEntityReader(context, filters, dataToRetrieve);\n      }\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(context, filters, dataToRetrieve);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java"
      }
    },
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6861. Reader API for sub application entities (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "02a9710a099fc9572122d87dd3e90c78522f5836",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,21 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(\n       TimelineReaderContext context, TimelineEntityFilters filters,\n       TimelineDataToRetrieve dataToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n       return new ApplicationEntityReader(context, filters, dataToRetrieve);\n     } else if (TimelineEntityType.\n         YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n       return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n     } else if (TimelineEntityType.\n         YARN_FLOW_RUN.matches(context.getEntityType())) {\n       return new FlowRunEntityReader(context, filters, dataToRetrieve);\n     } else {\n+      if (context.getDoAsUser() !\u003d null) {\n+        return new SubApplicationEntityReader(context, filters, dataToRetrieve);\n+      }\n       // assume we\u0027re dealing with a generic entity read\n       return new GenericEntityReader(context, filters, dataToRetrieve);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(\n      TimelineReaderContext context, TimelineEntityFilters filters,\n      TimelineDataToRetrieve dataToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n      return new ApplicationEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n      return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_RUN.matches(context.getEntityType())) {\n      return new FlowRunEntityReader(context, filters, dataToRetrieve);\n    } else {\n      if (context.getDoAsUser() !\u003d null) {\n        return new SubApplicationEntityReader(context, filters, dataToRetrieve);\n      }\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(context, filters, dataToRetrieve);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
      "extendedDetails": {}
    },
    "02a9710a099fc9572122d87dd3e90c78522f5836": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(\n       TimelineReaderContext context, TimelineEntityFilters filters,\n       TimelineDataToRetrieve dataToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n       return new ApplicationEntityReader(context, filters, dataToRetrieve);\n     } else if (TimelineEntityType.\n         YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n       return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n     } else if (TimelineEntityType.\n         YARN_FLOW_RUN.matches(context.getEntityType())) {\n       return new FlowRunEntityReader(context, filters, dataToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n-      return new GenericEntityReader(context, filters, dataToRetrieve, false);\n+      return new GenericEntityReader(context, filters, dataToRetrieve);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(\n      TimelineReaderContext context, TimelineEntityFilters filters,\n      TimelineDataToRetrieve dataToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n      return new ApplicationEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n      return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_RUN.matches(context.getEntityType())) {\n      return new FlowRunEntityReader(context, filters, dataToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(context, filters, dataToRetrieve);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
      "extendedDetails": {}
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(\n      TimelineReaderContext context, TimelineEntityFilters filters,\n      TimelineDataToRetrieve dataToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n      return new ApplicationEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n      return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_RUN.matches(context.getEntityType())) {\n      return new FlowRunEntityReader(context, filters, dataToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(context, filters, dataToRetrieve, false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java"
      }
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,18 @@\n-  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n-      String clusterId, String flowName, Long flowRunId, String appId,\n-      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n-      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n-      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n-      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n-      TimelineFilterList confs, TimelineFilterList metrics,\n-      EnumSet\u003cField\u003e fieldsToRetrieve) {\n+  public static TimelineEntityReader createMultipleEntitiesReader(\n+      TimelineReaderContext context, TimelineEntityFilters filters,\n+      TimelineDataToRetrieve dataToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n-    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n-      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n-          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n-          confs, metrics, fieldsToRetrieve);\n-    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n-      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n-          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve);\n-    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n-      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n-          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n-          confs, metrics, fieldsToRetrieve);\n+    if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n+      return new ApplicationEntityReader(context, filters, dataToRetrieve);\n+    } else if (TimelineEntityType.\n+        YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n+      return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n+    } else if (TimelineEntityType.\n+        YARN_FLOW_RUN.matches(context.getEntityType())) {\n+      return new FlowRunEntityReader(context, filters, dataToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n-      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n-          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n-          confs, metrics, fieldsToRetrieve, false);\n+      return new GenericEntityReader(context, filters, dataToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(\n      TimelineReaderContext context, TimelineEntityFilters filters,\n      TimelineDataToRetrieve dataToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n      return new ApplicationEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n      return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_RUN.matches(context.getEntityType())) {\n      return new FlowRunEntityReader(context, filters, dataToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(context, filters, dataToRetrieve, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
          "extendedDetails": {
            "oldValue": "[userId-String, clusterId-String, flowName-String, flowRunId-Long, appId-String, entityType-String, limit-Long, createdTimeBegin-Long, createdTimeEnd-Long, relatesTo-Map\u003cString,Set\u003cString\u003e\u003e, isRelatedTo-Map\u003cString,Set\u003cString\u003e\u003e, infoFilters-Map\u003cString,Object\u003e, configFilters-Map\u003cString,String\u003e, metricFilters-Set\u003cString\u003e, eventFilters-Set\u003cString\u003e, confs-TimelineFilterList, metrics-TimelineFilterList, fieldsToRetrieve-EnumSet\u003cField\u003e]",
            "newValue": "[context-TimelineReaderContext, filters-TimelineEntityFilters, dataToRetrieve-TimelineDataToRetrieve]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,18 @@\n-  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n-      String clusterId, String flowName, Long flowRunId, String appId,\n-      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n-      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n-      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n-      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n-      TimelineFilterList confs, TimelineFilterList metrics,\n-      EnumSet\u003cField\u003e fieldsToRetrieve) {\n+  public static TimelineEntityReader createMultipleEntitiesReader(\n+      TimelineReaderContext context, TimelineEntityFilters filters,\n+      TimelineDataToRetrieve dataToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n-    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n-      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n-          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n-          confs, metrics, fieldsToRetrieve);\n-    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n-      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n-          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve);\n-    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n-      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n-          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n-          confs, metrics, fieldsToRetrieve);\n+    if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n+      return new ApplicationEntityReader(context, filters, dataToRetrieve);\n+    } else if (TimelineEntityType.\n+        YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n+      return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n+    } else if (TimelineEntityType.\n+        YARN_FLOW_RUN.matches(context.getEntityType())) {\n+      return new FlowRunEntityReader(context, filters, dataToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n-      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n-          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n-          confs, metrics, fieldsToRetrieve, false);\n+      return new GenericEntityReader(context, filters, dataToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(\n      TimelineReaderContext context, TimelineEntityFilters filters,\n      TimelineDataToRetrieve dataToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(context.getEntityType())) {\n      return new ApplicationEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_ACTIVITY.matches(context.getEntityType())) {\n      return new FlowActivityEntityReader(context, filters, dataToRetrieve);\n    } else if (TimelineEntityType.\n        YARN_FLOW_RUN.matches(context.getEntityType())) {\n      return new FlowRunEntityReader(context, filters, dataToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(context, filters, dataToRetrieve, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n       String clusterId, String flowName, Long flowRunId, String appId,\n       String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n-      Long modifiedTimeBegin, Long modifiedTimeEnd,\n       Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n       Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n       Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n       TimelineFilterList confs, TimelineFilterList metrics,\n       EnumSet\u003cField\u003e fieldsToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n       return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n-          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters, confs,\n-          metrics, fieldsToRetrieve);\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n+          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n+          confs, metrics, fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n       return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n-          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters,\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n+          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n       return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n-          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters, confs,\n-          metrics, fieldsToRetrieve);\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n+          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n+          confs, metrics, fieldsToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n       return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n-          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters, confs,\n-          metrics, fieldsToRetrieve, false);\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n+          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n+          confs, metrics, fieldsToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowName, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      TimelineFilterList confs, TimelineFilterList metrics,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n          confs, metrics, fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n          confs, metrics, fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n          confs, metrics, fieldsToRetrieve, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
          "extendedDetails": {
            "oldValue": "[userId-String, clusterId-String, flowName-String, flowRunId-Long, appId-String, entityType-String, limit-Long, createdTimeBegin-Long, createdTimeEnd-Long, modifiedTimeBegin-Long, modifiedTimeEnd-Long, relatesTo-Map\u003cString,Set\u003cString\u003e\u003e, isRelatedTo-Map\u003cString,Set\u003cString\u003e\u003e, infoFilters-Map\u003cString,Object\u003e, configFilters-Map\u003cString,String\u003e, metricFilters-Set\u003cString\u003e, eventFilters-Set\u003cString\u003e, confs-TimelineFilterList, metrics-TimelineFilterList, fieldsToRetrieve-EnumSet\u003cField\u003e]",
            "newValue": "[userId-String, clusterId-String, flowName-String, flowRunId-Long, appId-String, entityType-String, limit-Long, createdTimeBegin-Long, createdTimeEnd-Long, relatesTo-Map\u003cString,Set\u003cString\u003e\u003e, isRelatedTo-Map\u003cString,Set\u003cString\u003e\u003e, infoFilters-Map\u003cString,Object\u003e, configFilters-Map\u003cString,String\u003e, metricFilters-Set\u003cString\u003e, eventFilters-Set\u003cString\u003e, confs-TimelineFilterList, metrics-TimelineFilterList, fieldsToRetrieve-EnumSet\u003cField\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n       String clusterId, String flowName, Long flowRunId, String appId,\n       String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n-      Long modifiedTimeBegin, Long modifiedTimeEnd,\n       Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n       Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n       Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n       TimelineFilterList confs, TimelineFilterList metrics,\n       EnumSet\u003cField\u003e fieldsToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n       return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n-          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters, confs,\n-          metrics, fieldsToRetrieve);\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n+          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n+          confs, metrics, fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n       return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n-          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters,\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n+          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n       return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n-          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters, confs,\n-          metrics, fieldsToRetrieve);\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n+          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n+          confs, metrics, fieldsToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n       return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n-          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n-          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters, confs,\n-          metrics, fieldsToRetrieve, false);\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n+          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n+          confs, metrics, fieldsToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowName, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      TimelineFilterList confs, TimelineFilterList metrics,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n          confs, metrics, fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n          confs, metrics, fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd, relatesTo,\n          isRelatedTo, infoFilters, configFilters, metricFilters, eventFilters,\n          confs, metrics, fieldsToRetrieve, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": {
      "type": "Yfilerename",
      "commitMessage": "YARN-4200. Refactor reader classes in storage to nest under hbase\nspecific package name. Contributed by Li Lu.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "cc16683cefe2611cf4de7819496aa54854f5394c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowName, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Long modifiedTimeBegin, Long modifiedTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      TimelineFilterList confs, TimelineFilterList metrics,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve, false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReaderFactory.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReaderFactory.java"
      }
    },
    "8ef546c1ee9fce0b171813547253374d268566ba": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n-      String clusterId, String flowId, Long flowRunId, String appId,\n+      String clusterId, String flowName, Long flowRunId, String appId,\n       String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n       Long modifiedTimeBegin, Long modifiedTimeEnd,\n       Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n       Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n       Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n       TimelineFilterList confs, TimelineFilterList metrics,\n       EnumSet\u003cField\u003e fieldsToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n-      return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n+      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters, confs,\n           metrics, fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n-      return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n+      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n-      return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n+      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters, confs,\n           metrics, fieldsToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n-      return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n+      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters, confs,\n           metrics, fieldsToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowName, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Long modifiedTimeBegin, Long modifiedTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      TimelineFilterList confs, TimelineFilterList metrics,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReaderFactory.java",
          "extendedDetails": {
            "oldValue": "[userId-String, clusterId-String, flowId-String, flowRunId-Long, appId-String, entityType-String, limit-Long, createdTimeBegin-Long, createdTimeEnd-Long, modifiedTimeBegin-Long, modifiedTimeEnd-Long, relatesTo-Map\u003cString,Set\u003cString\u003e\u003e, isRelatedTo-Map\u003cString,Set\u003cString\u003e\u003e, infoFilters-Map\u003cString,Object\u003e, configFilters-Map\u003cString,String\u003e, metricFilters-Set\u003cString\u003e, eventFilters-Set\u003cString\u003e, confs-TimelineFilterList, metrics-TimelineFilterList, fieldsToRetrieve-EnumSet\u003cField\u003e]",
            "newValue": "[userId-String, clusterId-String, flowName-String, flowRunId-Long, appId-String, entityType-String, limit-Long, createdTimeBegin-Long, createdTimeEnd-Long, modifiedTimeBegin-Long, modifiedTimeEnd-Long, relatesTo-Map\u003cString,Set\u003cString\u003e\u003e, isRelatedTo-Map\u003cString,Set\u003cString\u003e\u003e, infoFilters-Map\u003cString,Object\u003e, configFilters-Map\u003cString,String\u003e, metricFilters-Set\u003cString\u003e, eventFilters-Set\u003cString\u003e, confs-TimelineFilterList, metrics-TimelineFilterList, fieldsToRetrieve-EnumSet\u003cField\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n-      String clusterId, String flowId, Long flowRunId, String appId,\n+      String clusterId, String flowName, Long flowRunId, String appId,\n       String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n       Long modifiedTimeBegin, Long modifiedTimeEnd,\n       Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n       Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n       Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n       TimelineFilterList confs, TimelineFilterList metrics,\n       EnumSet\u003cField\u003e fieldsToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n-      return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n+      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters, confs,\n           metrics, fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n-      return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n+      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n-      return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n+      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters, confs,\n           metrics, fieldsToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n-      return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n+      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters, confs,\n           metrics, fieldsToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowName, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Long modifiedTimeBegin, Long modifiedTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      TimelineFilterList confs, TimelineFilterList metrics,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowName, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReaderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "1f710484e5b8ab4d5c67379c012004e8a4242d15": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3862. Support for fetching specific configs and metrics based on prefixes (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3862. Support for fetching specific configs and metrics based on prefixes (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n       String clusterId, String flowId, Long flowRunId, String appId,\n       String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n       Long modifiedTimeBegin, Long modifiedTimeEnd,\n       Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n       Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n       Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n+      TimelineFilterList confs, TimelineFilterList metrics,\n       EnumSet\u003cField\u003e fieldsToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n       return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve);\n+          infoFilters, configFilters, metricFilters, eventFilters, confs,\n+          metrics, fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n       return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n       return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve);\n+          infoFilters, configFilters, metricFilters, eventFilters, confs,\n+          metrics, fieldsToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n       return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve, false);\n+          infoFilters, configFilters, metricFilters, eventFilters, confs,\n+          metrics, fieldsToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowId, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Long modifiedTimeBegin, Long modifiedTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      TimelineFilterList confs, TimelineFilterList metrics,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReaderFactory.java",
          "extendedDetails": {
            "oldValue": "[userId-String, clusterId-String, flowId-String, flowRunId-Long, appId-String, entityType-String, limit-Long, createdTimeBegin-Long, createdTimeEnd-Long, modifiedTimeBegin-Long, modifiedTimeEnd-Long, relatesTo-Map\u003cString,Set\u003cString\u003e\u003e, isRelatedTo-Map\u003cString,Set\u003cString\u003e\u003e, infoFilters-Map\u003cString,Object\u003e, configFilters-Map\u003cString,String\u003e, metricFilters-Set\u003cString\u003e, eventFilters-Set\u003cString\u003e, fieldsToRetrieve-EnumSet\u003cField\u003e]",
            "newValue": "[userId-String, clusterId-String, flowId-String, flowRunId-Long, appId-String, entityType-String, limit-Long, createdTimeBegin-Long, createdTimeEnd-Long, modifiedTimeBegin-Long, modifiedTimeEnd-Long, relatesTo-Map\u003cString,Set\u003cString\u003e\u003e, isRelatedTo-Map\u003cString,Set\u003cString\u003e\u003e, infoFilters-Map\u003cString,Object\u003e, configFilters-Map\u003cString,String\u003e, metricFilters-Set\u003cString\u003e, eventFilters-Set\u003cString\u003e, confs-TimelineFilterList, metrics-TimelineFilterList, fieldsToRetrieve-EnumSet\u003cField\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3862. Support for fetching specific configs and metrics based on prefixes (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n       String clusterId, String flowId, Long flowRunId, String appId,\n       String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n       Long modifiedTimeBegin, Long modifiedTimeEnd,\n       Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n       Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n       Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n+      TimelineFilterList confs, TimelineFilterList metrics,\n       EnumSet\u003cField\u003e fieldsToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n       return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve);\n+          infoFilters, configFilters, metricFilters, eventFilters, confs,\n+          metrics, fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n       return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n       return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve);\n+          infoFilters, configFilters, metricFilters, eventFilters, confs,\n+          metrics, fieldsToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n       return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n-          infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve, false);\n+          infoFilters, configFilters, metricFilters, eventFilters, confs,\n+          metrics, fieldsToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowId, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Long modifiedTimeBegin, Long modifiedTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      TimelineFilterList confs, TimelineFilterList metrics,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters, confs,\n          metrics, fieldsToRetrieve, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReaderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3864. Implement support for querying single app and all apps for a flow run (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
      "commitAuthorOld": "Vrushali",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n       String clusterId, String flowId, Long flowRunId, String appId,\n       String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n       Long modifiedTimeBegin, Long modifiedTimeEnd,\n       Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n       Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n       Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n       EnumSet\u003cField\u003e fieldsToRetrieve) {\n     // currently the types that are handled separate from the generic entity\n     // table are application, flow run, and flow activity entities\n     if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n       return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n       return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n       return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters,\n           fieldsToRetrieve);\n     } else {\n       // assume we\u0027re dealing with a generic entity read\n       return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n           appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n           modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n           infoFilters, configFilters, metricFilters, eventFilters,\n-          fieldsToRetrieve);\n+          fieldsToRetrieve, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowId, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Long modifiedTimeBegin, Long modifiedTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve, false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReaderFactory.java",
      "extendedDetails": {}
    },
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
      "commitAuthor": "Vrushali",
      "diff": "@@ -0,0 +1,37 @@\n+  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n+      String clusterId, String flowId, Long flowRunId, String appId,\n+      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n+      Long modifiedTimeBegin, Long modifiedTimeEnd,\n+      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n+      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n+      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n+      EnumSet\u003cField\u003e fieldsToRetrieve) {\n+    // currently the types that are handled separate from the generic entity\n+    // table are application, flow run, and flow activity entities\n+    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n+      return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n+          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n+          infoFilters, configFilters, metricFilters, eventFilters,\n+          fieldsToRetrieve);\n+    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n+      return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n+          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n+          infoFilters, configFilters, metricFilters, eventFilters,\n+          fieldsToRetrieve);\n+    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n+      return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n+          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n+          infoFilters, configFilters, metricFilters, eventFilters,\n+          fieldsToRetrieve);\n+    } else {\n+      // assume we\u0027re dealing with a generic entity read\n+      return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n+          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n+          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n+          infoFilters, configFilters, metricFilters, eventFilters,\n+          fieldsToRetrieve);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static TimelineEntityReader createMultipleEntitiesReader(String userId,\n      String clusterId, String flowId, Long flowRunId, String appId,\n      String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd,\n      Long modifiedTimeBegin, Long modifiedTimeEnd,\n      Map\u003cString, Set\u003cString\u003e\u003e relatesTo, Map\u003cString, Set\u003cString\u003e\u003e isRelatedTo,\n      Map\u003cString, Object\u003e infoFilters, Map\u003cString, String\u003e configFilters,\n      Set\u003cString\u003e metricFilters, Set\u003cString\u003e eventFilters,\n      EnumSet\u003cField\u003e fieldsToRetrieve) {\n    // currently the types that are handled separate from the generic entity\n    // table are application, flow run, and flow activity entities\n    if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\n      return new ApplicationEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_ACTIVITY.matches(entityType)) {\n      return new FlowActivityEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else if (TimelineEntityType.YARN_FLOW_RUN.matches(entityType)) {\n      return new FlowRunEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    } else {\n      // assume we\u0027re dealing with a generic entity read\n      return new GenericEntityReader(userId, clusterId, flowId, flowRunId,\n          appId, entityType, limit, createdTimeBegin, createdTimeEnd,\n          modifiedTimeBegin, modifiedTimeEnd, relatesTo, isRelatedTo,\n          infoFilters, configFilters, metricFilters, eventFilters,\n          fieldsToRetrieve);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReaderFactory.java"
    }
  }
}