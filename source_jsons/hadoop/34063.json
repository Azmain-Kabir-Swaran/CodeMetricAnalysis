{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsCpuResourceHandlerImpl.java",
  "functionName": "updateContainer",
  "functionId": "updateContainer___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java",
  "functionStartLine": 206,
  "functionEndLine": 246,
  "numCommitsSeen": 6,
  "timeTaken": 1963,
  "changeHistory": [
    "6341c3a437489737a9c4bf0911b218b0023d8dd9"
  ],
  "changeHistoryShort": {
    "6341c3a437489737a9c4bf0911b218b0023d8dd9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6341c3a437489737a9c4bf0911b218b0023d8dd9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7715. Support NM promotion/demotion of running containers. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "10/05/18 11:01 AM",
      "commitName": "6341c3a437489737a9c4bf0911b218b0023d8dd9",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,41 @@\n+  public List\u003cPrivilegedOperation\u003e updateContainer(Container container)\n+      throws ResourceHandlerException {\n+    Resource containerResource \u003d container.getResource();\n+    String cgroupId \u003d container.getContainerId().toString();\n+    File cgroup \u003d new File(cGroupsHandler.getPathForCGroup(CPU, cgroupId));\n+    if (cgroup.exists()) {\n+      try {\n+        int containerVCores \u003d containerResource.getVirtualCores();\n+        ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n+        if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n+            ExecutionType.OPPORTUNISTIC) {\n+          cGroupsHandler\n+              .updateCGroupParam(CPU, cgroupId,\n+                  CGroupsHandler.CGROUP_CPU_SHARES,\n+                  String.valueOf(CPU_DEFAULT_WEIGHT_OPPORTUNISTIC));\n+        } else {\n+          int cpuShares \u003d CPU_DEFAULT_WEIGHT * containerVCores;\n+          cGroupsHandler\n+              .updateCGroupParam(CPU, cgroupId,\n+                  CGroupsHandler.CGROUP_CPU_SHARES,\n+                  String.valueOf(cpuShares));\n+        }\n+        if (strictResourceUsageMode) {\n+          if (nodeVCores !\u003d containerVCores) {\n+            float containerCPU \u003d\n+                (containerVCores * yarnProcessors) / (float) nodeVCores;\n+            int[] limits \u003d getOverallLimits(containerCPU);\n+            cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n+                CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\n+            cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n+                CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\n+          }\n+        }\n+      } catch (ResourceHandlerException re) {\n+        cGroupsHandler.deleteCGroup(CPU, cgroupId);\n+        LOG.warn(\"Could not update cgroup for container\", re);\n+        throw re;\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e updateContainer(Container container)\n      throws ResourceHandlerException {\n    Resource containerResource \u003d container.getResource();\n    String cgroupId \u003d container.getContainerId().toString();\n    File cgroup \u003d new File(cGroupsHandler.getPathForCGroup(CPU, cgroupId));\n    if (cgroup.exists()) {\n      try {\n        int containerVCores \u003d containerResource.getVirtualCores();\n        ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n        if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n            ExecutionType.OPPORTUNISTIC) {\n          cGroupsHandler\n              .updateCGroupParam(CPU, cgroupId,\n                  CGroupsHandler.CGROUP_CPU_SHARES,\n                  String.valueOf(CPU_DEFAULT_WEIGHT_OPPORTUNISTIC));\n        } else {\n          int cpuShares \u003d CPU_DEFAULT_WEIGHT * containerVCores;\n          cGroupsHandler\n              .updateCGroupParam(CPU, cgroupId,\n                  CGroupsHandler.CGROUP_CPU_SHARES,\n                  String.valueOf(cpuShares));\n        }\n        if (strictResourceUsageMode) {\n          if (nodeVCores !\u003d containerVCores) {\n            float containerCPU \u003d\n                (containerVCores * yarnProcessors) / (float) nodeVCores;\n            int[] limits \u003d getOverallLimits(containerCPU);\n            cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n                CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\n            cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n                CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\n          }\n        }\n      } catch (ResourceHandlerException re) {\n        cGroupsHandler.deleteCGroup(CPU, cgroupId);\n        LOG.warn(\"Could not update cgroup for container\", re);\n        throw re;\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java"
    }
  }
}