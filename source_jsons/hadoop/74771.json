{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKDelegationTokenSecretManager.java",
  "functionName": "addOrUpdateToken",
  "functionId": "addOrUpdateToken___ident-TokenIdent__info-DelegationTokenInformation__isUpdate-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java",
  "functionStartLine": 881,
  "functionEndLine": 906,
  "numCommitsSeen": 16,
  "timeTaken": 1577,
  "changeHistory": [
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
    "db45f047ab6b19d8a3e7752bb2cde10827cd8dad",
    "db890eef3208cc557476fa510f7a253ba22bc68a"
  ],
  "changeHistoryShort": {
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db": "Ybodychange",
    "db45f047ab6b19d8a3e7752bb2cde10827cd8dad": "Ybodychange",
    "db890eef3208cc557476fa510f7a253ba22bc68a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12940. Fix warnings from Spotbugs in hadoop-common.\n",
      "commitDate": "22/06/17 6:28 PM",
      "commitName": "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "03/02/17 5:13 PM",
      "commitNameOld": "ba75bc759334c8987e5f7dd4b21d025f0cccbde7",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 139.01,
      "commitsBetweenForRepo": 761,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,26 @@\n   private void addOrUpdateToken(TokenIdent ident,\n       DelegationTokenInformation info, boolean isUpdate) throws Exception {\n     String nodeCreatePath \u003d\n         getNodePath(ZK_DTSM_TOKENS_ROOT, DELEGATION_TOKEN_PREFIX\n             + ident.getSequenceNumber());\n-    ByteArrayOutputStream tokenOs \u003d new ByteArrayOutputStream();\n-    DataOutputStream tokenOut \u003d new DataOutputStream(tokenOs);\n-    ByteArrayOutputStream seqOs \u003d new ByteArrayOutputStream();\n \n-    try {\n+    try (ByteArrayOutputStream tokenOs \u003d new ByteArrayOutputStream();\n+         DataOutputStream tokenOut \u003d new DataOutputStream(tokenOs)) {\n       ident.write(tokenOut);\n       tokenOut.writeLong(info.getRenewDate());\n       tokenOut.writeInt(info.getPassword().length);\n       tokenOut.write(info.getPassword());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug((isUpdate ? \"Updating \" : \"Storing \")\n             + \"ZKDTSMDelegationToken_\" +\n             ident.getSequenceNumber());\n       }\n       if (isUpdate) {\n         zkClient.setData().forPath(nodeCreatePath, tokenOs.toByteArray())\n             .setVersion(-1);\n       } else {\n         zkClient.create().withMode(CreateMode.PERSISTENT)\n             .forPath(nodeCreatePath, tokenOs.toByteArray());\n       }\n-    } finally {\n-      seqOs.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addOrUpdateToken(TokenIdent ident,\n      DelegationTokenInformation info, boolean isUpdate) throws Exception {\n    String nodeCreatePath \u003d\n        getNodePath(ZK_DTSM_TOKENS_ROOT, DELEGATION_TOKEN_PREFIX\n            + ident.getSequenceNumber());\n\n    try (ByteArrayOutputStream tokenOs \u003d new ByteArrayOutputStream();\n         DataOutputStream tokenOut \u003d new DataOutputStream(tokenOs)) {\n      ident.write(tokenOut);\n      tokenOut.writeLong(info.getRenewDate());\n      tokenOut.writeInt(info.getPassword().length);\n      tokenOut.write(info.getPassword());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug((isUpdate ? \"Updating \" : \"Storing \")\n            + \"ZKDTSMDelegationToken_\" +\n            ident.getSequenceNumber());\n      }\n      if (isUpdate) {\n        zkClient.setData().forPath(nodeCreatePath, tokenOs.toByteArray())\n            .setVersion(-1);\n      } else {\n        zkClient.create().withMode(CreateMode.PERSISTENT)\n            .forPath(nodeCreatePath, tokenOs.toByteArray());\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "db45f047ab6b19d8a3e7752bb2cde10827cd8dad": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11170. ZKDelegationTokenSecretManager fails to renewToken created by a peer. (Arun Suresh and Gregory Chanan via kasha)\n",
      "commitDate": "23/10/14 5:04 PM",
      "commitName": "db45f047ab6b19d8a3e7752bb2cde10827cd8dad",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "22/10/14 2:26 PM",
      "commitNameOld": "70719e5c62f32836914bea88e1ddd99c0ed009e1",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void addOrUpdateToken(TokenIdent ident,\n       DelegationTokenInformation info, boolean isUpdate) throws Exception {\n     String nodeCreatePath \u003d\n         getNodePath(ZK_DTSM_TOKENS_ROOT, DELEGATION_TOKEN_PREFIX\n             + ident.getSequenceNumber());\n     ByteArrayOutputStream tokenOs \u003d new ByteArrayOutputStream();\n     DataOutputStream tokenOut \u003d new DataOutputStream(tokenOs);\n     ByteArrayOutputStream seqOs \u003d new ByteArrayOutputStream();\n \n     try {\n       ident.write(tokenOut);\n       tokenOut.writeLong(info.getRenewDate());\n       tokenOut.writeInt(info.getPassword().length);\n       tokenOut.write(info.getPassword());\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug((isUpdate ? \"Storing \" : \"Updating \")\n+        LOG.debug((isUpdate ? \"Updating \" : \"Storing \")\n             + \"ZKDTSMDelegationToken_\" +\n             ident.getSequenceNumber());\n       }\n       if (isUpdate) {\n         zkClient.setData().forPath(nodeCreatePath, tokenOs.toByteArray())\n             .setVersion(-1);\n       } else {\n         zkClient.create().withMode(CreateMode.PERSISTENT)\n             .forPath(nodeCreatePath, tokenOs.toByteArray());\n       }\n     } finally {\n       seqOs.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addOrUpdateToken(TokenIdent ident,\n      DelegationTokenInformation info, boolean isUpdate) throws Exception {\n    String nodeCreatePath \u003d\n        getNodePath(ZK_DTSM_TOKENS_ROOT, DELEGATION_TOKEN_PREFIX\n            + ident.getSequenceNumber());\n    ByteArrayOutputStream tokenOs \u003d new ByteArrayOutputStream();\n    DataOutputStream tokenOut \u003d new DataOutputStream(tokenOs);\n    ByteArrayOutputStream seqOs \u003d new ByteArrayOutputStream();\n\n    try {\n      ident.write(tokenOut);\n      tokenOut.writeLong(info.getRenewDate());\n      tokenOut.writeInt(info.getPassword().length);\n      tokenOut.write(info.getPassword());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug((isUpdate ? \"Updating \" : \"Storing \")\n            + \"ZKDTSMDelegationToken_\" +\n            ident.getSequenceNumber());\n      }\n      if (isUpdate) {\n        zkClient.setData().forPath(nodeCreatePath, tokenOs.toByteArray())\n            .setVersion(-1);\n      } else {\n        zkClient.create().withMode(CreateMode.PERSISTENT)\n            .forPath(nodeCreatePath, tokenOs.toByteArray());\n      }\n    } finally {\n      seqOs.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "db890eef3208cc557476fa510f7a253ba22bc68a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11017. KMS delegation token secret manager should be able to use zookeeper as store. (asuresh via tucu)\n",
      "commitDate": "20/09/14 8:21 AM",
      "commitName": "db890eef3208cc557476fa510f7a253ba22bc68a",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,30 @@\n+  private void addOrUpdateToken(TokenIdent ident,\n+      DelegationTokenInformation info, boolean isUpdate) throws Exception {\n+    String nodeCreatePath \u003d\n+        getNodePath(ZK_DTSM_TOKENS_ROOT, DELEGATION_TOKEN_PREFIX\n+            + ident.getSequenceNumber());\n+    ByteArrayOutputStream tokenOs \u003d new ByteArrayOutputStream();\n+    DataOutputStream tokenOut \u003d new DataOutputStream(tokenOs);\n+    ByteArrayOutputStream seqOs \u003d new ByteArrayOutputStream();\n+\n+    try {\n+      ident.write(tokenOut);\n+      tokenOut.writeLong(info.getRenewDate());\n+      tokenOut.writeInt(info.getPassword().length);\n+      tokenOut.write(info.getPassword());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug((isUpdate ? \"Storing \" : \"Updating \")\n+            + \"ZKDTSMDelegationToken_\" +\n+            ident.getSequenceNumber());\n+      }\n+      if (isUpdate) {\n+        zkClient.setData().forPath(nodeCreatePath, tokenOs.toByteArray())\n+            .setVersion(-1);\n+      } else {\n+        zkClient.create().withMode(CreateMode.PERSISTENT)\n+            .forPath(nodeCreatePath, tokenOs.toByteArray());\n+      }\n+    } finally {\n+      seqOs.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addOrUpdateToken(TokenIdent ident,\n      DelegationTokenInformation info, boolean isUpdate) throws Exception {\n    String nodeCreatePath \u003d\n        getNodePath(ZK_DTSM_TOKENS_ROOT, DELEGATION_TOKEN_PREFIX\n            + ident.getSequenceNumber());\n    ByteArrayOutputStream tokenOs \u003d new ByteArrayOutputStream();\n    DataOutputStream tokenOut \u003d new DataOutputStream(tokenOs);\n    ByteArrayOutputStream seqOs \u003d new ByteArrayOutputStream();\n\n    try {\n      ident.write(tokenOut);\n      tokenOut.writeLong(info.getRenewDate());\n      tokenOut.writeInt(info.getPassword().length);\n      tokenOut.write(info.getPassword());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug((isUpdate ? \"Storing \" : \"Updating \")\n            + \"ZKDTSMDelegationToken_\" +\n            ident.getSequenceNumber());\n      }\n      if (isUpdate) {\n        zkClient.setData().forPath(nodeCreatePath, tokenOs.toByteArray())\n            .setVersion(-1);\n      } else {\n        zkClient.create().withMode(CreateMode.PERSISTENT)\n            .forPath(nodeCreatePath, tokenOs.toByteArray());\n      }\n    } finally {\n      seqOs.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java"
    }
  }
}