{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CuratorService.java",
  "functionName": "createCurator",
  "functionId": "createCurator",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
  "functionStartLine": 254,
  "functionEndLine": 299,
  "numCommitsSeen": 10,
  "timeTaken": 2154,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "7280c5af82d36a9be15448293210d871f680f55e",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "6f43491c0343cfef36e9be5dfd06447cf2fee377",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "7280c5af82d36a9be15448293210d871f680f55e": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ybodychange",
    "6f43491c0343cfef36e9be5dfd06447cf2fee377": "Ybodychange",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private CuratorFramework createCurator() throws IOException {\n    Configuration conf \u003d getConfig();\n    createEnsembleProvider();\n    int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n        DEFAULT_ZK_SESSION_TIMEOUT);\n    int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n        DEFAULT_ZK_CONNECTION_TIMEOUT);\n    int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n        DEFAULT_ZK_RETRY_TIMES);\n    int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n        DEFAULT_ZK_RETRY_INTERVAL);\n    int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n        DEFAULT_ZK_RETRY_CEILING);\n\n    LOG.info(\"Creating CuratorService with connection {}\",\n          connectionDescription);\n\n    CuratorFramework framework;\n\n    synchronized (CuratorService.class) {\n      // set the security options\n\n      // build up the curator itself\n      CuratorFrameworkFactory.Builder builder \u003d\n          CuratorFrameworkFactory.builder();\n      builder.ensembleProvider(ensembleProvider)\n          .connectionTimeoutMs(connectionTimeout)\n          .sessionTimeoutMs(sessionTimeout)\n\n          .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n              retryCeiling,\n              retryTimes));\n\n      // set up the builder AND any JVM context\n      registrySecurity.applySecurityEnvironment(builder);\n      //log them\n      securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(securityConnectionDiagnostics);\n      }\n      framework \u003d builder.build();\n      framework.start();\n    }\n\n    return framework;\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java"
      }
    },
    "7280c5af82d36a9be15448293210d871f680f55e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7940. Fixed a bug in ServiceAM ZooKeeper initialization.\n           (Contributed by Billie Rinaldi)\n",
      "commitDate": "20/02/18 11:12 AM",
      "commitName": "7280c5af82d36a9be15448293210d871f680f55e",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 77.96,
      "commitsBetweenForRepo": 462,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   private CuratorFramework createCurator() throws IOException {\n     Configuration conf \u003d getConfig();\n     createEnsembleProvider();\n     int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n         DEFAULT_ZK_SESSION_TIMEOUT);\n     int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n         DEFAULT_ZK_CONNECTION_TIMEOUT);\n     int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n         DEFAULT_ZK_RETRY_TIMES);\n     int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n         DEFAULT_ZK_RETRY_INTERVAL);\n     int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n         DEFAULT_ZK_RETRY_CEILING);\n \n     LOG.info(\"Creating CuratorService with connection {}\",\n           connectionDescription);\n \n     CuratorFramework framework;\n \n     synchronized (CuratorService.class) {\n       // set the security options\n \n       // build up the curator itself\n       CuratorFrameworkFactory.Builder builder \u003d\n           CuratorFrameworkFactory.builder();\n       builder.ensembleProvider(ensembleProvider)\n           .connectionTimeoutMs(connectionTimeout)\n           .sessionTimeoutMs(sessionTimeout)\n \n           .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n               retryCeiling,\n               retryTimes));\n \n       // set up the builder AND any JVM context\n       registrySecurity.applySecurityEnvironment(builder);\n       //log them\n       securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(securityConnectionDiagnostics);\n+      }\n       framework \u003d builder.build();\n       framework.start();\n     }\n \n     return framework;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CuratorFramework createCurator() throws IOException {\n    Configuration conf \u003d getConfig();\n    createEnsembleProvider();\n    int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n        DEFAULT_ZK_SESSION_TIMEOUT);\n    int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n        DEFAULT_ZK_CONNECTION_TIMEOUT);\n    int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n        DEFAULT_ZK_RETRY_TIMES);\n    int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n        DEFAULT_ZK_RETRY_INTERVAL);\n    int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n        DEFAULT_ZK_RETRY_CEILING);\n\n    LOG.info(\"Creating CuratorService with connection {}\",\n          connectionDescription);\n\n    CuratorFramework framework;\n\n    synchronized (CuratorService.class) {\n      // set the security options\n\n      // build up the curator itself\n      CuratorFrameworkFactory.Builder builder \u003d\n          CuratorFrameworkFactory.builder();\n      builder.ensembleProvider(ensembleProvider)\n          .connectionTimeoutMs(connectionTimeout)\n          .sessionTimeoutMs(sessionTimeout)\n\n          .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n              retryCeiling,\n              retryTimes));\n\n      // set up the builder AND any JVM context\n      registrySecurity.applySecurityEnvironment(builder);\n      //log them\n      securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(securityConnectionDiagnostics);\n      }\n      framework \u003d builder.build();\n      framework.start();\n    }\n\n    return framework;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "f934f62fc71b4776e88f86d4254de0ea12147511",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   private CuratorFramework createCurator() throws IOException {\n     Configuration conf \u003d getConfig();\n     createEnsembleProvider();\n     int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n         DEFAULT_ZK_SESSION_TIMEOUT);\n     int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n         DEFAULT_ZK_CONNECTION_TIMEOUT);\n     int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n         DEFAULT_ZK_RETRY_TIMES);\n     int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n         DEFAULT_ZK_RETRY_INTERVAL);\n     int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n         DEFAULT_ZK_RETRY_CEILING);\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Creating CuratorService with connection {}\",\n+    LOG.info(\"Creating CuratorService with connection {}\",\n           connectionDescription);\n-    }\n+\n     CuratorFramework framework;\n \n     synchronized (CuratorService.class) {\n       // set the security options\n \n       // build up the curator itself\n       CuratorFrameworkFactory.Builder builder \u003d\n           CuratorFrameworkFactory.builder();\n       builder.ensembleProvider(ensembleProvider)\n           .connectionTimeoutMs(connectionTimeout)\n           .sessionTimeoutMs(sessionTimeout)\n \n           .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n               retryCeiling,\n               retryTimes));\n \n       // set up the builder AND any JVM context\n       registrySecurity.applySecurityEnvironment(builder);\n       //log them\n       securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n       framework \u003d builder.build();\n       framework.start();\n     }\n \n     return framework;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CuratorFramework createCurator() throws IOException {\n    Configuration conf \u003d getConfig();\n    createEnsembleProvider();\n    int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n        DEFAULT_ZK_SESSION_TIMEOUT);\n    int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n        DEFAULT_ZK_CONNECTION_TIMEOUT);\n    int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n        DEFAULT_ZK_RETRY_TIMES);\n    int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n        DEFAULT_ZK_RETRY_INTERVAL);\n    int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n        DEFAULT_ZK_RETRY_CEILING);\n\n    LOG.info(\"Creating CuratorService with connection {}\",\n          connectionDescription);\n\n    CuratorFramework framework;\n\n    synchronized (CuratorService.class) {\n      // set the security options\n\n      // build up the curator itself\n      CuratorFrameworkFactory.Builder builder \u003d\n          CuratorFrameworkFactory.builder();\n      builder.ensembleProvider(ensembleProvider)\n          .connectionTimeoutMs(connectionTimeout)\n          .sessionTimeoutMs(sessionTimeout)\n\n          .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n              retryCeiling,\n              retryTimes));\n\n      // set up the builder AND any JVM context\n      registrySecurity.applySecurityEnvironment(builder);\n      //log them\n      securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n      framework \u003d builder.build();\n      framework.start();\n    }\n\n    return framework;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
      "extendedDetails": {}
    },
    "6f43491c0343cfef36e9be5dfd06447cf2fee377": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2689 TestSecureRMRegistryOperations failing on windows: secure ZK won\u0027t start\n",
      "commitDate": "16/10/14 2:22 PM",
      "commitName": "6f43491c0343cfef36e9be5dfd06447cf2fee377",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "08/10/14 1:02 PM",
      "commitNameOld": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,43 @@\n   private CuratorFramework createCurator() throws IOException {\n     Configuration conf \u003d getConfig();\n     createEnsembleProvider();\n     int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n         DEFAULT_ZK_SESSION_TIMEOUT);\n     int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n         DEFAULT_ZK_CONNECTION_TIMEOUT);\n     int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n         DEFAULT_ZK_RETRY_TIMES);\n     int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n         DEFAULT_ZK_RETRY_INTERVAL);\n     int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n         DEFAULT_ZK_RETRY_CEILING);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Creating CuratorService with connection {}\",\n           connectionDescription);\n     }\n     CuratorFramework framework;\n \n     synchronized (CuratorService.class) {\n       // set the security options\n \n-      //log them\n-      securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n-\n       // build up the curator itself\n       CuratorFrameworkFactory.Builder builder \u003d CuratorFrameworkFactory.builder();\n       builder.ensembleProvider(ensembleProvider)\n        .connectionTimeoutMs(connectionTimeout)\n        .sessionTimeoutMs(sessionTimeout)\n \n        .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n            retryCeiling,\n            retryTimes));\n \n       // set up the builder AND any JVM context\n       registrySecurity.applySecurityEnvironment(builder);\n-\n+      //log them\n+      securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n       framework \u003d builder.build();\n       framework.start();\n     }\n \n     return framework;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CuratorFramework createCurator() throws IOException {\n    Configuration conf \u003d getConfig();\n    createEnsembleProvider();\n    int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n        DEFAULT_ZK_SESSION_TIMEOUT);\n    int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n        DEFAULT_ZK_CONNECTION_TIMEOUT);\n    int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n        DEFAULT_ZK_RETRY_TIMES);\n    int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n        DEFAULT_ZK_RETRY_INTERVAL);\n    int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n        DEFAULT_ZK_RETRY_CEILING);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Creating CuratorService with connection {}\",\n          connectionDescription);\n    }\n    CuratorFramework framework;\n\n    synchronized (CuratorService.class) {\n      // set the security options\n\n      // build up the curator itself\n      CuratorFrameworkFactory.Builder builder \u003d CuratorFrameworkFactory.builder();\n      builder.ensembleProvider(ensembleProvider)\n       .connectionTimeoutMs(connectionTimeout)\n       .sessionTimeoutMs(sessionTimeout)\n\n       .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n           retryCeiling,\n           retryTimes));\n\n      // set up the builder AND any JVM context\n      registrySecurity.applySecurityEnvironment(builder);\n      //log them\n      securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n      framework \u003d builder.build();\n      framework.start();\n    }\n\n    return framework;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java",
      "extendedDetails": {}
    },
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-913 service registry: YARN-2652 add hadoop-yarn-registry package under hadoop-yarn\n",
      "commitDate": "08/10/14 1:02 PM",
      "commitName": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,45 @@\n+  private CuratorFramework createCurator() throws IOException {\n+    Configuration conf \u003d getConfig();\n+    createEnsembleProvider();\n+    int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n+        DEFAULT_ZK_SESSION_TIMEOUT);\n+    int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n+        DEFAULT_ZK_CONNECTION_TIMEOUT);\n+    int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n+        DEFAULT_ZK_RETRY_TIMES);\n+    int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n+        DEFAULT_ZK_RETRY_INTERVAL);\n+    int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n+        DEFAULT_ZK_RETRY_CEILING);\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Creating CuratorService with connection {}\",\n+          connectionDescription);\n+    }\n+    CuratorFramework framework;\n+\n+    synchronized (CuratorService.class) {\n+      // set the security options\n+\n+      //log them\n+      securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n+\n+      // build up the curator itself\n+      CuratorFrameworkFactory.Builder builder \u003d CuratorFrameworkFactory.builder();\n+      builder.ensembleProvider(ensembleProvider)\n+       .connectionTimeoutMs(connectionTimeout)\n+       .sessionTimeoutMs(sessionTimeout)\n+\n+       .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n+           retryCeiling,\n+           retryTimes));\n+\n+      // set up the builder AND any JVM context\n+      registrySecurity.applySecurityEnvironment(builder);\n+\n+      framework \u003d builder.build();\n+      framework.start();\n+    }\n+\n+    return framework;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CuratorFramework createCurator() throws IOException {\n    Configuration conf \u003d getConfig();\n    createEnsembleProvider();\n    int sessionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,\n        DEFAULT_ZK_SESSION_TIMEOUT);\n    int connectionTimeout \u003d conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,\n        DEFAULT_ZK_CONNECTION_TIMEOUT);\n    int retryTimes \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,\n        DEFAULT_ZK_RETRY_TIMES);\n    int retryInterval \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,\n        DEFAULT_ZK_RETRY_INTERVAL);\n    int retryCeiling \u003d conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,\n        DEFAULT_ZK_RETRY_CEILING);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Creating CuratorService with connection {}\",\n          connectionDescription);\n    }\n    CuratorFramework framework;\n\n    synchronized (CuratorService.class) {\n      // set the security options\n\n      //log them\n      securityConnectionDiagnostics \u003d buildSecurityDiagnostics();\n\n      // build up the curator itself\n      CuratorFrameworkFactory.Builder builder \u003d CuratorFrameworkFactory.builder();\n      builder.ensembleProvider(ensembleProvider)\n       .connectionTimeoutMs(connectionTimeout)\n       .sessionTimeoutMs(sessionTimeout)\n\n       .retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,\n           retryCeiling,\n           retryTimes));\n\n      // set up the builder AND any JVM context\n      registrySecurity.applySecurityEnvironment(builder);\n\n      framework \u003d builder.build();\n      framework.start();\n    }\n\n    return framework;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/CuratorService.java"
    }
  }
}