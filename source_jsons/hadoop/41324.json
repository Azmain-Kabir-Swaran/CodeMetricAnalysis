{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "fairShareStarvation",
  "functionId": "fairShareStarvation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 1158,
  "functionEndLine": 1181,
  "numCommitsSeen": 76,
  "timeTaken": 3077,
  "changeHistory": [
    "90cb5b4635b7a0849912458afad052f569131a59",
    "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
    "10468529a9b858bd945e7ecb063c9c1438efa474"
  ],
  "changeHistoryShort": {
    "90cb5b4635b7a0849912458afad052f569131a59": "Ybodychange",
    "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf": "Ybodychange",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Ybodychange",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90cb5b4635b7a0849912458afad052f569131a59": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6380. FSAppAttempt keeps redundant copy of the queue\n",
      "commitDate": "11/05/17 1:47 PM",
      "commitName": "90cb5b4635b7a0849912458afad052f569131a59",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/04/17 2:21 PM",
      "commitNameOld": "c3375175d616e0380560f89d491b6b9753a8f3e1",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 28.98,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   Resource fairShareStarvation() {\n     long now \u003d scheduler.getClock().getTime();\n     Resource threshold \u003d Resources.multiply(\n-        getFairShare(), fsQueue.getFairSharePreemptionThreshold());\n+        getFairShare(), getQueue().getFairSharePreemptionThreshold());\n     Resource fairDemand \u003d Resources.componentwiseMin(threshold, demand);\n \n     // Check if the queue is starved for fairshare\n     boolean starved \u003d isUsageBelowShare(getResourceUsage(), fairDemand);\n \n     if (!starved) {\n       lastTimeAtFairShare \u003d now;\n     }\n \n     if (!starved ||\n-        now - lastTimeAtFairShare \u003c fsQueue.getFairSharePreemptionTimeout()) {\n+        now - lastTimeAtFairShare \u003c getQueue().getFairSharePreemptionTimeout()) {\n       fairshareStarvation \u003d Resources.none();\n     } else {\n       // The app has been starved for longer than preemption-timeout.\n       fairshareStarvation \u003d\n           Resources.subtractFromNonNegative(fairDemand, getResourceUsage());\n     }\n     return fairshareStarvation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Resource fairShareStarvation() {\n    long now \u003d scheduler.getClock().getTime();\n    Resource threshold \u003d Resources.multiply(\n        getFairShare(), getQueue().getFairSharePreemptionThreshold());\n    Resource fairDemand \u003d Resources.componentwiseMin(threshold, demand);\n\n    // Check if the queue is starved for fairshare\n    boolean starved \u003d isUsageBelowShare(getResourceUsage(), fairDemand);\n\n    if (!starved) {\n      lastTimeAtFairShare \u003d now;\n    }\n\n    if (!starved ||\n        now - lastTimeAtFairShare \u003c getQueue().getFairSharePreemptionTimeout()) {\n      fairshareStarvation \u003d Resources.none();\n    } else {\n      // The app has been starved for longer than preemption-timeout.\n      fairshareStarvation \u003d\n          Resources.subtractFromNonNegative(fairDemand, getResourceUsage());\n    }\n    return fairshareStarvation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6210. FairScheduler: Node reservations can interfere with preemption. (kasha)\n",
      "commitDate": "22/02/17 3:46 PM",
      "commitName": "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "17/02/17 2:07 PM",
      "commitNameOld": "dbbfcf74ab44d7bfdc805b63affd0defc57182b8",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.07,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   Resource fairShareStarvation() {\n+    long now \u003d scheduler.getClock().getTime();\n     Resource threshold \u003d Resources.multiply(\n         getFairShare(), fsQueue.getFairSharePreemptionThreshold());\n-    Resource starvation \u003d Resources.componentwiseMin(threshold, demand);\n-    Resources.subtractFromNonNegative(starvation, getResourceUsage());\n+    Resource fairDemand \u003d Resources.componentwiseMin(threshold, demand);\n \n-    long now \u003d scheduler.getClock().getTime();\n-    boolean starved \u003d !Resources.isNone(starvation);\n+    // Check if the queue is starved for fairshare\n+    boolean starved \u003d isUsageBelowShare(getResourceUsage(), fairDemand);\n \n     if (!starved) {\n       lastTimeAtFairShare \u003d now;\n     }\n \n-    if (starved \u0026\u0026\n-        (now - lastTimeAtFairShare \u003e fsQueue.getFairSharePreemptionTimeout())) {\n-      this.fairshareStarvation \u003d starvation;\n+    if (!starved ||\n+        now - lastTimeAtFairShare \u003c fsQueue.getFairSharePreemptionTimeout()) {\n+      fairshareStarvation \u003d Resources.none();\n     } else {\n-      this.fairshareStarvation \u003d Resources.none();\n+      // The app has been starved for longer than preemption-timeout.\n+      fairshareStarvation \u003d\n+          Resources.subtractFromNonNegative(fairDemand, getResourceUsage());\n     }\n-    return this.fairshareStarvation;\n+    return fairshareStarvation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Resource fairShareStarvation() {\n    long now \u003d scheduler.getClock().getTime();\n    Resource threshold \u003d Resources.multiply(\n        getFairShare(), fsQueue.getFairSharePreemptionThreshold());\n    Resource fairDemand \u003d Resources.componentwiseMin(threshold, demand);\n\n    // Check if the queue is starved for fairshare\n    boolean starved \u003d isUsageBelowShare(getResourceUsage(), fairDemand);\n\n    if (!starved) {\n      lastTimeAtFairShare \u003d now;\n    }\n\n    if (!starved ||\n        now - lastTimeAtFairShare \u003c fsQueue.getFairSharePreemptionTimeout()) {\n      fairshareStarvation \u003d Resources.none();\n    } else {\n      // The app has been starved for longer than preemption-timeout.\n      fairshareStarvation \u003d\n          Resources.subtractFromNonNegative(fairDemand, getResourceUsage());\n    }\n    return fairshareStarvation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "13/02/17 11:26 AM",
      "commitNameOld": "646c6d6509f515b1373288869fb92807fa2ddc9b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 2.49,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,21 @@\n   Resource fairShareStarvation() {\n     Resource threshold \u003d Resources.multiply(\n         getFairShare(), fsQueue.getFairSharePreemptionThreshold());\n-    Resource starvation \u003d Resources.subtractFrom(threshold, getResourceUsage());\n+    Resource starvation \u003d Resources.componentwiseMin(threshold, demand);\n+    Resources.subtractFromNonNegative(starvation, getResourceUsage());\n \n     long now \u003d scheduler.getClock().getTime();\n-    boolean starved \u003d Resources.greaterThan(\n-        fsQueue.getPolicy().getResourceCalculator(),\n-        scheduler.getClusterResource(), starvation, Resources.none());\n+    boolean starved \u003d !Resources.isNone(starvation);\n \n     if (!starved) {\n       lastTimeAtFairShare \u003d now;\n     }\n \n     if (starved \u0026\u0026\n         (now - lastTimeAtFairShare \u003e fsQueue.getFairSharePreemptionTimeout())) {\n       this.fairshareStarvation \u003d starvation;\n     } else {\n       this.fairshareStarvation \u003d Resources.none();\n     }\n     return this.fairshareStarvation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Resource fairShareStarvation() {\n    Resource threshold \u003d Resources.multiply(\n        getFairShare(), fsQueue.getFairSharePreemptionThreshold());\n    Resource starvation \u003d Resources.componentwiseMin(threshold, demand);\n    Resources.subtractFromNonNegative(starvation, getResourceUsage());\n\n    long now \u003d scheduler.getClock().getTime();\n    boolean starved \u003d !Resources.isNone(starvation);\n\n    if (!starved) {\n      lastTimeAtFairShare \u003d now;\n    }\n\n    if (starved \u0026\u0026\n        (now - lastTimeAtFairShare \u003e fsQueue.getFairSharePreemptionTimeout())) {\n      this.fairshareStarvation \u003d starvation;\n    } else {\n      this.fairshareStarvation \u003d Resources.none();\n    }\n    return this.fairshareStarvation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,22 @@\n+  Resource fairShareStarvation() {\n+    Resource threshold \u003d Resources.multiply(\n+        getFairShare(), fsQueue.getFairSharePreemptionThreshold());\n+    Resource starvation \u003d Resources.subtractFrom(threshold, getResourceUsage());\n+\n+    long now \u003d scheduler.getClock().getTime();\n+    boolean starved \u003d Resources.greaterThan(\n+        fsQueue.getPolicy().getResourceCalculator(),\n+        scheduler.getClusterResource(), starvation, Resources.none());\n+\n+    if (!starved) {\n+      lastTimeAtFairShare \u003d now;\n+    }\n+\n+    if (starved \u0026\u0026\n+        (now - lastTimeAtFairShare \u003e fsQueue.getFairSharePreemptionTimeout())) {\n+      this.fairshareStarvation \u003d starvation;\n+    } else {\n+      this.fairshareStarvation \u003d Resources.none();\n+    }\n+    return this.fairshareStarvation;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Resource fairShareStarvation() {\n    Resource threshold \u003d Resources.multiply(\n        getFairShare(), fsQueue.getFairSharePreemptionThreshold());\n    Resource starvation \u003d Resources.subtractFrom(threshold, getResourceUsage());\n\n    long now \u003d scheduler.getClock().getTime();\n    boolean starved \u003d Resources.greaterThan(\n        fsQueue.getPolicy().getResourceCalculator(),\n        scheduler.getClusterResource(), starvation, Resources.none());\n\n    if (!starved) {\n      lastTimeAtFairShare \u003d now;\n    }\n\n    if (starved \u0026\u0026\n        (now - lastTimeAtFairShare \u003e fsQueue.getFairSharePreemptionTimeout())) {\n      this.fairshareStarvation \u003d starvation;\n    } else {\n      this.fairshareStarvation \u003d Resources.none();\n    }\n    return this.fairshareStarvation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}