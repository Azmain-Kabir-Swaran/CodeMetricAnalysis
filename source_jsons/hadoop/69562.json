{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureADAuthenticator.java",
  "functionName": "getTokenCall",
  "functionId": "getTokenCall___authEndpoint-String__body-String__headers-Hashtable__String,String____httpMethod-String__isMsi-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
  "functionStartLine": 282,
  "functionEndLine": 311,
  "numCommitsSeen": 15,
  "timeTaken": 3056,
  "changeHistory": [
    "0b931f36ec83dc72729a9e84a0d313f471061c64",
    "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1"
  ],
  "changeHistoryShort": {
    "0b931f36ec83dc72729a9e84a0d313f471061c64": "Ymultichange(Yparameterchange,Ybodychange)",
    "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0": "Ybodychange",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b931f36ec83dc72729a9e84a0d313f471061c64": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Hadoop 16890. Change in expiry calculation for MSI token provider.\n\n\r\nContributed by Bilahari T H",
      "commitDate": "11/03/20 1:39 PM",
      "commitName": "0b931f36ec83dc72729a9e84a0d313f471061c64",
      "commitAuthor": "bilaharith",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Hadoop 16890. Change in expiry calculation for MSI token provider.\n\n\r\nContributed by Bilahari T H",
          "commitDate": "11/03/20 1:39 PM",
          "commitName": "0b931f36ec83dc72729a9e84a0d313f471061c64",
          "commitAuthor": "bilaharith",
          "commitDateOld": "07/10/19 5:07 AM",
          "commitNameOld": "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
          "commitAuthorOld": "bilaharith",
          "daysBetweenCommits": 156.36,
          "commitsBetweenForRepo": 555,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   private static AzureADToken getTokenCall(String authEndpoint, String body,\n-                                           Hashtable\u003cString, String\u003e headers, String httpMethod)\n-          throws IOException {\n+      Hashtable\u003cString, String\u003e headers, String httpMethod, boolean isMsi)\n+      throws IOException {\n     AzureADToken token \u003d null;\n     ExponentialRetryPolicy retryPolicy\n             \u003d new ExponentialRetryPolicy(3, 0, 1000, 2);\n \n     int httperror \u003d 0;\n     IOException ex \u003d null;\n     boolean succeeded \u003d false;\n     int retryCount \u003d 0;\n     do {\n       httperror \u003d 0;\n       ex \u003d null;\n       try {\n-        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod);\n+        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod, isMsi);\n       } catch (HttpException e) {\n         httperror \u003d e.httpErrorCode;\n         ex \u003d e;\n       } catch (IOException e) {\n         ex \u003d e;\n       }\n       succeeded \u003d ((httperror \u003d\u003d 0) \u0026\u0026 (ex \u003d\u003d null));\n       retryCount++;\n     } while (!succeeded \u0026\u0026 retryPolicy.shouldRetry(retryCount, httperror));\n     if (!succeeded) {\n       throw ex;\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static AzureADToken getTokenCall(String authEndpoint, String body,\n      Hashtable\u003cString, String\u003e headers, String httpMethod, boolean isMsi)\n      throws IOException {\n    AzureADToken token \u003d null;\n    ExponentialRetryPolicy retryPolicy\n            \u003d new ExponentialRetryPolicy(3, 0, 1000, 2);\n\n    int httperror \u003d 0;\n    IOException ex \u003d null;\n    boolean succeeded \u003d false;\n    int retryCount \u003d 0;\n    do {\n      httperror \u003d 0;\n      ex \u003d null;\n      try {\n        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod, isMsi);\n      } catch (HttpException e) {\n        httperror \u003d e.httpErrorCode;\n        ex \u003d e;\n      } catch (IOException e) {\n        ex \u003d e;\n      }\n      succeeded \u003d ((httperror \u003d\u003d 0) \u0026\u0026 (ex \u003d\u003d null));\n      retryCount++;\n    } while (!succeeded \u0026\u0026 retryPolicy.shouldRetry(retryCount, httperror));\n    if (!succeeded) {\n      throw ex;\n    }\n    return token;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
          "extendedDetails": {
            "oldValue": "[authEndpoint-String, body-String, headers-Hashtable\u003cString,String\u003e, httpMethod-String]",
            "newValue": "[authEndpoint-String, body-String, headers-Hashtable\u003cString,String\u003e, httpMethod-String, isMsi-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Hadoop 16890. Change in expiry calculation for MSI token provider.\n\n\r\nContributed by Bilahari T H",
          "commitDate": "11/03/20 1:39 PM",
          "commitName": "0b931f36ec83dc72729a9e84a0d313f471061c64",
          "commitAuthor": "bilaharith",
          "commitDateOld": "07/10/19 5:07 AM",
          "commitNameOld": "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
          "commitAuthorOld": "bilaharith",
          "daysBetweenCommits": 156.36,
          "commitsBetweenForRepo": 555,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   private static AzureADToken getTokenCall(String authEndpoint, String body,\n-                                           Hashtable\u003cString, String\u003e headers, String httpMethod)\n-          throws IOException {\n+      Hashtable\u003cString, String\u003e headers, String httpMethod, boolean isMsi)\n+      throws IOException {\n     AzureADToken token \u003d null;\n     ExponentialRetryPolicy retryPolicy\n             \u003d new ExponentialRetryPolicy(3, 0, 1000, 2);\n \n     int httperror \u003d 0;\n     IOException ex \u003d null;\n     boolean succeeded \u003d false;\n     int retryCount \u003d 0;\n     do {\n       httperror \u003d 0;\n       ex \u003d null;\n       try {\n-        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod);\n+        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod, isMsi);\n       } catch (HttpException e) {\n         httperror \u003d e.httpErrorCode;\n         ex \u003d e;\n       } catch (IOException e) {\n         ex \u003d e;\n       }\n       succeeded \u003d ((httperror \u003d\u003d 0) \u0026\u0026 (ex \u003d\u003d null));\n       retryCount++;\n     } while (!succeeded \u0026\u0026 retryPolicy.shouldRetry(retryCount, httperror));\n     if (!succeeded) {\n       throw ex;\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static AzureADToken getTokenCall(String authEndpoint, String body,\n      Hashtable\u003cString, String\u003e headers, String httpMethod, boolean isMsi)\n      throws IOException {\n    AzureADToken token \u003d null;\n    ExponentialRetryPolicy retryPolicy\n            \u003d new ExponentialRetryPolicy(3, 0, 1000, 2);\n\n    int httperror \u003d 0;\n    IOException ex \u003d null;\n    boolean succeeded \u003d false;\n    int retryCount \u003d 0;\n    do {\n      httperror \u003d 0;\n      ex \u003d null;\n      try {\n        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod, isMsi);\n      } catch (HttpException e) {\n        httperror \u003d e.httpErrorCode;\n        ex \u003d e;\n      } catch (IOException e) {\n        ex \u003d e;\n      }\n      succeeded \u003d ((httperror \u003d\u003d 0) \u0026\u0026 (ex \u003d\u003d null));\n      retryCount++;\n    } while (!succeeded \u0026\u0026 retryPolicy.shouldRetry(retryCount, httperror));\n    if (!succeeded) {\n      throw ex;\n    }\n    return token;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
          "extendedDetails": {}
        }
      ]
    },
    "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15809. ABFS: better exception handling when making getAccessToken call.\nContributed by Da Zhou\n",
      "commitDate": "05/10/18 3:29 AM",
      "commitName": "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 17.61,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,30 @@\n   private static AzureADToken getTokenCall(String authEndpoint, String body,\n                                            Hashtable\u003cString, String\u003e headers, String httpMethod)\n           throws IOException {\n     AzureADToken token \u003d null;\n     ExponentialRetryPolicy retryPolicy\n             \u003d new ExponentialRetryPolicy(3, 0, 1000, 2);\n \n     int httperror \u003d 0;\n-    String requestId;\n-    String httpExceptionMessage \u003d null;\n     IOException ex \u003d null;\n     boolean succeeded \u003d false;\n     int retryCount \u003d 0;\n     do {\n       httperror \u003d 0;\n-      requestId \u003d \"\";\n       ex \u003d null;\n       try {\n         token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod);\n       } catch (HttpException e) {\n         httperror \u003d e.httpErrorCode;\n-        requestId \u003d e.requestId;\n-        httpExceptionMessage \u003d e.getMessage();\n+        ex \u003d e;\n       } catch (IOException e) {\n         ex \u003d e;\n       }\n       succeeded \u003d ((httperror \u003d\u003d 0) \u0026\u0026 (ex \u003d\u003d null));\n       retryCount++;\n     } while (!succeeded \u0026\u0026 retryPolicy.shouldRetry(retryCount, httperror));\n     if (!succeeded) {\n-      if (ex !\u003d null) {\n-        throw ex;\n-      }\n-      if (httperror !\u003d 0) {\n-        throw new IOException(httpExceptionMessage);\n-      }\n+      throw ex;\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static AzureADToken getTokenCall(String authEndpoint, String body,\n                                           Hashtable\u003cString, String\u003e headers, String httpMethod)\n          throws IOException {\n    AzureADToken token \u003d null;\n    ExponentialRetryPolicy retryPolicy\n            \u003d new ExponentialRetryPolicy(3, 0, 1000, 2);\n\n    int httperror \u003d 0;\n    IOException ex \u003d null;\n    boolean succeeded \u003d false;\n    int retryCount \u003d 0;\n    do {\n      httperror \u003d 0;\n      ex \u003d null;\n      try {\n        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod);\n      } catch (HttpException e) {\n        httperror \u003d e.httpErrorCode;\n        ex \u003d e;\n      } catch (IOException e) {\n        ex \u003d e;\n      }\n      succeeded \u003d ((httperror \u003d\u003d 0) \u0026\u0026 (ex \u003d\u003d null));\n      retryCount++;\n    } while (!succeeded \u0026\u0026 retryPolicy.shouldRetry(retryCount, httperror));\n    if (!succeeded) {\n      throw ex;\n    }\n    return token;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
      "extendedDetails": {}
    },
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15660. ABFS: Add support for OAuth\nContributed by Da Zhou, Rajeev Bansal, and Junhua Gu.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,39 @@\n+  private static AzureADToken getTokenCall(String authEndpoint, String body,\n+                                           Hashtable\u003cString, String\u003e headers, String httpMethod)\n+          throws IOException {\n+    AzureADToken token \u003d null;\n+    ExponentialRetryPolicy retryPolicy\n+            \u003d new ExponentialRetryPolicy(3, 0, 1000, 2);\n+\n+    int httperror \u003d 0;\n+    String requestId;\n+    String httpExceptionMessage \u003d null;\n+    IOException ex \u003d null;\n+    boolean succeeded \u003d false;\n+    int retryCount \u003d 0;\n+    do {\n+      httperror \u003d 0;\n+      requestId \u003d \"\";\n+      ex \u003d null;\n+      try {\n+        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod);\n+      } catch (HttpException e) {\n+        httperror \u003d e.httpErrorCode;\n+        requestId \u003d e.requestId;\n+        httpExceptionMessage \u003d e.getMessage();\n+      } catch (IOException e) {\n+        ex \u003d e;\n+      }\n+      succeeded \u003d ((httperror \u003d\u003d 0) \u0026\u0026 (ex \u003d\u003d null));\n+      retryCount++;\n+    } while (!succeeded \u0026\u0026 retryPolicy.shouldRetry(retryCount, httperror));\n+    if (!succeeded) {\n+      if (ex !\u003d null) {\n+        throw ex;\n+      }\n+      if (httperror !\u003d 0) {\n+        throw new IOException(httpExceptionMessage);\n+      }\n+    }\n+    return token;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static AzureADToken getTokenCall(String authEndpoint, String body,\n                                           Hashtable\u003cString, String\u003e headers, String httpMethod)\n          throws IOException {\n    AzureADToken token \u003d null;\n    ExponentialRetryPolicy retryPolicy\n            \u003d new ExponentialRetryPolicy(3, 0, 1000, 2);\n\n    int httperror \u003d 0;\n    String requestId;\n    String httpExceptionMessage \u003d null;\n    IOException ex \u003d null;\n    boolean succeeded \u003d false;\n    int retryCount \u003d 0;\n    do {\n      httperror \u003d 0;\n      requestId \u003d \"\";\n      ex \u003d null;\n      try {\n        token \u003d getTokenSingleCall(authEndpoint, body, headers, httpMethod);\n      } catch (HttpException e) {\n        httperror \u003d e.httpErrorCode;\n        requestId \u003d e.requestId;\n        httpExceptionMessage \u003d e.getMessage();\n      } catch (IOException e) {\n        ex \u003d e;\n      }\n      succeeded \u003d ((httperror \u003d\u003d 0) \u0026\u0026 (ex \u003d\u003d null));\n      retryCount++;\n    } while (!succeeded \u0026\u0026 retryPolicy.shouldRetry(retryCount, httperror));\n    if (!succeeded) {\n      if (ex !\u003d null) {\n        throw ex;\n      }\n      if (httperror !\u003d 0) {\n        throw new IOException(httpExceptionMessage);\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java"
    }
  }
}