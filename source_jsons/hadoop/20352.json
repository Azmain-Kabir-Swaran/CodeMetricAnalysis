{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileOutputCommitter.java",
  "functionName": "recoverTask",
  "functionId": "recoverTask___context-TaskAttemptContext",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/FileOutputCommitter.java",
  "functionStartLine": 203,
  "functionEndLine": 206,
  "numCommitsSeen": 9,
  "timeTaken": 999,
  "changeHistory": [
    "94242c93857a06fb9c56ee571a47d6ca18f00f48",
    "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca",
    "ac64df85a92cb99f83b719fba3ffde7bc0eab5d8"
  ],
  "changeHistoryShort": {
    "94242c93857a06fb9c56ee571a47d6ca18f00f48": "Ybodychange",
    "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca": "Ybodychange",
    "ac64df85a92cb99f83b719fba3ffde7bc0eab5d8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "94242c93857a06fb9c56ee571a47d6ca18f00f48": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3711. Fixed MR AM recovery so that only single selected task output is recovered and thus reduce the unnecessarily bloated recovery time. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 4:04 PM",
      "commitName": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/10/11 6:16 PM",
      "commitNameOld": "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 112.95,
      "commitsBetweenForRepo": 675,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,4 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n-    Path outputPath \u003d FileOutputFormat.getOutputPath(context.getJobConf());\n-    context.progress();\n-    Path jobOutputPath \u003d new Path(outputPath, getJobTempDirName(context));\n-    int previousAttempt \u003d         \n-        context.getConfiguration().getInt(\n-            MRConstants.APPLICATION_ATTEMPT_ID, 0) - 1;\n-    if (previousAttempt \u003c 0) {\n-      LOG.warn(\"Cannot recover task output for first attempt...\");\n-      return;\n-    }\n-\n-    FileSystem outputFileSystem \u003d \n-        outputPath.getFileSystem(context.getJobConf());\n-    Path pathToRecover \u003d \n-        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n-    if (outputFileSystem.exists(pathToRecover)) {\n-      // Move the task outputs to their final place\n-      LOG.debug(\"Trying to recover task from \" + pathToRecover\n-          + \" into \" + jobOutputPath);\n-      moveJobOutputs(outputFileSystem, \n-          pathToRecover, jobOutputPath, pathToRecover);\n-      LOG.info(\"Saved output of job to \" + jobOutputPath);\n-    }\n+    getWrapped(context).recoverTask(context);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    getWrapped(context).recoverTask(context);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3170. Fixed job output commit for deep hierarchies. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1183185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/10/11 6:16 PM",
      "commitName": "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/10/11 11:27 AM",
      "commitNameOld": "ac64df85a92cb99f83b719fba3ffde7bc0eab5d8",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.28,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n     Path outputPath \u003d FileOutputFormat.getOutputPath(context.getJobConf());\n     context.progress();\n     Path jobOutputPath \u003d new Path(outputPath, getJobTempDirName(context));\n     int previousAttempt \u003d         \n         context.getConfiguration().getInt(\n             MRConstants.APPLICATION_ATTEMPT_ID, 0) - 1;\n     if (previousAttempt \u003c 0) {\n       LOG.warn(\"Cannot recover task output for first attempt...\");\n       return;\n     }\n \n     FileSystem outputFileSystem \u003d \n         outputPath.getFileSystem(context.getJobConf());\n     Path pathToRecover \u003d \n         new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n     if (outputFileSystem.exists(pathToRecover)) {\n       // Move the task outputs to their final place\n-      moveJobOutputs(outputFileSystem, jobOutputPath, pathToRecover);\n+      LOG.debug(\"Trying to recover task from \" + pathToRecover\n+          + \" into \" + jobOutputPath);\n+      moveJobOutputs(outputFileSystem, \n+          pathToRecover, jobOutputPath, pathToRecover);\n       LOG.info(\"Saved output of job to \" + jobOutputPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    Path outputPath \u003d FileOutputFormat.getOutputPath(context.getJobConf());\n    context.progress();\n    Path jobOutputPath \u003d new Path(outputPath, getJobTempDirName(context));\n    int previousAttempt \u003d         \n        context.getConfiguration().getInt(\n            MRConstants.APPLICATION_ATTEMPT_ID, 0) - 1;\n    if (previousAttempt \u003c 0) {\n      LOG.warn(\"Cannot recover task output for first attempt...\");\n      return;\n    }\n\n    FileSystem outputFileSystem \u003d \n        outputPath.getFileSystem(context.getJobConf());\n    Path pathToRecover \u003d \n        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n    if (outputFileSystem.exists(pathToRecover)) {\n      // Move the task outputs to their final place\n      LOG.debug(\"Trying to recover task from \" + pathToRecover\n          + \" into \" + jobOutputPath);\n      moveJobOutputs(outputFileSystem, \n          pathToRecover, jobOutputPath, pathToRecover);\n      LOG.info(\"Saved output of job to \" + jobOutputPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "ac64df85a92cb99f83b719fba3ffde7bc0eab5d8": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3148. Ported MAPREDUCE-2702 to old mapred api for aiding task recovery. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1182008 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/10/11 11:27 AM",
      "commitName": "ac64df85a92cb99f83b719fba3ffde7bc0eab5d8",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,23 @@\n+  public void recoverTask(TaskAttemptContext context)\n+      throws IOException {\n+    Path outputPath \u003d FileOutputFormat.getOutputPath(context.getJobConf());\n+    context.progress();\n+    Path jobOutputPath \u003d new Path(outputPath, getJobTempDirName(context));\n+    int previousAttempt \u003d         \n+        context.getConfiguration().getInt(\n+            MRConstants.APPLICATION_ATTEMPT_ID, 0) - 1;\n+    if (previousAttempt \u003c 0) {\n+      LOG.warn(\"Cannot recover task output for first attempt...\");\n+      return;\n+    }\n+\n+    FileSystem outputFileSystem \u003d \n+        outputPath.getFileSystem(context.getJobConf());\n+    Path pathToRecover \u003d \n+        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n+    if (outputFileSystem.exists(pathToRecover)) {\n+      // Move the task outputs to their final place\n+      moveJobOutputs(outputFileSystem, jobOutputPath, pathToRecover);\n+      LOG.info(\"Saved output of job to \" + jobOutputPath);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    Path outputPath \u003d FileOutputFormat.getOutputPath(context.getJobConf());\n    context.progress();\n    Path jobOutputPath \u003d new Path(outputPath, getJobTempDirName(context));\n    int previousAttempt \u003d         \n        context.getConfiguration().getInt(\n            MRConstants.APPLICATION_ATTEMPT_ID, 0) - 1;\n    if (previousAttempt \u003c 0) {\n      LOG.warn(\"Cannot recover task output for first attempt...\");\n      return;\n    }\n\n    FileSystem outputFileSystem \u003d \n        outputPath.getFileSystem(context.getJobConf());\n    Path pathToRecover \u003d \n        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n    if (outputFileSystem.exists(pathToRecover)) {\n      // Move the task outputs to their final place\n      moveJobOutputs(outputFileSystem, jobOutputPath, pathToRecover);\n      LOG.info(\"Saved output of job to \" + jobOutputPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/FileOutputCommitter.java"
    }
  }
}