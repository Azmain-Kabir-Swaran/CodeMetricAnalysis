{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CBZip2InputStream.java",
  "functionName": "recvDecodingTables",
  "functionId": "recvDecodingTables",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
  "functionStartLine": 695,
  "functionEndLine": 774,
  "numCommitsSeen": 10,
  "timeTaken": 995,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "86724941c5144a06113090d40c50c289e7ebd290",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "86724941c5144a06113090d40c50c289e7ebd290": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void recvDecodingTables() throws IOException {\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] pos \u003d dataShadow.recvDecodingTables_pos;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[] selectorMtf \u003d dataShadow.selectorMtf;\n\n    int inUse16 \u003d 0;\n\n    /* Receive the mapping table */\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if (bsGetBit()) {\n        inUse16 |\u003d 1 \u003c\u003c i;\n      }\n    }\n\n    for (int i \u003d 256; --i \u003e\u003d 0;) {\n      inUse[i] \u003d false;\n    }\n\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if ((inUse16 \u0026 (1 \u003c\u003c i)) !\u003d 0) {\n        final int i16 \u003d i \u003c\u003c 4;\n        for (int j \u003d 0; j \u003c 16; j++) {\n          if (bsGetBit()) {\n            inUse[i16 + j] \u003d true;\n          }\n        }\n      }\n    }\n\n    makeMaps();\n    final int alphaSize \u003d this.nInUse + 2;\n\n    /* Now the selectors */\n    final int nGroups \u003d (int) bsR(3);\n    final int nSelectors \u003d (int) bsR(15);\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int j \u003d 0;\n      while (bsGetBit()) {\n        j++;\n      }\n      selectorMtf[i] \u003d (byte) j;\n    }\n\n    /* Undo the MTF values for the selectors. */\n    for (int v \u003d nGroups; --v \u003e\u003d 0;) {\n      pos[v] \u003d (byte) v;\n    }\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int v \u003d selectorMtf[i] \u0026 0xff;\n      final byte tmp \u003d pos[v];\n      while (v \u003e 0) {\n        // nearly all times v is zero, 4 in most other cases\n        pos[v] \u003d pos[v - 1];\n        v--;\n      }\n      pos[0] \u003d tmp;\n      selector[i] \u003d tmp;\n    }\n\n    final char[][] len \u003d dataShadow.temp_charArray2d;\n\n    /* Now the coding tables */\n    for (int t \u003d 0; t \u003c nGroups; t++) {\n      int curr \u003d (int) bsR(5);\n      final char[] len_t \u003d len[t];\n      for (int i \u003d 0; i \u003c alphaSize; i++) {\n        while (bsGetBit()) {\n          curr +\u003d bsGetBit() ? -1 : 1;\n        }\n        len_t[i] \u003d (char) curr;\n      }\n    }\n\n    // finally create the Huffman tables\n    createHuffmanDecodingTables(alphaSize, nGroups);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void recvDecodingTables() throws IOException {\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] pos \u003d dataShadow.recvDecodingTables_pos;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[] selectorMtf \u003d dataShadow.selectorMtf;\n\n    int inUse16 \u003d 0;\n\n    /* Receive the mapping table */\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if (bsGetBit()) {\n        inUse16 |\u003d 1 \u003c\u003c i;\n      }\n    }\n\n    for (int i \u003d 256; --i \u003e\u003d 0;) {\n      inUse[i] \u003d false;\n    }\n\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if ((inUse16 \u0026 (1 \u003c\u003c i)) !\u003d 0) {\n        final int i16 \u003d i \u003c\u003c 4;\n        for (int j \u003d 0; j \u003c 16; j++) {\n          if (bsGetBit()) {\n            inUse[i16 + j] \u003d true;\n          }\n        }\n      }\n    }\n\n    makeMaps();\n    final int alphaSize \u003d this.nInUse + 2;\n\n    /* Now the selectors */\n    final int nGroups \u003d (int) bsR(3);\n    final int nSelectors \u003d (int) bsR(15);\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int j \u003d 0;\n      while (bsGetBit()) {\n        j++;\n      }\n      selectorMtf[i] \u003d (byte) j;\n    }\n\n    /* Undo the MTF values for the selectors. */\n    for (int v \u003d nGroups; --v \u003e\u003d 0;) {\n      pos[v] \u003d (byte) v;\n    }\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int v \u003d selectorMtf[i] \u0026 0xff;\n      final byte tmp \u003d pos[v];\n      while (v \u003e 0) {\n        // nearly all times v is zero, 4 in most other cases\n        pos[v] \u003d pos[v - 1];\n        v--;\n      }\n      pos[0] \u003d tmp;\n      selector[i] \u003d tmp;\n    }\n\n    final char[][] len \u003d dataShadow.temp_charArray2d;\n\n    /* Now the coding tables */\n    for (int t \u003d 0; t \u003c nGroups; t++) {\n      int curr \u003d (int) bsR(5);\n      final char[] len_t \u003d len[t];\n      for (int i \u003d 0; i \u003c alphaSize; i++) {\n        while (bsGetBit()) {\n          curr +\u003d bsGetBit() ? -1 : 1;\n        }\n        len_t[i] \u003d (char) curr;\n      }\n    }\n\n    // finally create the Huffman tables\n    createHuffmanDecodingTables(alphaSize, nGroups);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void recvDecodingTables() throws IOException {\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] pos \u003d dataShadow.recvDecodingTables_pos;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[] selectorMtf \u003d dataShadow.selectorMtf;\n\n    int inUse16 \u003d 0;\n\n    /* Receive the mapping table */\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if (bsGetBit()) {\n        inUse16 |\u003d 1 \u003c\u003c i;\n      }\n    }\n\n    for (int i \u003d 256; --i \u003e\u003d 0;) {\n      inUse[i] \u003d false;\n    }\n\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if ((inUse16 \u0026 (1 \u003c\u003c i)) !\u003d 0) {\n        final int i16 \u003d i \u003c\u003c 4;\n        for (int j \u003d 0; j \u003c 16; j++) {\n          if (bsGetBit()) {\n            inUse[i16 + j] \u003d true;\n          }\n        }\n      }\n    }\n\n    makeMaps();\n    final int alphaSize \u003d this.nInUse + 2;\n\n    /* Now the selectors */\n    final int nGroups \u003d (int) bsR(3);\n    final int nSelectors \u003d (int) bsR(15);\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int j \u003d 0;\n      while (bsGetBit()) {\n        j++;\n      }\n      selectorMtf[i] \u003d (byte) j;\n    }\n\n    /* Undo the MTF values for the selectors. */\n    for (int v \u003d nGroups; --v \u003e\u003d 0;) {\n      pos[v] \u003d (byte) v;\n    }\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int v \u003d selectorMtf[i] \u0026 0xff;\n      final byte tmp \u003d pos[v];\n      while (v \u003e 0) {\n        // nearly all times v is zero, 4 in most other cases\n        pos[v] \u003d pos[v - 1];\n        v--;\n      }\n      pos[0] \u003d tmp;\n      selector[i] \u003d tmp;\n    }\n\n    final char[][] len \u003d dataShadow.temp_charArray2d;\n\n    /* Now the coding tables */\n    for (int t \u003d 0; t \u003c nGroups; t++) {\n      int curr \u003d (int) bsR(5);\n      final char[] len_t \u003d len[t];\n      for (int i \u003d 0; i \u003c alphaSize; i++) {\n        while (bsGetBit()) {\n          curr +\u003d bsGetBit() ? -1 : 1;\n        }\n        len_t[i] \u003d (char) curr;\n      }\n    }\n\n    // finally create the Huffman tables\n    createHuffmanDecodingTables(alphaSize, nGroups);\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "86724941c5144a06113090d40c50c289e7ebd290": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-4012. Provide splitting support for bzip2 compressed files. Contributed by Abdul Qadeer\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@813581 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/09 1:51 PM",
      "commitName": "86724941c5144a06113090d40c50c289e7ebd290",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 114.69,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   private void recvDecodingTables() throws IOException {\n     final Data dataShadow \u003d this.data;\n     final boolean[] inUse \u003d dataShadow.inUse;\n     final byte[] pos \u003d dataShadow.recvDecodingTables_pos;\n     final byte[] selector \u003d dataShadow.selector;\n     final byte[] selectorMtf \u003d dataShadow.selectorMtf;\n \n     int inUse16 \u003d 0;\n \n     /* Receive the mapping table */\n     for (int i \u003d 0; i \u003c 16; i++) {\n       if (bsGetBit()) {\n         inUse16 |\u003d 1 \u003c\u003c i;\n       }\n     }\n \n     for (int i \u003d 256; --i \u003e\u003d 0;) {\n       inUse[i] \u003d false;\n     }\n \n     for (int i \u003d 0; i \u003c 16; i++) {\n       if ((inUse16 \u0026 (1 \u003c\u003c i)) !\u003d 0) {\n         final int i16 \u003d i \u003c\u003c 4;\n         for (int j \u003d 0; j \u003c 16; j++) {\n           if (bsGetBit()) {\n             inUse[i16 + j] \u003d true;\n           }\n         }\n       }\n     }\n \n     makeMaps();\n     final int alphaSize \u003d this.nInUse + 2;\n \n     /* Now the selectors */\n-    final int nGroups \u003d bsR(3);\n-    final int nSelectors \u003d bsR(15);\n+    final int nGroups \u003d (int) bsR(3);\n+    final int nSelectors \u003d (int) bsR(15);\n \n     for (int i \u003d 0; i \u003c nSelectors; i++) {\n       int j \u003d 0;\n       while (bsGetBit()) {\n         j++;\n       }\n       selectorMtf[i] \u003d (byte) j;\n     }\n \n     /* Undo the MTF values for the selectors. */\n     for (int v \u003d nGroups; --v \u003e\u003d 0;) {\n       pos[v] \u003d (byte) v;\n     }\n \n     for (int i \u003d 0; i \u003c nSelectors; i++) {\n       int v \u003d selectorMtf[i] \u0026 0xff;\n       final byte tmp \u003d pos[v];\n       while (v \u003e 0) {\n         // nearly all times v is zero, 4 in most other cases\n         pos[v] \u003d pos[v - 1];\n         v--;\n       }\n       pos[0] \u003d tmp;\n       selector[i] \u003d tmp;\n     }\n \n     final char[][] len \u003d dataShadow.temp_charArray2d;\n \n     /* Now the coding tables */\n     for (int t \u003d 0; t \u003c nGroups; t++) {\n-      int curr \u003d bsR(5);\n+      int curr \u003d (int) bsR(5);\n       final char[] len_t \u003d len[t];\n       for (int i \u003d 0; i \u003c alphaSize; i++) {\n         while (bsGetBit()) {\n           curr +\u003d bsGetBit() ? -1 : 1;\n         }\n         len_t[i] \u003d (char) curr;\n       }\n     }\n \n     // finally create the Huffman tables\n     createHuffmanDecodingTables(alphaSize, nGroups);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recvDecodingTables() throws IOException {\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] pos \u003d dataShadow.recvDecodingTables_pos;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[] selectorMtf \u003d dataShadow.selectorMtf;\n\n    int inUse16 \u003d 0;\n\n    /* Receive the mapping table */\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if (bsGetBit()) {\n        inUse16 |\u003d 1 \u003c\u003c i;\n      }\n    }\n\n    for (int i \u003d 256; --i \u003e\u003d 0;) {\n      inUse[i] \u003d false;\n    }\n\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if ((inUse16 \u0026 (1 \u003c\u003c i)) !\u003d 0) {\n        final int i16 \u003d i \u003c\u003c 4;\n        for (int j \u003d 0; j \u003c 16; j++) {\n          if (bsGetBit()) {\n            inUse[i16 + j] \u003d true;\n          }\n        }\n      }\n    }\n\n    makeMaps();\n    final int alphaSize \u003d this.nInUse + 2;\n\n    /* Now the selectors */\n    final int nGroups \u003d (int) bsR(3);\n    final int nSelectors \u003d (int) bsR(15);\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int j \u003d 0;\n      while (bsGetBit()) {\n        j++;\n      }\n      selectorMtf[i] \u003d (byte) j;\n    }\n\n    /* Undo the MTF values for the selectors. */\n    for (int v \u003d nGroups; --v \u003e\u003d 0;) {\n      pos[v] \u003d (byte) v;\n    }\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int v \u003d selectorMtf[i] \u0026 0xff;\n      final byte tmp \u003d pos[v];\n      while (v \u003e 0) {\n        // nearly all times v is zero, 4 in most other cases\n        pos[v] \u003d pos[v - 1];\n        v--;\n      }\n      pos[0] \u003d tmp;\n      selector[i] \u003d tmp;\n    }\n\n    final char[][] len \u003d dataShadow.temp_charArray2d;\n\n    /* Now the coding tables */\n    for (int t \u003d 0; t \u003c nGroups; t++) {\n      int curr \u003d (int) bsR(5);\n      final char[] len_t \u003d len[t];\n      for (int i \u003d 0; i \u003c alphaSize; i++) {\n        while (bsGetBit()) {\n          curr +\u003d bsGetBit() ? -1 : 1;\n        }\n        len_t[i] \u003d (char) curr;\n      }\n    }\n\n    // finally create the Huffman tables\n    createHuffmanDecodingTables(alphaSize, nGroups);\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,80 @@\n+  private void recvDecodingTables() throws IOException {\n+    final Data dataShadow \u003d this.data;\n+    final boolean[] inUse \u003d dataShadow.inUse;\n+    final byte[] pos \u003d dataShadow.recvDecodingTables_pos;\n+    final byte[] selector \u003d dataShadow.selector;\n+    final byte[] selectorMtf \u003d dataShadow.selectorMtf;\n+\n+    int inUse16 \u003d 0;\n+\n+    /* Receive the mapping table */\n+    for (int i \u003d 0; i \u003c 16; i++) {\n+      if (bsGetBit()) {\n+        inUse16 |\u003d 1 \u003c\u003c i;\n+      }\n+    }\n+\n+    for (int i \u003d 256; --i \u003e\u003d 0;) {\n+      inUse[i] \u003d false;\n+    }\n+\n+    for (int i \u003d 0; i \u003c 16; i++) {\n+      if ((inUse16 \u0026 (1 \u003c\u003c i)) !\u003d 0) {\n+        final int i16 \u003d i \u003c\u003c 4;\n+        for (int j \u003d 0; j \u003c 16; j++) {\n+          if (bsGetBit()) {\n+            inUse[i16 + j] \u003d true;\n+          }\n+        }\n+      }\n+    }\n+\n+    makeMaps();\n+    final int alphaSize \u003d this.nInUse + 2;\n+\n+    /* Now the selectors */\n+    final int nGroups \u003d bsR(3);\n+    final int nSelectors \u003d bsR(15);\n+\n+    for (int i \u003d 0; i \u003c nSelectors; i++) {\n+      int j \u003d 0;\n+      while (bsGetBit()) {\n+        j++;\n+      }\n+      selectorMtf[i] \u003d (byte) j;\n+    }\n+\n+    /* Undo the MTF values for the selectors. */\n+    for (int v \u003d nGroups; --v \u003e\u003d 0;) {\n+      pos[v] \u003d (byte) v;\n+    }\n+\n+    for (int i \u003d 0; i \u003c nSelectors; i++) {\n+      int v \u003d selectorMtf[i] \u0026 0xff;\n+      final byte tmp \u003d pos[v];\n+      while (v \u003e 0) {\n+        // nearly all times v is zero, 4 in most other cases\n+        pos[v] \u003d pos[v - 1];\n+        v--;\n+      }\n+      pos[0] \u003d tmp;\n+      selector[i] \u003d tmp;\n+    }\n+\n+    final char[][] len \u003d dataShadow.temp_charArray2d;\n+\n+    /* Now the coding tables */\n+    for (int t \u003d 0; t \u003c nGroups; t++) {\n+      int curr \u003d bsR(5);\n+      final char[] len_t \u003d len[t];\n+      for (int i \u003d 0; i \u003c alphaSize; i++) {\n+        while (bsGetBit()) {\n+          curr +\u003d bsGetBit() ? -1 : 1;\n+        }\n+        len_t[i] \u003d (char) curr;\n+      }\n+    }\n+\n+    // finally create the Huffman tables\n+    createHuffmanDecodingTables(alphaSize, nGroups);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recvDecodingTables() throws IOException {\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] pos \u003d dataShadow.recvDecodingTables_pos;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[] selectorMtf \u003d dataShadow.selectorMtf;\n\n    int inUse16 \u003d 0;\n\n    /* Receive the mapping table */\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if (bsGetBit()) {\n        inUse16 |\u003d 1 \u003c\u003c i;\n      }\n    }\n\n    for (int i \u003d 256; --i \u003e\u003d 0;) {\n      inUse[i] \u003d false;\n    }\n\n    for (int i \u003d 0; i \u003c 16; i++) {\n      if ((inUse16 \u0026 (1 \u003c\u003c i)) !\u003d 0) {\n        final int i16 \u003d i \u003c\u003c 4;\n        for (int j \u003d 0; j \u003c 16; j++) {\n          if (bsGetBit()) {\n            inUse[i16 + j] \u003d true;\n          }\n        }\n      }\n    }\n\n    makeMaps();\n    final int alphaSize \u003d this.nInUse + 2;\n\n    /* Now the selectors */\n    final int nGroups \u003d bsR(3);\n    final int nSelectors \u003d bsR(15);\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int j \u003d 0;\n      while (bsGetBit()) {\n        j++;\n      }\n      selectorMtf[i] \u003d (byte) j;\n    }\n\n    /* Undo the MTF values for the selectors. */\n    for (int v \u003d nGroups; --v \u003e\u003d 0;) {\n      pos[v] \u003d (byte) v;\n    }\n\n    for (int i \u003d 0; i \u003c nSelectors; i++) {\n      int v \u003d selectorMtf[i] \u0026 0xff;\n      final byte tmp \u003d pos[v];\n      while (v \u003e 0) {\n        // nearly all times v is zero, 4 in most other cases\n        pos[v] \u003d pos[v - 1];\n        v--;\n      }\n      pos[0] \u003d tmp;\n      selector[i] \u003d tmp;\n    }\n\n    final char[][] len \u003d dataShadow.temp_charArray2d;\n\n    /* Now the coding tables */\n    for (int t \u003d 0; t \u003c nGroups; t++) {\n      int curr \u003d bsR(5);\n      final char[] len_t \u003d len[t];\n      for (int i \u003d 0; i \u003c alphaSize; i++) {\n        while (bsGetBit()) {\n          curr +\u003d bsGetBit() ? -1 : 1;\n        }\n        len_t[i] \u003d (char) curr;\n      }\n    }\n\n    // finally create the Huffman tables\n    createHuffmanDecodingTables(alphaSize, nGroups);\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
    }
  }
}