{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "startRM",
  "functionId": "startRM",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 287,
  "functionEndLine": 328,
  "numCommitsSeen": 40,
  "timeTaken": 4131,
  "changeHistory": [
    "a92b7a5491ea5f0f98297f216fe7d27d2378a85e",
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
    "26fafc359787eae0ef82196000f4a04956b2abaa",
    "b65100c14bf9134de2bd8248dc62735682bee26c",
    "475f933b41276b1bdeeec09e30369120f7eccdb8",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b",
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "b32ffa2753e83615b980721b6067fcc35ce54372",
    "e07f3c87cd3542760efcf713f909375b69eec00f",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "a92b7a5491ea5f0f98297f216fe7d27d2378a85e": "Ybodychange",
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09": "Ybodychange",
    "26fafc359787eae0ef82196000f4a04956b2abaa": "Ybodychange",
    "b65100c14bf9134de2bd8248dc62735682bee26c": "Ybodychange",
    "475f933b41276b1bdeeec09e30369120f7eccdb8": "Ybodychange",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Ymultichange(Yexceptionschange,Ybodychange)",
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ymultichange(Yexceptionschange,Ybodychange)",
    "b32ffa2753e83615b980721b6067fcc35ce54372": "Ybodychange",
    "e07f3c87cd3542760efcf713f909375b69eec00f": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a92b7a5491ea5f0f98297f216fe7d27d2378a85e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9694. UI always show default-rack for all the nodes while running SLS.\n",
      "commitDate": "08/08/19 11:11 PM",
      "commitName": "a92b7a5491ea5f0f98297f216fe7d27d2378a85e",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "14/02/19 9:26 AM",
      "commitNameOld": "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 175.53,
      "commitsBetweenForRepo": 1321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,42 @@\n   private void startRM() throws ClassNotFoundException, YarnException {\n     Configuration rmConf \u003d new YarnConfiguration(getConf());\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n       rmConf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n       rmConf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,\n           ProportionalCapacityPreemptionPolicy.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSFairScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n       // TODO add support for FifoScheduler\n       throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n     }\n-\n+    rmConf.setClass(\n+        CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+        TableMapping.class, DNSToSwitchMapping.class);\n+    rmConf.set(\n+        CommonConfigurationKeysPublic.NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY,\n+        tableMapping);\n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n         return new MockAMLauncher(se, this.rmContext, appIdAMSim);\n       }\n     };\n \n     // Across runs of parametrized tests, the JvmMetrics objects is retained,\n     // but is not registered correctly\n     JvmMetrics jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n     jvmMetrics.registerIfNeeded();\n \n     // Init and start the actual ResourceManager\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startRM() throws ClassNotFoundException, YarnException {\n    Configuration rmConf \u003d new YarnConfiguration(getConf());\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n      rmConf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n      rmConf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,\n          ProportionalCapacityPreemptionPolicy.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n      // TODO add support for FifoScheduler\n      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n    }\n    rmConf.setClass(\n        CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n        TableMapping.class, DNSToSwitchMapping.class);\n    rmConf.set(\n        CommonConfigurationKeysPublic.NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY,\n        tableMapping);\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, appIdAMSim);\n      }\n    };\n\n    // Across runs of parametrized tests, the JvmMetrics objects is retained,\n    // but is not registered correctly\n    JvmMetrics jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n    jvmMetrics.registerIfNeeded();\n\n    // Init and start the actual ResourceManager\n    rm.init(rmConf);\n    rm.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9293. Optimize MockAMLauncher event handling. Contributed by Bibin A Chundatt.\n",
      "commitDate": "14/02/19 9:26 AM",
      "commitName": "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/10/18 3:40 AM",
      "commitNameOld": "b4a38e7b3e530756fb79d23dd4e218beeb5e3190",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 122.28,
      "commitsBetweenForRepo": 866,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void startRM() throws ClassNotFoundException, YarnException {\n     Configuration rmConf \u003d new YarnConfiguration(getConf());\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n       rmConf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n       rmConf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,\n           ProportionalCapacityPreemptionPolicy.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSFairScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n       // TODO add support for FifoScheduler\n       throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n-        return new MockAMLauncher(se, this.rmContext, amMap);\n+        return new MockAMLauncher(se, this.rmContext, appIdAMSim);\n       }\n     };\n \n     // Across runs of parametrized tests, the JvmMetrics objects is retained,\n     // but is not registered correctly\n     JvmMetrics jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n     jvmMetrics.registerIfNeeded();\n \n     // Init and start the actual ResourceManager\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startRM() throws ClassNotFoundException, YarnException {\n    Configuration rmConf \u003d new YarnConfiguration(getConf());\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n      rmConf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n      rmConf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,\n          ProportionalCapacityPreemptionPolicy.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n      // TODO add support for FifoScheduler\n      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, appIdAMSim);\n      }\n    };\n\n    // Across runs of parametrized tests, the JvmMetrics objects is retained,\n    // but is not registered correctly\n    JvmMetrics jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n    jvmMetrics.registerIfNeeded();\n\n    // Init and start the actual ResourceManager\n    rm.init(rmConf);\n    rm.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "26fafc359787eae0ef82196000f4a04956b2abaa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7077. TestAMSimulator and TestNMSimulator fail. (Contributed by Akira Ajisaka via Yufei Gu)\n",
      "commitDate": "29/08/17 4:33 PM",
      "commitName": "26fafc359787eae0ef82196000f4a04956b2abaa",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "20/07/17 8:15 AM",
      "commitNameOld": "0ba8cda13549cc4a3946c440016f9d2a9e78740d",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 40.35,
      "commitsBetweenForRepo": 290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   private void startRM() throws ClassNotFoundException, YarnException {\n     Configuration rmConf \u003d new YarnConfiguration(getConf());\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n+      rmConf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n+      rmConf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,\n+          ProportionalCapacityPreemptionPolicy.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSFairScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n       // TODO add support for FifoScheduler\n       throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n         return new MockAMLauncher(se, this.rmContext, amMap);\n       }\n     };\n \n     // Across runs of parametrized tests, the JvmMetrics objects is retained,\n     // but is not registered correctly\n     JvmMetrics jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n     jvmMetrics.registerIfNeeded();\n \n     // Init and start the actual ResourceManager\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startRM() throws ClassNotFoundException, YarnException {\n    Configuration rmConf \u003d new YarnConfiguration(getConf());\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n      rmConf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n      rmConf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,\n          ProportionalCapacityPreemptionPolicy.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n      // TODO add support for FifoScheduler\n      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, amMap);\n      }\n    };\n\n    // Across runs of parametrized tests, the JvmMetrics objects is retained,\n    // but is not registered correctly\n    JvmMetrics jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n    jvmMetrics.registerIfNeeded();\n\n    // Init and start the actual ResourceManager\n    rm.init(rmConf);\n    rm.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "b65100c14bf9134de2bd8248dc62735682bee26c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6547. Enhance SLS-based tests leveraging invariant checker.\n",
      "commitDate": "06/06/17 5:19 PM",
      "commitName": "b65100c14bf9134de2bd8248dc62735682bee26c",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "18/05/17 10:19 AM",
      "commitNameOld": "40e6a85d25387d4025585c5726b3e4e24c2c1572",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 19.29,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,34 @@\n   private void startRM() throws ClassNotFoundException, YarnException {\n     Configuration rmConf \u003d new YarnConfiguration(getConf());\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSFairScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n       // TODO add support for FifoScheduler\n       throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n         return new MockAMLauncher(se, this.rmContext, amMap);\n       }\n     };\n+\n+    // Across runs of parametrized tests, the JvmMetrics objects is retained,\n+    // but is not registered correctly\n+    JvmMetrics jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n+    jvmMetrics.registerIfNeeded();\n+\n+    // Init and start the actual ResourceManager\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startRM() throws ClassNotFoundException, YarnException {\n    Configuration rmConf \u003d new YarnConfiguration(getConf());\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n      // TODO add support for FifoScheduler\n      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, amMap);\n      }\n    };\n\n    // Across runs of parametrized tests, the JvmMetrics objects is retained,\n    // but is not registered correctly\n    JvmMetrics jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n    jvmMetrics.registerIfNeeded();\n\n    // Init and start the actual ResourceManager\n    rm.init(rmConf);\n    rm.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "475f933b41276b1bdeeec09e30369120f7eccdb8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6423. Queue metrics doesn\u0027t work for Fair Scheduler in SLS (yufeigu via rkanter)\n",
      "commitDate": "25/04/17 4:26 PM",
      "commitName": "475f933b41276b1bdeeec09e30369120f7eccdb8",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "20/04/17 9:54 PM",
      "commitNameOld": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 4.77,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,27 @@\n   private void startRM() throws ClassNotFoundException, YarnException {\n     Configuration rmConf \u003d new YarnConfiguration(getConf());\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n-    // For CapacityScheduler we use a sub-classing instead of wrapping\n-    // to allow scheduler-specific invocations from monitors to work\n-    // this can be used for other schedulers as well if we care to\n-    // exercise/track behaviors that are not common to the scheduler api\n     if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSFairScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n       // TODO add support for FifoScheduler\n       throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n         return new MockAMLauncher(se, this.rmContext, amMap);\n       }\n     };\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startRM() throws ClassNotFoundException, YarnException {\n    Configuration rmConf \u003d new YarnConfiguration(getConf());\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n      // TODO add support for FifoScheduler\n      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, amMap);\n      }\n    };\n    rm.init(rmConf);\n    rm.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
          "commitDate": "20/04/17 9:54 PM",
          "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/17 4:18 PM",
          "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 22.23,
          "commitsBetweenForRepo": 128,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private void startRM() throws Exception {\n-    Configuration rmConf \u003d new YarnConfiguration();\n+  private void startRM() throws ClassNotFoundException, YarnException {\n+    Configuration rmConf \u003d new YarnConfiguration(getConf());\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     // For CapacityScheduler we use a sub-classing instead of wrapping\n     // to allow scheduler-specific invocations from monitors to work\n     // this can be used for other schedulers as well if we care to\n     // exercise/track behaviors that are not common to the scheduler api\n-    if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n+    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSFairScheduler.class.getName());\n-    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class){\n+    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n       // TODO add support for FifoScheduler\n-      throw new Exception(\"Fifo Scheduler is not supported yet.\");\n+      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n         return new MockAMLauncher(se, this.rmContext, amMap);\n       }\n     };\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startRM() throws ClassNotFoundException, YarnException {\n    Configuration rmConf \u003d new YarnConfiguration(getConf());\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    // For CapacityScheduler we use a sub-classing instead of wrapping\n    // to allow scheduler-specific invocations from monitors to work\n    // this can be used for other schedulers as well if we care to\n    // exercise/track behaviors that are not common to the scheduler api\n    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n      // TODO add support for FifoScheduler\n      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, amMap);\n      }\n    };\n    rm.init(rmConf);\n    rm.start();\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {
            "oldValue": "[Exception]",
            "newValue": "[ClassNotFoundException, YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
          "commitDate": "20/04/17 9:54 PM",
          "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/17 4:18 PM",
          "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 22.23,
          "commitsBetweenForRepo": 128,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private void startRM() throws Exception {\n-    Configuration rmConf \u003d new YarnConfiguration();\n+  private void startRM() throws ClassNotFoundException, YarnException {\n+    Configuration rmConf \u003d new YarnConfiguration(getConf());\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     // For CapacityScheduler we use a sub-classing instead of wrapping\n     // to allow scheduler-specific invocations from monitors to work\n     // this can be used for other schedulers as well if we care to\n     // exercise/track behaviors that are not common to the scheduler api\n-    if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n+    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n     } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSFairScheduler.class.getName());\n-    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class){\n+    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n       // TODO add support for FifoScheduler\n-      throw new Exception(\"Fifo Scheduler is not supported yet.\");\n+      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n         return new MockAMLauncher(se, this.rmContext, amMap);\n       }\n     };\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startRM() throws ClassNotFoundException, YarnException {\n    Configuration rmConf \u003d new YarnConfiguration(getConf());\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    // For CapacityScheduler we use a sub-classing instead of wrapping\n    // to allow scheduler-specific invocations from monitors to work\n    // this can be used for other schedulers as well if we care to\n    // exercise/track behaviors that are not common to the scheduler api\n    if (Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class) {\n      // TODO add support for FifoScheduler\n      throw new YarnException(\"Fifo Scheduler is not supported yet.\");\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, amMap);\n      }\n    };\n    rm.init(rmConf);\n    rm.start();\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "24/02/17 8:09 AM",
          "commitNameOld": "b32ffa2753e83615b980721b6067fcc35ce54372",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 33.3,
          "commitsBetweenForRepo": 203,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  private void startRM() throws IOException, ClassNotFoundException {\n+  private void startRM() throws Exception {\n     Configuration rmConf \u003d new YarnConfiguration();\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     // For CapacityScheduler we use a sub-classing instead of wrapping\n     // to allow scheduler-specific invocations from monitors to work\n     // this can be used for other schedulers as well if we care to\n     // exercise/track behaviors that are not common to the scheduler api\n     if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n-    } else {\n+    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n-              ResourceSchedulerWrapper.class.getName());\n-      rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n+          SLSFairScheduler.class.getName());\n+    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class){\n+      // TODO add support for FifoScheduler\n+      throw new Exception(\"Fifo Scheduler is not supported yet.\");\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n         return new MockAMLauncher(se, this.rmContext, amMap);\n       }\n     };\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startRM() throws Exception {\n    Configuration rmConf \u003d new YarnConfiguration();\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    // For CapacityScheduler we use a sub-classing instead of wrapping\n    // to allow scheduler-specific invocations from monitors to work\n    // this can be used for other schedulers as well if we care to\n    // exercise/track behaviors that are not common to the scheduler api\n    if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class){\n      // TODO add support for FifoScheduler\n      throw new Exception(\"Fifo Scheduler is not supported yet.\");\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, amMap);\n      }\n    };\n    rm.init(rmConf);\n    rm.start();\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {
            "oldValue": "[IOException, ClassNotFoundException]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "24/02/17 8:09 AM",
          "commitNameOld": "b32ffa2753e83615b980721b6067fcc35ce54372",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 33.3,
          "commitsBetweenForRepo": 203,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  private void startRM() throws IOException, ClassNotFoundException {\n+  private void startRM() throws Exception {\n     Configuration rmConf \u003d new YarnConfiguration();\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     // For CapacityScheduler we use a sub-classing instead of wrapping\n     // to allow scheduler-specific invocations from monitors to work\n     // this can be used for other schedulers as well if we care to\n     // exercise/track behaviors that are not common to the scheduler api\n     if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n-    } else {\n+    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n-              ResourceSchedulerWrapper.class.getName());\n-      rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n+          SLSFairScheduler.class.getName());\n+    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class){\n+      // TODO add support for FifoScheduler\n+      throw new Exception(\"Fifo Scheduler is not supported yet.\");\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n \n     final SLSRunner se \u003d this;\n     rm \u003d new ResourceManager() {\n       @Override\n       protected ApplicationMasterLauncher createAMLauncher() {\n         return new MockAMLauncher(se, this.rmContext, amMap);\n       }\n     };\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startRM() throws Exception {\n    Configuration rmConf \u003d new YarnConfiguration();\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    // For CapacityScheduler we use a sub-classing instead of wrapping\n    // to allow scheduler-specific invocations from monitors to work\n    // this can be used for other schedulers as well if we care to\n    // exercise/track behaviors that are not common to the scheduler api\n    if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FairScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSFairScheduler.class.getName());\n    } else if (Class.forName(schedulerClass) \u003d\u003d FifoScheduler.class){\n      // TODO add support for FifoScheduler\n      throw new Exception(\"Fifo Scheduler is not supported yet.\");\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, amMap);\n      }\n    };\n    rm.init(rmConf);\n    rm.start();\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "b32ffa2753e83615b980721b6067fcc35ce54372": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4779. Fix AM container allocation logic in SLS. Contributed by Wangda Tan.\n",
      "commitDate": "24/02/17 8:09 AM",
      "commitName": "b32ffa2753e83615b980721b6067fcc35ce54372",
      "commitAuthor": "Sunil G",
      "commitDateOld": "06/10/16 8:31 AM",
      "commitNameOld": "2cc841f16ec9aa5336495fc20ee781a1276fddc5",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 141.03,
      "commitsBetweenForRepo": 878,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,29 @@\n   private void startRM() throws IOException, ClassNotFoundException {\n     Configuration rmConf \u003d new YarnConfiguration();\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n \n     // For CapacityScheduler we use a sub-classing instead of wrapping\n     // to allow scheduler-specific invocations from monitors to work\n     // this can be used for other schedulers as well if we care to\n     // exercise/track behaviors that are not common to the scheduler api\n     if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n           SLSCapacityScheduler.class.getName());\n     } else {\n       rmConf.set(YarnConfiguration.RM_SCHEDULER,\n               ResourceSchedulerWrapper.class.getName());\n       rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n     }\n \n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n-    rm \u003d new ResourceManager();\n+\n+    final SLSRunner se \u003d this;\n+    rm \u003d new ResourceManager() {\n+      @Override\n+      protected ApplicationMasterLauncher createAMLauncher() {\n+        return new MockAMLauncher(se, this.rmContext, amMap);\n+      }\n+    };\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startRM() throws IOException, ClassNotFoundException {\n    Configuration rmConf \u003d new YarnConfiguration();\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    // For CapacityScheduler we use a sub-classing instead of wrapping\n    // to allow scheduler-specific invocations from monitors to work\n    // this can be used for other schedulers as well if we care to\n    // exercise/track behaviors that are not common to the scheduler api\n    if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n    } else {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n              ResourceSchedulerWrapper.class.getName());\n      rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n\n    final SLSRunner se \u003d this;\n    rm \u003d new ResourceManager() {\n      @Override\n      protected ApplicationMasterLauncher createAMLauncher() {\n        return new MockAMLauncher(se, this.rmContext, amMap);\n      }\n    };\n    rm.init(rmConf);\n    rm.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "e07f3c87cd3542760efcf713f909375b69eec00f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1471. Preserve scheduler typeinfo in simulator to work with resource monitors.\nContributed by Carlo Curino.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 4:07 PM",
      "commitName": "e07f3c87cd3542760efcf713f909375b69eec00f",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "27/09/13 1:23 PM",
      "commitNameOld": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 82.16,
      "commitsBetweenForRepo": 548,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,22 @@\n   private void startRM() throws IOException, ClassNotFoundException {\n     Configuration rmConf \u003d new YarnConfiguration();\n     String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n-    rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n-    rmConf.set(YarnConfiguration.RM_SCHEDULER,\n-            ResourceSchedulerWrapper.class.getName());\n+\n+    // For CapacityScheduler we use a sub-classing instead of wrapping\n+    // to allow scheduler-specific invocations from monitors to work\n+    // this can be used for other schedulers as well if we care to\n+    // exercise/track behaviors that are not common to the scheduler api\n+    if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n+      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n+          SLSCapacityScheduler.class.getName());\n+    } else {\n+      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n+              ResourceSchedulerWrapper.class.getName());\n+      rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n+    }\n+\n     rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n     rm \u003d new ResourceManager();\n     rm.init(rmConf);\n     rm.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startRM() throws IOException, ClassNotFoundException {\n    Configuration rmConf \u003d new YarnConfiguration();\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n\n    // For CapacityScheduler we use a sub-classing instead of wrapping\n    // to allow scheduler-specific invocations from monitors to work\n    // this can be used for other schedulers as well if we care to\n    // exercise/track behaviors that are not common to the scheduler api\n    if(Class.forName(schedulerClass) \u003d\u003d CapacityScheduler.class) {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n          SLSCapacityScheduler.class.getName());\n    } else {\n      rmConf.set(YarnConfiguration.RM_SCHEDULER,\n              ResourceSchedulerWrapper.class.getName());\n      rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n    }\n\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n    rm \u003d new ResourceManager();\n    rm.init(rmConf);\n    rm.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,11 @@\n+  private void startRM() throws IOException, ClassNotFoundException {\n+    Configuration rmConf \u003d new YarnConfiguration();\n+    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n+    rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n+    rmConf.set(YarnConfiguration.RM_SCHEDULER,\n+            ResourceSchedulerWrapper.class.getName());\n+    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n+    rm \u003d new ResourceManager();\n+    rm.init(rmConf);\n+    rm.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void startRM() throws IOException, ClassNotFoundException {\n    Configuration rmConf \u003d new YarnConfiguration();\n    String schedulerClass \u003d rmConf.get(YarnConfiguration.RM_SCHEDULER);\n    rmConf.set(SLSConfiguration.RM_SCHEDULER, schedulerClass);\n    rmConf.set(YarnConfiguration.RM_SCHEDULER,\n            ResourceSchedulerWrapper.class.getName());\n    rmConf.set(SLSConfiguration.METRICS_OUTPUT_DIR, metricsOutputDir);\n    rm \u003d new ResourceManager();\n    rm.init(rmConf);\n    rm.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}