{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosmosDBDocumentStoreReader.java",
  "functionName": "queryDocuments",
  "functionId": "queryDocuments___collectionName-String__context-TimelineReaderContext__docClass-Class__TimelineDoc__(modifiers-final)__maxDocumentsSize-long(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/cosmosdb/CosmosDBDocumentStoreReader.java",
  "functionStartLine": 143,
  "functionEndLine": 167,
  "numCommitsSeen": 3,
  "timeTaken": 989,
  "changeHistory": [
    "ccaa99c9235e0c6922e56f93254583eca49a12e1",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40"
  ],
  "changeHistoryShort": {
    "ccaa99c9235e0c6922e56f93254583eca49a12e1": "Ybodychange",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccaa99c9235e0c6922e56f93254583eca49a12e1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16381. The JSON License is included in binary tarball via azure-documentdb:1.16.2. Contributed by Sushil Ks.\n",
      "commitDate": "10/07/19 9:49 PM",
      "commitName": "ccaa99c9235e0c6922e56f93254583eca49a12e1",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/04/19 6:28 PM",
      "commitNameOld": "1943db557124439f9f41c18a618455ccf4c3e6cc",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 89.14,
      "commitsBetweenForRepo": 592,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private List\u003cTimelineDoc\u003e queryDocuments(String collectionName,\n       TimelineReaderContext context, final Class\u003cTimelineDoc\u003e docClass,\n       final long maxDocumentsSize) {\n     final String sqlQuery \u003d buildQueryWithPredicates(context, collectionName,\n         maxDocumentsSize);\n-    List\u003cTimelineDoc\u003e timelineDocs \u003d new ArrayList\u003c\u003e();\n     LOG.debug(\"Querying Collection : {} , with query {}\", collectionName,\n         sqlQuery);\n \n-    FeedOptions feedOptions \u003d new FeedOptions();\n-    feedOptions.setPageSize((int) maxDocumentsSize);\n-    Iterator\u003cDocument\u003e documentIterator \u003d client.queryDocuments(\n-        String.format(COLLECTION_LINK, databaseName, collectionName),\n-        sqlQuery, feedOptions).getQueryIterator();\n-    while (documentIterator.hasNext()) {\n-      Document document \u003d documentIterator.next();\n-      TimelineDoc resultDoc \u003d document.toObject(docClass);\n-      if (resultDoc.getCreatedTime() \u003d\u003d 0 \u0026\u0026\n-          document.getTimestamp() !\u003d null) {\n-        resultDoc.setCreatedTime(document.getTimestamp().getTime());\n-      }\n-      timelineDocs.add(resultDoc);\n-    }\n-    return timelineDocs;\n+    return client.queryDocuments(String.format(COLLECTION_LINK,\n+        databaseName, collectionName), sqlQuery, new FeedOptions())\n+        .map(FeedResponse::getResults) // Map the page to the list of documents\n+        .concatMap(Observable::from)\n+        .map(document -\u003e {\n+          TimelineDoc resultDoc \u003d document.toObject(docClass);\n+          if (resultDoc.getCreatedTime() \u003d\u003d 0 \u0026\u0026\n+              document.getTimestamp() !\u003d null) {\n+            resultDoc.setCreatedTime(document.getTimestamp().getTime());\n+          }\n+          return resultDoc;\n+        })\n+        .toList()\n+        .subscribeOn(schedulerForBlockingWork)\n+        .toBlocking()\n+        .single();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineDoc\u003e queryDocuments(String collectionName,\n      TimelineReaderContext context, final Class\u003cTimelineDoc\u003e docClass,\n      final long maxDocumentsSize) {\n    final String sqlQuery \u003d buildQueryWithPredicates(context, collectionName,\n        maxDocumentsSize);\n    LOG.debug(\"Querying Collection : {} , with query {}\", collectionName,\n        sqlQuery);\n\n    return client.queryDocuments(String.format(COLLECTION_LINK,\n        databaseName, collectionName), sqlQuery, new FeedOptions())\n        .map(FeedResponse::getResults) // Map the page to the list of documents\n        .concatMap(Observable::from)\n        .map(document -\u003e {\n          TimelineDoc resultDoc \u003d document.toObject(docClass);\n          if (resultDoc.getCreatedTime() \u003d\u003d 0 \u0026\u0026\n              document.getTimestamp() !\u003d null) {\n            resultDoc.setCreatedTime(document.getTimestamp().getTime());\n          }\n          return resultDoc;\n        })\n        .toList()\n        .subscribeOn(schedulerForBlockingWork)\n        .toBlocking()\n        .single();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/cosmosdb/CosmosDBDocumentStoreReader.java",
      "extendedDetails": {}
    },
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9016 DocumentStore as a backend for ATSv2. Contributed by Sushil Ks.\n",
      "commitDate": "13/03/19 4:45 PM",
      "commitName": "f235a942d5b7cab86f0cb4f5ba285f07cd939a40",
      "commitAuthor": "Vrushali C",
      "diff": "@@ -0,0 +1,25 @@\n+  private List\u003cTimelineDoc\u003e queryDocuments(String collectionName,\n+      TimelineReaderContext context, final Class\u003cTimelineDoc\u003e docClass,\n+      final long maxDocumentsSize) {\n+    final String sqlQuery \u003d buildQueryWithPredicates(context, collectionName,\n+        maxDocumentsSize);\n+    List\u003cTimelineDoc\u003e timelineDocs \u003d new ArrayList\u003c\u003e();\n+    LOG.debug(\"Querying Collection : {} , with query {}\", collectionName,\n+        sqlQuery);\n+\n+    FeedOptions feedOptions \u003d new FeedOptions();\n+    feedOptions.setPageSize((int) maxDocumentsSize);\n+    Iterator\u003cDocument\u003e documentIterator \u003d client.queryDocuments(\n+        String.format(COLLECTION_LINK, databaseName, collectionName),\n+        sqlQuery, feedOptions).getQueryIterator();\n+    while (documentIterator.hasNext()) {\n+      Document document \u003d documentIterator.next();\n+      TimelineDoc resultDoc \u003d document.toObject(docClass);\n+      if (resultDoc.getCreatedTime() \u003d\u003d 0 \u0026\u0026\n+          document.getTimestamp() !\u003d null) {\n+        resultDoc.setCreatedTime(document.getTimestamp().getTime());\n+      }\n+      timelineDocs.add(resultDoc);\n+    }\n+    return timelineDocs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineDoc\u003e queryDocuments(String collectionName,\n      TimelineReaderContext context, final Class\u003cTimelineDoc\u003e docClass,\n      final long maxDocumentsSize) {\n    final String sqlQuery \u003d buildQueryWithPredicates(context, collectionName,\n        maxDocumentsSize);\n    List\u003cTimelineDoc\u003e timelineDocs \u003d new ArrayList\u003c\u003e();\n    LOG.debug(\"Querying Collection : {} , with query {}\", collectionName,\n        sqlQuery);\n\n    FeedOptions feedOptions \u003d new FeedOptions();\n    feedOptions.setPageSize((int) maxDocumentsSize);\n    Iterator\u003cDocument\u003e documentIterator \u003d client.queryDocuments(\n        String.format(COLLECTION_LINK, databaseName, collectionName),\n        sqlQuery, feedOptions).getQueryIterator();\n    while (documentIterator.hasNext()) {\n      Document document \u003d documentIterator.next();\n      TimelineDoc resultDoc \u003d document.toObject(docClass);\n      if (resultDoc.getCreatedTime() \u003d\u003d 0 \u0026\u0026\n          document.getTimestamp() !\u003d null) {\n        resultDoc.setCreatedTime(document.getTimestamp().getTime());\n      }\n      timelineDocs.add(resultDoc);\n    }\n    return timelineDocs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/cosmosdb/CosmosDBDocumentStoreReader.java"
    }
  }
}