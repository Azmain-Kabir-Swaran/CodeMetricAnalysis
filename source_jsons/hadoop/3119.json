{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CredentialBasedAccessTokenProvider.java",
  "functionName": "refresh",
  "functionId": "refresh",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/oauth2/CredentialBasedAccessTokenProvider.java",
  "functionStartLine": 98,
  "functionEndLine": 134,
  "numCommitsSeen": 7,
  "timeTaken": 1336,
  "changeHistory": [
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
    "e6a7044b8530afded8f8e86ff309dd0e4d39238a",
    "837fb75e8e03b2f016bcea2f4605106a5022491c"
  ],
  "changeHistoryShort": {
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939": "Ybodychange",
    "e6a7044b8530afded8f8e86ff309dd0e4d39238a": "Ybodychange",
    "837fb75e8e03b2f016bcea2f4605106a5022491c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15550. Avoid static initialization of ObjectMappers\n",
      "commitDate": "25/06/18 3:36 PM",
      "commitName": "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "12/12/16 6:11 PM",
      "commitNameOld": "2d4731c067ff64cd88f496eac8faaf302faa2ccc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 559.85,
      "commitsBetweenForRepo": 4244,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   void refresh() throws IOException {\n     try {\n       OkHttpClient client \u003d new OkHttpClient();\n       client.setConnectTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n           TimeUnit.MILLISECONDS);\n       client.setReadTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n           TimeUnit.MILLISECONDS);\n \n       String bodyString \u003d Utils.postBody(CLIENT_SECRET, getCredential(),\n           GRANT_TYPE, CLIENT_CREDENTIALS,\n           CLIENT_ID, clientId);\n \n       RequestBody body \u003d RequestBody.create(URLENCODED, bodyString);\n \n       Request request \u003d new Request.Builder()\n           .url(refreshURL)\n           .post(body)\n           .build();\n       Response responseBody \u003d client.newCall(request).execute();\n \n       if (responseBody.code() !\u003d HttpStatus.SC_OK) {\n         throw new IllegalArgumentException(\"Received invalid http response: \"\n             + responseBody.code() + \", text \u003d \" + responseBody.toString());\n       }\n \n-      Map\u003c?, ?\u003e response \u003d READER.readValue(responseBody.body().string());\n+      Map\u003c?, ?\u003e response \u003d JsonSerialization.mapReader().readValue(\n+          responseBody.body().string());\n \n       String newExpiresIn \u003d response.get(EXPIRES_IN).toString();\n       timer.setExpiresIn(newExpiresIn);\n \n       accessToken \u003d response.get(ACCESS_TOKEN).toString();\n \n     } catch (Exception e) {\n       throw new IOException(\"Unable to obtain access token from credential\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void refresh() throws IOException {\n    try {\n      OkHttpClient client \u003d new OkHttpClient();\n      client.setConnectTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n          TimeUnit.MILLISECONDS);\n      client.setReadTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n          TimeUnit.MILLISECONDS);\n\n      String bodyString \u003d Utils.postBody(CLIENT_SECRET, getCredential(),\n          GRANT_TYPE, CLIENT_CREDENTIALS,\n          CLIENT_ID, clientId);\n\n      RequestBody body \u003d RequestBody.create(URLENCODED, bodyString);\n\n      Request request \u003d new Request.Builder()\n          .url(refreshURL)\n          .post(body)\n          .build();\n      Response responseBody \u003d client.newCall(request).execute();\n\n      if (responseBody.code() !\u003d HttpStatus.SC_OK) {\n        throw new IllegalArgumentException(\"Received invalid http response: \"\n            + responseBody.code() + \", text \u003d \" + responseBody.toString());\n      }\n\n      Map\u003c?, ?\u003e response \u003d JsonSerialization.mapReader().readValue(\n          responseBody.body().string());\n\n      String newExpiresIn \u003d response.get(EXPIRES_IN).toString();\n      timer.setExpiresIn(newExpiresIn);\n\n      accessToken \u003d response.get(ACCESS_TOKEN).toString();\n\n    } catch (Exception e) {\n      throw new IOException(\"Unable to obtain access token from credential\", e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/oauth2/CredentialBasedAccessTokenProvider.java",
      "extendedDetails": {}
    },
    "e6a7044b8530afded8f8e86ff309dd0e4d39238a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9768. Reuse ObjectMapper instance in HDFS to improve the performance. Contributed by Lin Yiqun.\n",
      "commitDate": "12/02/16 8:57 AM",
      "commitName": "e6a7044b8530afded8f8e86ff309dd0e4d39238a",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "03/10/15 11:38 AM",
      "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 131.93,
      "commitsBetweenForRepo": 912,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,36 @@\n   void refresh() throws IOException {\n     try {\n       OkHttpClient client \u003d new OkHttpClient();\n       client.setConnectTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n           TimeUnit.MILLISECONDS);\n       client.setReadTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n           TimeUnit.MILLISECONDS);\n \n       String bodyString \u003d Utils.postBody(CLIENT_SECRET, getCredential(),\n           GRANT_TYPE, CLIENT_CREDENTIALS,\n           CLIENT_ID, clientId);\n \n       RequestBody body \u003d RequestBody.create(URLENCODED, bodyString);\n \n       Request request \u003d new Request.Builder()\n           .url(refreshURL)\n           .post(body)\n           .build();\n       Response responseBody \u003d client.newCall(request).execute();\n \n       if (responseBody.code() !\u003d HttpStatus.SC_OK) {\n         throw new IllegalArgumentException(\"Received invalid http response: \"\n             + responseBody.code() + \", text \u003d \" + responseBody.toString());\n       }\n \n-      ObjectMapper mapper \u003d new ObjectMapper();\n-      Map\u003c?, ?\u003e response \u003d mapper.reader(Map.class)\n-          .readValue(responseBody.body().string());\n+      Map\u003c?, ?\u003e response \u003d READER.readValue(responseBody.body().string());\n \n       String newExpiresIn \u003d response.get(EXPIRES_IN).toString();\n       timer.setExpiresIn(newExpiresIn);\n \n       accessToken \u003d response.get(ACCESS_TOKEN).toString();\n \n     } catch (Exception e) {\n       throw new IOException(\"Unable to obtain access token from credential\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void refresh() throws IOException {\n    try {\n      OkHttpClient client \u003d new OkHttpClient();\n      client.setConnectTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n          TimeUnit.MILLISECONDS);\n      client.setReadTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n          TimeUnit.MILLISECONDS);\n\n      String bodyString \u003d Utils.postBody(CLIENT_SECRET, getCredential(),\n          GRANT_TYPE, CLIENT_CREDENTIALS,\n          CLIENT_ID, clientId);\n\n      RequestBody body \u003d RequestBody.create(URLENCODED, bodyString);\n\n      Request request \u003d new Request.Builder()\n          .url(refreshURL)\n          .post(body)\n          .build();\n      Response responseBody \u003d client.newCall(request).execute();\n\n      if (responseBody.code() !\u003d HttpStatus.SC_OK) {\n        throw new IllegalArgumentException(\"Received invalid http response: \"\n            + responseBody.code() + \", text \u003d \" + responseBody.toString());\n      }\n\n      Map\u003c?, ?\u003e response \u003d READER.readValue(responseBody.body().string());\n\n      String newExpiresIn \u003d response.get(EXPIRES_IN).toString();\n      timer.setExpiresIn(newExpiresIn);\n\n      accessToken \u003d response.get(ACCESS_TOKEN).toString();\n\n    } catch (Exception e) {\n      throw new IOException(\"Unable to obtain access token from credential\", e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/oauth2/CredentialBasedAccessTokenProvider.java",
      "extendedDetails": {}
    },
    "837fb75e8e03b2f016bcea2f4605106a5022491c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8155. Support OAuth2 in WebHDFS.\n",
      "commitDate": "29/08/15 6:37 PM",
      "commitName": "837fb75e8e03b2f016bcea2f4605106a5022491c",
      "commitAuthor": "Jakob Homan",
      "diff": "@@ -0,0 +1,38 @@\n+  void refresh() throws IOException {\n+    try {\n+      OkHttpClient client \u003d new OkHttpClient();\n+      client.setConnectTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n+          TimeUnit.MILLISECONDS);\n+      client.setReadTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n+          TimeUnit.MILLISECONDS);\n+\n+      String bodyString \u003d Utils.postBody(CLIENT_SECRET, getCredential(),\n+          GRANT_TYPE, CLIENT_CREDENTIALS,\n+          CLIENT_ID, clientId);\n+\n+      RequestBody body \u003d RequestBody.create(URLENCODED, bodyString);\n+\n+      Request request \u003d new Request.Builder()\n+          .url(refreshURL)\n+          .post(body)\n+          .build();\n+      Response responseBody \u003d client.newCall(request).execute();\n+\n+      if (responseBody.code() !\u003d HttpStatus.SC_OK) {\n+        throw new IllegalArgumentException(\"Received invalid http response: \"\n+            + responseBody.code() + \", text \u003d \" + responseBody.toString());\n+      }\n+\n+      ObjectMapper mapper \u003d new ObjectMapper();\n+      Map\u003c?, ?\u003e response \u003d mapper.reader(Map.class)\n+          .readValue(responseBody.body().string());\n+      \n+      String newExpiresIn \u003d response.get(EXPIRES_IN).toString();\n+      timer.setExpiresIn(newExpiresIn);\n+\n+      accessToken \u003d response.get(ACCESS_TOKEN).toString();\n+\n+    } catch (Exception e) {\n+      throw new IOException(\"Unable to obtain access token from credential\", e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void refresh() throws IOException {\n    try {\n      OkHttpClient client \u003d new OkHttpClient();\n      client.setConnectTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n          TimeUnit.MILLISECONDS);\n      client.setReadTimeout(URLConnectionFactory.DEFAULT_SOCKET_TIMEOUT,\n          TimeUnit.MILLISECONDS);\n\n      String bodyString \u003d Utils.postBody(CLIENT_SECRET, getCredential(),\n          GRANT_TYPE, CLIENT_CREDENTIALS,\n          CLIENT_ID, clientId);\n\n      RequestBody body \u003d RequestBody.create(URLENCODED, bodyString);\n\n      Request request \u003d new Request.Builder()\n          .url(refreshURL)\n          .post(body)\n          .build();\n      Response responseBody \u003d client.newCall(request).execute();\n\n      if (responseBody.code() !\u003d HttpStatus.SC_OK) {\n        throw new IllegalArgumentException(\"Received invalid http response: \"\n            + responseBody.code() + \", text \u003d \" + responseBody.toString());\n      }\n\n      ObjectMapper mapper \u003d new ObjectMapper();\n      Map\u003c?, ?\u003e response \u003d mapper.reader(Map.class)\n          .readValue(responseBody.body().string());\n      \n      String newExpiresIn \u003d response.get(EXPIRES_IN).toString();\n      timer.setExpiresIn(newExpiresIn);\n\n      accessToken \u003d response.get(ACCESS_TOKEN).toString();\n\n    } catch (Exception e) {\n      throw new IOException(\"Unable to obtain access token from credential\", e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/oauth2/CredentialBasedAccessTokenProvider.java"
    }
  }
}