{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineEntityReader.java",
  "functionName": "readEvents",
  "functionId": "readEvents___entity-TimelineEntity__result-Result__prefix-ColumnPrefix__T__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
  "functionStartLine": 475,
  "functionEndLine": 501,
  "numCommitsSeen": 41,
  "timeTaken": 8189,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
    "b51d0fef56a59b15489f5b932025718b4e9613d2",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9",
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
    "00e85e7a2b9446dc37265feba07473b156d66367",
    "9e5155be363c6610ccf41fe08b7f1394f353ea65"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ybodychange",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": "Yfilerename",
    "b51d0fef56a59b15489f5b932025718b4e9613d2": "Ybodychange",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78": "Ybodychange",
    "00e85e7a2b9446dc37265feba07473b156d66367": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+  protected static \u003cT extends BaseTable\u003cT\u003e\u003e void readEvents(\n+      TimelineEntity entity, Result result,\n       ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n-        prefix.readResults(result, new EventColumnNameConverter());\n+    Map\u003cEventColumnName, Object\u003e eventsResult \u003d ColumnRWHelper.readResults(\n+        result, prefix, new EventColumnNameConverter());\n     for (Map.Entry\u003cEventColumnName, Object\u003e\n              eventResult : eventsResult.entrySet()) {\n       EventColumnName eventColumnName \u003d eventResult.getKey();\n       String key \u003d eventColumnName.getId() +\n           Long.toString(eventColumnName.getTimestamp());\n       // Retrieve previously seen event to add to it\n       TimelineEvent event \u003d eventsMap.get(key);\n       if (event \u003d\u003d null) {\n         // First time we\u0027re seeing this event, add it to the eventsMap\n         event \u003d new TimelineEvent();\n         event.setId(eventColumnName.getId());\n         event.setTimestamp(eventColumnName.getTimestamp());\n         eventsMap.put(key, event);\n       }\n       if (eventColumnName.getInfoKey() !\u003d null) {\n         event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static \u003cT extends BaseTable\u003cT\u003e\u003e void readEvents(\n      TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cEventColumnName, Object\u003e eventsResult \u003d ColumnRWHelper.readResults(\n        result, prefix, new EventColumnNameConverter());\n    for (Map.Entry\u003cEventColumnName, Object\u003e\n             eventResult : eventsResult.entrySet()) {\n      EventColumnName eventColumnName \u003d eventResult.getKey();\n      String key \u003d eventColumnName.getId() +\n          Long.toString(eventColumnName.getTimestamp());\n      // Retrieve previously seen event to add to it\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        // First time we\u0027re seeing this event, add it to the eventsMap\n        event \u003d new TimelineEvent();\n        event.setId(eventColumnName.getId());\n        event.setTimestamp(eventColumnName.getTimestamp());\n        eventsMap.put(key, event);\n      }\n      if (eventColumnName.getInfoKey() !\u003d null) {\n        event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+  protected static \u003cT extends BaseTable\u003cT\u003e\u003e void readEvents(\n+      TimelineEntity entity, Result result,\n       ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n-        prefix.readResults(result, new EventColumnNameConverter());\n+    Map\u003cEventColumnName, Object\u003e eventsResult \u003d ColumnRWHelper.readResults(\n+        result, prefix, new EventColumnNameConverter());\n     for (Map.Entry\u003cEventColumnName, Object\u003e\n              eventResult : eventsResult.entrySet()) {\n       EventColumnName eventColumnName \u003d eventResult.getKey();\n       String key \u003d eventColumnName.getId() +\n           Long.toString(eventColumnName.getTimestamp());\n       // Retrieve previously seen event to add to it\n       TimelineEvent event \u003d eventsMap.get(key);\n       if (event \u003d\u003d null) {\n         // First time we\u0027re seeing this event, add it to the eventsMap\n         event \u003d new TimelineEvent();\n         event.setId(eventColumnName.getId());\n         event.setTimestamp(eventColumnName.getTimestamp());\n         eventsMap.put(key, event);\n       }\n       if (eventColumnName.getInfoKey() !\u003d null) {\n         event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static \u003cT extends BaseTable\u003cT\u003e\u003e void readEvents(\n      TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cEventColumnName, Object\u003e eventsResult \u003d ColumnRWHelper.readResults(\n        result, prefix, new EventColumnNameConverter());\n    for (Map.Entry\u003cEventColumnName, Object\u003e\n             eventResult : eventsResult.entrySet()) {\n      EventColumnName eventColumnName \u003d eventResult.getKey();\n      String key \u003d eventColumnName.getId() +\n          Long.toString(eventColumnName.getTimestamp());\n      // Retrieve previously seen event to add to it\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        // First time we\u0027re seeing this event, add it to the eventsMap\n        event \u003d new TimelineEvent();\n        event.setId(eventColumnName.getId());\n        event.setTimestamp(eventColumnName.getTimestamp());\n        eventsMap.put(key, event);\n      }\n      if (eventColumnName.getInfoKey() !\u003d null) {\n        event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n        prefix.readResults(result, new EventColumnNameConverter());\n    for (Map.Entry\u003cEventColumnName, Object\u003e\n             eventResult : eventsResult.entrySet()) {\n      EventColumnName eventColumnName \u003d eventResult.getKey();\n      String key \u003d eventColumnName.getId() +\n          Long.toString(eventColumnName.getTimestamp());\n      // Retrieve previously seen event to add to it\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        // First time we\u0027re seeing this event, add it to the eventsMap\n        event \u003d new TimelineEvent();\n        event.setId(eventColumnName.getId());\n        event.setTimestamp(eventColumnName.getTimestamp());\n        eventsMap.put(key, event);\n      }\n      if (eventColumnName.getInfoKey() !\u003d null) {\n        event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "3832795e3c3ea9dcf5c70f348f894882b2ace98e",
          "commitAuthorOld": "Vrushali Channapattan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n       ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n     Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n-        prefix.readResults(result, EventColumnNameConverter.getInstance());\n+        prefix.readResults(result, new EventColumnNameConverter());\n     for (Map.Entry\u003cEventColumnName, Object\u003e\n              eventResult : eventsResult.entrySet()) {\n       EventColumnName eventColumnName \u003d eventResult.getKey();\n       String key \u003d eventColumnName.getId() +\n           Long.toString(eventColumnName.getTimestamp());\n       // Retrieve previously seen event to add to it\n       TimelineEvent event \u003d eventsMap.get(key);\n       if (event \u003d\u003d null) {\n         // First time we\u0027re seeing this event, add it to the eventsMap\n         event \u003d new TimelineEvent();\n         event.setId(eventColumnName.getId());\n         event.setTimestamp(eventColumnName.getTimestamp());\n         eventsMap.put(key, event);\n       }\n       if (eventColumnName.getInfoKey() !\u003d null) {\n         event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n        prefix.readResults(result, new EventColumnNameConverter());\n    for (Map.Entry\u003cEventColumnName, Object\u003e\n             eventResult : eventsResult.entrySet()) {\n      EventColumnName eventColumnName \u003d eventResult.getKey();\n      String key \u003d eventColumnName.getId() +\n          Long.toString(eventColumnName.getTimestamp());\n      // Retrieve previously seen event to add to it\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        // First time we\u0027re seeing this event, add it to the eventsMap\n        event \u003d new TimelineEvent();\n        event.setId(eventColumnName.getId());\n        event.setTimestamp(eventColumnName.getTimestamp());\n        eventsMap.put(key, event);\n      }\n      if (eventColumnName.getInfoKey() !\u003d null) {\n        event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
            "oldMethodName": "readEvents",
            "newMethodName": "readEvents"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "3832795e3c3ea9dcf5c70f348f894882b2ace98e",
          "commitAuthorOld": "Vrushali Channapattan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n       ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n     Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n-        prefix.readResults(result, EventColumnNameConverter.getInstance());\n+        prefix.readResults(result, new EventColumnNameConverter());\n     for (Map.Entry\u003cEventColumnName, Object\u003e\n              eventResult : eventsResult.entrySet()) {\n       EventColumnName eventColumnName \u003d eventResult.getKey();\n       String key \u003d eventColumnName.getId() +\n           Long.toString(eventColumnName.getTimestamp());\n       // Retrieve previously seen event to add to it\n       TimelineEvent event \u003d eventsMap.get(key);\n       if (event \u003d\u003d null) {\n         // First time we\u0027re seeing this event, add it to the eventsMap\n         event \u003d new TimelineEvent();\n         event.setId(eventColumnName.getId());\n         event.setTimestamp(eventColumnName.getTimestamp());\n         eventsMap.put(key, event);\n       }\n       if (eventColumnName.getInfoKey() !\u003d null) {\n         event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n        prefix.readResults(result, new EventColumnNameConverter());\n    for (Map.Entry\u003cEventColumnName, Object\u003e\n             eventResult : eventsResult.entrySet()) {\n      EventColumnName eventColumnName \u003d eventResult.getKey();\n      String key \u003d eventColumnName.getId() +\n          Long.toString(eventColumnName.getTimestamp());\n      // Retrieve previously seen event to add to it\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        // First time we\u0027re seeing this event, add it to the eventsMap\n        event \u003d new TimelineEvent();\n        event.setId(eventColumnName.getId());\n        event.setTimestamp(eventColumnName.getTimestamp());\n        eventsMap.put(key, event);\n      }\n      if (eventColumnName.getInfoKey() !\u003d null) {\n        event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[protected, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "3832795e3c3ea9dcf5c70f348f894882b2ace98e",
          "commitAuthorOld": "Vrushali Channapattan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n       ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n     Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n-        prefix.readResults(result, EventColumnNameConverter.getInstance());\n+        prefix.readResults(result, new EventColumnNameConverter());\n     for (Map.Entry\u003cEventColumnName, Object\u003e\n              eventResult : eventsResult.entrySet()) {\n       EventColumnName eventColumnName \u003d eventResult.getKey();\n       String key \u003d eventColumnName.getId() +\n           Long.toString(eventColumnName.getTimestamp());\n       // Retrieve previously seen event to add to it\n       TimelineEvent event \u003d eventsMap.get(key);\n       if (event \u003d\u003d null) {\n         // First time we\u0027re seeing this event, add it to the eventsMap\n         event \u003d new TimelineEvent();\n         event.setId(eventColumnName.getId());\n         event.setTimestamp(eventColumnName.getTimestamp());\n         eventsMap.put(key, event);\n       }\n       if (eventColumnName.getInfoKey() !\u003d null) {\n         event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n        prefix.readResults(result, new EventColumnNameConverter());\n    for (Map.Entry\u003cEventColumnName, Object\u003e\n             eventResult : eventsResult.entrySet()) {\n      EventColumnName eventColumnName \u003d eventResult.getKey();\n      String key \u003d eventColumnName.getId() +\n          Long.toString(eventColumnName.getTimestamp());\n      // Retrieve previously seen event to add to it\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        // First time we\u0027re seeing this event, add it to the eventsMap\n        event \u003d new TimelineEvent();\n        event.setId(eventColumnName.getId());\n        event.setTimestamp(eventColumnName.getTimestamp());\n        eventsMap.put(key, event);\n      }\n      if (eventColumnName.getInfoKey() !\u003d null) {\n        event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "69dc561b61bf694cfdf0d2059f4f3dcee30e0632",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,26 @@\n   public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n       ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003c?, Object\u003e eventsResult \u003d\n-        prefix.readResultsHavingCompoundColumnQualifiers(result);\n-    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n-      byte[][] karr \u003d (byte[][])eventResult.getKey();\n-      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n-      if (karr.length \u003d\u003d 3) {\n-        String id \u003d Bytes.toString(karr[0]);\n-        long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n-        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n-        TimelineEvent event \u003d eventsMap.get(key);\n-        if (event \u003d\u003d null) {\n-          event \u003d new TimelineEvent();\n-          event.setId(id);\n-          event.setTimestamp(ts);\n-          eventsMap.put(key, event);\n-        }\n-        // handle empty info\n-        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n-        if (infoKey !\u003d null) {\n-          event.addInfo(infoKey, eventResult.getValue());\n-        }\n-      } else {\n-        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n-        continue;\n+    Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n+        prefix.readResults(result, EventColumnNameConverter.getInstance());\n+    for (Map.Entry\u003cEventColumnName, Object\u003e\n+             eventResult : eventsResult.entrySet()) {\n+      EventColumnName eventColumnName \u003d eventResult.getKey();\n+      String key \u003d eventColumnName.getId() +\n+          Long.toString(eventColumnName.getTimestamp());\n+      // Retrieve previously seen event to add to it\n+      TimelineEvent event \u003d eventsMap.get(key);\n+      if (event \u003d\u003d null) {\n+        // First time we\u0027re seeing this event, add it to the eventsMap\n+        event \u003d new TimelineEvent();\n+        event.setId(eventColumnName.getId());\n+        event.setTimestamp(eventColumnName.getTimestamp());\n+        eventsMap.put(key, event);\n+      }\n+      if (eventColumnName.getInfoKey() !\u003d null) {\n+        event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cEventColumnName, Object\u003e eventsResult \u003d\n        prefix.readResults(result, EventColumnNameConverter.getInstance());\n    for (Map.Entry\u003cEventColumnName, Object\u003e\n             eventResult : eventsResult.entrySet()) {\n      EventColumnName eventColumnName \u003d eventResult.getKey();\n      String key \u003d eventColumnName.getId() +\n          Long.toString(eventColumnName.getTimestamp());\n      // Retrieve previously seen event to add to it\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        // First time we\u0027re seeing this event, add it to the eventsMap\n        event \u003d new TimelineEvent();\n        event.setId(eventColumnName.getId());\n        event.setTimestamp(eventColumnName.getTimestamp());\n        eventsMap.put(key, event);\n      }\n      if (eventColumnName.getInfoKey() !\u003d null) {\n        event.addInfo(eventColumnName.getInfoKey(), eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
      "extendedDetails": {}
    },
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,32 @@\n-  protected void readEvents(TimelineEntity entity, Result result,\n-      boolean isApplication) throws IOException {\n+  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n-        ApplicationColumnPrefix.EVENT.\n-            readResultsHavingCompoundColumnQualifiers(result) :\n-        EntityColumnPrefix.EVENT.\n-            readResultsHavingCompoundColumnQualifiers(result);\n+    Map\u003c?, Object\u003e eventsResult \u003d\n+        prefix.readResultsHavingCompoundColumnQualifiers(result);\n     for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n       byte[][] karr \u003d (byte[][])eventResult.getKey();\n       // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n       if (karr.length \u003d\u003d 3) {\n         String id \u003d Bytes.toString(karr[0]);\n         long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n         String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n         TimelineEvent event \u003d eventsMap.get(key);\n         if (event \u003d\u003d null) {\n           event \u003d new TimelineEvent();\n           event.setId(id);\n           event.setTimestamp(ts);\n           eventsMap.put(key, event);\n         }\n         // handle empty info\n         String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n         if (infoKey !\u003d null) {\n           event.addInfo(infoKey, eventResult.getValue());\n         }\n       } else {\n         LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n         continue;\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d\n        prefix.readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
            "oldMethodName": "readEvents",
            "newMethodName": "readEvents"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,32 @@\n-  protected void readEvents(TimelineEntity entity, Result result,\n-      boolean isApplication) throws IOException {\n+  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n-        ApplicationColumnPrefix.EVENT.\n-            readResultsHavingCompoundColumnQualifiers(result) :\n-        EntityColumnPrefix.EVENT.\n-            readResultsHavingCompoundColumnQualifiers(result);\n+    Map\u003c?, Object\u003e eventsResult \u003d\n+        prefix.readResultsHavingCompoundColumnQualifiers(result);\n     for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n       byte[][] karr \u003d (byte[][])eventResult.getKey();\n       // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n       if (karr.length \u003d\u003d 3) {\n         String id \u003d Bytes.toString(karr[0]);\n         long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n         String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n         TimelineEvent event \u003d eventsMap.get(key);\n         if (event \u003d\u003d null) {\n           event \u003d new TimelineEvent();\n           event.setId(id);\n           event.setTimestamp(ts);\n           eventsMap.put(key, event);\n         }\n         // handle empty info\n         String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n         if (infoKey !\u003d null) {\n           event.addInfo(infoKey, eventResult.getValue());\n         }\n       } else {\n         LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n         continue;\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d\n        prefix.readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,32 @@\n-  protected void readEvents(TimelineEntity entity, Result result,\n-      boolean isApplication) throws IOException {\n+  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n-        ApplicationColumnPrefix.EVENT.\n-            readResultsHavingCompoundColumnQualifiers(result) :\n-        EntityColumnPrefix.EVENT.\n-            readResultsHavingCompoundColumnQualifiers(result);\n+    Map\u003c?, Object\u003e eventsResult \u003d\n+        prefix.readResultsHavingCompoundColumnQualifiers(result);\n     for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n       byte[][] karr \u003d (byte[][])eventResult.getKey();\n       // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n       if (karr.length \u003d\u003d 3) {\n         String id \u003d Bytes.toString(karr[0]);\n         long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n         String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n         TimelineEvent event \u003d eventsMap.get(key);\n         if (event \u003d\u003d null) {\n           event \u003d new TimelineEvent();\n           event.setId(id);\n           event.setTimestamp(ts);\n           eventsMap.put(key, event);\n         }\n         // handle empty info\n         String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n         if (infoKey !\u003d null) {\n           event.addInfo(infoKey, eventResult.getValue());\n         }\n       } else {\n         LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n         continue;\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d\n        prefix.readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,32 @@\n-  protected void readEvents(TimelineEntity entity, Result result,\n-      boolean isApplication) throws IOException {\n+  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n+      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n-        ApplicationColumnPrefix.EVENT.\n-            readResultsHavingCompoundColumnQualifiers(result) :\n-        EntityColumnPrefix.EVENT.\n-            readResultsHavingCompoundColumnQualifiers(result);\n+    Map\u003c?, Object\u003e eventsResult \u003d\n+        prefix.readResultsHavingCompoundColumnQualifiers(result);\n     for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n       byte[][] karr \u003d (byte[][])eventResult.getKey();\n       // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n       if (karr.length \u003d\u003d 3) {\n         String id \u003d Bytes.toString(karr[0]);\n         long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n         String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n         TimelineEvent event \u003d eventsMap.get(key);\n         if (event \u003d\u003d null) {\n           event \u003d new TimelineEvent();\n           event.setId(id);\n           event.setTimestamp(ts);\n           eventsMap.put(key, event);\n         }\n         // handle empty info\n         String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n         if (infoKey !\u003d null) {\n           event.addInfo(infoKey, eventResult.getValue());\n         }\n       } else {\n         LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n         continue;\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e void readEvents(TimelineEntity entity, Result result,\n      ColumnPrefix\u003cT\u003e prefix) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d\n        prefix.readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[entity-TimelineEntity, result-Result, isApplication-boolean]",
            "newValue": "[entity-TimelineEntity, result-Result, prefix-ColumnPrefix\u003cT\u003e]"
          }
        }
      ]
    },
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": {
      "type": "Yfilerename",
      "commitMessage": "YARN-4200. Refactor reader classes in storage to nest under hbase\nspecific package name. Contributed by Li Lu.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "cc16683cefe2611cf4de7819496aa54854f5394c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void readEvents(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n        ApplicationColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result) :\n        EntityColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
      }
    },
    "b51d0fef56a59b15489f5b932025718b4e9613d2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4178. [storage implementation] app id as string in row keys can cause incorrect ordering (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "b51d0fef56a59b15489f5b932025718b4e9613d2",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   protected void readEvents(TimelineEntity entity, Result result,\n       boolean isApplication) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n     Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n         ApplicationColumnPrefix.EVENT.\n             readResultsHavingCompoundColumnQualifiers(result) :\n         EntityColumnPrefix.EVENT.\n             readResultsHavingCompoundColumnQualifiers(result);\n     for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n       byte[][] karr \u003d (byte[][])eventResult.getKey();\n       // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n       if (karr.length \u003d\u003d 3) {\n         String id \u003d Bytes.toString(karr[0]);\n-        long ts \u003d TimelineWriterUtils.invert(Bytes.toLong(karr[1]));\n+        long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n         String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n         TimelineEvent event \u003d eventsMap.get(key);\n         if (event \u003d\u003d null) {\n           event \u003d new TimelineEvent();\n           event.setId(id);\n           event.setTimestamp(ts);\n           eventsMap.put(key, event);\n         }\n         // handle empty info\n         String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n         if (infoKey !\u003d null) {\n           event.addInfo(infoKey, eventResult.getValue());\n         }\n       } else {\n         LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n         continue;\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void readEvents(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n        ApplicationColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result) :\n        EntityColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineStorageUtils.invertLong(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
      "extendedDetails": {}
    },
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
      "commitAuthor": "Vrushali",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
          "commitAuthor": "Vrushali",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  private static void readEvents(TimelineEntity entity, Result result,\n+  protected void readEvents(TimelineEntity entity, Result result,\n       boolean isApplication) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n     Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n         ApplicationColumnPrefix.EVENT.\n             readResultsHavingCompoundColumnQualifiers(result) :\n         EntityColumnPrefix.EVENT.\n             readResultsHavingCompoundColumnQualifiers(result);\n     for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n       byte[][] karr \u003d (byte[][])eventResult.getKey();\n       // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n       if (karr.length \u003d\u003d 3) {\n         String id \u003d Bytes.toString(karr[0]);\n         long ts \u003d TimelineWriterUtils.invert(Bytes.toLong(karr[1]));\n         String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n         TimelineEvent event \u003d eventsMap.get(key);\n         if (event \u003d\u003d null) {\n           event \u003d new TimelineEvent();\n           event.setId(id);\n           event.setTimestamp(ts);\n           eventsMap.put(key, event);\n         }\n         // handle empty info\n         String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n         if (infoKey !\u003d null) {\n           event.addInfo(infoKey, eventResult.getValue());\n         }\n       } else {\n         LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n         continue;\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void readEvents(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n        ApplicationColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result) :\n        EntityColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineWriterUtils.invert(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
            "oldMethodName": "readEvents",
            "newMethodName": "readEvents"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
          "commitAuthor": "Vrushali",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  private static void readEvents(TimelineEntity entity, Result result,\n+  protected void readEvents(TimelineEntity entity, Result result,\n       boolean isApplication) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n     Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n         ApplicationColumnPrefix.EVENT.\n             readResultsHavingCompoundColumnQualifiers(result) :\n         EntityColumnPrefix.EVENT.\n             readResultsHavingCompoundColumnQualifiers(result);\n     for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n       byte[][] karr \u003d (byte[][])eventResult.getKey();\n       // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n       if (karr.length \u003d\u003d 3) {\n         String id \u003d Bytes.toString(karr[0]);\n         long ts \u003d TimelineWriterUtils.invert(Bytes.toLong(karr[1]));\n         String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n         TimelineEvent event \u003d eventsMap.get(key);\n         if (event \u003d\u003d null) {\n           event \u003d new TimelineEvent();\n           event.setId(id);\n           event.setTimestamp(ts);\n           eventsMap.put(key, event);\n         }\n         // handle empty info\n         String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n         if (infoKey !\u003d null) {\n           event.addInfo(infoKey, eventResult.getValue());\n         }\n       } else {\n         LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n         continue;\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void readEvents(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n        ApplicationColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result) :\n        EntityColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineWriterUtils.invert(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[protected]"
          }
        }
      ]
    },
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4025. Deal with byte representations of Longs in writer code. Contributed by Sangjin Lee and Vrushali C.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "00e85e7a2b9446dc37265feba07473b156d66367",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n   private static void readEvents(TimelineEntity entity, Result result,\n       boolean isApplication) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003cString, Object\u003e eventsResult \u003d isApplication ?\n-        ApplicationColumnPrefix.EVENT.readResults(result) :\n-        EntityColumnPrefix.EVENT.readResults(result);\n-    for (Map.Entry\u003cString,Object\u003e eventResult : eventsResult.entrySet()) {\n-      Collection\u003cString\u003e tokens \u003d\n-          Separator.VALUES.splitEncoded(eventResult.getKey());\n-      if (tokens.size() !\u003d 2 \u0026\u0026 tokens.size() !\u003d 3) {\n-        throw new IOException(\n-            \"Invalid event column name: \" + eventResult.getKey());\n-      }\n-      Iterator\u003cString\u003e idItr \u003d tokens.iterator();\n-      String id \u003d idItr.next();\n-      String tsStr \u003d idItr.next();\n-      // TODO: timestamp is not correct via ser/des through UTF-8 string\n-      Long ts \u003d\n-          TimelineWriterUtils.invert(Bytes.toLong(tsStr.getBytes(\n-              StandardCharsets.UTF_8)));\n-      String key \u003d Separator.VALUES.joinEncoded(id, ts.toString());\n-      TimelineEvent event \u003d eventsMap.get(key);\n-      if (event \u003d\u003d null) {\n-        event \u003d new TimelineEvent();\n-        event.setId(id);\n-        event.setTimestamp(ts);\n-        eventsMap.put(key, event);\n-      }\n-      if (tokens.size() \u003d\u003d 3) {\n-        String infoKey \u003d idItr.next();\n-        event.addInfo(infoKey, eventResult.getValue());\n+    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n+        ApplicationColumnPrefix.EVENT.\n+            readResultsHavingCompoundColumnQualifiers(result) :\n+        EntityColumnPrefix.EVENT.\n+            readResultsHavingCompoundColumnQualifiers(result);\n+    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n+      byte[][] karr \u003d (byte[][])eventResult.getKey();\n+      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n+      if (karr.length \u003d\u003d 3) {\n+        String id \u003d Bytes.toString(karr[0]);\n+        long ts \u003d TimelineWriterUtils.invert(Bytes.toLong(karr[1]));\n+        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n+        TimelineEvent event \u003d eventsMap.get(key);\n+        if (event \u003d\u003d null) {\n+          event \u003d new TimelineEvent();\n+          event.setId(id);\n+          event.setTimestamp(ts);\n+          eventsMap.put(key, event);\n+        }\n+        // handle empty info\n+        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n+        if (infoKey !\u003d null) {\n+          event.addInfo(infoKey, eventResult.getValue());\n+        }\n+      } else {\n+        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n+        continue;\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void readEvents(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003c?, Object\u003e eventsResult \u003d isApplication ?\n        ApplicationColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result) :\n        EntityColumnPrefix.EVENT.\n            readResultsHavingCompoundColumnQualifiers(result);\n    for (Map.Entry\u003c?, Object\u003e eventResult : eventsResult.entrySet()) {\n      byte[][] karr \u003d (byte[][])eventResult.getKey();\n      // the column name is of the form \"eventId\u003dtimestamp\u003dinfoKey\"\n      if (karr.length \u003d\u003d 3) {\n        String id \u003d Bytes.toString(karr[0]);\n        long ts \u003d TimelineWriterUtils.invert(Bytes.toLong(karr[1]));\n        String key \u003d Separator.VALUES.joinEncoded(id, Long.toString(ts));\n        TimelineEvent event \u003d eventsMap.get(key);\n        if (event \u003d\u003d null) {\n          event \u003d new TimelineEvent();\n          event.setId(id);\n          event.setTimestamp(ts);\n          eventsMap.put(key, event);\n        }\n        // handle empty info\n        String infoKey \u003d karr[2].length \u003d\u003d 0 ? null : Bytes.toString(karr[2]);\n        if (infoKey !\u003d null) {\n          event.addInfo(infoKey, eventResult.getValue());\n        }\n      } else {\n        LOG.warn(\"incorrectly formatted column name: it will be discarded\");\n        continue;\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java",
      "extendedDetails": {}
    },
    "00e85e7a2b9446dc37265feba07473b156d66367": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,36 @@\n-  private static void readEvents(TimelineEntity entity, Result result)\n-      throws IOException {\n+  private static void readEvents(TimelineEntity entity, Result result,\n+      boolean isApplication) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003cString, Object\u003e eventsResult \u003d\n+    Map\u003cString, Object\u003e eventsResult \u003d isApplication ?\n+        ApplicationColumnPrefix.EVENT.readResults(result) :\n         EntityColumnPrefix.EVENT.readResults(result);\n     for (Map.Entry\u003cString,Object\u003e eventResult : eventsResult.entrySet()) {\n       Collection\u003cString\u003e tokens \u003d\n           Separator.VALUES.splitEncoded(eventResult.getKey());\n       if (tokens.size() !\u003d 2 \u0026\u0026 tokens.size() !\u003d 3) {\n         throw new IOException(\n             \"Invalid event column name: \" + eventResult.getKey());\n       }\n       Iterator\u003cString\u003e idItr \u003d tokens.iterator();\n       String id \u003d idItr.next();\n       String tsStr \u003d idItr.next();\n       // TODO: timestamp is not correct via ser/des through UTF-8 string\n       Long ts \u003d\n           TimelineWriterUtils.invert(Bytes.toLong(tsStr.getBytes(\n               StandardCharsets.UTF_8)));\n       String key \u003d Separator.VALUES.joinEncoded(id, ts.toString());\n       TimelineEvent event \u003d eventsMap.get(key);\n       if (event \u003d\u003d null) {\n         event \u003d new TimelineEvent();\n         event.setId(id);\n         event.setTimestamp(ts);\n         eventsMap.put(key, event);\n       }\n       if (tokens.size() \u003d\u003d 3) {\n         String infoKey \u003d idItr.next();\n         event.addInfo(infoKey, eventResult.getValue());\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void readEvents(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cString, Object\u003e eventsResult \u003d isApplication ?\n        ApplicationColumnPrefix.EVENT.readResults(result) :\n        EntityColumnPrefix.EVENT.readResults(result);\n    for (Map.Entry\u003cString,Object\u003e eventResult : eventsResult.entrySet()) {\n      Collection\u003cString\u003e tokens \u003d\n          Separator.VALUES.splitEncoded(eventResult.getKey());\n      if (tokens.size() !\u003d 2 \u0026\u0026 tokens.size() !\u003d 3) {\n        throw new IOException(\n            \"Invalid event column name: \" + eventResult.getKey());\n      }\n      Iterator\u003cString\u003e idItr \u003d tokens.iterator();\n      String id \u003d idItr.next();\n      String tsStr \u003d idItr.next();\n      // TODO: timestamp is not correct via ser/des through UTF-8 string\n      Long ts \u003d\n          TimelineWriterUtils.invert(Bytes.toLong(tsStr.getBytes(\n              StandardCharsets.UTF_8)));\n      String key \u003d Separator.VALUES.joinEncoded(id, ts.toString());\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        event \u003d new TimelineEvent();\n        event.setId(id);\n        event.setTimestamp(ts);\n        eventsMap.put(key, event);\n      }\n      if (tokens.size() \u003d\u003d 3) {\n        String infoKey \u003d idItr.next();\n        event.addInfo(infoKey, eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java",
          "extendedDetails": {
            "oldValue": "[entity-TimelineEntity, result-Result]",
            "newValue": "[entity-TimelineEntity, result-Result, isApplication-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,36 @@\n-  private static void readEvents(TimelineEntity entity, Result result)\n-      throws IOException {\n+  private static void readEvents(TimelineEntity entity, Result result,\n+      boolean isApplication) throws IOException {\n     Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n-    Map\u003cString, Object\u003e eventsResult \u003d\n+    Map\u003cString, Object\u003e eventsResult \u003d isApplication ?\n+        ApplicationColumnPrefix.EVENT.readResults(result) :\n         EntityColumnPrefix.EVENT.readResults(result);\n     for (Map.Entry\u003cString,Object\u003e eventResult : eventsResult.entrySet()) {\n       Collection\u003cString\u003e tokens \u003d\n           Separator.VALUES.splitEncoded(eventResult.getKey());\n       if (tokens.size() !\u003d 2 \u0026\u0026 tokens.size() !\u003d 3) {\n         throw new IOException(\n             \"Invalid event column name: \" + eventResult.getKey());\n       }\n       Iterator\u003cString\u003e idItr \u003d tokens.iterator();\n       String id \u003d idItr.next();\n       String tsStr \u003d idItr.next();\n       // TODO: timestamp is not correct via ser/des through UTF-8 string\n       Long ts \u003d\n           TimelineWriterUtils.invert(Bytes.toLong(tsStr.getBytes(\n               StandardCharsets.UTF_8)));\n       String key \u003d Separator.VALUES.joinEncoded(id, ts.toString());\n       TimelineEvent event \u003d eventsMap.get(key);\n       if (event \u003d\u003d null) {\n         event \u003d new TimelineEvent();\n         event.setId(id);\n         event.setTimestamp(ts);\n         eventsMap.put(key, event);\n       }\n       if (tokens.size() \u003d\u003d 3) {\n         String infoKey \u003d idItr.next();\n         event.addInfo(infoKey, eventResult.getValue());\n       }\n     }\n     Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n     entity.addEvents(eventsSet);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void readEvents(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cString, Object\u003e eventsResult \u003d isApplication ?\n        ApplicationColumnPrefix.EVENT.readResults(result) :\n        EntityColumnPrefix.EVENT.readResults(result);\n    for (Map.Entry\u003cString,Object\u003e eventResult : eventsResult.entrySet()) {\n      Collection\u003cString\u003e tokens \u003d\n          Separator.VALUES.splitEncoded(eventResult.getKey());\n      if (tokens.size() !\u003d 2 \u0026\u0026 tokens.size() !\u003d 3) {\n        throw new IOException(\n            \"Invalid event column name: \" + eventResult.getKey());\n      }\n      Iterator\u003cString\u003e idItr \u003d tokens.iterator();\n      String id \u003d idItr.next();\n      String tsStr \u003d idItr.next();\n      // TODO: timestamp is not correct via ser/des through UTF-8 string\n      Long ts \u003d\n          TimelineWriterUtils.invert(Bytes.toLong(tsStr.getBytes(\n              StandardCharsets.UTF_8)));\n      String key \u003d Separator.VALUES.joinEncoded(id, ts.toString());\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        event \u003d new TimelineEvent();\n        event.setId(id);\n        event.setTimestamp(ts);\n        eventsMap.put(key, event);\n      }\n      if (tokens.size() \u003d\u003d 3) {\n        String infoKey \u003d idItr.next();\n        event.addInfo(infoKey, eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3049. [Storage Implementation] Implement storage reader interface to fetch raw data from HBase backend (Zhijie Shen via sjlee)\n\n(cherry picked from commit 07433c2ad52df9e844dbd90020c277d3df844dcd)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,35 @@\n+  private static void readEvents(TimelineEntity entity, Result result)\n+      throws IOException {\n+    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n+    Map\u003cString, Object\u003e eventsResult \u003d\n+        EntityColumnPrefix.EVENT.readResults(result);\n+    for (Map.Entry\u003cString,Object\u003e eventResult : eventsResult.entrySet()) {\n+      Collection\u003cString\u003e tokens \u003d\n+          Separator.VALUES.splitEncoded(eventResult.getKey());\n+      if (tokens.size() !\u003d 2 \u0026\u0026 tokens.size() !\u003d 3) {\n+        throw new IOException(\n+            \"Invalid event column name: \" + eventResult.getKey());\n+      }\n+      Iterator\u003cString\u003e idItr \u003d tokens.iterator();\n+      String id \u003d idItr.next();\n+      String tsStr \u003d idItr.next();\n+      // TODO: timestamp is not correct via ser/des through UTF-8 string\n+      Long ts \u003d\n+          TimelineWriterUtils.invert(Bytes.toLong(tsStr.getBytes(\n+              StandardCharsets.UTF_8)));\n+      String key \u003d Separator.VALUES.joinEncoded(id, ts.toString());\n+      TimelineEvent event \u003d eventsMap.get(key);\n+      if (event \u003d\u003d null) {\n+        event \u003d new TimelineEvent();\n+        event.setId(id);\n+        event.setTimestamp(ts);\n+        eventsMap.put(key, event);\n+      }\n+      if (tokens.size() \u003d\u003d 3) {\n+        String infoKey \u003d idItr.next();\n+        event.addInfo(infoKey, eventResult.getValue());\n+      }\n+    }\n+    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n+    entity.addEvents(eventsSet);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void readEvents(TimelineEntity entity, Result result)\n      throws IOException {\n    Map\u003cString, TimelineEvent\u003e eventsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cString, Object\u003e eventsResult \u003d\n        EntityColumnPrefix.EVENT.readResults(result);\n    for (Map.Entry\u003cString,Object\u003e eventResult : eventsResult.entrySet()) {\n      Collection\u003cString\u003e tokens \u003d\n          Separator.VALUES.splitEncoded(eventResult.getKey());\n      if (tokens.size() !\u003d 2 \u0026\u0026 tokens.size() !\u003d 3) {\n        throw new IOException(\n            \"Invalid event column name: \" + eventResult.getKey());\n      }\n      Iterator\u003cString\u003e idItr \u003d tokens.iterator();\n      String id \u003d idItr.next();\n      String tsStr \u003d idItr.next();\n      // TODO: timestamp is not correct via ser/des through UTF-8 string\n      Long ts \u003d\n          TimelineWriterUtils.invert(Bytes.toLong(tsStr.getBytes(\n              StandardCharsets.UTF_8)));\n      String key \u003d Separator.VALUES.joinEncoded(id, ts.toString());\n      TimelineEvent event \u003d eventsMap.get(key);\n      if (event \u003d\u003d null) {\n        event \u003d new TimelineEvent();\n        event.setId(id);\n        event.setTimestamp(ts);\n        eventsMap.put(key, event);\n      }\n      if (tokens.size() \u003d\u003d 3) {\n        String infoKey \u003d idItr.next();\n        event.addInfo(infoKey, eventResult.getValue());\n      }\n    }\n    Set\u003cTimelineEvent\u003e eventsSet \u003d new HashSet\u003c\u003e(eventsMap.values());\n    entity.addEvents(eventsSet);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java"
    }
  }
}