{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EditLogFileInputStream.java",
  "functionName": "init",
  "functionId": "init___verifyLayoutVersion-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
  "functionStartLine": 151,
  "functionEndLine": 196,
  "numCommitsSeen": 60,
  "timeTaken": 4219,
  "changeHistory": [
    "93b8f453b96470f1a6cc9ac098f4934ddd631657",
    "35e0a01d7bc3149bf8b941fd85d7807d9906d27b",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "24f6a7c9563757234f53ca23e12f9c9208b53082",
    "9dab514b22f49322738935cfd915c2b4eba50b88",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "a7ec44d41b0ad1fa133408a10caaae32a27ea569",
    "019d6a22b152feef796a46d538ef593c20741a31",
    "1d54e2b33122161ac577c390282f575b214f2e4e",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e"
  ],
  "changeHistoryShort": {
    "93b8f453b96470f1a6cc9ac098f4934ddd631657": "Ybodychange",
    "35e0a01d7bc3149bf8b941fd85d7807d9906d27b": "Ybodychange",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "24f6a7c9563757234f53ca23e12f9c9208b53082": "Ybodychange",
    "9dab514b22f49322738935cfd915c2b4eba50b88": "Ymultichange(Yparameterchange,Ybodychange)",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "a7ec44d41b0ad1fa133408a10caaae32a27ea569": "Ybodychange",
    "019d6a22b152feef796a46d538ef593c20741a31": "Ybodychange",
    "1d54e2b33122161ac577c390282f575b214f2e4e": "Ybodychange",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "93b8f453b96470f1a6cc9ac098f4934ddd631657": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15166. Remove redundant field fStream in ByteStringLog. Contributed by Xieming Li.\n",
      "commitDate": "24/02/20 6:47 AM",
      "commitName": "93b8f453b96470f1a6cc9ac098f4934ddd631657",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "07/02/20 1:21 AM",
      "commitNameOld": "7dac7e1d13eaf0eac04fe805c7502dcecd597979",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 17.23,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   private void init(boolean verifyLayoutVersion)\n       throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n+    InputStream fStream \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n         logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n       if (logVersion \u003d\u003d -1) {\n         // The edits in progress file is pre-allocated with 1MB of \"-1\" bytes\n         // when it is created, then the header is written. If the header is\n         // -1, it indicates the an exception occurred pre-allocating the file\n         // and the header was never written. Therefore this is effectively a\n         // corrupt and empty log.\n         throw new LogHeaderCorruptException(\"No header present in log (value \" +\n             \"is -1), probably due to disk space issues when it was created. \" +\n             \"The log has no transactions and will be sidelined.\");\n       }\n       // We assume future layout will also support ADD_LAYOUT_FLAGS\n       if (NameNodeLayoutVersion.supports(\n           LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n           logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n         try {\n           LayoutFlags.read(dataIn);\n         } catch (EOFException eofe) {\n           throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n               \"flags from log\");\n         }\n       }\n       reader \u003d FSEditLogOp.Reader.create(dataIn, tracker, logVersion);\n       reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanupWithLogger(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init(boolean verifyLayoutVersion)\n      throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    InputStream fStream \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      if (logVersion \u003d\u003d -1) {\n        // The edits in progress file is pre-allocated with 1MB of \"-1\" bytes\n        // when it is created, then the header is written. If the header is\n        // -1, it indicates the an exception occurred pre-allocating the file\n        // and the header was never written. Therefore this is effectively a\n        // corrupt and empty log.\n        throw new LogHeaderCorruptException(\"No header present in log (value \" +\n            \"is -1), probably due to disk space issues when it was created. \" +\n            \"The log has no transactions and will be sidelined.\");\n      }\n      // We assume future layout will also support ADD_LAYOUT_FLAGS\n      if (NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n          logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n        try {\n          LayoutFlags.read(dataIn);\n        } catch (EOFException eofe) {\n          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n              \"flags from log\");\n        }\n      }\n      reader \u003d FSEditLogOp.Reader.create(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanupWithLogger(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "35e0a01d7bc3149bf8b941fd85d7807d9906d27b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14557. JournalNode error: Can\u0027t scan a pre-transactional edit log. Contributed by Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "06/08/19 7:57 AM",
      "commitName": "35e0a01d7bc3149bf8b941fd85d7807d9906d27b",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "02/05/19 12:58 PM",
      "commitNameOld": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 95.79,
      "commitsBetweenForRepo": 697,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,45 @@\n   private void init(boolean verifyLayoutVersion)\n       throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n         logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n+      if (logVersion \u003d\u003d -1) {\n+        // The edits in progress file is pre-allocated with 1MB of \"-1\" bytes\n+        // when it is created, then the header is written. If the header is\n+        // -1, it indicates the an exception occurred pre-allocating the file\n+        // and the header was never written. Therefore this is effectively a\n+        // corrupt and empty log.\n+        throw new LogHeaderCorruptException(\"No header present in log (value \" +\n+            \"is -1), probably due to disk space issues when it was created. \" +\n+            \"The log has no transactions and will be sidelined.\");\n+      }\n       // We assume future layout will also support ADD_LAYOUT_FLAGS\n       if (NameNodeLayoutVersion.supports(\n           LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n           logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n         try {\n           LayoutFlags.read(dataIn);\n         } catch (EOFException eofe) {\n           throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n               \"flags from log\");\n         }\n       }\n       reader \u003d FSEditLogOp.Reader.create(dataIn, tracker, logVersion);\n       reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanupWithLogger(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init(boolean verifyLayoutVersion)\n      throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      if (logVersion \u003d\u003d -1) {\n        // The edits in progress file is pre-allocated with 1MB of \"-1\" bytes\n        // when it is created, then the header is written. If the header is\n        // -1, it indicates the an exception occurred pre-allocating the file\n        // and the header was never written. Therefore this is effectively a\n        // corrupt and empty log.\n        throw new LogHeaderCorruptException(\"No header present in log (value \" +\n            \"is -1), probably due to disk space issues when it was created. \" +\n            \"The log has no transactions and will be sidelined.\");\n      }\n      // We assume future layout will also support ADD_LAYOUT_FLAGS\n      if (NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n          logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n        try {\n          LayoutFlags.read(dataIn);\n        } catch (EOFException eofe) {\n          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n              \"flags from log\");\n        }\n      }\n      reader \u003d FSEditLogOp.Reader.create(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanupWithLogger(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "09/01/17 6:05 PM",
      "commitNameOld": "7ec609b28989303fe0cc36812f225028b0251b32",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 604.82,
      "commitsBetweenForRepo": 4659,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private void init(boolean verifyLayoutVersion)\n       throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n         logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n       // We assume future layout will also support ADD_LAYOUT_FLAGS\n       if (NameNodeLayoutVersion.supports(\n           LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n           logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n         try {\n           LayoutFlags.read(dataIn);\n         } catch (EOFException eofe) {\n           throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n               \"flags from log\");\n         }\n       }\n       reader \u003d FSEditLogOp.Reader.create(dataIn, tracker, logVersion);\n       reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n-        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n+        IOUtils.cleanupWithLogger(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init(boolean verifyLayoutVersion)\n      throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      // We assume future layout will also support ADD_LAYOUT_FLAGS\n      if (NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n          logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n        try {\n          LayoutFlags.read(dataIn);\n        } catch (EOFException eofe) {\n          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n              \"flags from log\");\n        }\n      }\n      reader \u003d FSEditLogOp.Reader.create(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanupWithLogger(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "24f6a7c9563757234f53ca23e12f9c9208b53082": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8965. Harden edit log reading code against out of memory errors (cmccabe)\n",
      "commitDate": "31/08/15 6:06 PM",
      "commitName": "24f6a7c9563757234f53ca23e12f9c9208b53082",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 121.34,
      "commitsBetweenForRepo": 863,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private void init(boolean verifyLayoutVersion)\n       throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n         logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n       // We assume future layout will also support ADD_LAYOUT_FLAGS\n       if (NameNodeLayoutVersion.supports(\n           LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n           logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n         try {\n           LayoutFlags.read(dataIn);\n         } catch (EOFException eofe) {\n           throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n               \"flags from log\");\n         }\n       }\n-      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n+      reader \u003d FSEditLogOp.Reader.create(dataIn, tracker, logVersion);\n       reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init(boolean verifyLayoutVersion)\n      throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      // We assume future layout will also support ADD_LAYOUT_FLAGS\n      if (NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n          logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n        try {\n          LayoutFlags.read(dataIn);\n        } catch (EOFException eofe) {\n          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n              \"flags from log\");\n        }\n      }\n      reader \u003d FSEditLogOp.Reader.create(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "9dab514b22f49322738935cfd915c2b4eba50b88": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6038. Allow JournalNode to handle editlog produced by new release with future layoutversion. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579813 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/03/14 4:06 PM",
      "commitName": "9dab514b22f49322738935cfd915c2b4eba50b88",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6038. Allow JournalNode to handle editlog produced by new release with future layoutversion. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579813 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/03/14 4:06 PM",
          "commitName": "9dab514b22f49322738935cfd915c2b4eba50b88",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "30/01/14 7:21 PM",
          "commitNameOld": "00067895a01c66d53715b50bbcb3605efd6425f2",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 48.82,
          "commitsBetweenForRepo": 444,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,35 @@\n-  private void init() throws LogHeaderCorruptException, IOException {\n+  private void init(boolean verifyLayoutVersion)\n+      throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n-        logVersion \u003d readLogVersion(dataIn);\n+        logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n+      // We assume future layout will also support ADD_LAYOUT_FLAGS\n       if (NameNodeLayoutVersion.supports(\n-          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion)) {\n+          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n+          logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n         try {\n           LayoutFlags.read(dataIn);\n         } catch (EOFException eofe) {\n           throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n               \"flags from log\");\n         }\n       }\n       reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n       reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void init(boolean verifyLayoutVersion)\n      throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      // We assume future layout will also support ADD_LAYOUT_FLAGS\n      if (NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n          logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n        try {\n          LayoutFlags.read(dataIn);\n        } catch (EOFException eofe) {\n          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n              \"flags from log\");\n        }\n      }\n      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[verifyLayoutVersion-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6038. Allow JournalNode to handle editlog produced by new release with future layoutversion. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579813 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/03/14 4:06 PM",
          "commitName": "9dab514b22f49322738935cfd915c2b4eba50b88",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "30/01/14 7:21 PM",
          "commitNameOld": "00067895a01c66d53715b50bbcb3605efd6425f2",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 48.82,
          "commitsBetweenForRepo": 444,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,35 @@\n-  private void init() throws LogHeaderCorruptException, IOException {\n+  private void init(boolean verifyLayoutVersion)\n+      throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n-        logVersion \u003d readLogVersion(dataIn);\n+        logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n+      // We assume future layout will also support ADD_LAYOUT_FLAGS\n       if (NameNodeLayoutVersion.supports(\n-          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion)) {\n+          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n+          logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n         try {\n           LayoutFlags.read(dataIn);\n         } catch (EOFException eofe) {\n           throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n               \"flags from log\");\n         }\n       }\n       reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n       reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void init(boolean verifyLayoutVersion)\n      throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn, verifyLayoutVersion);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      // We assume future layout will also support ADD_LAYOUT_FLAGS\n      if (NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||\n          logVersion \u003c NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {\n        try {\n          LayoutFlags.read(dataIn);\n        } catch (EOFException eofe) {\n          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n              \"flags from log\");\n        }\n      }\n      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/01/14 5:32 PM",
      "commitNameOld": "a7ec44d41b0ad1fa133408a10caaae32a27ea569",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 14.08,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   private void init() throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n         logVersion \u003d readLogVersion(dataIn);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n-      if (LayoutVersion.supports(Feature.ADD_LAYOUT_FLAGS, logVersion)) {\n+      if (NameNodeLayoutVersion.supports(\n+          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion)) {\n         try {\n           LayoutFlags.read(dataIn);\n         } catch (EOFException eofe) {\n           throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n               \"flags from log\");\n         }\n       }\n       reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n       reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init() throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      if (NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion)) {\n        try {\n          LayoutFlags.read(dataIn);\n        } catch (EOFException eofe) {\n          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n              \"flags from log\");\n        }\n      }\n      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "a7ec44d41b0ad1fa133408a10caaae32a27ea569": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5784. Reserve space in edit log header and fsimage header for feature flag section (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1558974 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/14 5:32 PM",
      "commitName": "a7ec44d41b0ad1fa133408a10caaae32a27ea569",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "04/12/13 1:40 PM",
      "commitNameOld": "d02baff9a0d8cec92bde751777f3e575da2339c8",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 43.16,
      "commitsBetweenForRepo": 216,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,31 @@\n   private void init() throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n         logVersion \u003d readLogVersion(dataIn);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n+      if (LayoutVersion.supports(Feature.ADD_LAYOUT_FLAGS, logVersion)) {\n+        try {\n+          LayoutFlags.read(dataIn);\n+        } catch (EOFException eofe) {\n+          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n+              \"flags from log\");\n+        }\n+      }\n       reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n       reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init() throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      if (LayoutVersion.supports(Feature.ADD_LAYOUT_FLAGS, logVersion)) {\n        try {\n          LayoutFlags.read(dataIn);\n        } catch (EOFException eofe) {\n          throw new LogHeaderCorruptException(\"EOF while reading layout \" +\n              \"flags from log\");\n        }\n      }\n      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "019d6a22b152feef796a46d538ef593c20741a31": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4304. Make FSEditLogOp.MAX_OP_SIZE configurable. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449218 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/13 1:21 PM",
      "commitName": "019d6a22b152feef796a46d538ef593c20741a31",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "06/09/12 2:42 PM",
      "commitNameOld": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 168.99,
      "commitsBetweenForRepo": 807,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   private void init() throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n       fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n         logVersion \u003d readLogVersion(dataIn);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n       reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n+      reader.setMaxOpSize(maxOpSize);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init() throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n      reader.setMaxOpSize(maxOpSize);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "1d54e2b33122161ac577c390282f575b214f2e4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3571. Allow EditLogFileInputStream to read from a remote URL. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/12 2:46 PM",
      "commitName": "1d54e2b33122161ac577c390282f575b214f2e4e",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/12 11:01 AM",
      "commitNameOld": "56d2ef6f5ed25055f19eb61e02c52fb9237a78b7",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 17.16,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private void init() throws LogHeaderCorruptException, IOException {\n     Preconditions.checkState(state \u003d\u003d State.UNINIT);\n     BufferedInputStream bin \u003d null;\n     try {\n-      fStream \u003d new FileInputStream(file);\n+      fStream \u003d log.getInputStream();\n       bin \u003d new BufferedInputStream(fStream);\n       tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n       dataIn \u003d new DataInputStream(tracker);\n       try {\n         logVersion \u003d readLogVersion(dataIn);\n       } catch (EOFException eofe) {\n         throw new LogHeaderCorruptException(\"No header found in log\");\n       }\n       reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n       state \u003d State.OPEN;\n     } finally {\n       if (reader \u003d\u003d null) {\n         IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n         state \u003d State.CLOSED;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init() throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d log.getInputStream();\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/12 1:42 PM",
      "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+  private void init() throws LogHeaderCorruptException, IOException {\n+    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n+    BufferedInputStream bin \u003d null;\n+    try {\n+      fStream \u003d new FileInputStream(file);\n+      bin \u003d new BufferedInputStream(fStream);\n+      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n+      dataIn \u003d new DataInputStream(tracker);\n+      try {\n+        logVersion \u003d readLogVersion(dataIn);\n+      } catch (EOFException eofe) {\n+        throw new LogHeaderCorruptException(\"No header found in log\");\n+      }\n+      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n+      state \u003d State.OPEN;\n+    } finally {\n+      if (reader \u003d\u003d null) {\n+        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n+        state \u003d State.CLOSED;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void init() throws LogHeaderCorruptException, IOException {\n    Preconditions.checkState(state \u003d\u003d State.UNINIT);\n    BufferedInputStream bin \u003d null;\n    try {\n      fStream \u003d new FileInputStream(file);\n      bin \u003d new BufferedInputStream(fStream);\n      tracker \u003d new FSEditLogLoader.PositionTrackingInputStream(bin);\n      dataIn \u003d new DataInputStream(tracker);\n      try {\n        logVersion \u003d readLogVersion(dataIn);\n      } catch (EOFException eofe) {\n        throw new LogHeaderCorruptException(\"No header found in log\");\n      }\n      reader \u003d new FSEditLogOp.Reader(dataIn, tracker, logVersion);\n      state \u003d State.OPEN;\n    } finally {\n      if (reader \u003d\u003d null) {\n        IOUtils.cleanup(LOG, dataIn, tracker, bin, fStream);\n        state \u003d State.CLOSED;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java"
    }
  }
}