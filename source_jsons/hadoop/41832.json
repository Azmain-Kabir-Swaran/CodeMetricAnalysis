{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClusterNodeTracker.java",
  "functionName": "getMaxAllowedAllocation",
  "functionId": "getMaxAllowedAllocation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
  "functionStartLine": 234,
  "functionEndLine": 261,
  "numCommitsSeen": 17,
  "timeTaken": 2421,
  "changeHistory": [
    "8498d287cd3beddcf8fe19625227e09982ec4be2",
    "7805deed4896e470ebd2f6bbd1ba9962947c63cd",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d"
  ],
  "changeHistoryShort": {
    "8498d287cd3beddcf8fe19625227e09982ec4be2": "Ybodychange",
    "7805deed4896e470ebd2f6bbd1ba9962947c63cd": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8498d287cd3beddcf8fe19625227e09982ec4be2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7541. Node updates don\u0027t update the maximum cluster capability for resources other than CPU and memory\n",
      "commitDate": "29/11/17 11:11 AM",
      "commitName": "8498d287cd3beddcf8fe19625227e09982ec4be2",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "09/11/17 2:51 PM",
      "commitNameOld": "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.85,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public Resource getMaxAllowedAllocation() {\n     readLock.lock();\n     try {\n       if (forceConfiguredMaxAllocation \u0026\u0026\n           System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n               \u003e configuredMaxAllocationWaitTime) {\n         forceConfiguredMaxAllocation \u003d false;\n       }\n \n-      if (forceConfiguredMaxAllocation\n-          || maxNodeMemory \u003d\u003d -1 || maxNodeVCores \u003d\u003d -1) {\n+      if (forceConfiguredMaxAllocation || !reportedMaxAllocation) {\n         return configuredMaxAllocation;\n       }\n \n       Resource ret \u003d Resources.clone(configuredMaxAllocation);\n-      if (ret.getMemorySize() \u003e maxNodeMemory) {\n-        ret.setMemorySize(maxNodeMemory);\n-      }\n-      if (ret.getVirtualCores() \u003e maxNodeVCores) {\n-        ret.setVirtualCores(maxNodeVCores);\n+\n+      for (int i \u003d 0; i \u003c maxAllocation.length; i++) {\n+        ResourceInformation info \u003d ret.getResourceInformation(i);\n+\n+        if (info.getValue() \u003e maxAllocation[i]) {\n+          info.setValue(maxAllocation[i]);\n+        }\n       }\n \n       return ret;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaxAllowedAllocation() {\n    readLock.lock();\n    try {\n      if (forceConfiguredMaxAllocation \u0026\u0026\n          System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n              \u003e configuredMaxAllocationWaitTime) {\n        forceConfiguredMaxAllocation \u003d false;\n      }\n\n      if (forceConfiguredMaxAllocation || !reportedMaxAllocation) {\n        return configuredMaxAllocation;\n      }\n\n      Resource ret \u003d Resources.clone(configuredMaxAllocation);\n\n      for (int i \u003d 0; i \u003c maxAllocation.length; i++) {\n        ResourceInformation info \u003d ret.getResourceInformation(i);\n\n        if (info.getValue() \u003e maxAllocation[i]) {\n          info.setValue(maxAllocation[i]);\n        }\n      }\n\n      return ret;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "7805deed4896e470ebd2f6bbd1ba9962947c63cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5588. [YARN-3926] Add support for resource profiles in distributed shell. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "7805deed4896e470ebd2f6bbd1ba9962947c63cd",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,27 @@\n   public Resource getMaxAllowedAllocation() {\n     readLock.lock();\n     try {\n       if (forceConfiguredMaxAllocation \u0026\u0026\n           System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n               \u003e configuredMaxAllocationWaitTime) {\n         forceConfiguredMaxAllocation \u003d false;\n       }\n \n       if (forceConfiguredMaxAllocation\n           || maxNodeMemory \u003d\u003d -1 || maxNodeVCores \u003d\u003d -1) {\n         return configuredMaxAllocation;\n       }\n \n-      return Resources.createResource(\n-          Math.min(configuredMaxAllocation.getMemorySize(), maxNodeMemory),\n-          Math.min(configuredMaxAllocation.getVirtualCores(), maxNodeVCores));\n+      Resource ret \u003d Resources.clone(configuredMaxAllocation);\n+      if (ret.getMemorySize() \u003e maxNodeMemory) {\n+        ret.setMemorySize(maxNodeMemory);\n+      }\n+      if (ret.getVirtualCores() \u003e maxNodeVCores) {\n+        ret.setVirtualCores(maxNodeVCores);\n+      }\n+\n+      return ret;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaxAllowedAllocation() {\n    readLock.lock();\n    try {\n      if (forceConfiguredMaxAllocation \u0026\u0026\n          System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n              \u003e configuredMaxAllocationWaitTime) {\n        forceConfiguredMaxAllocation \u003d false;\n      }\n\n      if (forceConfiguredMaxAllocation\n          || maxNodeMemory \u003d\u003d -1 || maxNodeVCores \u003d\u003d -1) {\n        return configuredMaxAllocation;\n      }\n\n      Resource ret \u003d Resources.clone(configuredMaxAllocation);\n      if (ret.getMemorySize() \u003e maxNodeMemory) {\n        ret.setMemorySize(maxNodeMemory);\n      }\n      if (ret.getVirtualCores() \u003e maxNodeVCores) {\n        ret.setVirtualCores(maxNodeVCores);\n      }\n\n      return ret;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "14/03/16 2:19 PM",
      "commitNameOld": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 75.77,
      "commitsBetweenForRepo": 486,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public Resource getMaxAllowedAllocation() {\n     readLock.lock();\n     try {\n       if (forceConfiguredMaxAllocation \u0026\u0026\n           System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n               \u003e configuredMaxAllocationWaitTime) {\n         forceConfiguredMaxAllocation \u003d false;\n       }\n \n       if (forceConfiguredMaxAllocation\n           || maxNodeMemory \u003d\u003d -1 || maxNodeVCores \u003d\u003d -1) {\n         return configuredMaxAllocation;\n       }\n \n       return Resources.createResource(\n-          Math.min(configuredMaxAllocation.getMemory(), maxNodeMemory),\n+          Math.min(configuredMaxAllocation.getMemorySize(), maxNodeMemory),\n           Math.min(configuredMaxAllocation.getVirtualCores(), maxNodeVCores)\n       );\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaxAllowedAllocation() {\n    readLock.lock();\n    try {\n      if (forceConfiguredMaxAllocation \u0026\u0026\n          System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n              \u003e configuredMaxAllocationWaitTime) {\n        forceConfiguredMaxAllocation \u003d false;\n      }\n\n      if (forceConfiguredMaxAllocation\n          || maxNodeMemory \u003d\u003d -1 || maxNodeVCores \u003d\u003d -1) {\n        return configuredMaxAllocation;\n      }\n\n      return Resources.createResource(\n          Math.min(configuredMaxAllocation.getMemorySize(), maxNodeMemory),\n          Math.min(configuredMaxAllocation.getVirtualCores(), maxNodeVCores)\n      );\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,22 @@\n+  public Resource getMaxAllowedAllocation() {\n+    readLock.lock();\n+    try {\n+      if (forceConfiguredMaxAllocation \u0026\u0026\n+          System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n+              \u003e configuredMaxAllocationWaitTime) {\n+        forceConfiguredMaxAllocation \u003d false;\n+      }\n+\n+      if (forceConfiguredMaxAllocation\n+          || maxNodeMemory \u003d\u003d -1 || maxNodeVCores \u003d\u003d -1) {\n+        return configuredMaxAllocation;\n+      }\n+\n+      return Resources.createResource(\n+          Math.min(configuredMaxAllocation.getMemory(), maxNodeMemory),\n+          Math.min(configuredMaxAllocation.getVirtualCores(), maxNodeVCores)\n+      );\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaxAllowedAllocation() {\n    readLock.lock();\n    try {\n      if (forceConfiguredMaxAllocation \u0026\u0026\n          System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n              \u003e configuredMaxAllocationWaitTime) {\n        forceConfiguredMaxAllocation \u003d false;\n      }\n\n      if (forceConfiguredMaxAllocation\n          || maxNodeMemory \u003d\u003d -1 || maxNodeVCores \u003d\u003d -1) {\n        return configuredMaxAllocation;\n      }\n\n      return Resources.createResource(\n          Math.min(configuredMaxAllocation.getMemory(), maxNodeMemory),\n          Math.min(configuredMaxAllocation.getVirtualCores(), maxNodeVCores)\n      );\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java"
    }
  }
}